user_id,user_login,pull_request_url,comment_id,created_at,path,diff_hunk,content,code_smell
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11254,848527015,2022-04-12T14:46:50Z,quarkus/tests/integration/src/main/java/org/keycloak/it/utils/RawKeycloakDistribution.java,"@@ -256,32 +290,56 @@ private Path prepareDistribution() {         try {             Path distRootPath = Paths.get(System.getProperty(""java.io.tmpdir"")).resolve(""kc-tests"");             distRootPath.toFile().mkdirs();-            File distFile = new File(""../../dist/target/keycloak-"" + Version.VERSION_KEYCLOAK + "".zip"");++            File distFile = new File(""../../dist/"" + File.separator + ""target"" + File.separator + ""keycloak-"" + Version.VERSION_KEYCLOAK + "".zip"");             if (!distFile.exists()) {                 throw new RuntimeException(""Distribution archive "" + distFile.getAbsolutePath() +"" doesn't exists"");             }             distRootPath.toFile().mkdirs();             String distDirName = distFile.getName().replace(""keycloak-server-x-dist"", ""keycloak.x"");-            Path distPath = distRootPath.resolve(distDirName.substring(0, distDirName.lastIndexOf('.')));+            Path dPath = distRootPath.resolve(distDirName.substring(0, distDirName.lastIndexOf('.')));++            if (!inited || (reCreate || !dPath.toFile().exists())) {++                if (!Environment.isWindows()) {+                    FileUtils.deleteDirectory(dPath.toFile());+                } else {+                    deleteTempFilesOnWindows(dPath);+                } -            if (!inited || (reCreate || !distPath.toFile().exists())) {-                FileUtils.deleteDirectory(distPath.toFile());                 ZipUtils.unzip(distFile.toPath(), distRootPath);             } -            // make sure kc.sh is executable-            if (!distPath.resolve(""bin"").resolve(""kc.sh"").toFile().setExecutable(true)) {-                throw new RuntimeException(""Cannot set kc.sh executable"");+            // make sure script is executable+            if (!dPath.resolve(""bin"").resolve(SCRIPT_CMD).toFile().setExecutable(true)) {",changed naming bc distPath is already defined at class,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/10231,848628327,2022-04-12T16:18:37Z,server-spi-private/src/test/java/org/keycloak/broker/provider/util/IdentityBrokerStateTest.java,"@@ -0,0 +1,74 @@+package org.keycloak.broker.provider.util;++import org.junit.Test;+import org.keycloak.authorization.identity.Identity;++import static org.junit.Assert.assertEquals;+import static org.junit.Assert.assertTrue;++public class IdentityBrokerStateTest {+    private static final int RELAY_STATE_MAX_LENGTH = 80;++    @Test+    public void decoded_withinBounds_preservesClientId() {+        // Arrange+        // The length of the concatenated strings is below 80 characters, the RelayState limit as per the SAML specification.+        String state = ""gNrGamIDGKpKSI9yOrcFzYTKoFGH779_WNCacAelkhk"";+        String tabId = ""vpISZLVDAc0"";+        String clientId = ""foo"";++        // Act+        IdentityBrokerState ibs = IdentityBrokerState.decoded(state, clientId, tabId);++        // Assert+        assertEquals(clientId, ibs.getClientId());+        assertTrue(ibs.getEncoded().length() < RELAY_STATE_MAX_LENGTH);+    }++    @Test+    public void decoded_outOfBounds_compressesClientId() {+        // Arrange+        // The length of the concatenated strings is above 80 characters, the RelayState limit as per the SAML specification.+        String state = ""gNrGamIDGKpKSI9yOrcFzYTKoFGH779_WNCacAelkhk"";+        String tabId = ""vpISZLVDAc0"";+        String clientId = ""https://login.blablabla.com/auth/realms/broker"";++        // Act+        IdentityBrokerState ibs = IdentityBrokerState.decoded(state, clientId, tabId);++        // Assert+        assertTrue(ibs.getClientId().length() < clientId.length());+        assertTrue(ibs.getEncoded().length() < RELAY_STATE_MAX_LENGTH);+    }++    @Test+    public void encoded_compressedClientId_decompressesClientId() {+        // Arrange+        String state = ""gNrGamIDGKpKSI9yOrcFzYTKoFGH779_WNCacAelkhk"";+        String tabId = ""vpISZLVDAc0"";+        String clientId = ""https://login.blablabla.com/auth/realms/broker"";+        String encodedState = IdentityBrokerState.decoded(state, clientId, tabId).getEncoded();","As the ""arrange"" part is calling IdentityBrokerState, thereby depending on the tested class. There is also no test to verify the output of encodedState. With that observation, I'd rather have the encodedState as a hardcoded string in here, so that it is visible in the code what is tested as the input, and that input doesn't change unexpectedly wehn decoded() or getEncoded() change.```suggestion        String encodedState = IdentityBrokerState.decoded(state, clientId, tabId).getEncoded();        assertEquals(""gNrGamIDGKpKSI9yOrcFzYTKoFGH779_WNCacAelkhk.vpISZLVDAc0.1997353014"", encodedState);```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/10231,848629676,2022-04-12T16:20:00Z,server-spi-private/src/test/java/org/keycloak/broker/provider/util/IdentityBrokerStateTest.java,"@@ -0,0 +1,74 @@+package org.keycloak.broker.provider.util;++import org.junit.Test;+import org.keycloak.authorization.identity.Identity;","unused import, please remove the unused import.",x
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/11242,849835427,2022-04-13T19:45:53Z,server-spi/src/main/java/org/keycloak/urls/HostnameProvider.java,"@@ -34,7 +34,7 @@ public interface HostnameProvider extends Provider {      * Returns the URL scheme. If not implemented will delegate to {@link #getScheme(UriInfo)}.      *      * @param originalUriInfo the original URI-     * @param uype type of the request+     * @param type type of the request","@ya-makariy type is duplicated here. ""..type type...""",x
70059595,ya-makariy,https://api.github.com/repos/keycloak/keycloak/pulls/11242,849849064,2022-04-13T20:03:45Z,server-spi/src/main/java/org/keycloak/urls/HostnameProvider.java,"@@ -34,7 +34,7 @@ public interface HostnameProvider extends Provider {      * Returns the URL scheme. If not implemented will delegate to {@link #getScheme(UriInfo)}.      *      * @param originalUriInfo the original URI-     * @param uype type of the request+     * @param type type of the request","Also in the following methodsTo remove duplicates, need to create another issue + pr?https://github.com/keycloak/keycloak/blob/a6dd9dc0f1605ce0ac2b424df10e15a6eff6ff70/server-spi/src/main/java/org/keycloak/urls/HostnameProvider.java#L58  https://github.com/keycloak/keycloak/blob/a6dd9dc0f1605ce0ac2b424df10e15a6eff6ff70/server-spi/src/main/java/org/keycloak/urls/HostnameProvider.java#L78  https://github.com/keycloak/keycloak/blob/a6dd9dc0f1605ce0ac2b424df10e15a6eff6ff70/server-spi/src/main/java/org/keycloak/urls/HostnameProvider.java#L100  ",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/11295,850086446,2022-04-14T05:07:34Z,services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java,"@@ -111,6 +111,11 @@ public Response handleDeviceRequest() {         AuthorizationEndpointRequest request = AuthorizationEndpointRequestParserProcessor.parseRequest(event, session, client,             httpRequest.getDecodedFormParameters()); +        if(request.getInvalidRequestMessage() != null) {+            throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,+                request.getInvalidRequestMessage(), Response.Status.BAD_REQUEST);",How about adding `event.error(Errors.INVALID_REQUEST);` the same as:https://github.com/keycloak/keycloak/blob/820ab52dce148eae0d51ba194ba9248bf83a69c6/services/src/main/java/org/keycloak/protocol/oidc/endpoints/AuthorizationEndpointChecker.java#L201-L203,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11242,850166258,2022-04-14T07:35:25Z,server-spi/src/main/java/org/keycloak/urls/HostnameProvider.java,"@@ -34,7 +34,7 @@ public interface HostnameProvider extends Provider {      * Returns the URL scheme. If not implemented will delegate to {@link #getScheme(UriInfo)}.      *      * @param originalUriInfo the original URI-     * @param uype type of the request+     * @param type type of the request","@abstractj - just to double-check on your previous comment: the first ""type"" is the name of the parameter, the description of the type is ""type of the request"". When removing ""type"" from the description of the parameter, the description would read ""of the request"". Is this what you intended?",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11243,850244163,2022-04-14T09:08:12Z,operator/src/main/java/org/keycloak/operator/v2alpha1/KeycloakRealmImportJob.java,"@@ -55,7 +56,9 @@ public KeycloakRealmImportJob(KubernetesClient client, KeycloakRealmImport realm      @Override     protected Optional<HasMetadata> getReconciledResource() {-        if (existingJob == null) {+        if (existingDeployment == null) {+            throw new ResourceNotFoundException(""Keycloak Deployment not found: "" + getKeycloakName());","This is an unrelated enhancement. I ran into unspecified NPE when fixing the RealmImport test, this is to make the dev experience better in the future.Re-using a Fabric8 exception as it represents a missing K8s resource.",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11285,850334002,2022-04-14T11:03:43Z,docs/guides/src/main/server/configuration.adoc,"@@ -162,6 +162,24 @@ To add the initial admin user using environment variables, set `KEYCLOAK_ADMIN` Keycloak uses them at the first startup to create an initial user with administration rights. Once the first user with administrative rights exists, you can use the UI or the command line tool `kcadm.[sh|bat]` to create additional users. +== Using placeholders++You are able to use placeholders to resolve the configuration option value from environment variables.++.Using a placeholder to resolve the host from an environment variable+[source, bash]+----+db-url-host=""${r""${MY_DB_HOST}""}""","these quotes are duplicated during merge, no? shouldn't it be `$r{""${MY_DB_HOST}""}`? Looking at the html output it now looks like this:![Screenshot 2022-04-14 at 12 59 27](https://user-images.githubusercontent.com/89905860/163378584-055c2378-cdd7-411b-89a2-6f50dbfc0f93.png)which is wrongly double-quoted (or do I miss sth?)",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11328,850755400,2022-04-14T19:47:24Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProvider.java,"@@ -46,18 +52,15 @@ public void close() {     @Override     @SuppressWarnings(""unchecked"")     public <V extends AbstractEntity, M> MapStorage<V, M> getStorage(Class<M> modelType, Flag... flags) {-        factory.validateAndUpdateSchema(session, modelType);-        return new MapStorage<V, M>() {-            @Override-            public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-                MapKeycloakTransaction<V, M> sessionTx = session.getAttribute(SESSION_TX_PREFIX + modelType.hashCode(), MapKeycloakTransaction.class);-                if (sessionTx == null) {-                    sessionTx = factory.createTransaction(modelType, em);-                    session.setAttribute(SESSION_TX_PREFIX + modelType.hashCode(), sessionTx);-                } -                return sessionTx;-            }-        };+        // validate and update the schema for the storage.+        this.factory.validateAndUpdateSchema(this.session, modelType);+        // create the JPA transaction and enlist it if needed.+        if (session.getAttribute(this.sessionTxKey) == null) {+            KeycloakTransaction jpaTransaction = new JpaTransactionWrapper(em.getTransaction());+            session.getTransactionManager().enlist(jpaTransaction);+            session.setAttribute(this.sessionTxKey, jpaTransaction);+        }+        return session -> factory.createTransaction(modelType, em);","Please use the full inline class form, `MapStorage` is intentionally not marked as `@FunctionalInterface` as there might be methods added in the future",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/11328,850765324,2022-04-14T20:02:48Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProvider.java,"@@ -46,18 +52,15 @@ public void close() {     @Override     @SuppressWarnings(""unchecked"")     public <V extends AbstractEntity, M> MapStorage<V, M> getStorage(Class<M> modelType, Flag... flags) {-        factory.validateAndUpdateSchema(session, modelType);-        return new MapStorage<V, M>() {-            @Override-            public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-                MapKeycloakTransaction<V, M> sessionTx = session.getAttribute(SESSION_TX_PREFIX + modelType.hashCode(), MapKeycloakTransaction.class);-                if (sessionTx == null) {-                    sessionTx = factory.createTransaction(modelType, em);-                    session.setAttribute(SESSION_TX_PREFIX + modelType.hashCode(), sessionTx);-                } -                return sessionTx;-            }-        };+        // validate and update the schema for the storage.+        this.factory.validateAndUpdateSchema(this.session, modelType);+        // create the JPA transaction and enlist it if needed.+        if (session.getAttribute(this.sessionTxKey) == null) {+            KeycloakTransaction jpaTransaction = new JpaTransactionWrapper(em.getTransaction());+            session.getTransactionManager().enlist(jpaTransaction);+            session.setAttribute(this.sessionTxKey, jpaTransaction);+        }+        return session -> factory.createTransaction(modelType, em);",Just followed what we have in LDAP:https://github.com/keycloak/keycloak/blob/a2d7cd7a5ca84f9eb1e08336c1381517c6d19b9d/model/map-ldap/src/main/java/org/keycloak/models/map/storage/ldap/LdapMapStorageProvider.java#L42-L49,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11322,852105733,2022-04-18T13:09:55Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/QuarkusPlatform.java,"@@ -159,4 +166,48 @@ public File getTmpDirectory() {     private void reset() {         deferredExceptions.clear();     }++    @Override+    public ClassLoader getScriptEngineClassLoader(Config.Scope scriptProviderConfig) {",In Quarkus we have a flat classpath so I'm unsure if we need to create a classloader?,x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11309,852725283,2022-04-19T08:08:16Z,docs/guides/src/main/operator/installation.adoc,"@@ -5,14 +5,48 @@  <@tmpl.guide title=""Keycloak Operator Installation""-summary=""How to install the Keycloak Operator on Kubernetes"">--TODO: https://github.com/keycloak/keycloak/issues/10786+summary=""How to install the Keycloak Operator on Kubernetes and OpenShift"">  == Keycloak Operator Installation+In this guide we will show how to install the Keycloak Operator in your Kubernetes or OpenShift cluster.++=== OLM Installation++You can install the Keycloak Operator in Kubernetes environment is to use Operator Lifecycle Manager (OLM).+Before moving on, make sure you have OLM installed, if not follow this https://github.com/operator-framework/operator-lifecycle-manager/blob/master/doc/install/install.md#install-a-release[guide].","```suggestion==== PrerequisitesMake sure OLM is installed in your environment. For Guidance on how to install OLM, follow this https://github.com/operator-framework/operator-lifecycle-manager/blob/master/doc/install/install.md#install-a-release[guide].```",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11309,852729182,2022-04-19T08:12:34Z,docs/guides/src/main/operator/installation.adoc,"@@ -5,14 +5,48 @@  <@tmpl.guide title=""Keycloak Operator Installation""-summary=""How to install the Keycloak Operator on Kubernetes"">--TODO: https://github.com/keycloak/keycloak/issues/10786+summary=""How to install the Keycloak Operator on Kubernetes and OpenShift"">  == Keycloak Operator Installation+In this guide we will show how to install the Keycloak Operator in your Kubernetes or OpenShift cluster.++=== OLM Installation++You can install the Keycloak Operator in Kubernetes environment is to use Operator Lifecycle Manager (OLM).+Before moving on, make sure you have OLM installed, if not follow this https://github.com/operator-framework/operator-lifecycle-manager/blob/master/doc/install/install.md#install-a-release[guide].++To install the Keycloak Operator follow the https://olm.operatorframework.io/docs/tasks/install-operator-with-olm/[instructions].+In the default Catalogs the Keycloak Operator is named `keycloak-operator` and make sure to use the `candidate` channel.","Why do we need to use the ""candidate"" channel? If this is a temporary thing, perhaps ""to find the keycloak operator candidate release.""?",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11309,852732174,2022-04-19T08:15:53Z,docs/guides/src/main/operator/installation.adoc,"@@ -5,14 +5,48 @@  <@tmpl.guide title=""Keycloak Operator Installation""-summary=""How to install the Keycloak Operator on Kubernetes"">--TODO: https://github.com/keycloak/keycloak/issues/10786+summary=""How to install the Keycloak Operator on Kubernetes and OpenShift"">  == Keycloak Operator Installation+In this guide we will show how to install the Keycloak Operator in your Kubernetes or OpenShift cluster.++=== OLM Installation++You can install the Keycloak Operator in Kubernetes environment is to use Operator Lifecycle Manager (OLM).+Before moving on, make sure you have OLM installed, if not follow this https://github.com/operator-framework/operator-lifecycle-manager/blob/master/doc/install/install.md#install-a-release[guide].++To install the Keycloak Operator follow the https://olm.operatorframework.io/docs/tasks/install-operator-with-olm/[instructions].+In the default Catalogs the Keycloak Operator is named `keycloak-operator` and make sure to use the `candidate` channel.++==== OpenShift UI++On OpenShift you can use a conveninet UI on top of OLM.+Navigate `Home` → `Operators` → `OperatorHub` in the menu on the left side of the OpenShift Console.+Then, focus on the search input box and type ""keycloak"":++image::{generatedGuideImages}/select-operator.jpeg[""Select the Keycloak Operator in the UI""] -=== OpenShift Installation+Next, navigate to Keycloak Operator and click on it. Next, follow the instructions on the screen, make sure you are installing from the `candidate` channel:","```suggestionSelect the Keycloak Operator from the list of results. After that, follow the instructions on the screen. Make sure you are installing from the `candidate` channel:```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11309,852779682,2022-04-19T08:54:52Z,docs/guides/src/main/operator/installation.adoc,"@@ -5,14 +5,48 @@  <@tmpl.guide title=""Keycloak Operator Installation""-summary=""How to install the Keycloak Operator on Kubernetes"">--TODO: https://github.com/keycloak/keycloak/issues/10786+summary=""How to install the Keycloak Operator on Kubernetes and OpenShift"">  == Keycloak Operator Installation+In this guide we will show how to install the Keycloak Operator in your Kubernetes or OpenShift cluster.++=== OLM Installation++You can install the Keycloak Operator in Kubernetes environment is to use Operator Lifecycle Manager (OLM).+Before moving on, make sure you have OLM installed, if not follow this https://github.com/operator-framework/operator-lifecycle-manager/blob/master/doc/install/install.md#install-a-release[guide].++To install the Keycloak Operator follow the https://olm.operatorframework.io/docs/tasks/install-operator-with-olm/[instructions].+In the default Catalogs the Keycloak Operator is named `keycloak-operator` and make sure to use the `candidate` channel.",The `candidate` channel is currently required to comply with the [recommended naming](https://olm.operatorframework.io/docs/best-practices/channel-naming/#recommended-channel-naming). We will probably move to `stable` in KC 20.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11117,852883772,2022-04-19T10:33:11Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ScriptBasedAuthenticatorFactory.java,"@@ -153,6 +142,6 @@ public List<ProviderConfigProperty> getConfigProperties() {      @Override     public boolean isSupported() {-        return Profile.isFeatureEnabled(Profile.Feature.SCRIPTS) && Profile.isFeatureEnabled(Profile.Feature.UPLOAD_SCRIPTS);+        return Profile.isFeatureEnabled(Profile.Feature.SCRIPTS);","The provider is no longer registered as a service, that is why I did not change here.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11117,852883853,2022-04-19T10:33:16Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/ScriptBasedOIDCProtocolMapper.java,"@@ -120,7 +120,7 @@ public String getHelpText() {    @Override   public boolean isSupported() {-    return Profile.isFeatureEnabled(Profile.Feature.SCRIPTS) && Profile.isFeatureEnabled(Profile.Feature.UPLOAD_SCRIPTS);+    return Profile.isFeatureEnabled(Profile.Feature.SCRIPTS);","The provider is no longer registered as a service, that is why I did not change here.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11117,853041340,2022-04-19T13:03:10Z,authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/js/DeployedScriptPolicyFactory.java,"@@ -66,7 +66,9 @@ public JSPolicyRepresentation toRepresentation(Policy policy, AuthorizationProvi          representation.setId(policy.getId());         representation.setName(policy.getName());-        representation.setDescription(metadata.getDescription());+        if (policy.getDescription() == null) {+            representation.setDescription(metadata.getDescription());+        }",The description is set elsewhere. See https://github.com/keycloak/keycloak/blob/99c06d11023689875b48ef56442c90bdb744c869/server-spi-private/src/main/java/org/keycloak/models/utils/ModelToRepresentation.java#L950.,x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11547,854457491,2022-04-20T18:55:32Z,quarkus/container/Dockerfile,"@@ -19,6 +19,9 @@ RUN chmod -R g+rwX /opt/keycloak  FROM registry.access.redhat.com/ubi8-minimal +RUN microdnf install glibc-langpack-en; sed -i 's/^LANG=.*/LANG=""en_US.utf8""/' /etc/locale.conf",Please add the dependency at this line:https://github.com/keycloak/keycloak/blob/29d01b237b22771fff34d326ddefe133addc30c7/quarkus/container/Dockerfile#L28so that the cache for `microdnf` is cleaned afterward and everything is done in one layer.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/11554,855023859,2022-04-21T10:19:01Z,services/src/main/java/org/keycloak/services/resources/account/AccountConsole.java,"@@ -159,13 +159,18 @@ private Map<String, String> supportedLocales(Properties messages) {          private String messagesToJsonString(Properties props) {         if (props == null) return """";-        -        JsonObjectBuilder json = Json.createObjectBuilder();+        ObjectMapper mapper = new ObjectMapper();        ",Should be possible to replace with:JsonSerialization.writeValueAsString(props)```suggestion        ObjectMapper mapper = new ObjectMapper();        ```Using [JsonSerialization](https://github.com/keycloak/keycloak/blob/8ea8aaebcf3ec7166607f79141f40ba7a2eecfaa/core/src/main/java/org/keycloak/util/JsonSerialization.java#L38) uses a shared ObjectMapper + makes it possible to configure globally for the server if pretty-printing is used or not.,x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/11339,855302185,2022-04-21T15:16:00Z,model/map/src/main/java/org/keycloak/models/map/realm/MapRealmAdapter.java,"@@ -848,7 +862,7 @@ public void updateAuthenticatorConfig(AuthenticatorConfigModel model) {         entity.getAuthenticatorConfig(model.getId())                         .ifPresent(oldAC -> {                             oldAC.setAlias(model.getAlias());-                            oldAC.setConfig(model.getConfig());+                            oldAC.setConfig(model.getConfig() == null ? null : new HashMap<>(model.getConfig()));","This shouldn't be necessary. Each implementation of `setConfig` should make a deep copy of the parameter. Current implementation looks like this:```java@SuppressWarnings(""unchecked"") @Override public void setConfig(java.util.Map<String,String> p0) {        p0 = p0 == null ? null : new java.util.HashMap<>(p0);        if (p0 != null) {            p0.values().removeIf(org.keycloak.models.map.common.UndefinedValuesUtils::isUndefined);            if (org.keycloak.models.map.common.UndefinedValuesUtils.isUndefined(p0)) p0 = null;        }        updated |= ! Objects.equals(fConfig, p0);        fConfig = p0;    }```",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/11339,855333597,2022-04-21T15:46:14Z,model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java,"@@ -1797,6 +1797,9 @@ public Stream<AuthenticatorConfigModel> getAuthenticatorConfigsStream() {      @Override     public RequiredActionProviderModel addRequiredActionProvider(RequiredActionProviderModel model) {+        if (getRequiredActionProviderByAlias(model.getAlias()) != null) {","Yes. Without it we allow to store multiple required action providers with the same alias. Then when we call `realmModel.getRequiredActionProviderByAlias(String)` we obtain *first* occurrence (see `jpa.RealmAdapter` implementation) of the object that match the alias. It results in non-deterministic behavior when sometimes you got one object, another time different one. With JPA this bug is kind of hidden as you usually get the same order of objects stored in the database so you get the same object most of the time. But with map it became visible when some tests failed intermittently when cache is disabled. It doesn't make sense to have registered the required action more than once anyway.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/11547,855911170,2022-04-22T08:20:00Z,quarkus/container/Dockerfile,"@@ -18,11 +18,13 @@ RUN mv /tmp/keycloak/keycloak-* /opt/keycloak && mkdir -p /opt/keycloak/data RUN chmod -R g+rwX /opt/keycloak  FROM registry.access.redhat.com/ubi8-minimal+ENV LANG en_US.UTF-8  COPY --from=build-env --chown=1000:0 /opt/keycloak /opt/keycloak  RUN microdnf update -y && \-    microdnf install -y java-11-openjdk-headless && microdnf clean all && rm -rf /var/cache/yum/* && \+    microdnf install -y --nodocs java-11-openjdk-headless glibc-langpack-en && microdnf clean all && rm -rf /var/cache/yum/* && \+    sed -i 's/^LANG=.*/LANG=""en_US.utf8""/' /etc/locale.conf && \",Is the `sed` step needed? Looking at the old container it doesn't do this:https://github.com/keycloak/keycloak-containers/blob/main/server/Dockerfile#L12,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11339,856123420,2022-04-22T11:06:01Z,model/map/src/main/java/org/keycloak/models/map/realm/MapRealmAdapter.java,"@@ -521,6 +524,14 @@ public void addRequiredCredential(String cred) {         if (model == null) {             throw new RuntimeException(""Unknown credential type "" + cred);         }+        if (entity.getRequiredCredentials() != null) {+            Optional<MapRequiredCredentialEntity> existing = entity.getRequiredCredentials().stream()+                    .filter(credential -> Objects.equals(model.getType(), credential.getType()))+                    .findFirst();+            if (existing.isPresent()) {+                throw new ModelDuplicateException(""A Required Credential with given type already exists."");+            }+        }","I like it as well, only in a separate PR to think it through.For example of the questions - this pattern may be common to other places, should we unify? Should this method even be available in an `Entity`?This PR should introduce only minimal changes, and that the suggestion above satisfies.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11328,856131603,2022-04-22T11:18:52Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProvider.java,"@@ -46,18 +48,19 @@ public void close() {     @Override     @SuppressWarnings(""unchecked"")     public <V extends AbstractEntity, M> MapStorage<V, M> getStorage(Class<M> modelType, Flag... flags) {-        factory.validateAndUpdateSchema(session, modelType);+        // validate and update the schema for the storage.+        this.factory.validateAndUpdateSchema(this.session, modelType);+        // create the JPA transaction and enlist it if needed.+        if (session.getAttribute(this.sessionTxKey) == null) {+            KeycloakTransaction jpaTransaction = new JpaTransactionWrapper(em.getTransaction());+            session.getTransactionManager().enlist(jpaTransaction);+            session.setAttribute(this.sessionTxKey, jpaTransaction);","Should this be under `synchronized` guard, like e.g. here? https://github.com/keycloak/keycloak/blob/b356618cc2e00ef3ae37f515c1d4b3bdbcde3f62/model/jpa/src/main/java/org/keycloak/connections/jpa/DefaultJpaConnectionProviderFactory.java#L160-L162",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/11322,856141744,2022-04-22T11:32:49Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/QuarkusPlatform.java,"@@ -159,4 +166,48 @@ public File getTmpDirectory() {     private void reset() {         deferredExceptions.clear();     }++    @Override+    public ClassLoader getScriptEngineClassLoader(Config.Scope scriptProviderConfig) {","@pedroigor You're right, Thanks for this point! After some digging, I figured that it is completely sufficient to just include the nashorn jar and it's dependencies directly inside ""providers"" directory. They are simply picked from there by the default flat classloader. So I changed the Quarkus part to just return null, which is simply using the same default (flat) classloader.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/11322,856143881,2022-04-22T11:36:12Z,common/src/main/java/org/keycloak/common/util/Environment.java,"@@ -26,6 +26,21 @@ public class Environment {      public static final int DEFAULT_JBOSS_AS_STARTUP_TIMEOUT = 300; +    /*+     * @return major version of java runtime like 8, 11 or 17+     */+    public static int getJavaVersion() {","I've changed the quarkus part per the suggestion of @pedroigor so it doesn't use this anymore. Hence I removed the stuff from the `Environment` class of keycloak-common module and moved it to the Wildfly module.However Wildfly module still needs to use that instead of `Runtime.version().major()` as it still needs to use Java 8. This stuff is target for the RHSSO 7.6.X and hence Wildfly and Java8 support still needs to be kept. But since this is in the Wildfly module, it will be auto-removed once we are able to remove Wildfly distribution entirely.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11590,856169954,2022-04-22T12:13:24Z,model/map-ldap/src/main/java/org/keycloak/models/map/storage/ldap/LdapMapStorageProvider.java,"@@ -39,13 +40,18 @@ public void close() {     @Override     @SuppressWarnings(""unchecked"")     public <V extends AbstractEntity, M> MapStorage<V, M> getStorage(Class<M> modelType, Flag... flags) {-        return session -> {-            MapKeycloakTransaction<V, M> sessionTx = session.getAttribute(sessionTxPrefix + modelType.hashCode(), MapKeycloakTransaction.class);-            if (sessionTx == null) {-                sessionTx = factory.createTransaction(session, modelType);-                session.setAttribute(sessionTxPrefix + modelType.hashCode(), sessionTx);+        // MapStorage is not a functional interface, therefore don't try to convert it to a lambda as additional methods might be added in the future+        //noinspection Convert2Lambda+        return new MapStorage<V, M>() {+            @Override+            public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {+                MapKeycloakTransaction<V, M> sessionTx = session.getAttribute(sessionTxPrefix + modelType.hashCode(), MapKeycloakTransaction.class);+                if (sessionTx == null) {+                    sessionTx = factory.createTransaction(session, modelType);+                    session.setAttribute(sessionTxPrefix + modelType.hashCode(), sessionTx);+                }","Should this be under `synchronized` guard, like e.g. here? https://github.com/keycloak/keycloak/blob/b356618cc2e00ef3ae37f515c1d4b3bdbcde3f62/model/jpa/src/main/java/org/keycloak/connections/jpa/DefaultJpaConnectionProviderFactory.java#L160-L162",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11590,856175788,2022-04-22T12:21:34Z,model/map-ldap/src/main/java/org/keycloak/models/map/storage/ldap/LdapMapStorageProvider.java,"@@ -39,13 +40,18 @@ public void close() {     @Override     @SuppressWarnings(""unchecked"")     public <V extends AbstractEntity, M> MapStorage<V, M> getStorage(Class<M> modelType, Flag... flags) {-        return session -> {-            MapKeycloakTransaction<V, M> sessionTx = session.getAttribute(sessionTxPrefix + modelType.hashCode(), MapKeycloakTransaction.class);-            if (sessionTx == null) {-                sessionTx = factory.createTransaction(session, modelType);-                session.setAttribute(sessionTxPrefix + modelType.hashCode(), sessionTx);+        // MapStorage is not a functional interface, therefore don't try to convert it to a lambda as additional methods might be added in the future+        //noinspection Convert2Lambda+        return new MapStorage<V, M>() {+            @Override+            public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {+                MapKeycloakTransaction<V, M> sessionTx = session.getAttribute(sessionTxPrefix + modelType.hashCode(), MapKeycloakTransaction.class);+                if (sessionTx == null) {+                    sessionTx = factory.createTransaction(session, modelType);+                    session.setAttribute(sessionTxPrefix + modelType.hashCode(), sessionTx);+                }","There is no need to a guard: The returned MapStorage is stateless and lightweight. The only method being called is called with a KeycloakSession as parameter, and all calls within a KeycloakSession are non-concurrent. @hmlnarik ",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/9472,856182937,2022-04-22T12:31:22Z,server-spi-private/src/main/java/org/keycloak/models/utils/RepresentationToModel.java,"@@ -2899,9 +2899,7 @@ public static ResourceServer createResourceServer(ClientModel client, KeycloakSe         AuthorizationProvider authorization = session.getProvider(AuthorizationProvider.class);         UserModel serviceAccount = session.users().getServiceAccount(client); -        if (serviceAccount == null) {-            client.setServiceAccountsEnabled(true);-        }+        client.setServiceAccountsEnabled(serviceAccount != null);","I believe this is intentional, as a client is required to have a service account to become a resource server. Although, it is a little bit odd, as I would have expected it to rather throw an exception of trying to add a ResourceServer to a client that doesn't have service accounts enabled.@pedroigor can you confirm?",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/11597,856200407,2022-04-22T12:54:08Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/liquibase/updater/MapJpaLiquibaseUpdaterProvider.java,"@@ -32,13 +32,29 @@ import liquibase.changelog.RanChangeSet; import liquibase.exception.LiquibaseException; import org.jboss.logging.Logger;-import org.keycloak.connections.jpa.updater.liquibase.ThreadLocalSessionContext; import org.keycloak.models.KeycloakSession; import org.keycloak.models.map.storage.ModelEntityUtil; import org.keycloak.models.map.storage.jpa.updater.MapJpaUpdaterProvider;  public class MapJpaLiquibaseUpdaterProvider implements MapJpaUpdaterProvider { +    public static class ThreadLocalSessionContext {++        private static final ThreadLocal<KeycloakSession> currentSession = new ThreadLocal<KeycloakSession>();+    +        public static KeycloakSession getCurrentSession() {+            return currentSession.get();+        }+    +        public static void setCurrentSession(KeycloakSession session) {+            currentSession.set(session);+        }+    +        public static void removeCurrentSession() {+            currentSession.remove();+        }+    }+    ","I remember testing the removal of this `ThreadLocalSessionContext` from the updater provider a while back. As far as I can tell this was used in the legacy module to provide a way for custom extensions to access the session, but so far in the new store we haven't needed any of that. It doesn't really hurt having this but I think this code is currently useless.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/10650,857549516,2022-04-25T12:00:20Z,saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeValueParser.java,"@@ -141,4 +144,38 @@ public static String parseAnyTypeAsString(XMLEventReader xmlEventReader) throws         }     } +    private static String parseCustomTypeAsString(XMLEventReader xmlEventReader, String[] typeValueSplitted, String namespace)+            throws ParsingException {++        try {+            XMLEvent event = xmlEventReader.nextEvent();+            StringWriter sw = new StringWriter();+            XMLEventWriter writer = XMLOutputFactory.newInstance().createXMLEventWriter(sw);+            QName tagName;+            if (event.isStartElement() && typeValueSplitted[0].equals(event.asStartElement().getName().getPrefix())) {+                tagName = event.asStartElement().getName();+            } else {+                tagName = new QName(namespace == null ? ""unknown:"" + typeValueSplitted[0] : namespace, typeValueSplitted[1], typeValueSplitted[0]);+            }+            final XMLEventFactory xmlEventFactory = XMLEventFactory.newInstance();+            writer.add(xmlEventFactory.createStartElement(tagName.getPrefix(), tagName.getNamespaceURI(), typeValueSplitted[1]));+            writer.add(xmlEventFactory.createNamespace(tagName.getPrefix(), tagName.getNamespaceURI()));+            int tagLevel = event.isStartElement() ? 1 : 0;+            do {+                writer.add(event);+                event = (XMLEvent) xmlEventReader.next();+                if (event.isStartElement()) {+                    tagLevel++;+                }+                if (event.isEndElement()) {+                    tagLevel--;+                }+            } while (xmlEventReader.hasNext() && tagLevel >= 0);","This code is identical to `parseAnyTypeAsString`. Please avoid duplicating code. If they should stay distinct, please provide an argument to keep them distinct.It can be extracted to a method (including the tagLevel), as the parseAnyTypeAsString will be 1 as it is called for isStartElement only like `method_with_a_new_name(xmlEventReader, event, writer)` - please provide a method name and possible also an ordering of the parameters as you see fit.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/10650,857581878,2022-04-25T12:40:19Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,305 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.StringUtil;+import org.xml.sax.InputSource;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath to search for in attribute."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply xpath. You can leave this blank to try to apply xpath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply xpath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store xpath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                final Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+)\"""").matcher(xml);+                Map<String, String> namespaces = new HashMap<>();+                Map<String, String> prefixes = new HashMap<>();+                while (namespaceMatcher.find()) {+                    namespaces.put(namespaceMatcher.group(1), namespaceMatcher.group(2));+                    prefixes.put(namespaceMatcher.group(2), namespaceMatcher.group(1));+                }++                final XPath xPath = XPathFactory.newInstance().newXPath();+                xPath.setNamespaceContext(new NamespaceContext() {+                    @Override+                    public String getNamespaceURI(String prefix) {+                        if (namespaces.containsKey(prefix)) {+                            return namespaces.get(prefix);+                        }++                        return XMLConstants.NULL_NS_URI;+                    }++                    @Override+                    public String getPrefix(String namespaceURI) {+                        if (prefixes.containsKey(namespaceURI)) {+                            return prefixes.get(namespaceURI);+                        }++                        return null;+                    }++                    @Override+                    public Iterator<String> getPrefixes(String namespaceURI) {+                        List<String> list = new ArrayList<>();+                        if (prefixes.containsKey(namespaceURI)) {+                            list.add(prefixes.get(namespaceURI));+                        }++                        return list.iterator();+                    }+                });+                return xPath.compile(attributeXPath).evaluate(new InputSource(new StringReader(xml)), XPathConstants.STRING);","This would be subject to an XML external entity security problem, see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xpathexpression for details and how to fix this. Keycloak provides already a secured DocumentBuilder via `DocumentUtil.getDocumentBuilder()`. Something along the following line might work here.```suggestion                return xPath.compile(attributeXPath).evaluate(DocumentUtil.getDocumentBuilder().parse(new InputSource(new StringReader(xml))), XPathConstants.STRING);```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/10650,857611084,2022-04-25T13:12:27Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,305 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.StringUtil;+import org.xml.sax.InputSource;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath to search for in attribute."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply xpath. You can leave this blank to try to apply xpath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply xpath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store xpath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {","Although this method gets passed session and realm, it doesn't use them, and the other objects are quite plain. This makes it a good candidate for a unit test.Therefore, I'd like to see a unit test at least for this method and a happy path. This would allow me to explore the code a lot more simpler.A starting point could be the following snippet of code. Please update accordingly, and add 1-2 cases to provide the code coverage you would like to see.```public class XPathAttributeMapperTest extends TestCase {    @Test    public void test() {        IdentityProviderMapperModel mapperModel = new IdentityProviderMapperModel();        Map<String, String> config = new HashMap<>();        mapperModel.setConfig(config);        config.put(XPathAttributeMapper.USER_ATTRIBUTE, ""email"");        config.put(XPathAttributeMapper.ATTRIBUTE_NAME, ""email"");        config.put(XPathAttributeMapper.ATTRIBUTE_XPATH, ""email"");        BrokeredIdentityContext context = new BrokeredIdentityContext(""xzy"");        AssertionType assertion = AssertionUtil.createAssertion(""xzy"", NameIDType.deserializeFromString(""xzy""));        AttributeStatementType statement = new AttributeStatementType();        assertion.getAttributeStatements().add(statement);        context.getContextData().put(SAMLEndpoint.SAML_ASSERTION, assertion);        new XPathAttributeMapper().preprocessFederatedIdentity(null, null, mapperModel, context);        assertNotNull(context.getEmail());    }}``` ",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11679,859650460,2022-04-27T10:46:58Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPoliciesImportExportTest.java,"@@ -57,6 +58,13 @@ public void beforeAbstractKeycloakTestRealmImport() {         removeAllRealmsDespiteMaster();     } +    @After+    @Override+    public void after() throws Exception {+        testingClient.testing().exportImport().clear();+        super.after();",This call could lead to double calling of `super.after()` since both this and `super.after()` is annotated with `@After`.To be less error-prone I'd suggest renaming this method to some other non-colliding name and left without calling `super.after()`.,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11679,859917636,2022-04-27T15:06:53Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPoliciesImportExportTest.java,"@@ -57,6 +58,13 @@ public void beforeAbstractKeycloakTestRealmImport() {         removeAllRealmsDespiteMaster();     } +    @After+    @Override+    public void after() throws Exception {+        testingClient.testing().exportImport().clear();+        super.after();","Out of curiosity I did a local debugging test: With my original change, the method was called only once. Even after removing my `@After` annotation and relying on the annotation in the parent class worked and it was called once. So it seems that JUnit caught up with what one would call a sensible behavior. Still, I changed the code as you suggested and pushed it. The tests are again green. Ready for a review.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/11723,860530353,2022-04-28T06:31:43Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/sessionlimits/KcOidcUserSessionLimitsBrokerTest.java,"@@ -0,0 +1,11 @@+package org.keycloak.testsuite.sessionlimits;++import org.keycloak.testsuite.broker.BrokerConfiguration;+import org.keycloak.testsuite.broker.KcOidcBrokerConfiguration;+","Since your test uses `testingClient.server().run`, I think it is needed to also include annotation `@AuthServerContainerExclude(REMOTE)` at the beginning of the test class. The same applies also for `KcSamlUserSessionLimitsBrokerTest` . See some other classes (EG. `UserSessionLimitsTest`) for the inspiration. Without this annotation, the test will likely fail in the pipeline when executed with `auth-server-remote` .NOTE: It is possible to add this annotation only to `AbstractUserSessionLimitsBrokerTest` and it might exclude it from both subclasses. But I am not 100% sure if having this on abstract class is ok to skip the tests on subclasses. IMO safer to add this to subclasses. But you can try to investigate if you want and if you don't like separate annotation for every subclass.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11679,860655198,2022-04-28T09:01:59Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPoliciesImportExportTest.java,"@@ -57,6 +58,13 @@ public void beforeAbstractKeycloakTestRealmImport() {         removeAllRealmsDespiteMaster();     } +    @After+    @Override+    public void after() throws Exception {+        testingClient.testing().exportImport().clear();+        super.after();","Thanks for checking this! It's an example of a better-safe-than-sorry code, and the change improved it so it cannot be executed twice even if JUnit would accidentally change the behaviour in the future.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11755,861532106,2022-04-29T07:33:09Z,operator/src/test/java/org/keycloak/operator/RealmImportE2EIT.java,"@@ -67,6 +72,38 @@ public void testWorkingRealmImport() {         });     } +    @Test+    @EnabledIfSystemProperty(named = OPERATOR_CUSTOM_IMAGE, matches = "".+"")+    public void testWorkingRealmImportWithCustomImage() {+        // Arrange+        // Recreating the database and the realm import CR to keep this test isolated+        k8sclient.load(getClass().getResourceAsStream(""/example-realm.yaml"")).inNamespace(namespace).delete();+        deleteDB();+        deployDB();+        var keycloak = getDefaultKeycloakDeployment();+        keycloak.getSpec().setImage(customImage);+        deployKeycloak(k8sclient, keycloak, false);++        // Act+        k8sclient.load(getClass().getResourceAsStream(""/example-realm.yaml"")).inNamespace(namespace).createOrReplace();++        // Assert",Should we maybe add a similar assert to this to check that build is not present?https://github.com/keycloak/keycloak/blob/5289b8704de36e6bfc9edcecffa7b639052465cb/operator/src/test/java/org/keycloak/operator/KeycloakDeploymentE2EIT.java#L344-L345WDYT?,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11776,861902906,2022-04-29T15:15:26Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/CriteriaOperator.java,"@@ -261,7 +259,7 @@ public boolean test(Object o) {             try {                 return o != null && op.isComparisonTrue(cValue.compareTo(o));             } catch (ClassCastException ex) {-                LOG.log(Level.WARNING, ""Incomparable argument type for comparison operation: {0}"", cValue.getClass().getSimpleName());+                LOG.log(Logger.Level.WARN, ""Incomparable argument type for comparison operation: {0}"", cValue.getClass().getSimpleName(), ex);                 return false;","@hmlnarik - when a class cast exception occurs, it currently returns false and logs a warning. Depending on the context ""false"" might be an unsafe default. When testing, this is hard to catch, as it is only logged. As it doesn't affect legacy behavior, I'd like to throw this exception so that the caller is forced to fix their call. Please approve.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11776,862033713,2022-04-29T18:09:53Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/CriteriaOperator.java,"@@ -261,7 +259,7 @@ public boolean test(Object o) {             try {                 return o != null && op.isComparisonTrue(cValue.compareTo(o));             } catch (ClassCastException ex) {-                LOG.log(Level.WARNING, ""Incomparable argument type for comparison operation: {0}"", cValue.getClass().getSimpleName());+                LOG.log(Logger.Level.WARN, ""Incomparable argument type for comparison operation: {0}"", cValue.getClass().getSimpleName(), ex);                 return false;","I agree, either the caller needs to fix it or some sort of type conversion needs to happen. Either way, throwing an exception suits better",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11799,863007078,2022-05-02T16:46:31Z,model/jpa/src/main/java/org/keycloak/models/jpa/RoleAdapter.java,"@@ -89,30 +94,74 @@ public void setName(String name) {      @Override     public boolean isComposite() {-        return getCompositesStream().count() > 0;+        TypedQuery<String> query = em.createNamedQuery(""getChildrenRoleIds"", String.class);+        query.setParameter(""roleId"", getId());+        query.setMaxResults(1);+        return !query.getResultList().isEmpty();     }      @Override     public void addCompositeRole(RoleModel role) {+        // Avoid lazy loading the composite role collection if not already done+        if (Persistence.getPersistenceUtil().isLoaded(getEntity(), ""compositeRoles"")) {","Could you please check a similar change in this PR https://github.com/keycloak/keycloak/pull/10623?Basically, using `PersistenceUtil` is not reliable, and the better is use `EntityManager.contains` instead.",x
2195557,davoustp,https://api.github.com/repos/keycloak/keycloak/pulls/11799,863539233,2022-05-03T07:42:09Z,model/jpa/src/main/java/org/keycloak/models/jpa/RoleAdapter.java,"@@ -89,30 +94,74 @@ public void setName(String name) {      @Override     public boolean isComposite() {-        return getCompositesStream().count() > 0;+        TypedQuery<String> query = em.createNamedQuery(""getChildrenRoleIds"", String.class);+        query.setParameter(""roleId"", getId());+        query.setMaxResults(1);+        return !query.getResultList().isEmpty();     }      @Override     public void addCompositeRole(RoleModel role) {+        // Avoid lazy loading the composite role collection if not already done+        if (Persistence.getPersistenceUtil().isLoaded(getEntity(), ""compositeRoles"")) {","Hi @pedroigor ,Thanks for the reference, I learned something (or did not remember that it existed in the first place). :-)What's weird is that this JPA method is recommended in Hibernate documentation https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html#pc-contains :> In JPA there is an alternative means to check laziness using the following javax.persistence.PersistenceUtil pattern (which is recommended wherever possible).Method `EntityManager.contains` cannot be used here because this method applies to entities, not internal fields holding relationship references.However, the method `Hibernate.isPropertyInitialized(Object, String)` can be used successfully as a replacement.Do you think it would be better?",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11806,863666011,2022-05-03T10:59:05Z,operator/pom.xml,"@@ -159,6 +159,19 @@             </plugins>         </pluginManagement>         <plugins>+            <plugin>+                <groupId>org.keycloak</groupId>+                <artifactId>keycloak-operator-maven-plugin</artifactId>+                <version>${project.version}</version>+                <executions>+                    <execution>+                        <id>generate-server-config</id>+                        <goals>+                            <goal>keycloak-operator-codegen</goal>",Perhaps a better/meaningful goal name like `generate-config` or similar?Having the `keycloak-operator-` is kinda redundant too.,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11806,863669942,2022-05-03T11:06:12Z,quarkus/maven-plugin/pom.xml,"@@ -0,0 +1,62 @@++<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-docs-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../../operator/pom.xml</relativePath>+    </parent>++    <modelVersion>4.0.0</modelVersion>++    <name>Keycloak Operator Maven Plugin</name>+    <artifactId>keycloak-operator-maven-plugin</artifactId>+    <description>Keycloak Operator Maven Plugin</description>+    <packaging>maven-plugin</packaging>++    <dependencies>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-plugin-api</artifactId>+            <version>3.6.3</version>+        </dependency>+        <dependency>+            <groupId>org.apache.maven.plugin-tools</groupId>+            <artifactId>maven-plugin-annotations</artifactId>+            <version>3.6.0</version>+            <scope>provided</scope>+        </dependency>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-project</artifactId>+            <version>2.2.1</version>+        </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-quarkus-server</artifactId>+        </dependency>+        <dependency>+            <groupId>com.github.javaparser</groupId>+            <artifactId>javaparser-core</artifactId>","The storage is also generating sources and using a different approach.In the past, we had some discussions about using a 3rd party for generating sources. See https://groups.google.com/g/keycloak-dev/c/MhLD-YoKVCs/m/e5FcDtejAgAJ. See some arguments from Hynek about why he is not using any 3rd party library.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11806,863673031,2022-05-03T11:12:05Z,quarkus/maven-plugin/src/main/java/org/keycloak/operator/codegen/Property.java,"@@ -0,0 +1,40 @@+package org.keycloak.operator.codegen;++import java.util.Objects;++public class Property {",I'm wondering if this type should be added to the configuration API itself. We are using a similar structure when generating docs. See https://github.com/keycloak/keycloak/blob/52d205ca916688b7fc6c77d6a319f584b6b3fd6f/docs/maven-plugin/src/main/java/org/keycloak/guides/maven/Options.java#L92.,
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11806,863679239,2022-05-03T11:23:05Z,operator/pom.xml,"@@ -159,6 +159,19 @@             </plugins>         </pluginManagement>         <plugins>+            <plugin>+                <groupId>org.keycloak</groupId>+                <artifactId>keycloak-operator-maven-plugin</artifactId>+                <version>${project.version}</version>+                <executions>+                    <execution>+                        <id>generate-server-config</id>+                        <goals>+                            <goal>keycloak-operator-codegen</goal>",naming is pretty much dummy in all of the maven plugin stuffs,x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11806,863685333,2022-05-03T11:33:18Z,quarkus/maven-plugin/pom.xml,"@@ -0,0 +1,62 @@++<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-docs-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../../operator/pom.xml</relativePath>+    </parent>++    <modelVersion>4.0.0</modelVersion>++    <name>Keycloak Operator Maven Plugin</name>+    <artifactId>keycloak-operator-maven-plugin</artifactId>+    <description>Keycloak Operator Maven Plugin</description>+    <packaging>maven-plugin</packaging>++    <dependencies>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-plugin-api</artifactId>+            <version>3.6.3</version>+        </dependency>+        <dependency>+            <groupId>org.apache.maven.plugin-tools</groupId>+            <artifactId>maven-plugin-annotations</artifactId>+            <version>3.6.0</version>+            <scope>provided</scope>+        </dependency>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-project</artifactId>+            <version>2.2.1</version>+        </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-quarkus-server</artifactId>+        </dependency>+        <dependency>+            <groupId>com.github.javaparser</groupId>+            <artifactId>javaparser-core</artifactId>","For the seek of discussion I report here the relevant comment:> A few frameworks have been considered for the class generation, be it on source or byte-code level -  lombok, autovalue, or bytebuddy to name a few. They have proven to be unnecessarily heavy and also by adding extra dependencies, we'd add an extra maintenance cost.I do believe that this doesn't apply to this PR: - here the use-case is to generate plain `java` files and not byte-code - `javaparser` is not heavy at all - `javaparser` offers a simple and intuitive interface - `javaparser` generated code is syntactically checked with nice error handling and relevant Exceptions - is not a new and extra dependency, since it's already on the classpath in the operator at least (`crd-generator` -> `sundrio` -> `javaparser`) - is proven to be an effective and widely accepted tool to generate java code",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11806,863686341,2022-05-03T11:34:58Z,quarkus/maven-plugin/src/main/java/org/keycloak/operator/codegen/Property.java,"@@ -0,0 +1,40 @@+package org.keycloak.operator.codegen;++import java.util.Objects;++public class Property {","I was wondering if I should try to re-use the docs generation, but I have no problems in including `Property/Options` as an extra class in the `org.keycloak.quarkus.runtime.configuration` package.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11806,863700170,2022-05-03T11:58:18Z,quarkus/maven-plugin/pom.xml,"@@ -0,0 +1,62 @@++<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-docs-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../../operator/pom.xml</relativePath>+    </parent>++    <modelVersion>4.0.0</modelVersion>++    <name>Keycloak Operator Maven Plugin</name>+    <artifactId>keycloak-operator-maven-plugin</artifactId>+    <description>Keycloak Operator Maven Plugin</description>+    <packaging>maven-plugin</packaging>++    <dependencies>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-plugin-api</artifactId>+            <version>3.6.3</version>+        </dependency>+        <dependency>+            <groupId>org.apache.maven.plugin-tools</groupId>+            <artifactId>maven-plugin-annotations</artifactId>+            <version>3.6.0</version>+            <scope>provided</scope>+        </dependency>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-project</artifactId>+            <version>2.2.1</version>+        </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-quarkus-server</artifactId>+        </dependency>+        <dependency>+            <groupId>com.github.javaparser</groupId>+            <artifactId>javaparser-core</artifactId>","It does apply because one of the arguments from Hynek is not using any 3rd party library to avoid adding extra dependencies too.As you can see from that thread, I am also in favor of using a library like `jdeparser`.IMO, if we can align the solution and use the same approach for generating sources across the code base, better. If others changed their mind and using `jdeparser` is better, even better.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11806,863701163,2022-05-03T11:59:46Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java,"@@ -40,9 +40,11 @@ public static PropertyMapper[] getHttpPropertyMappers() {                         .paramLabel(""path"")                         .isBuildTimeProperty(true)                         .build(),-                builder().from(""http-port"")+                HttpPropertyMappers.<Integer> builder().from(""http-port"")                         .to(""quarkus.http.port"")                         .defaultValue(String.valueOf(8080))+                        .type(Integer.class)+                        .converter(Integer::parseInt)",I'm not saying you should remove the `converter` method from the API but infer the converter based on the type. The code above would just use:```type(Integer.class)```,x
2195557,davoustp,https://api.github.com/repos/keycloak/keycloak/pulls/11799,863846370,2022-05-03T14:32:55Z,model/jpa/src/main/java/org/keycloak/models/jpa/RoleAdapter.java,"@@ -89,30 +94,74 @@ public void setName(String name) {      @Override     public boolean isComposite() {-        return getCompositesStream().count() > 0;+        TypedQuery<String> query = em.createNamedQuery(""getChildrenRoleIds"", String.class);+        query.setParameter(""roleId"", getId());+        query.setMaxResults(1);+        return !query.getResultList().isEmpty();     }      @Override     public void addCompositeRole(RoleModel role) {+        // Avoid lazy loading the composite role collection if not already done+        if (Persistence.getPersistenceUtil().isLoaded(getEntity(), ""compositeRoles"")) {","Well, I did not see any issue (what was your symptom?) but the Hibernate code itself hints that there could be a problem with `PersistenceUtil.isLoaded(Object, String)` (the ref mentioned in [#10623](https://github.com/keycloak/keycloak/pull/10623)):```	public boolean isLoaded(Object entity, String attributeName) {		// added log message to help with HHH-7454, if state == LoadState,NOT_LOADED, returning true or false is not accurate.		log.debug( ""PersistenceUnitUtil#isLoaded is not always accurate; consider using EntityManager#contains instead"" );```So I'm not very comfortable to leave it as it is, I'd rather use `Hibernate.isPropertyInitialized(Object, String)` instead, as the code is straightforward and directly taps into the internal lazy loaded structure flag: https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/Hibernate.java#L152Ok with that?",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11711,864474310,2022-05-04T05:49:29Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/themes/FlatClasspathThemeResourceProviderFactory.java,"@@ -19,9 +19,15 @@  import java.io.IOException; import java.io.InputStream;+import java.io.InputStreamReader;+import java.io.Reader; import java.net.URL;+import java.nio.charset.Charset; import java.util.Enumeration;+import java.util.Locale;+import java.util.Properties; import org.keycloak.theme.ClasspathThemeResourceProviderFactory;+import org.keycloak.theme.PropertiesUtil;",could you please remove the unused imports here? The code that used these seems to be in [ClasspathThemeResourceProviderFactory.java](https://github.com/keycloak/keycloak/pull/11711/files#diff-7e5492140ee2d42c1e7456d9bed8ce8d61598d76410118b5eeb50510921c7874) now.,x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/10917,864507517,2022-05-04T06:58:56Z,integration/client-cli/admin-cli/src/main/resources/META-INF/services/javax.ws.rs.ext.Providers,"@@ -1,23 +0,0 @@-org.jboss.resteasy.plugins.providers.jackson.ResteasyJackson2Provider",Why is this no longer needed?,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/10917,864507518,2022-05-04T06:58:56Z,integration/client-cli/admin-cli/src/main/resources/META-INF/services/javax.ws.rs.ext.Providers,"@@ -1,23 +0,0 @@-org.jboss.resteasy.plugins.providers.jackson.ResteasyJackson2Provider",Why is this no longer needed?,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/10066,864837512,2022-05-04T13:37:14Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/IckleQueryWhereClauses.java,"@@ -154,4 +156,30 @@ private static String whereClauseForConsentClientFederationLink(String modelFiel         String providerId = new StorageId((String) values[0], """").getId();         return IckleQueryOperators.combineExpressions(ModelCriteriaBuilder.Operator.LIKE, getFieldName(UserModel.SearchableFields.CONSENT_FOR_CLIENT), new String[] {providerId + ""%""}, parameters);     }++    private static String whereClauseForPolicyConfig(String modelFieldName, ModelCriteriaBuilder.Operator op, Object[] values, Map<String, Object> parameters) {+        final Object attrName = values[0];",Fixed. We throw an exception on line 180 if `values.length == 0`,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11776,864910853,2022-05-04T14:30:50Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/CriteriaOperator.java,"@@ -261,7 +259,7 @@ public boolean test(Object o) {             try {                 return o != null && op.isComparisonTrue(cValue.compareTo(o));             } catch (ClassCastException ex) {-                LOG.log(Level.WARNING, ""Incomparable argument type for comparison operation: {0}"", cValue.getClass().getSimpleName());+                LOG.log(Logger.Level.WARN, ""Incomparable argument type for comparison operation: {0}"", cValue.getClass().getSimpleName(), ex);                 return false;","I updated the code, it now throws an exception. Please give it a review. Thanks!",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11806,864942106,2022-05-04T14:55:53Z,quarkus/maven-plugin/pom.xml,"@@ -0,0 +1,62 @@++<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-docs-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../../operator/pom.xml</relativePath>+    </parent>++    <modelVersion>4.0.0</modelVersion>++    <name>Keycloak Operator Maven Plugin</name>+    <artifactId>keycloak-operator-maven-plugin</artifactId>+    <description>Keycloak Operator Maven Plugin</description>+    <packaging>maven-plugin</packaging>++    <dependencies>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-plugin-api</artifactId>+            <version>3.6.3</version>+        </dependency>+        <dependency>+            <groupId>org.apache.maven.plugin-tools</groupId>+            <artifactId>maven-plugin-annotations</artifactId>+            <version>3.6.0</version>+            <scope>provided</scope>+        </dependency>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-project</artifactId>+            <version>2.2.1</version>+        </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-quarkus-server</artifactId>+        </dependency>+        <dependency>+            <groupId>com.github.javaparser</groupId>+            <artifactId>javaparser-core</artifactId>","Just a generic comment, I know there was a lot of communication about it both off- and on-line. It is a good point that we might take some inspiration from Store.X team and even align with them on the approach of generating representations etc. They are facing very similar issues AFAIK.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11806,865019969,2022-05-04T16:10:31Z,quarkus/maven-plugin/src/main/java/org/keycloak/operator/codegen/CodegenMojo.java,"@@ -0,0 +1,126 @@+package org.keycloak.operator.codegen;++import com.fasterxml.jackson.annotation.JsonProperty;+import com.fasterxml.jackson.annotation.JsonPropertyDescription;+import com.github.javaparser.ast.CompilationUnit;+import com.github.javaparser.ast.Modifier;+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;+import com.github.javaparser.ast.body.FieldDeclaration;+import com.github.javaparser.ast.expr.StringLiteralExpr;+import com.github.javaparser.utils.StringEscapeUtils;+import org.apache.maven.plugin.AbstractMojo;+import org.apache.maven.plugin.MojoFailureException;+import org.apache.maven.plugin.logging.Log;+import org.apache.maven.plugins.annotations.LifecyclePhase;+import org.apache.maven.plugins.annotations.Mojo;+import org.apache.maven.plugins.annotations.Parameter;+import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;++import java.io.File;+import java.io.FileWriter;+import java.io.IOException;+import java.io.PrintWriter;+import java.nio.file.Path;+import java.nio.file.Paths;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Locale;+import java.util.Set;+import java.util.Map;++import static io.smallrye.config.common.utils.StringUtil.replaceNonAlphanumericByUnderscores;++@Mojo(name = ""keycloak-operator-codegen"", defaultPhase = LifecyclePhase.GENERATE_SOURCES)+public class CodegenMojo extends AbstractMojo {","Was wondering if we should not have have it the other way around. Some POJO with few custom annotations on top of field as the source of truth. This would get translated into the mappers. Might be a bit cleaner than a maven plugin for basically generating classes on the fly?In any case, might be worth exploring what Store.X team will be doing. As mentioned, I think it is related to this, so might make sense to align on it.",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11806,865112225,2022-05-04T17:47:42Z,quarkus/maven-plugin/src/main/java/org/keycloak/operator/codegen/CodegenMojo.java,"@@ -0,0 +1,126 @@+package org.keycloak.operator.codegen;++import com.fasterxml.jackson.annotation.JsonProperty;+import com.fasterxml.jackson.annotation.JsonPropertyDescription;+import com.github.javaparser.ast.CompilationUnit;+import com.github.javaparser.ast.Modifier;+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;+import com.github.javaparser.ast.body.FieldDeclaration;+import com.github.javaparser.ast.expr.StringLiteralExpr;+import com.github.javaparser.utils.StringEscapeUtils;+import org.apache.maven.plugin.AbstractMojo;+import org.apache.maven.plugin.MojoFailureException;+import org.apache.maven.plugin.logging.Log;+import org.apache.maven.plugins.annotations.LifecyclePhase;+import org.apache.maven.plugins.annotations.Mojo;+import org.apache.maven.plugins.annotations.Parameter;+import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;++import java.io.File;+import java.io.FileWriter;+import java.io.IOException;+import java.io.PrintWriter;+import java.nio.file.Path;+import java.nio.file.Paths;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Locale;+import java.util.Set;+import java.util.Map;++import static io.smallrye.config.common.utils.StringUtil.replaceNonAlphanumericByUnderscores;++@Mojo(name = ""keycloak-operator-codegen"", defaultPhase = LifecyclePhase.GENERATE_SOURCES)+public class CodegenMojo extends AbstractMojo {","> Was wondering if we should not have have it the other way around. Some POJO with few custom annotations on top of field as the source of truth.This would require a pretty invasive change on how the CLI and configuration work as of today, I would like to hear from @pedroigor and @DGuhr But, also, let's first open a GH ""discussion"" about the desired outcome and tackle the technical implementation as a separate subject.",x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11806,865129463,2022-05-04T18:08:17Z,quarkus/maven-plugin/pom.xml,"@@ -0,0 +1,62 @@++<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-docs-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../../operator/pom.xml</relativePath>+    </parent>++    <modelVersion>4.0.0</modelVersion>++    <name>Keycloak Operator Maven Plugin</name>+    <artifactId>keycloak-operator-maven-plugin</artifactId>+    <description>Keycloak Operator Maven Plugin</description>+    <packaging>maven-plugin</packaging>++    <dependencies>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-plugin-api</artifactId>+            <version>3.6.3</version>+        </dependency>+        <dependency>+            <groupId>org.apache.maven.plugin-tools</groupId>+            <artifactId>maven-plugin-annotations</artifactId>+            <version>3.6.0</version>+            <scope>provided</scope>+        </dependency>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-project</artifactId>+            <version>2.2.1</version>+        </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-quarkus-server</artifactId>+        </dependency>+        <dependency>+            <groupId>com.github.javaparser</groupId>+            <artifactId>javaparser-core</artifactId>","Let's discuss this subject when we have more visibility about the desired outcome.Regarding the discussion about code generation itself I summarize the outcome of my discussion with @pedroigor (please, feel free, to correct me if I took anything wrongly): - we agree that generating plain Java code (not byte-code as stated in the google groups discussion) using a library is a more solid foundation and less painful for development/maintenance as opposed to plain string interpolation (which is the current approach from Store.X team AFAIK) - we observed that, as of today, both `javaparser` and `jdeparser` are both, in some way, transitively used in this repository. Since they are anyhow dependencies, the argument of adding extra maintenance due to the extra dependency doesn't hold - `jdeparser` is much less used than `javaparser` in the wild even if it's a RH project - both `jdeparser` and `javaparser` are used in the Quarkus project for different purposes - I do have a very good experience using `javaparser` [in other projects](https://github.com/fabric8io/kubernetes-client/tree/master/java-generator)  > They are facing very similar issues AFAIK.  Not sure about this point, let's see where we end up going with this, but generating internals might be a very much different concern than generating public APIs.",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11806,865408827,2022-05-04T21:41:11Z,quarkus/maven-plugin/src/main/java/org/keycloak/operator/codegen/CodegenMojo.java,"@@ -0,0 +1,126 @@+package org.keycloak.operator.codegen;++import com.fasterxml.jackson.annotation.JsonProperty;+import com.fasterxml.jackson.annotation.JsonPropertyDescription;+import com.github.javaparser.ast.CompilationUnit;+import com.github.javaparser.ast.Modifier;+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;+import com.github.javaparser.ast.body.FieldDeclaration;+import com.github.javaparser.ast.expr.StringLiteralExpr;+import com.github.javaparser.utils.StringEscapeUtils;+import org.apache.maven.plugin.AbstractMojo;+import org.apache.maven.plugin.MojoFailureException;+import org.apache.maven.plugin.logging.Log;+import org.apache.maven.plugins.annotations.LifecyclePhase;+import org.apache.maven.plugins.annotations.Mojo;+import org.apache.maven.plugins.annotations.Parameter;+import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;++import java.io.File;+import java.io.FileWriter;+import java.io.IOException;+import java.io.PrintWriter;+import java.nio.file.Path;+import java.nio.file.Paths;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Locale;+import java.util.Set;+import java.util.Map;++import static io.smallrye.config.common.utils.StringUtil.replaceNonAlphanumericByUnderscores;++@Mojo(name = ""keycloak-operator-codegen"", defaultPhase = LifecyclePhase.GENERATE_SOURCES)+public class CodegenMojo extends AbstractMojo {","My [PoC](https://github.com/DGuhr/keycloak/blob/PoC_Typed_Converters_For_CLI_Values/quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/model/PortConfiguration.java) actually had a POJO inside that could be used/extended as source of truth (the pojo is actually applicable to all sorts of ""PortConfiguration"", so the actual configurationkey POJO would extend it and add e.g. name, description, and so on), and I am pretty paranoid due to bad experiences when it comes to code generators, so +1 from my side. Nevertheless I totally agree this is more invasive, needs a bit of boilerplate work and should be discussed first. For the problem space / the discussion part, a primer:e.g. I thought the goal here was not only for the operator to get the config classes, but to extract a configuration package with its own api/interface, that could be used by any frontend, be it tools like https://github.com/adorsys/keycloak-config-cli or ""I want to write my own keycloak configuration service using e.g. jbang"", or ""i want to set keycloak configuration using an existing tool like spring cloud config server"" or even ""I want to have an intellij / vscode plugin to show me when I have an invalid configuration  even before starting up anything, so immediately when typing e.g. proxy=reencrypt, http-enabled=true"".  This, together with a `--no-validate` flag or sth around these lines that skips validation at startup bc. ""hey, i know what i am doing and it was validated beforehand"", would lead to the outcome that configuring keycloak would be much more flexible to do with whatever tool you want, would be decoupled from the actual runtime keycloak lives in, as the config is ""self-contained"" (given we also abstract away the ""to"" part from the mappers, this could even lead to a wildfly configuration frontend ;) ) bc validating could be done without even invoking keycloak, so at startup we would have nearly no impact on performance.",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/11831,865572547,2022-05-05T05:53:50Z,server-spi-private/src/main/java/org/keycloak/authorization/store/PermissionTicketStore.java,"@@ -33,10 +33,20 @@  */ public interface PermissionTicketStore { +    /**+     * Legacy store doesn't store realm id for any entity and no method there is using new introduced RealmModel parameter.+     * The parameter was introduced for usage only in the new storage. Therefore, in some cases we may break our rule specified in JavaDoc+     * and use {@code null} value as parameter that otherwise cannot be {@code null}. We need to be careful and place such value only to a method call+     * that cannot end up in the new store because it would end with {@link NullPointerException}. To mark all places where we do this,+     * we use this variable so it is easily searchable.+     */+    static RealmModel NULL_REALM = null;","I can see the parameter is used across all objects (legacy jpa adn infinispan adapters) within authz, not only for `PermissionTicket`s. Shouldn't it rather be placed in e.g. `AuthorizationProvider`?",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11816,865609260,2022-05-05T07:08:12Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/role/JpaRoleModelCriteriaBuilder.java,"@@ -61,6 +62,15 @@ public JpaRoleModelCriteriaBuilder compare(SearchableModelField<? super RoleMode                     return new JpaRoleModelCriteriaBuilder((cb, root) ->                          cb.equal(root.get(modelField.getName()), value[0])                     );+                } else if (modelField == SearchableFields.COMPOSITE_ROLE){+                    validateValue(value, modelField, op, String.class);++                    return new JpaRoleModelCriteriaBuilder((cb, root) ->+                            cb.isTrue(cb.function(""@>"",+                                    Boolean.TYPE,+                                    cb.function(""->"", JsonbType.class, root.get(""metadata""), cb.literal(""fCompositeRoles"")),+                                    cb.literal(convertToJson(value[0]))))","@hmlnarik - probably not. At the same time I would assume that composite roles might soon move to its own table to follow along the discussion found here to allow adding or removing an entry to the composite roles without loading the rest of the entity: https://github.com/keycloak/keycloak/pull/11799Depending on where that other PR will move to and how the performance improvements are, I wanted to call for a meeting on that topic to discuss how to handle situation where an attribute can contain a big collection of entries. ",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11822,865773495,2022-05-05T10:40:53Z,model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProvider.java,"@@ -0,0 +1,142 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.events;++import org.keycloak.common.util.Time;+import org.keycloak.events.Event;+import org.keycloak.events.EventQuery;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.events.admin.AdminEvent;+import org.keycloak.events.admin.AdminEventQuery;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ModelDuplicateException;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelCriteriaBuilder;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.criteria.DefaultModelCriteria;++import java.util.function.Function;+import java.util.stream.Stream;++import static org.keycloak.models.map.events.EventUtils.modelToEntity;++public class MapEventStoreProvider implements EventStoreProvider {++    private final KeycloakSession session;+    private final MapKeycloakTransaction<MapLoginEventEntity, Event> loginEventsTX;+    private final MapKeycloakTransaction<MapAdminEventEntity, AdminEvent> adminEventsTX;++    public MapEventStoreProvider(KeycloakSession session, MapStorage<MapLoginEventEntity, Event> loginEventsStore, MapStorage<MapAdminEventEntity, AdminEvent> adminEventsStore) {+        this.session = session;+        this.loginEventsTX = loginEventsStore.createTransaction(session);+        this.adminEventsTX = adminEventsStore.createTransaction(session);++        session.getTransactionManager().enlistAfterCompletion(this.loginEventsTX);+        session.getTransactionManager().enlistAfterCompletion(this.adminEventsTX);+    }++    /** LOGIN EVENTS **/+    @Override+    public void onEvent(Event event) {+        String id = event.getId();+        if (id != null && loginEventsTX.read(id) != null) {+            throw new ModelDuplicateException(""Event already exists: "" + id);+        }++        loginEventsTX.create(modelToEntity(event));+    }++    @Override+    public EventQuery createQuery() {+        return new MapLoginEventQuery(((Function<QueryParameters<Event>, Stream<MapLoginEventEntity>>) loginEventsTX::read)+                .andThen(s -> s.map(EventUtils::entityToModel)));+    }++    @Override+    public void clear() {+        loginEventsTX.delete(QueryParameters.withCriteria(DefaultModelCriteria.criteria()));+    }++    @Override+    public void clear(String realmId) {+        loginEventsTX.delete(QueryParameters.withCriteria(DefaultModelCriteria.<Event>criteria()+                .compare(Event.SearchableFields.REALM_ID, ModelCriteriaBuilder.Operator.EQ, realmId)));+    }++    @Override+    public void clear(String realmId, long olderThan) {+        loginEventsTX.delete(QueryParameters.withCriteria(DefaultModelCriteria.<Event>criteria()+                .compare(Event.SearchableFields.REALM_ID, ModelCriteriaBuilder.Operator.EQ, realmId)+                .compare(Event.SearchableFields.TIME, ModelCriteriaBuilder.Operator.LT, olderThan)+        ));+    }++    @Override+    public void clearExpiredEvents() {+        // TODO: Find another way of doing this+        session.realms().getRealmsStream().forEach(realm -> {+            if (realm.isEventsEnabled() && realm.getEventsExpiration() > 0) {+                long olderThan = Time.currentTimeMillis() - realm.getEventsExpiration() * 1000;+                clear(realm.getId(), olderThan);+            }+        });","This should follow the same pattern as in #11166: introduce `expiration` on the event entities, and `EXPIRATION` searchable field.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11822,865975274,2022-05-05T14:32:12Z,model/map/src/main/java/org/keycloak/models/map/events/MapLoginEventQuery.java,"@@ -0,0 +1,111 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.events;++import org.keycloak.events.Event;+import org.keycloak.events.Event.SearchableFields;+import org.keycloak.events.EventQuery;+import org.keycloak.events.EventType;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.criteria.DefaultModelCriteria;++import java.util.Arrays;+import java.util.Date;+import java.util.function.Function;+import java.util.stream.Stream;++import static org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator.EQ;+import static org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator.GE;+import static org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator.IN;+import static org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator.LE;+import static org.keycloak.models.map.storage.QueryParameters.Order.DESCENDING;+import static org.keycloak.models.map.storage.criteria.DefaultModelCriteria.criteria;++public class MapLoginEventQuery implements EventQuery {++    private Integer firstResult;+    private Integer maxResults;+    private DefaultModelCriteria<Event> mcb = criteria();+    private final Function<QueryParameters<Event>, Stream<Event>> resultProducer;++    public MapLoginEventQuery(Function<QueryParameters<Event>, Stream<Event>> resultProducer) {+        this.resultProducer = resultProducer;+    }++    @Override+    public EventQuery type(EventType... types) {+        mcb = mcb.compare(SearchableFields.EVENT_TYPE, IN, Arrays.stream(types));","Consider using `Arrays.asList` rather than a stream, it would get converted to list anyway",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11822,865977673,2022-05-05T14:34:23Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/CriteriaOperator.java,"@@ -196,22 +196,32 @@ public static Predicate<Object> like(Object[] value) {                 return ALWAYS_TRUE;             } -            boolean anyBeginning = sValue.startsWith(""%"");-            boolean anyEnd = sValue.endsWith(""%"");--            Pattern pValue = Pattern.compile(-              (anyBeginning ? "".*"" : """")-              + Pattern.quote(sValue.substring(anyBeginning ? 1 : 0, sValue.length() - (anyEnd ? 1 : 0)))-              + (anyEnd ? "".*"" : """"),-              Pattern.DOTALL-            );+            Pattern pValue = Pattern.compile(quoteRegex(sValue), Pattern.DOTALL);             return o -> {                 return o instanceof String && pValue.matcher((String) o).matches();             };         }         return ALWAYS_FALSE;     } +    private static String quoteRegex(String pattern) {+        String[] patternParts = pattern.split(""%"", -1);++        StringBuilder resultingPattern = new StringBuilder(50);",Should this be ```suggestion        StringBuilder resultingPattern = new StringBuilder(pattern.length() + 50);```?,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11822,865985789,2022-05-05T14:41:38Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/CriteriaOperator.java,"@@ -196,22 +196,32 @@ public static Predicate<Object> like(Object[] value) {                 return ALWAYS_TRUE;             } -            boolean anyBeginning = sValue.startsWith(""%"");-            boolean anyEnd = sValue.endsWith(""%"");--            Pattern pValue = Pattern.compile(-              (anyBeginning ? "".*"" : """")-              + Pattern.quote(sValue.substring(anyBeginning ? 1 : 0, sValue.length() - (anyEnd ? 1 : 0)))-              + (anyEnd ? "".*"" : """"),-              Pattern.DOTALL-            );+            Pattern pValue = Pattern.compile(quoteRegex(sValue), Pattern.DOTALL);             return o -> {                 return o instanceof String && pValue.matcher((String) o).matches();             };         }         return ALWAYS_FALSE;     } +    private static String quoteRegex(String pattern) {+        String[] patternParts = pattern.split(""%"", -1);++        StringBuilder resultingPattern = new StringBuilder(50);++        for (int i = 0; i < patternParts.length; i++) {+            if (!patternParts[i].isEmpty()) {+                resultingPattern.append(Pattern.quote(patternParts[i]));+            }++            if (i != patternParts.length - 1) {+                resultingPattern.append("".*"");+            }+        }++        return resultingPattern.toString();","Is this the same as```java    private static final Pattern DELIMITER = Pattern.compile(""%+"");    DELIMITER.splitAsStream(pattern).map(Pattern::quote).collect(Collectors.joining("".*""))?```",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11822,865989024,2022-05-05T14:44:28Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/LdapMapStorage.java,"@@ -101,7 +101,9 @@ public void updateConfig(Config cf) {                 .spi(UserSessionSpi.NAME).config(""map.storage-client-sessions.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)                 .spi(UserLoginFailureSpi.NAME).config(""map.storage.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)                 .spi(""authorizationPersister"").config(""map.storage.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)-                .spi(""authenticationSessions"").config(""map.storage.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID);+                .spi(""authenticationSessions"").config(""map.storage.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)+                .spi(""eventsStore"").config(""map.storage-admin-events.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)",Please use a constant `...Spi.NAME` (everywhere). Feel free to introduce that constant in the appropriate `...Spi` class if it is missing.,x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/11852,866600068,2022-05-06T08:22:48Z,themes/src/main/resources/theme/base/admin/resources/js/services.js,"@@ -387,6 +387,14 @@ module.factory('RealmSpecificLocalizationTexts', function($resource) {     return $resource(authUrl + '/admin/realms/:id/localization/:locale', {         id : '@realm',         locale : '@locale'+    }, {+        get: {+            isArray: false,+                method: 'GET',+                params: {+                    useRealmDefaultLocaleFallback: '@useRealmDefaultLocaleFallback'",Perhaps this should just be the default behavior instead of passing an explicit parameter?,x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11866,866751532,2022-05-06T11:50:14Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/storage/database/jpa/QuarkusJpaConnectionProviderFactory.java,"@@ -25,6 +25,8 @@ import java.io.FileInputStream; import java.io.IOException; import java.nio.file.Files;+import java.nio.file.LinkOption;","don't hate me @pedroigor , but this is an unused import 😢 ",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11822,868321887,2022-05-09T18:48:22Z,server-spi-private/src/main/java/org/keycloak/events/admin/AdminEvent.java,"@@ -17,11 +17,26 @@  package org.keycloak.events.admin; +import org.keycloak.storage.SearchableModelField;+ /**  * @author <a href=""mailto:sthorger@redhat.com"">Stian Thorgersen</a>  */ public class AdminEvent { +    public static class SearchableFields {+        public static final SearchableModelField<AdminEvent> ID              = new SearchableModelField<>(""id"", String.class);+        public static final SearchableModelField<AdminEvent> REALM_ID        = new SearchableModelField<>(""realmId"", String.class);+        public static final SearchableModelField<AdminEvent> TIME            = new SearchableModelField<>(""time"", String.class);+        public static final SearchableModelField<AdminEvent> AUTH_REALM_ID   = new SearchableModelField<>(""authRealmId"", String.class);+        public static final SearchableModelField<AdminEvent> AUTH_CLIENT_ID  = new SearchableModelField<>(""authClientId"", String.class);+        public static final SearchableModelField<AdminEvent> AUTH_USER_ID    = new SearchableModelField<>(""authUserId"", String.class);+        public static final SearchableModelField<AdminEvent> AUTH_IP_ADDRESS = new SearchableModelField<>(""authIpAddress"", String.class);+        public static final SearchableModelField<AdminEvent> OPERATION_TYPE  = new SearchableModelField<>(""operationType"", OperationType.class);+        public static final SearchableModelField<AdminEvent> RESOURCE_TYPE   = new SearchableModelField<>(""resourceType"", ResourceType.class);+        public static final SearchableModelField<AdminEvent> RESOURCE_PATH   = new SearchableModelField<>(""resourcePath"", String.class);",Please add `EXPIRATION` similar to e.g. auth sessionshttps://github.com/keycloak/keycloak/blob/5d87cdf1c6d420ece4691495701f956773fc2c43/server-spi/src/main/java/org/keycloak/sessions/RootAuthenticationSessionModel.java#L37,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/11822,868990266,2022-05-10T08:54:48Z,model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProvider.java,"@@ -0,0 +1,142 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.events;++import org.keycloak.common.util.Time;+import org.keycloak.events.Event;+import org.keycloak.events.EventQuery;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.events.admin.AdminEvent;+import org.keycloak.events.admin.AdminEventQuery;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ModelDuplicateException;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelCriteriaBuilder;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.criteria.DefaultModelCriteria;++import java.util.function.Function;+import java.util.stream.Stream;++import static org.keycloak.models.map.events.EventUtils.modelToEntity;++public class MapEventStoreProvider implements EventStoreProvider {++    private final KeycloakSession session;+    private final MapKeycloakTransaction<MapLoginEventEntity, Event> loginEventsTX;+    private final MapKeycloakTransaction<MapAdminEventEntity, AdminEvent> adminEventsTX;++    public MapEventStoreProvider(KeycloakSession session, MapStorage<MapLoginEventEntity, Event> loginEventsStore, MapStorage<MapAdminEventEntity, AdminEvent> adminEventsStore) {+        this.session = session;+        this.loginEventsTX = loginEventsStore.createTransaction(session);+        this.adminEventsTX = adminEventsStore.createTransaction(session);++        session.getTransactionManager().enlistAfterCompletion(this.loginEventsTX);+        session.getTransactionManager().enlistAfterCompletion(this.adminEventsTX);+    }++    /** LOGIN EVENTS **/+    @Override+    public void onEvent(Event event) {+        String id = event.getId();+        if (id != null && loginEventsTX.read(id) != null) {+            throw new ModelDuplicateException(""Event already exists: "" + id);+        }++        loginEventsTX.create(modelToEntity(event));+    }++    @Override+    public EventQuery createQuery() {+        return new MapLoginEventQuery(((Function<QueryParameters<Event>, Stream<MapLoginEventEntity>>) loginEventsTX::read)+                .andThen(s -> s.map(EventUtils::entityToModel)));+    }++    @Override+    public void clear() {+        loginEventsTX.delete(QueryParameters.withCriteria(DefaultModelCriteria.criteria()));+    }++    @Override+    public void clear(String realmId) {+        loginEventsTX.delete(QueryParameters.withCriteria(DefaultModelCriteria.<Event>criteria()+                .compare(Event.SearchableFields.REALM_ID, ModelCriteriaBuilder.Operator.EQ, realmId)));+    }++    @Override+    public void clear(String realmId, long olderThan) {+        loginEventsTX.delete(QueryParameters.withCriteria(DefaultModelCriteria.<Event>criteria()+                .compare(Event.SearchableFields.REALM_ID, ModelCriteriaBuilder.Operator.EQ, realmId)+                .compare(Event.SearchableFields.TIME, ModelCriteriaBuilder.Operator.LT, olderThan)+        ));+    }++    @Override+    public void clearExpiredEvents() {+        // TODO: Find another way of doing this+        session.realms().getRealmsStream().forEach(realm -> {+            if (realm.isEventsEnabled() && realm.getEventsExpiration() > 0) {+                long olderThan = Time.currentTimeMillis() - realm.getEventsExpiration() * 1000;+                clear(realm.getId(), olderThan);+            }+        });","@hmlnarik I am not sure it is the correct thing to do for events. Maybe it makes sense to have expiration changeable for events that are already present in the database. For example, if there are too many events in the DB and an administrator decides to introduce expiration time (there was no expiration set before), I would say it is the correct thing to remove events that are older than the new expiration time rather than apply this only to new events and basically preserve the old forever. WDYT?   btw. there is also a test for this use case: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/events/EventStoreProviderTest.java#L211",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/11822,870312059,2022-05-11T13:36:33Z,model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProviderFactory.java,"@@ -0,0 +1,107 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.events;++import org.keycloak.Config;+import org.keycloak.common.Profile;+import org.keycloak.component.AmphibianProviderFactory;+import org.keycloak.events.Event;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.events.EventStoreProviderFactory;+import org.keycloak.events.admin.AdminEvent;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.RealmModel;+import org.keycloak.models.map.common.AbstractMapProviderFactory;+import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.MapStorageProvider;+import org.keycloak.models.map.storage.MapStorageProviderFactory;+import org.keycloak.models.map.storage.MapStorageSpi;+import org.keycloak.provider.EnvironmentDependentProviderFactory;+import org.keycloak.provider.InvalidationHandler;++import static org.keycloak.models.map.common.AbstractMapProviderFactory.MapProviderObjectType.REALM_BEFORE_REMOVE;+import static org.keycloak.models.map.common.AbstractMapProviderFactory.uniqueCounter;+import static org.keycloak.models.utils.KeycloakModelUtils.getComponentFactory;++public class MapEventStoreProviderFactory implements AmphibianProviderFactory<EventStoreProvider>, EnvironmentDependentProviderFactory, EventStoreProviderFactory, InvalidationHandler {++    public static final String PROVIDER_ID = AbstractMapProviderFactory.PROVIDER_ID;+    private Config.Scope storageConfigScopeAdminEvents;+    private Config.Scope storageConfigScopeLoginEvents;+    private final String uniqueKey = getClass().getName() + uniqueCounter.incrementAndGet();+++    @Override+    public void init(Config.Scope config) {+        storageConfigScopeAdminEvents = config.scope(AbstractMapProviderFactory.CONFIG_STORAGE + ""-admin-events"");+        storageConfigScopeLoginEvents = config.scope(AbstractMapProviderFactory.CONFIG_STORAGE + ""-auth-events"");+    }++    @Override+    public void postInit(KeycloakSessionFactory factory) {+    }++    @Override+    public EventStoreProvider create(KeycloakSession session) {+        MapEventStoreProvider provider = session.getAttribute(uniqueKey, MapEventStoreProvider.class);+        if (provider != null) return provider;++        MapStorageProviderFactory storageProviderFactoryAe = (MapStorageProviderFactory) getComponentFactory(session.getKeycloakSessionFactory(),+                MapStorageProvider.class, storageConfigScopeAdminEvents, MapStorageSpi.NAME);+        final MapStorageProvider factoryAe = storageProviderFactoryAe.create(session);+        MapStorage adminEventsStore = factoryAe.getStorage(AdminEvent.class);++        MapStorageProviderFactory storageProviderFactoryLe = (MapStorageProviderFactory) getComponentFactory(session.getKeycloakSessionFactory(),+                MapStorageProvider.class, storageConfigScopeLoginEvents, MapStorageSpi.NAME);+        final MapStorageProvider factoryLe = storageProviderFactoryLe.create(session);+        MapStorage loginEventsStore = factoryLe.getStorage(Event.class);++        provider = new MapEventStoreProvider(session, loginEventsStore, adminEventsStore);+        session.setAttribute(uniqueKey, provider);+        return provider;+    }++    @Override+    public void invalidate(KeycloakSession session, InvalidationHandler.InvalidableObjectType type, Object... params) {+        if (type == REALM_BEFORE_REMOVE) {",Related question: Should we do similar on Client/User and maybe other removals?,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11934,870990045,2022-05-12T06:23:44Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/liquibase/updater/MapJpaLiquibaseUpdaterProvider.java,"@@ -187,6 +187,7 @@ private List<ChangeSet> getLiquibaseUnrunChangeSets(Liquibase liquibase) throws     private Liquibase getLiquibase(Class modelType, Connection connection, String defaultSchema) throws LiquibaseException {         MapLiquibaseConnectionProvider liquibaseProvider = session.getProvider(MapLiquibaseConnectionProvider.class);         String modelName = ModelEntityUtil.getModelName(modelType);+        modelName = modelName.contains(""authz"") ? ""authz"" : modelName;","Maybe add a comment here which modelNames are covered by authz? What would be different when listing all model names that would fit here? Looking at some other code, they might all start with ""authz_"" ... IMHO that would be more restrictive than to look everywhere inside the model string.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/11934,871227137,2022-05-12T10:39:43Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/liquibase/updater/MapJpaLiquibaseUpdaterProvider.java,"@@ -187,6 +187,7 @@ private List<ChangeSet> getLiquibaseUnrunChangeSets(Liquibase liquibase) throws     private Liquibase getLiquibase(Class modelType, Connection connection, String defaultSchema) throws LiquibaseException {         MapLiquibaseConnectionProvider liquibaseProvider = session.getProvider(MapLiquibaseConnectionProvider.class);         String modelName = ModelEntityUtil.getModelName(modelType);+        modelName = modelName.contains(""authz"") ? ""authz"" : modelName;","As far as I understand all authz objects (`permission`, `policy`, `resource`, `resourceServer` and `scope`) will live inside one store. It might be useful to initialize objects in certain order to leverage fact that some object is already existing so that it's possible to create foreign key constraints.Looking at it again it seems it'll need some re-design. The reason being is that we cache validated models within `JpaMapStorageProviderFactory.validatedModels` set and currents implementation will visit the validation 5 times unnecessarily for authz. As of now I can see two possible ways how to solve it.1. change  `JpaMapStorageProviderFactory.validatedModels` to `JpaMapStorageProviderFactory.validatedModelNames` where we'd cache names. So that this line would go there.2. remove this line and also `jpa-authz-changelog-1.xml` (also probably relocate `jpa-authz-*-changelog-1.xml`s) and update the order of MapStorage creation within `MapAuthorizationStoreFactory`:```        // order of creating stores matters        MapStorage resourceServerStore = mapStorageProvider.getStorage(ResourceServer.class);        MapStorage scopeStore = mapStorageProvider.getStorage(Scope.class);        MapStorage resourceStore = mapStorageProvider.getStorage(Resource.class);        MapStorage policyStore = mapStorageProvider.getStorage(Policy.class);        MapStorage permissionTicketStore = mapStorageProvider.getStorage(PermissionTicket.class);```I'm currently in favor of 2. option, WDYT? Maybe another 3. option would be the best.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11822,871253105,2022-05-12T11:10:49Z,model/map/src/main/java/org/keycloak/models/map/common/ExpirableEntity.java,"@@ -0,0 +1,23 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.common;++public interface ExpirableEntity extends AbstractEntity {+    Long getExpiration();+    void setExpiration(Long expiration);",Add javadoc both to methods and class. Specifically time units are a must.,
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11964,871542406,2022-05-12T15:42:49Z,services/src/main/java/org/keycloak/validation/DefaultClientValidationProvider.java,"@@ -184,7 +184,7 @@ private void checkUri(FieldMessages field, String url, ValidationContext<ClientM         }          try {-            URI uri = new URI(url);+            URI uri = new URI(url.replace("" "",""%20""));","definitely makes sense _when we go this way_, but lets answer the bigger question first before moving on i'd say :)",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/11934,872234690,2022-05-13T10:28:12Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/authorization/policy/entity/JpaPolicyEntity.java,"@@ -0,0 +1,364 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.authorization.policy.entity;++import java.util.HashSet;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.UUID;+import java.util.stream.Collectors;+import javax.persistence.Basic;+import javax.persistence.CascadeType;+import javax.persistence.CollectionTable;+import javax.persistence.Column;+import javax.persistence.ElementCollection;+import javax.persistence.Entity;+import javax.persistence.FetchType;+import javax.persistence.Id;+import javax.persistence.JoinColumn;+import javax.persistence.OneToMany;+import javax.persistence.Table;+import javax.persistence.UniqueConstraint;+import javax.persistence.Version;+import org.hibernate.annotations.Type;+import org.hibernate.annotations.TypeDef;+import org.hibernate.annotations.TypeDefs;+import org.keycloak.models.map.authorization.entity.MapPolicyEntity.AbstractMapPolicyEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.UuidValidator;+import org.keycloak.models.map.storage.jpa.JpaRootVersionedEntity;+import org.keycloak.models.map.storage.jpa.hibernate.jsonb.JsonbType;++import static org.keycloak.models.map.storage.jpa.Constants.CURRENT_SCHEMA_VERSION_AUTHZ;+import org.keycloak.representations.idm.authorization.DecisionStrategy;+import org.keycloak.representations.idm.authorization.Logic;++/**+ * There are some fields marked by {@code @Column(insertable = false, updatable = false)}.+ * Those fields are automatically generated by database from json field,+ * therefore marked as non-insertable and non-updatable to instruct hibernate.+ */+@Entity+@Table(name = ""kc_authz_policy"", uniqueConstraints = {@UniqueConstraint(columnNames = {""realmId"", ""resourceServerId"", ""name""})})+@TypeDefs({@TypeDef(name = ""jsonb"", typeClass = JsonbType.class)})+public class JpaPolicyEntity extends AbstractMapPolicyEntity implements JpaRootVersionedEntity {++    @Id+    @Column+    private UUID id;++    //used for implicit optimistic locking+    @Version+    @Column+    private int version;++    @Type(type = ""jsonb"")+    @Column(columnDefinition = ""jsonb"")+    private final JpaPolicyMetadata metadata;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private Integer entityVersion;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String realmId;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private UUID resourceServerId;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String name;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String owner;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String type;++    @Column(name = ""scope_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_scope"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> scopeIds = new HashSet<>();++    @Column(name = ""resource_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_resource"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> resourceIds = new HashSet<>();++    @Column(name = ""associated_policy_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_associated_policy"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> policyIds = new HashSet<>();++    @OneToMany(mappedBy = ""root"", cascade = CascadeType.PERSIST, orphanRemoval = true)+    private final Set<JpaPolicyConfigEntity> config = new HashSet<>();++    /**+     * No-argument constructor, used by hibernate to instantiate entities.+     */+    public JpaPolicyEntity() {+        this.metadata = new JpaPolicyMetadata();+    }++    public JpaPolicyEntity(DeepCloner cloner) {+        this.metadata = new JpaPolicyMetadata(cloner);+    }++    /**+     * Used by hibernate when calling cb.construct from read(QueryParameters) method.+     * It is used to select object without metadata(json) field.+     */+    public JpaPolicyEntity(UUID id, int version, Integer entityVersion, String realmId, +            UUID resourceServerId, String name, String owner, String type) {+        this.id = id;+        this.version = version;+        this.entityVersion = entityVersion;+        this.realmId = realmId;+        this.resourceServerId = resourceServerId;+        this.name = name;+        this.owner = owner;+        this.type = type;+        this.metadata = null;+    }++    public boolean isMetadataInitialized() {+        return metadata != null;+    }++    @Override+    public Integer getEntityVersion() {+        if (isMetadataInitialized()) return metadata.getEntityVersion();+        return entityVersion;+    }++    @Override+    public void setEntityVersion(Integer entityVersion) {+        metadata.setEntityVersion(entityVersion);+    }++    @Override+    public Integer getCurrentSchemaVersion() {+        return CURRENT_SCHEMA_VERSION_AUTHZ;+    }++    @Override+    public int getVersion() {+        return version;+    }++    @Override+    public String getId() {+        return id == null ? null : id.toString();+    }++    @Override+    public void setId(String id) {+        String validatedId = UuidValidator.validateAndConvert(id);+        this.id = UUID.fromString(validatedId);+    }++    @Override+    public String getRealmId() {+        if (isMetadataInitialized()) return metadata.getRealmId();+        return realmId;+    }++    @Override+    public void setRealmId(String realmId) {+        metadata.setRealmId(realmId);+    }++    @Override+    public String getResourceServerId() {+        if (isMetadataInitialized()) return metadata.getResourceServerId();+        return resourceServerId == null ? null : resourceServerId.toString();+    }++    @Override+    public void setResourceServerId(String resourceServerId) {+        metadata.setResourceServerId(resourceServerId);+    }++    @Override+    public String getName() {+        if (isMetadataInitialized()) return metadata.getName();+        return name;+    }++    @Override+    public void setName(String name) {+        metadata.setName(name);+    }++    @Override+    public String getType() {+        if (isMetadataInitialized()) return metadata.getType();+        return type;+    }++    @Override+    public void setType(String type) {+        metadata.setType(type);+    }++    @Override+    public String getDescription() {+        return metadata.getDescription();+    }++    @Override+    public void setDescription(String description) {+        metadata.setDescription(description);+    }++    @Override+    public DecisionStrategy getDecisionStrategy() {+        return metadata.getDecisionStrategy();+    }++    @Override+    public void setDecisionStrategy(DecisionStrategy decisionStrategy) {+        metadata.setDecisionStrategy(decisionStrategy);+    }++    @Override+    public Logic getLogic() {+        return metadata.getLogic();+    }++    @Override+    public void setLogic(Logic logic) {+        metadata.setLogic(logic);+    }++    @Override+    public Map<String, String> getConfigs() {+        return config.stream().collect(Collectors.toUnmodifiableMap(JpaPolicyConfigEntity::getName, JpaPolicyConfigEntity::getValue));","I've changed an API to be JDK8 compatible to be on a safe site. E.g. here https://github.com/keycloak/keycloak/blob/main/docs/building.md it is stated it requires JDK8 or higher. If we decide we'd like to have new storage modules only JDK11+ we can revisit it, but I'd say in different PR.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11929,872460987,2022-05-13T14:25:52Z,config/pom.xml,"@@ -0,0 +1,43 @@+<?xml version=""1.0""?>+<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../pom.xml</relativePath>+    </parent>+    <modelVersion>4.0.0</modelVersion>++    <artifactId>keycloak-config</artifactId>",Something for when this PR is not a draft. :) Maybe we could call it something like `keycloak-dist-config` to avoid ambiguity and confusion with e.g. Realm configuration?,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11929,872461326,2022-05-13T14:26:14Z,config/src/main/java/org/keycloak/config/AllOption.java,"@@ -0,0 +1,13 @@+package org.keycloak.config;++import java.util.ArrayList;+import java.util.List;++public class AllOption {",```suggestionpublic class AllOptions {```,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11929,872469900,2022-05-13T14:35:09Z,config/src/main/java/org/keycloak/config/Option.java,"@@ -0,0 +1,56 @@+package org.keycloak.config;++import java.util.List;+import java.util.stream.Collectors;+import java.util.stream.StreamSupport;++public class Option<T> {+    private final Class<T> type;+    private final String key;+    private final OptionCategory category;+    private final boolean hidden;","In the context of our recent offline discussions, I was wondering if `hidden` even makes sense. What does it mean it's hidden? Is it hidden from CLI, operator, docs, ...? My point is it's runtime specific, so maybe it should be a list of hidden runtimes.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10650,872498858,2022-05-13T15:04:48Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                LOGGER.trace(""Trying to parse: "" + xml);++                Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+?)\"""").matcher(xml);",Can the pattern be precompiled in a `static final` field?,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10650,872531371,2022-05-13T15:38:00Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                LOGGER.trace(""Trying to parse: "" + xml);++                Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+?)\"""").matcher(xml);+                Map<String, String> namespaces = new HashMap<>();+                Map<String, String> prefixes = new HashMap<>();+                while (namespaceMatcher.find()) {+                    namespaces.put(namespaceMatcher.group(1), namespaceMatcher.group(2));+                    prefixes.put(namespaceMatcher.group(2), namespaceMatcher.group(1));+                }++                XPath xPath = XPathFactory.newInstance().newXPath();",This is a costly operation. Please introduce a method `getXPathFactory` similar to `getXMLInputFactory` (below for reference) and use it instead. Consider also introducing setting dummy `XPathVariableResolver` in that method as described in https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_in_Java_Cheat_Sheet.html#xml-xpath-injection.https://github.com/keycloak/keycloak/blob/9b43e62f2b6279ba0da9cedcf4b790ccd9b5edaa/saml-core/src/main/java/org/keycloak/saml/common/util/StaxParserUtil.java#L905-L933,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10650,872551422,2022-05-13T15:53:38Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                LOGGER.trace(""Trying to parse: "" + xml);++                Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+?)\"""").matcher(xml);+                Map<String, String> namespaces = new HashMap<>();+                Map<String, String> prefixes = new HashMap<>();+                while (namespaceMatcher.find()) {+                    namespaces.put(namespaceMatcher.group(1), namespaceMatcher.group(2));+                    prefixes.put(namespaceMatcher.group(2), namespaceMatcher.group(1));+                }++                XPath xPath = XPathFactory.newInstance().newXPath();+                xPath.setNamespaceContext(new NamespaceContext() {+                    @Override+                    public String getNamespaceURI(String prefix) {+                        if (namespaces.containsKey(prefix)) {+                            return namespaces.get(prefix);+                        }++                        return XMLConstants.NULL_NS_URI;+                    }++                    @Override+                    public String getPrefix(String namespaceURI) {+                        if (prefixes.containsKey(namespaceURI)) {+                            return prefixes.get(namespaceURI);+                        }++                        return null;+                    }++                    @Override+                    public Iterator<String> getPrefixes(String namespaceURI) {+                        List<String> list = new ArrayList<>();+                        if (prefixes.containsKey(namespaceURI)) {+                            list.add(prefixes.get(namespaceURI));+                        }++                        return list.iterator();+                    }+                });+                Document document = DocumentUtil.getDocument(new StringReader(xml));+                return xPath.compile(attributeXPath).evaluate(document, XPathConstants.STRING);+            } catch (XPathExpressionException e) {+                LOGGER.warn(""Unparsable element will be ignored"", e);+                return """";+            } catch (Exception e) {+                throw new RuntimeException(""Could not parse xml element"", e);+            }+        };+    }++    private List<String> findAttributeValuesInContext(String attributeName, String attributeXPath, BrokeredIdentityContext context) {+        AssertionType assertion = (AssertionType) context.getContextData().get(SAMLEndpoint.SAML_ASSERTION);++        return assertion.getAttributeStatements().stream()+                .flatMap(statement -> statement.getAttributes().stream())+                .filter(elementWith(attributeName))+                .flatMap(attributeType -> attributeType.getAttribute().getAttributeValue().stream())+                .filter(String.class::isInstance)+                .map(String.class::cast)",Casting is expensive```suggestion                .map(Object::toString)  // toString on String returns itself immediately without class cast checks```,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10650,872571545,2022-05-13T16:16:07Z,saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeValueParser.java,"@@ -141,4 +143,27 @@ public static String parseAnyTypeAsString(XMLEventReader xmlEventReader) throws         }     } +    private static String addNamespaceWhenMissing(Deque<String> definedPrefixes, XMLEventWriter writer, StartElement startElement)+            throws XMLStreamException {++        if (startElement.getName().getPrefix() != null && !startElement.getName().getPrefix().isEmpty()+                && !definedPrefixes.contains(startElement.getName().getPrefix())) {++            Iterator<Namespace> namespaces = startElement.getNamespaces();+            boolean hasNamespace = false;+            while (namespaces.hasNext()) {+                Namespace namespace = namespaces.next();+                if (namespace.getNamespaceURI().equals(startElement.getName().getNamespaceURI())) {+                    hasNamespace = true;+                    break;+                }+            }+            if (!hasNamespace) {+                XMLEventFactory xmlEventFactory = XMLEventFactory.newInstance();",This is a costly operation. Please introduce a method `getXMLEventFactory` similar to `getXMLInputFactory` (below for reference) and use it instead. https://github.com/keycloak/keycloak/blob/9b43e62f2b6279ba0da9cedcf4b790ccd9b5edaa/saml-core/src/main/java/org/keycloak/saml/common/util/StaxParserUtil.java#L905-L933,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11934,873376237,2022-05-16T06:49:07Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/authorization/policy/entity/JpaPolicyEntity.java,"@@ -0,0 +1,365 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.authorization.policy.entity;++import java.util.Collections;+import java.util.HashSet;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.UUID;+import java.util.stream.Collectors;+import javax.persistence.Basic;+import javax.persistence.CascadeType;+import javax.persistence.CollectionTable;+import javax.persistence.Column;+import javax.persistence.ElementCollection;+import javax.persistence.Entity;+import javax.persistence.FetchType;+import javax.persistence.Id;+import javax.persistence.JoinColumn;+import javax.persistence.OneToMany;+import javax.persistence.Table;+import javax.persistence.UniqueConstraint;+import javax.persistence.Version;+import org.hibernate.annotations.Type;+import org.hibernate.annotations.TypeDef;+import org.hibernate.annotations.TypeDefs;+import org.keycloak.models.map.authorization.entity.MapPolicyEntity.AbstractMapPolicyEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.UuidValidator;+import org.keycloak.models.map.storage.jpa.JpaRootVersionedEntity;+import org.keycloak.models.map.storage.jpa.hibernate.jsonb.JsonbType;++import static org.keycloak.models.map.storage.jpa.Constants.CURRENT_SCHEMA_VERSION_AUTHZ;+import org.keycloak.representations.idm.authorization.DecisionStrategy;+import org.keycloak.representations.idm.authorization.Logic;++/**+ * There are some fields marked by {@code @Column(insertable = false, updatable = false)}.+ * Those fields are automatically generated by database from json field,+ * therefore marked as non-insertable and non-updatable to instruct hibernate.+ */+@Entity+@Table(name = ""kc_authz_policy"", uniqueConstraints = {@UniqueConstraint(columnNames = {""realmId"", ""resourceServerId"", ""name""})})+@TypeDefs({@TypeDef(name = ""jsonb"", typeClass = JsonbType.class)})+public class JpaPolicyEntity extends AbstractMapPolicyEntity implements JpaRootVersionedEntity {++    @Id+    @Column+    private UUID id;++    //used for implicit optimistic locking+    @Version+    @Column+    private int version;++    @Type(type = ""jsonb"")+    @Column(columnDefinition = ""jsonb"")+    private final JpaPolicyMetadata metadata;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private Integer entityVersion;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String realmId;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private UUID resourceServerId;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String name;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String owner;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String type;++    @Column(name = ""scope_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_scope"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> scopeIds = new HashSet<>();++    @Column(name = ""resource_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_resource"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> resourceIds = new HashSet<>();++    @Column(name = ""associated_policy_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_associated_policy"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> policyIds = new HashSet<>();++    @OneToMany(mappedBy = ""root"", cascade = CascadeType.PERSIST, orphanRemoval = true)+    private final Set<JpaPolicyConfigEntity> config = new HashSet<>();++    /**+     * No-argument constructor, used by hibernate to instantiate entities.+     */+    public JpaPolicyEntity() {+        this.metadata = new JpaPolicyMetadata();+    }++    public JpaPolicyEntity(DeepCloner cloner) {+        this.metadata = new JpaPolicyMetadata(cloner);+    }++    /**+     * Used by hibernate when calling cb.construct from read(QueryParameters) method.+     * It is used to select object without metadata(json) field.+     */+    public JpaPolicyEntity(UUID id, int version, Integer entityVersion, String realmId, +            UUID resourceServerId, String name, String owner, String type) {+        this.id = id;+        this.version = version;+        this.entityVersion = entityVersion;+        this.realmId = realmId;+        this.resourceServerId = resourceServerId;+        this.name = name;+        this.owner = owner;+        this.type = type;+        this.metadata = null;+    }++    public boolean isMetadataInitialized() {+        return metadata != null;+    }++    @Override+    public Integer getEntityVersion() {+        if (isMetadataInitialized()) return metadata.getEntityVersion();+        return entityVersion;+    }++    @Override+    public void setEntityVersion(Integer entityVersion) {+        metadata.setEntityVersion(entityVersion);+    }++    @Override+    public Integer getCurrentSchemaVersion() {+        return CURRENT_SCHEMA_VERSION_AUTHZ;+    }++    @Override+    public int getVersion() {+        return version;+    }++    @Override+    public String getId() {+        return id == null ? null : id.toString();+    }++    @Override+    public void setId(String id) {+        String validatedId = UuidValidator.validateAndConvert(id);+        this.id = UUID.fromString(validatedId);+    }++    @Override+    public String getRealmId() {+        if (isMetadataInitialized()) return metadata.getRealmId();+        return realmId;+    }++    @Override+    public void setRealmId(String realmId) {+        metadata.setRealmId(realmId);+    }++    @Override+    public String getResourceServerId() {+        if (isMetadataInitialized()) return metadata.getResourceServerId();+        return resourceServerId == null ? null : resourceServerId.toString();+    }++    @Override+    public void setResourceServerId(String resourceServerId) {+        metadata.setResourceServerId(resourceServerId);+    }++    @Override+    public String getName() {+        if (isMetadataInitialized()) return metadata.getName();+        return name;+    }++    @Override+    public void setName(String name) {+        metadata.setName(name);+    }++    @Override+    public String getType() {+        if (isMetadataInitialized()) return metadata.getType();+        return type;+    }++    @Override+    public void setType(String type) {+        metadata.setType(type);+    }++    @Override+    public String getDescription() {+        return metadata.getDescription();+    }++    @Override+    public void setDescription(String description) {+        metadata.setDescription(description);+    }++    @Override+    public DecisionStrategy getDecisionStrategy() {+        return metadata.getDecisionStrategy();+    }++    @Override+    public void setDecisionStrategy(DecisionStrategy decisionStrategy) {+        metadata.setDecisionStrategy(decisionStrategy);+    }++    @Override+    public Logic getLogic() {+        return metadata.getLogic();+    }++    @Override+    public void setLogic(Logic logic) {+        metadata.setLogic(logic);+    }++    @Override+    public Map<String, String> getConfigs() {+        return Collections.unmodifiableMap(config.stream().collect(Collectors.toMap(JpaPolicyConfigEntity::getName, JpaPolicyConfigEntity::getValue)));+    }++    @Override+    public void setConfigs(Map<String, String> config) {+        this.config.clear();+        if (config == null) return;+        for (Map.Entry<String, String> entry : config.entrySet()) {+            setConfig(entry.getKey(), entry.getValue());+        }+    }++    @Override+    public String getConfig(String name) {+        return config.stream()+                .filter(obj -> Objects.equals(obj.getName(), name))+                .findFirst()+                .map(JpaPolicyConfigEntity::getValue)+                .orElse(null);+    }++    @Override+    public void setConfig(String name, String value) {+        if (name == null || value == null || value.trim().isEmpty()) return;+        JpaPolicyConfigEntity configEntity = new JpaPolicyConfigEntity(this, name, value);+        if (config.contains(configEntity)) config.remove(configEntity);+        config.add(configEntity);+    }++    @Override+    public void removeConfig(String name) {+        config.removeIf(obj -> Objects.equals(obj.getName(), name));+    }++    @Override+    public Set<String> getAssociatedPolicyIds() {+        return policyIds.stream().map(UUID::toString).collect(Collectors.toSet());+    }++    @Override+    public void addAssociatedPolicyId(String policyId) {+        UUID policyUuid = StringKeyConverter.UUIDKey.INSTANCE.fromStringSafe(policyId);+        if (policyUuid != null) policyIds.add(policyUuid);","I had a look what `fromStringSafe` does: it will return a null when the `policyId` is not a valid UUID. And then it is not stored to the database. As this silently discards data, it is hard to me to see a situation where it is safe to use. Feel free to open a new issue for that.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/10650,873397233,2022-05-16T07:18:59Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                LOGGER.trace(""Trying to parse: "" + xml);++                Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+?)\"""").matcher(xml);+                Map<String, String> namespaces = new HashMap<>();+                Map<String, String> prefixes = new HashMap<>();+                while (namespaceMatcher.find()) {+                    namespaces.put(namespaceMatcher.group(1), namespaceMatcher.group(2));+                    prefixes.put(namespaceMatcher.group(2), namespaceMatcher.group(1));+                }++                XPath xPath = XPathFactory.newInstance().newXPath();+                xPath.setNamespaceContext(new NamespaceContext() {+                    @Override+                    public String getNamespaceURI(String prefix) {+                        if (namespaces.containsKey(prefix)) {+                            return namespaces.get(prefix);+                        }++                        return XMLConstants.NULL_NS_URI;+                    }++                    @Override+                    public String getPrefix(String namespaceURI) {+                        if (prefixes.containsKey(namespaceURI)) {+                            return prefixes.get(namespaceURI);+                        }++                        return null;+                    }++                    @Override+                    public Iterator<String> getPrefixes(String namespaceURI) {+                        List<String> list = new ArrayList<>();+                        if (prefixes.containsKey(namespaceURI)) {+                            list.add(prefixes.get(namespaceURI));+                        }++                        return list.iterator();+                    }+                });+                Document document = DocumentUtil.getDocument(new StringReader(xml));+                return xPath.compile(attributeXPath).evaluate(document, XPathConstants.STRING);+            } catch (XPathExpressionException e) {+                LOGGER.warn(""Unparsable element will be ignored"", e);+                return """";+            } catch (Exception e) {+                throw new RuntimeException(""Could not parse xml element"", e);+            }+        };+    }++    private List<String> findAttributeValuesInContext(String attributeName, String attributeXPath, BrokeredIdentityContext context) {+        AssertionType assertion = (AssertionType) context.getContextData().get(SAMLEndpoint.SAML_ASSERTION);++        return assertion.getAttributeStatements().stream()+                .flatMap(statement -> statement.getAttributes().stream())+                .filter(elementWith(attributeName))+                .flatMap(attributeType -> attributeType.getAttribute().getAttributeValue().stream())+                .filter(String.class::isInstance)+                .map(String.class::cast)+                .map(s -> ""<root>"" + s + ""</root>"")+                .map(applyXPath(attributeXPath))+                .filter(Objects::nonNull)+                .map(Object::toString)+                .filter(x -> !x.isEmpty())+                .collect(Collectors.toList());+    }++    @Override+    public void updateBrokeredUser(KeycloakSession session, RealmModel realm, UserModel user, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);+        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (attribute.equalsIgnoreCase(EMAIL)) {+            setIfNotEmptyAndDifferent(user::setEmail, user::getEmail, attributeValuesInContext);+        } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+            setIfNotEmptyAndDifferent(user::setFirstName, user::getFirstName, attributeValuesInContext);+        } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+            setIfNotEmptyAndDifferent(user::setLastName, user::getLastName, attributeValuesInContext);+        } else {+            List<String> currentAttributeValues = user.getAttributes().get(attribute);+            if (attributeValuesInContext == null) {+                // attribute no longer sent by brokered idp, remove it+                user.removeAttribute(attribute);+            } else if (currentAttributeValues == null) {+                // new attribute sent by brokered idp, add it+                user.setAttribute(attribute, attributeValuesInContext);+            } else if (!CollectionUtil.collectionEquals(attributeValuesInContext, currentAttributeValues)) {+                // attribute sent by brokered idp has different values as before, update it+                user.setAttribute(attribute, attributeValuesInContext);+            }+            // attribute already set","@hmlnarik - I assume that you're referring to the following logic in the Keycloak model to map attributes to fields, like for example here: https://github.com/keycloak/keycloak/blob/main/model/jpa/src/main/java/org/keycloak/models/jpa/UserAdapter.java#L161-L183With this approach, the cases for EMAIL, FIRST_NAME, and LAST_NAME can be removed, and only the else-branch is necessary. I gave it a try with the new SAML test cases, and it works as expected. At the same time [BrokeredIdentityContext](https://github.com/keycloak/keycloak/blob/main/server-spi-private/src/main/java/org/keycloak/broker/provider/BrokeredIdentityContext.java) doesn't implement this logic, and for example the email stored in an attribute might be hidden from those calling getEmail().WDYT?",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11799,873544060,2022-05-16T10:00:07Z,model/jpa/src/main/java/org/keycloak/models/jpa/RoleAdapter.java,"@@ -89,30 +96,88 @@ public void setName(String name) {      @Override     public boolean isComposite() {-        return getCompositesStream().count() > 0;+        TypedQuery<String> query = em.createNamedQuery(""getChildrenRoleIds"", String.class);+        query.setParameter(""roleId"", getId());+        query.setMaxResults(1);+        return !query.getResultList().isEmpty();","When the composite roles have been initialized, using the collection might be faster than triggering another query. Therefore, I suggest to re-use the same pattern `Hibernate.isPropertyInitialized(getEntity(), ""compositeRoles"")` here as well.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11799,873551141,2022-05-16T10:07:43Z,model/jpa/src/main/java/org/keycloak/models/jpa/RoleAdapter.java,"@@ -89,30 +96,88 @@ public void setName(String name) {      @Override     public boolean isComposite() {-        return getCompositesStream().count() > 0;+        TypedQuery<String> query = em.createNamedQuery(""getChildrenRoleIds"", String.class);+        query.setParameter(""roleId"", getId());+        query.setMaxResults(1);+        return !query.getResultList().isEmpty();     }      @Override     public void addCompositeRole(RoleModel role) {+        // Avoid lazy loading the composite role collection if not already done+        // Not using Persistence.getPersistenceUtil().isLoaded(Object, String) as this is not working+        // properly (Hibernate 5.6) - still returning false even after the collection was lazy loaded+        if (Hibernate.isPropertyInitialized(getEntity(), ""compositeRoles"")) {+            addCompositeRoleUsingLoadedCompositeCollection(role);+        }+        else {+            addCompositeRoleWithoutLoadingCompositeCollection(role);+        }","I ran the test `CreateRealms` that uses the Admin-CLI-Token from the keycloak-benchmark project to see if it touches the new code path.When building and remote-debugging the legacy Wildfly distribution, `compositeRoles` was always initialized (that's was unexpected to me). Doing the same for the Quarkus distribution, the code was hitting the other path were the properties weren't initialized (as expected). Given the situation that the legacy distribution runs as before, and the Quarkus distribution is now faster, this would be ok to me. Still it is quite annoying, as when debugging ""as usual"" with the KeycloakServer in test-utils (that is using Undertow), it shows the same effects as the Wildfly this can't be debugged nicely. It seems that whenever the Role is fetched by ID, it doesn't apply any lazy loading.Any thoughts on this?",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/11934,873566213,2022-05-16T10:25:49Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/authorization/policy/entity/JpaPolicyEntity.java,"@@ -0,0 +1,365 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.authorization.policy.entity;++import java.util.Collections;+import java.util.HashSet;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.UUID;+import java.util.stream.Collectors;+import javax.persistence.Basic;+import javax.persistence.CascadeType;+import javax.persistence.CollectionTable;+import javax.persistence.Column;+import javax.persistence.ElementCollection;+import javax.persistence.Entity;+import javax.persistence.FetchType;+import javax.persistence.Id;+import javax.persistence.JoinColumn;+import javax.persistence.OneToMany;+import javax.persistence.Table;+import javax.persistence.UniqueConstraint;+import javax.persistence.Version;+import org.hibernate.annotations.Type;+import org.hibernate.annotations.TypeDef;+import org.hibernate.annotations.TypeDefs;+import org.keycloak.models.map.authorization.entity.MapPolicyEntity.AbstractMapPolicyEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.UuidValidator;+import org.keycloak.models.map.storage.jpa.JpaRootVersionedEntity;+import org.keycloak.models.map.storage.jpa.hibernate.jsonb.JsonbType;++import static org.keycloak.models.map.storage.jpa.Constants.CURRENT_SCHEMA_VERSION_AUTHZ;+import org.keycloak.representations.idm.authorization.DecisionStrategy;+import org.keycloak.representations.idm.authorization.Logic;++/**+ * There are some fields marked by {@code @Column(insertable = false, updatable = false)}.+ * Those fields are automatically generated by database from json field,+ * therefore marked as non-insertable and non-updatable to instruct hibernate.+ */+@Entity+@Table(name = ""kc_authz_policy"", uniqueConstraints = {@UniqueConstraint(columnNames = {""realmId"", ""resourceServerId"", ""name""})})+@TypeDefs({@TypeDef(name = ""jsonb"", typeClass = JsonbType.class)})+public class JpaPolicyEntity extends AbstractMapPolicyEntity implements JpaRootVersionedEntity {++    @Id+    @Column+    private UUID id;++    //used for implicit optimistic locking+    @Version+    @Column+    private int version;++    @Type(type = ""jsonb"")+    @Column(columnDefinition = ""jsonb"")+    private final JpaPolicyMetadata metadata;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private Integer entityVersion;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String realmId;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private UUID resourceServerId;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String name;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String owner;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String type;++    @Column(name = ""scope_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_scope"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> scopeIds = new HashSet<>();++    @Column(name = ""resource_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_resource"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> resourceIds = new HashSet<>();++    @Column(name = ""associated_policy_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_associated_policy"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> policyIds = new HashSet<>();++    @OneToMany(mappedBy = ""root"", cascade = CascadeType.PERSIST, orphanRemoval = true)+    private final Set<JpaPolicyConfigEntity> config = new HashSet<>();++    /**+     * No-argument constructor, used by hibernate to instantiate entities.+     */+    public JpaPolicyEntity() {+        this.metadata = new JpaPolicyMetadata();+    }++    public JpaPolicyEntity(DeepCloner cloner) {+        this.metadata = new JpaPolicyMetadata(cloner);+    }++    /**+     * Used by hibernate when calling cb.construct from read(QueryParameters) method.+     * It is used to select object without metadata(json) field.+     */+    public JpaPolicyEntity(UUID id, int version, Integer entityVersion, String realmId, +            UUID resourceServerId, String name, String owner, String type) {+        this.id = id;+        this.version = version;+        this.entityVersion = entityVersion;+        this.realmId = realmId;+        this.resourceServerId = resourceServerId;+        this.name = name;+        this.owner = owner;+        this.type = type;+        this.metadata = null;+    }++    public boolean isMetadataInitialized() {+        return metadata != null;+    }++    @Override+    public Integer getEntityVersion() {+        if (isMetadataInitialized()) return metadata.getEntityVersion();+        return entityVersion;+    }++    @Override+    public void setEntityVersion(Integer entityVersion) {+        metadata.setEntityVersion(entityVersion);+    }++    @Override+    public Integer getCurrentSchemaVersion() {+        return CURRENT_SCHEMA_VERSION_AUTHZ;+    }++    @Override+    public int getVersion() {+        return version;+    }++    @Override+    public String getId() {+        return id == null ? null : id.toString();+    }++    @Override+    public void setId(String id) {+        String validatedId = UuidValidator.validateAndConvert(id);+        this.id = UUID.fromString(validatedId);+    }++    @Override+    public String getRealmId() {+        if (isMetadataInitialized()) return metadata.getRealmId();+        return realmId;+    }++    @Override+    public void setRealmId(String realmId) {+        metadata.setRealmId(realmId);+    }++    @Override+    public String getResourceServerId() {+        if (isMetadataInitialized()) return metadata.getResourceServerId();+        return resourceServerId == null ? null : resourceServerId.toString();+    }++    @Override+    public void setResourceServerId(String resourceServerId) {+        metadata.setResourceServerId(resourceServerId);+    }++    @Override+    public String getName() {+        if (isMetadataInitialized()) return metadata.getName();+        return name;+    }++    @Override+    public void setName(String name) {+        metadata.setName(name);+    }++    @Override+    public String getType() {+        if (isMetadataInitialized()) return metadata.getType();+        return type;+    }++    @Override+    public void setType(String type) {+        metadata.setType(type);+    }++    @Override+    public String getDescription() {+        return metadata.getDescription();+    }++    @Override+    public void setDescription(String description) {+        metadata.setDescription(description);+    }++    @Override+    public DecisionStrategy getDecisionStrategy() {+        return metadata.getDecisionStrategy();+    }++    @Override+    public void setDecisionStrategy(DecisionStrategy decisionStrategy) {+        metadata.setDecisionStrategy(decisionStrategy);+    }++    @Override+    public Logic getLogic() {+        return metadata.getLogic();+    }++    @Override+    public void setLogic(Logic logic) {+        metadata.setLogic(logic);+    }++    @Override+    public Map<String, String> getConfigs() {+        return Collections.unmodifiableMap(config.stream().collect(Collectors.toMap(JpaPolicyConfigEntity::getName, JpaPolicyConfigEntity::getValue)));+    }++    @Override+    public void setConfigs(Map<String, String> config) {+        this.config.clear();+        if (config == null) return;+        for (Map.Entry<String, String> entry : config.entrySet()) {+            setConfig(entry.getKey(), entry.getValue());+        }+    }++    @Override+    public String getConfig(String name) {+        return config.stream()+                .filter(obj -> Objects.equals(obj.getName(), name))+                .findFirst()+                .map(JpaPolicyConfigEntity::getValue)+                .orElse(null);+    }++    @Override+    public void setConfig(String name, String value) {+        if (name == null || value == null || value.trim().isEmpty()) return;+        JpaPolicyConfigEntity configEntity = new JpaPolicyConfigEntity(this, name, value);+        if (config.contains(configEntity)) config.remove(configEntity);+        config.add(configEntity);+    }++    @Override+    public void removeConfig(String name) {+        config.removeIf(obj -> Objects.equals(obj.getName(), name));+    }++    @Override+    public Set<String> getAssociatedPolicyIds() {+        return policyIds.stream().map(UUID::toString).collect(Collectors.toSet());+    }++    @Override+    public void addAssociatedPolicyId(String policyId) {+        UUID policyUuid = StringKeyConverter.UUIDKey.INSTANCE.fromStringSafe(policyId);+        if (policyUuid != null) policyIds.add(policyUuid);","I agree, we should rather throw an exception here. I'll let to throw the original `IllegalArgumentException` here, wdyt?",x
2195557,davoustp,https://api.github.com/repos/keycloak/keycloak/pulls/11799,873567969,2022-05-16T10:27:58Z,model/jpa/src/main/java/org/keycloak/models/jpa/RoleAdapter.java,"@@ -89,30 +96,88 @@ public void setName(String name) {      @Override     public boolean isComposite() {-        return getCompositesStream().count() > 0;+        TypedQuery<String> query = em.createNamedQuery(""getChildrenRoleIds"", String.class);+        query.setParameter(""roleId"", getId());+        query.setMaxResults(1);+        return !query.getResultList().isEmpty();     }      @Override     public void addCompositeRole(RoleModel role) {+        // Avoid lazy loading the composite role collection if not already done+        // Not using Persistence.getPersistenceUtil().isLoaded(Object, String) as this is not working+        // properly (Hibernate 5.6) - still returning false even after the collection was lazy loaded+        if (Hibernate.isPropertyInitialized(getEntity(), ""compositeRoles"")) {+            addCompositeRoleUsingLoadedCompositeCollection(role);+        }+        else {+            addCompositeRoleWithoutLoadingCompositeCollection(role);+        }","> When building and remote-debugging the legacy Wildfly distribution, compositeRoles was always initialized.Doing the same for the Quarkus distribution, the code was hitting the other path were the properties weren't initialized correctly.Exactly, this is what I mentioned above - this was the reason why tests were failing with Quarkus while still running fine with Undertow and Wildfly. It took me a while to figure this out: Hibernate lazy-loading behavior is different with Quarkus than with Wildfly/Undertow.And this is not a Hibernate version difference (upgrading Hibernate to match Quarkus' gives to the same results).Hibernate behavior with Quarkus is the most optimal one - meaning lazy loading properly working.> Given the situation that the legacy distribution runs as before, and the Quarkus distribution is now faster, this would be ok to me.I agree, but I'm annoyed having the same code base providing two different behaviors depending on the container it's deployed in...> Still it is quite annoying, as when debugging ""as usual"" with the KeycloakServer in test-utils (that is using Undertow), it shows the same effects as the Wildfly this can't be debugged nicely. It seems that whenever the Role is fetched by ID, it doesn't apply any lazy loading.Why thoughts on this?Well not really, apart that I suspect a difference in Hibernate settings or in bytecode augmentation (this one is for sure because of Quarkus), but I did not dig into this deeper.To investigate this, I would start from main again, add only the `Hibernate.isPropertyInitialized(getEntity(), ""compositeRoles"")` line (log + a boolean) to check whether this is related to this PR (but I doubt it - I think this is an older problem).",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11934,873568808,2022-05-16T10:29:01Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/authorization/policy/entity/JpaPolicyEntity.java,"@@ -0,0 +1,365 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.authorization.policy.entity;++import java.util.Collections;+import java.util.HashSet;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.UUID;+import java.util.stream.Collectors;+import javax.persistence.Basic;+import javax.persistence.CascadeType;+import javax.persistence.CollectionTable;+import javax.persistence.Column;+import javax.persistence.ElementCollection;+import javax.persistence.Entity;+import javax.persistence.FetchType;+import javax.persistence.Id;+import javax.persistence.JoinColumn;+import javax.persistence.OneToMany;+import javax.persistence.Table;+import javax.persistence.UniqueConstraint;+import javax.persistence.Version;+import org.hibernate.annotations.Type;+import org.hibernate.annotations.TypeDef;+import org.hibernate.annotations.TypeDefs;+import org.keycloak.models.map.authorization.entity.MapPolicyEntity.AbstractMapPolicyEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.UuidValidator;+import org.keycloak.models.map.storage.jpa.JpaRootVersionedEntity;+import org.keycloak.models.map.storage.jpa.hibernate.jsonb.JsonbType;++import static org.keycloak.models.map.storage.jpa.Constants.CURRENT_SCHEMA_VERSION_AUTHZ;+import org.keycloak.representations.idm.authorization.DecisionStrategy;+import org.keycloak.representations.idm.authorization.Logic;++/**+ * There are some fields marked by {@code @Column(insertable = false, updatable = false)}.+ * Those fields are automatically generated by database from json field,+ * therefore marked as non-insertable and non-updatable to instruct hibernate.+ */+@Entity+@Table(name = ""kc_authz_policy"", uniqueConstraints = {@UniqueConstraint(columnNames = {""realmId"", ""resourceServerId"", ""name""})})+@TypeDefs({@TypeDef(name = ""jsonb"", typeClass = JsonbType.class)})+public class JpaPolicyEntity extends AbstractMapPolicyEntity implements JpaRootVersionedEntity {++    @Id+    @Column+    private UUID id;++    //used for implicit optimistic locking+    @Version+    @Column+    private int version;++    @Type(type = ""jsonb"")+    @Column(columnDefinition = ""jsonb"")+    private final JpaPolicyMetadata metadata;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private Integer entityVersion;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String realmId;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private UUID resourceServerId;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String name;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String owner;++    @Column(insertable = false, updatable = false)+    @Basic(fetch = FetchType.LAZY)+    private String type;++    @Column(name = ""scope_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_scope"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> scopeIds = new HashSet<>();++    @Column(name = ""resource_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_resource"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> resourceIds = new HashSet<>();++    @Column(name = ""associated_policy_id"")+    @ElementCollection+    @CollectionTable(name = ""kc_authz_policy_associated_policy"", joinColumns = @JoinColumn(name = ""policy_id"", nullable = false))+    private final Set<UUID> policyIds = new HashSet<>();++    @OneToMany(mappedBy = ""root"", cascade = CascadeType.PERSIST, orphanRemoval = true)+    private final Set<JpaPolicyConfigEntity> config = new HashSet<>();++    /**+     * No-argument constructor, used by hibernate to instantiate entities.+     */+    public JpaPolicyEntity() {+        this.metadata = new JpaPolicyMetadata();+    }++    public JpaPolicyEntity(DeepCloner cloner) {+        this.metadata = new JpaPolicyMetadata(cloner);+    }++    /**+     * Used by hibernate when calling cb.construct from read(QueryParameters) method.+     * It is used to select object without metadata(json) field.+     */+    public JpaPolicyEntity(UUID id, int version, Integer entityVersion, String realmId, +            UUID resourceServerId, String name, String owner, String type) {+        this.id = id;+        this.version = version;+        this.entityVersion = entityVersion;+        this.realmId = realmId;+        this.resourceServerId = resourceServerId;+        this.name = name;+        this.owner = owner;+        this.type = type;+        this.metadata = null;+    }++    public boolean isMetadataInitialized() {+        return metadata != null;+    }++    @Override+    public Integer getEntityVersion() {+        if (isMetadataInitialized()) return metadata.getEntityVersion();+        return entityVersion;+    }++    @Override+    public void setEntityVersion(Integer entityVersion) {+        metadata.setEntityVersion(entityVersion);+    }++    @Override+    public Integer getCurrentSchemaVersion() {+        return CURRENT_SCHEMA_VERSION_AUTHZ;+    }++    @Override+    public int getVersion() {+        return version;+    }++    @Override+    public String getId() {+        return id == null ? null : id.toString();+    }++    @Override+    public void setId(String id) {+        String validatedId = UuidValidator.validateAndConvert(id);+        this.id = UUID.fromString(validatedId);+    }++    @Override+    public String getRealmId() {+        if (isMetadataInitialized()) return metadata.getRealmId();+        return realmId;+    }++    @Override+    public void setRealmId(String realmId) {+        metadata.setRealmId(realmId);+    }++    @Override+    public String getResourceServerId() {+        if (isMetadataInitialized()) return metadata.getResourceServerId();+        return resourceServerId == null ? null : resourceServerId.toString();+    }++    @Override+    public void setResourceServerId(String resourceServerId) {+        metadata.setResourceServerId(resourceServerId);+    }++    @Override+    public String getName() {+        if (isMetadataInitialized()) return metadata.getName();+        return name;+    }++    @Override+    public void setName(String name) {+        metadata.setName(name);+    }++    @Override+    public String getType() {+        if (isMetadataInitialized()) return metadata.getType();+        return type;+    }++    @Override+    public void setType(String type) {+        metadata.setType(type);+    }++    @Override+    public String getDescription() {+        return metadata.getDescription();+    }++    @Override+    public void setDescription(String description) {+        metadata.setDescription(description);+    }++    @Override+    public DecisionStrategy getDecisionStrategy() {+        return metadata.getDecisionStrategy();+    }++    @Override+    public void setDecisionStrategy(DecisionStrategy decisionStrategy) {+        metadata.setDecisionStrategy(decisionStrategy);+    }++    @Override+    public Logic getLogic() {+        return metadata.getLogic();+    }++    @Override+    public void setLogic(Logic logic) {+        metadata.setLogic(logic);+    }++    @Override+    public Map<String, String> getConfigs() {+        return Collections.unmodifiableMap(config.stream().collect(Collectors.toMap(JpaPolicyConfigEntity::getName, JpaPolicyConfigEntity::getValue)));+    }++    @Override+    public void setConfigs(Map<String, String> config) {+        this.config.clear();+        if (config == null) return;+        for (Map.Entry<String, String> entry : config.entrySet()) {+            setConfig(entry.getKey(), entry.getValue());+        }+    }++    @Override+    public String getConfig(String name) {+        return config.stream()+                .filter(obj -> Objects.equals(obj.getName(), name))+                .findFirst()+                .map(JpaPolicyConfigEntity::getValue)+                .orElse(null);+    }++    @Override+    public void setConfig(String name, String value) {+        if (name == null || value == null || value.trim().isEmpty()) return;+        JpaPolicyConfigEntity configEntity = new JpaPolicyConfigEntity(this, name, value);+        if (config.contains(configEntity)) config.remove(configEntity);+        config.add(configEntity);+    }++    @Override+    public void removeConfig(String name) {+        config.removeIf(obj -> Objects.equals(obj.getName(), name));+    }++    @Override+    public Set<String> getAssociatedPolicyIds() {+        return policyIds.stream().map(UUID::toString).collect(Collectors.toSet());+    }++    @Override+    public void addAssociatedPolicyId(String policyId) {+        UUID policyUuid = StringKeyConverter.UUIDKey.INSTANCE.fromStringSafe(policyId);+        if (policyUuid != null) policyIds.add(policyUuid);",@vramik: +1 for the exception.,
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12021,873970087,2022-05-16T17:11:14Z,operator/src/test/java/org/keycloak/operator/KeycloakDeploymentE2EIT.java,"@@ -222,7 +222,7 @@ public void testHostnameStrict() {                         var curlOutput = K8sUtils.inClusterCurl(k8sclient, namespace, ""-s"", ""--insecure"", ""-H"", ""Host: foo.bar"", url);                         Log.info(""Curl Output: "" + curlOutput); -                        assertTrue(curlOutput.contains(""var authServerUrl = 'https://example.com:8443';""));+                        assertTrue(curlOutput.contains(""var authServerUrl = 'https://example.com';""));","Those changes are pretty much counter-intuitive since we are explicitly accessing Keycloak using the specific port:https://github.com/keycloak/keycloak/blob/9ef3c289290b96d8e5cc7d7651296ba535b223a4/operator/src/test/java/org/keycloak/operator/KeycloakDeploymentE2EIT.java#L219This is caused by the fact that we are now setting `proxy: edge` and it means that we have to choose one of (but not the two): - make it work through the `Ingress` - make it work through straight port-forward  Here we are biased toward access through the `Ingress` but this has drawbacks, especially for `local` and `developer` setups.  cc. @pedroigor @DGuhr ",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874115598,2022-05-16T20:10:53Z,dist-config/pom.xml,"@@ -0,0 +1,43 @@+<?xml version=""1.0""?>+<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../pom.xml</relativePath>+    </parent>+    <modelVersion>4.0.0</modelVersion>++    <artifactId>keycloak-dist-config</artifactId>","Names are hard ... I don't like `keycloak-dist-config` very much because the module is actually providing an API for the server configuration. Also, it is not only related to dist but handling the configuration for web site and operator.I don't have many options but perhaps something like `keycloak-config-api` or something else similar?",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874117428,2022-05-16T20:13:21Z,dist-config/src/main/java/org/keycloak/config/HttpOptions.java,"@@ -0,0 +1,21 @@+package org.keycloak.config;++import java.util.ArrayList;+import java.util.HashSet;+import java.util.List;++public class HttpOptions {","If I got it right, this is an example of how options should be defined so that we don't duplicate the metadata we currently have within the `runtime` module of the server extension. Is that correct?",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874124697,2022-05-16T20:23:22Z,docs/maven-plugin/src/main/java/org/keycloak/guides/maven/Options.java,"@@ -5,25 +5,22 @@ import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;",Can't we replace this class and `Option` now we have similar types in from the new module?,x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874490004,2022-05-17T07:56:39Z,docs/maven-plugin/src/main/java/org/keycloak/guides/maven/Options.java,"@@ -5,25 +5,22 @@ import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;","We can replace some of this, unfortunately, looks like `SPI`s configuration is still not covered:https://github.com/keycloak/keycloak/blob/3ff3aeba29bc4d66d30a7d6243db8ca42ccaf3fa/docs/maven-plugin/src/main/java/org/keycloak/guides/maven/Options.java#L44-L64In this PR I took out the docs bit to be able to perform the change incrementally (i.e. with subsequent non-breaking PRs)E.g. the `docs` sub-module will rely on the new configuration only after we move all the configuration keys to the new encoding.",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874495924,2022-05-17T08:01:28Z,dist-config/pom.xml,"@@ -0,0 +1,43 @@+<?xml version=""1.0""?>+<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../pom.xml</relativePath>+    </parent>+    <modelVersion>4.0.0</modelVersion>++    <artifactId>keycloak-dist-config</artifactId>","I don't have strong opinions, but changing this requires longish re-indexing by the IDEs, @vmuzikar would you mind chipping in and agreeing on a naming?I will change it without any issue!",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11822,874544946,2022-05-17T08:47:27Z,server-spi-private/src/main/java/org/keycloak/events/admin/AdminEvent.java,"@@ -17,11 +17,27 @@  package org.keycloak.events.admin; +import org.keycloak.storage.SearchableModelField;+ /**  * @author <a href=""mailto:sthorger@redhat.com"">Stian Thorgersen</a>  */ public class AdminEvent { +    public static class SearchableFields {+        public static final SearchableModelField<AdminEvent> ID              = new SearchableModelField<>(""id"", String.class);+        public static final SearchableModelField<AdminEvent> REALM_ID        = new SearchableModelField<>(""realmId"", String.class);+        public static final SearchableModelField<AdminEvent> TIME            = new SearchableModelField<>(""time"", String.class);+        public static final SearchableModelField<AdminEvent> EXPIRATION      = new SearchableModelField<>(""expiration"", String.class);","```suggestion        public static final SearchableModelField<AdminEvent> EXPIRATION      = new SearchableModelField<>(""expiration"", Long.class);```",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11806,874574229,2022-05-17T09:15:24Z,quarkus/maven-plugin/pom.xml,"@@ -0,0 +1,62 @@++<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-docs-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../../operator/pom.xml</relativePath>+    </parent>++    <modelVersion>4.0.0</modelVersion>++    <name>Keycloak Operator Maven Plugin</name>+    <artifactId>keycloak-operator-maven-plugin</artifactId>+    <description>Keycloak Operator Maven Plugin</description>+    <packaging>maven-plugin</packaging>++    <dependencies>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-plugin-api</artifactId>+            <version>3.6.3</version>+        </dependency>+        <dependency>+            <groupId>org.apache.maven.plugin-tools</groupId>+            <artifactId>maven-plugin-annotations</artifactId>+            <version>3.6.0</version>+            <scope>provided</scope>+        </dependency>+        <dependency>+            <groupId>org.apache.maven</groupId>+            <artifactId>maven-project</artifactId>+            <version>2.2.1</version>+        </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-quarkus-server</artifactId>+        </dependency>+        <dependency>+            <groupId>com.github.javaparser</groupId>+            <artifactId>javaparser-core</artifactId>","Any new dependency has to be productized before being merged. The higher the number of (direct or indirect) dependencies, the higher cost due to maintenance of CVE fixes.Can you provide the list of all the dependencies brought in via this dependency?",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874577395,2022-05-17T09:18:23Z,pom.xml,"@@ -1606,6 +1614,16 @@                 <artifactId>commons-io</artifactId>                 <version>${commons-io.version}</version>             </dependency>+            <dependency>+                <groupId>org.apache.commons</groupId>+                <artifactId>commons-text</artifactId>+                <version>${commons-text.version}</version>+            </dependency>+            <dependency>+                <groupId>com.github.javaparser</groupId>+                <artifactId>javaparser-core</artifactId>+                <version>${javaparser.version}</version>+            </dependency>","Any new dependency has to be productized before being merged. The higher the number of (direct or indirect) dependencies, the higher cost due to maintenance of CVE fixes.Can you provide the list of all the dependencies brought in via this dependency?----For the reference, link to the previous discussion: https://github.com/keycloak/keycloak/pull/11806/files/0a3f7a57b23af4e605d17dec8206c726529336d7#diff-ff141e665c6e337f689690d7372e2f412975ca68332ddeaae08d0425cc0cfa83",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874589556,2022-05-17T09:30:10Z,pom.xml,"@@ -1606,6 +1614,16 @@                 <artifactId>commons-io</artifactId>                 <version>${commons-io.version}</version>             </dependency>+            <dependency>+                <groupId>org.apache.commons</groupId>+                <artifactId>commons-text</artifactId>+                <version>${commons-text.version}</version>+            </dependency>+            <dependency>+                <groupId>com.github.javaparser</groupId>+                <artifactId>javaparser-core</artifactId>+                <version>${javaparser.version}</version>+            </dependency>","Thanks for weighing in @hmlnarik !`javaparser-core` is self-contained and doesn't have transitive dependencies:https://mvnrepository.com/artifact/com.github.javaparser/javaparser-core/3.24.2We are, anyhow, using it in the operator, transitively brought by `sundrio` wich is [directly used](https://github.com/keycloak/keycloak/blob/3ff3aeba29bc4d66d30a7d6243db8ca42ccaf3fa/operator/src/main/java/org/keycloak/operator/v2alpha1/crds/Keycloak.java#L33) and [in-directly used](https://github.com/keycloak/keycloak/blob/3ff3aeba29bc4d66d30a7d6243db8ca42ccaf3fa/operator/pom.xml#L58-L67):https://github.com/sundrio/sundrio/blob/72cb33cebe426152fa863b4623884e8760de372d/pom.xml#L212-L216If I understand the process correctly we would need to productize it anyhow. Would you mind helping to understand the next steps? 🙏 ",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874602688,2022-05-17T09:42:37Z,pom.xml,"@@ -1606,6 +1614,16 @@                 <artifactId>commons-io</artifactId>                 <version>${commons-io.version}</version>             </dependency>+            <dependency>+                <groupId>org.apache.commons</groupId>+                <artifactId>commons-text</artifactId>+                <version>${commons-text.version}</version>+            </dependency>+            <dependency>+                <groupId>com.github.javaparser</groupId>+                <artifactId>javaparser-core</artifactId>+                <version>${javaparser.version}</version>+            </dependency>","> `javaparser-core` is self-contained and doesn't have transitive dependencies:Sadly that is not true, there are number of custom plugins: https://repo1.maven.org/maven2/com/github/javaparser/javaparser-core/3.24.2/javaparser-core-3.24.2.pomAll of them need to be productized, and any CVE in them watched for.> We are, anyhow, using it in the operator, transitively brought by `sundrio` wich is [directly used](https://github.com/keycloak/keycloak/blob/3ff3aeba29bc4d66d30a7d6243db8ca42ccaf3fa/operator/src/main/java/org/keycloak/operator/v2alpha1/crds/Keycloak.java#L33) and [in-directly used](https://github.com/keycloak/keycloak/blob/3ff3aeba29bc4d66d30a7d6243db8ca42ccaf3fa/operator/pom.xml#L58-L67):Good catch. Who is now responsible for maintaining it?Cc: @stianst @mposolda @pedroigor",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874610865,2022-05-17T09:50:39Z,pom.xml,"@@ -1606,6 +1614,16 @@                 <artifactId>commons-io</artifactId>                 <version>${commons-io.version}</version>             </dependency>+            <dependency>+                <groupId>org.apache.commons</groupId>+                <artifactId>commons-text</artifactId>+                <version>${commons-text.version}</version>+            </dependency>+            <dependency>+                <groupId>com.github.javaparser</groupId>+                <artifactId>javaparser-core</artifactId>+                <version>${javaparser.version}</version>+            </dependency>",The principal maintainer is @iocanel and I assume that someone is going to eventually productize it along with the Quarkus Operator SDK (which relies on it). cc. @metacosm,
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11929,874619650,2022-05-17T09:59:08Z,pom.xml,"@@ -1606,6 +1614,16 @@                 <artifactId>commons-io</artifactId>                 <version>${commons-io.version}</version>             </dependency>+            <dependency>+                <groupId>org.apache.commons</groupId>+                <artifactId>commons-text</artifactId>+                <version>${commons-text.version}</version>+            </dependency>+            <dependency>+                <groupId>com.github.javaparser</groupId>+                <artifactId>javaparser-core</artifactId>+                <version>${javaparser.version}</version>+            </dependency>",An additional consideration is that `javaparser-core` is used in a core component of Quarkus:https://github.com/quarkusio/quarkus/blob/748e13113ff0f57fdfa6de669eecb5f44116a2a6/core/processor/pom.xml#L27,
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/12050,874753848,2022-05-17T12:32:28Z,themes/src/main/resources/theme/keycloak.v2/account/src/app/content/device-activity-page/DeviceActivityPage.tsx,"@@ -261,14 +261,14 @@ export class DeviceActivityPage extends React.Component<DeviceActivityPageProps,                           <React.Fragment key={'device-' + deviceIndex + '-session-' + sessionIndex}>                             <DataListItemRow>                               <DataListContent aria-label=""device-sessions-content"" isHidden={false} className=""pf-u-flex-grow-1"">-                                <Grid className=""signed-in-device-grid"" hasGutter>+                                <Grid id={session.id} className=""signed-in-device-grid"" hasGutter>","@ssilvert @mposolda I'm not sure whether the full session ID can be included here due to some security risks? Are there any? The session ID is visible in some REST calls as a Path parameter, so the attacker can eavesdrop the session ID anyway. However, I don't think it's a security issue. I just need to have it verified. Thanks",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12066,875831243,2022-05-18T12:27:49Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509DirectGrantTest.java,"@@ -264,6 +267,8 @@ public void loginCertificateNotExpired() throws Exception {      @Test     public void loginCertificateExpired() throws Exception {+        Assume.assumeFalse(""Time offset is causing integer overflow. With the old store it works, because root authentication session has also timestamp overflown, this is not true for the new store so the test is failing."", keycloakUsingProviderWithId(AuthenticationSessionProvider.class, ""map""));+         X509AuthenticatorConfigModel config =                 new X509AuthenticatorConfigModel()                     .setCertValidationEnabled(true)","This is one of the things why I sent this just as a draft. Maybe I am missing something but it seems to enable this test we would need to make `Time.currentTime()` return long instead of int, which would require a lot of changes. That is why I decided to ignore this test for now and based on the discussion we have here, we will decide how to approach this.To give you more details on why this is passing before my PR:1. The test is moving in time 50 years to the future (after the year 2038 when integer timestamp overflows)2. [This](https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/managers/ClientSessionCode.java#L176) is the line where all of the magic happens :laughing:. `Time.currentTime()`  returns negative number. However, also timestamp is a negative number because we use `int` [here](https://github.com/keycloak/keycloak/blob/main/model/map/src/main/java/org/keycloak/models/map/authSession/MapRootAuthenticationSessionProvider.java#L102) (Not sure it is exactly the place, anyway it is one of the places where I changed `int` -> `long` in this PR).3. Given this ^ the condition `lifespan > Time.currentTime() - timestamp` passes and the test works as expected. After my changes in this PR `timestamp` started to be positive number which breaks the condition.That is why I think the only solution is to create some follow-up issue that would change `Time.currentTime` to long to make this test pass with the new store.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12083,876234210,2022-05-18T18:46:15Z,model/map/src/main/java/org/keycloak/models/map/group/MapGroupAdapter.java,"@@ -101,8 +102,8 @@ public String getParentId() {      @Override     public Stream<GroupModel> getSubGroupsStream() {-        return session.groups().getGroupsStream(realm)-                .filter(groupModel -> getId().equals(groupModel.getParentId()));+        // TODO: make this a proper interface on GroupProvider+        return ((MapGroupProvider) session.getProvider(GroupProvider.class)).getGroupsByParentId(realm, this.getId());","We need to think of other approach due to following constraints:- System-wide group provider might not be a map provider originating this group.Do you recall the trick with anonymous adapter below? Perhaps would be useful in here.https://github.com/keycloak/keycloak/blob/44cd6cd5fb6811853405e9ba3b6d1624dc280f2e/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java#L61-L66Something like this in the `MapGroupProvider`:```java    private Function<MapGroupEntity, GroupModel> entityToAdapterFunc(RealmModel realm) {        // Clone entity before returning back, to avoid giving away a reference to the live object to the caller        return origEntity -> new MapGroupAdapter(session, realm, origEntity) {            public Stream<GroupModel> getSubGroupsStream() {                return getGroupsByParentId(realm, this.getId());            }        };    }```",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12083,876695290,2022-05-19T07:21:25Z,model/map/src/main/java/org/keycloak/models/map/group/MapGroupAdapter.java,"@@ -101,8 +102,8 @@ public String getParentId() {      @Override     public Stream<GroupModel> getSubGroupsStream() {-        return session.groups().getGroupsStream(realm)-                .filter(groupModel -> getId().equals(groupModel.getParentId()));+        // TODO: make this a proper interface on GroupProvider+        return ((MapGroupProvider) session.getProvider(GroupProvider.class)).getGroupsByParentId(realm, this.getId());","Any group provider. We cannot anticipate all the future uses.Taking an example from current state - today there is `RealmCacheSession` and `JpaRealmProvider` implementing group provider. Could a `GroupAdapter`s originating from `JpaRealmProvider` rely on the fact that its originator is `session.groups()`?Still in this case, we need to redirect the call to `getSubGroupsStream()` to the same provider's `getGroupsByParentId` - and the only way I can see at this moment is to override it in the anonymous class created in the provider itself.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12083,876788853,2022-05-19T08:46:39Z,model/map/src/main/java/org/keycloak/models/map/group/MapGroupAdapter.java,"@@ -101,8 +102,8 @@ public String getParentId() {      @Override     public Stream<GroupModel> getSubGroupsStream() {-        return session.groups().getGroupsStream(realm)-                .filter(groupModel -> getId().equals(groupModel.getParentId()));+        // TODO: make this a proper interface on GroupProvider+        return ((MapGroupProvider) session.getProvider(GroupProvider.class)).getGroupsByParentId(realm, this.getId());","Given other implementations of `GroupProvider` running alongside `MapGroupProvider`, are we sure that only `MapGroupProvider` originating this entity contains its children? If we count on this scenario in the future, shouldn't we use `session.groups()` everywhere rather than searching only within `MapGroupProvider`? ",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11929,876798032,2022-05-19T08:55:33Z,dist-config/pom.xml,"@@ -0,0 +1,43 @@+<?xml version=""1.0""?>+<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../pom.xml</relativePath>+    </parent>+    <modelVersion>4.0.0</modelVersion>++    <artifactId>keycloak-dist-config</artifactId>","I also agree names are one of the two hard problems in software development. 😄  That said: I'd also vouch for keycloak-config-api :) blurry enough to be extendable, and descriptive enough to lead ppl the right way. Downside I see on ""dist-config"": What when we want to put things that are not really ""dist"" related there? I am not sure if we should, but imo the `keycloak-config-api` naming would not introduce a regression and re-indexing that you mentioned later on when we think it is actually a good idea. ",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11929,876798732,2022-05-19T08:56:12Z,dist-config/pom.xml,"@@ -0,0 +1,41 @@+<?xml version=""1.0""?>+<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>keycloak-parent</artifactId>+        <groupId>org.keycloak</groupId>+        <version>999-SNAPSHOT</version>+        <relativePath>../pom.xml</relativePath>+    </parent>+    <modelVersion>4.0.0</modelVersion>++    <artifactId>keycloak-dist-config</artifactId>+    <name>Keycloak Distribution Configuration</name>",_if_ we change the artifactId (see discussion above) this should also be changed to reflect the naming.,x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11929,876835027,2022-05-19T09:30:50Z,operator/maven-plugin/src/main/java/org/keycloak/operator/maven/ServerConfigGen.java,"@@ -0,0 +1,67 @@+package org.keycloak.operator.maven;++import com.github.javaparser.ast.CompilationUnit;+import com.github.javaparser.ast.Modifier;+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;+import com.github.javaparser.ast.body.FieldDeclaration;+import com.github.javaparser.ast.expr.StringLiteralExpr;+import com.github.javaparser.utils.StringEscapeUtils;+import org.apache.commons.text.CaseUtils;+import org.apache.maven.plugin.logging.Log;+import org.keycloak.config.AllOptions;+import org.keycloak.config.Option;++import java.io.File;+import java.io.FileWriter;+import java.io.IOException;+import java.io.PrintWriter;+import java.nio.file.Path;+import java.nio.file.Paths;+import java.util.Arrays;+import java.util.stream.Collectors;++public class ServerConfigGen {++    public static final String ANNOTATION_JSON_PROPERTY = ""com.fasterxml.jackson.annotation.JsonProperty"";+    public static final String ANNOTATION_JSON_PROPERTY_DESCRIPTION = ""com.fasterxml.jackson.annotation.JsonPropertyDescription"";++    public void generate(Log log, File destination) {+        String className = ""ServerConfig"";+        String[] packageName = new String[]{""org"", ""keycloak"", ""operator"", ""codegen"", ""configuration""};+        CompilationUnit cu = new CompilationUnit();+        cu.setPackageDeclaration(Arrays.stream(packageName).collect(Collectors.joining(""."")));++        ClassOrInterfaceDeclaration serverConfig = cu.addClass(className);++        Path dest = Paths.get(destination.getAbsolutePath(), packageName);+        dest.toFile().mkdirs();++        AllOptions.ALL_OPTIONS.forEach(o -> {+            if (o.getSupportedRuntimes().contains(Option.Runtime.OPERATOR)) {+                String fieldName = CaseUtils.toCamelCase(o.getKey(), false, '-');","do we really need to add the commons.text library when all we use is ""toCamelCase"" in this one place? I know, not reinventing the wheel, but looking at https://commons.apache.org/proper/commons-text/dependencies.html it can do a lot more and also has some transitive dependencies etc., so for this case I would vouch to implement this slightly trivial method ourselves and remove the dependency. But perhaps I am missing another point where it is used? Not exactly hard on that, and don't want to open up the productization discussion again, just saying if this is the only place it is used we should not introduce a dependency for this, as it is trivial to implement, most likely never changes and as such easy to maintain.",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11929,876898556,2022-05-19T10:39:20Z,operator/maven-plugin/src/main/java/org/keycloak/operator/maven/ServerConfigGen.java,"@@ -0,0 +1,67 @@+package org.keycloak.operator.maven;++import com.github.javaparser.ast.CompilationUnit;+import com.github.javaparser.ast.Modifier;+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;+import com.github.javaparser.ast.body.FieldDeclaration;+import com.github.javaparser.ast.expr.StringLiteralExpr;+import com.github.javaparser.utils.StringEscapeUtils;+import org.apache.commons.text.CaseUtils;+import org.apache.maven.plugin.logging.Log;+import org.keycloak.config.AllOptions;+import org.keycloak.config.Option;++import java.io.File;+import java.io.FileWriter;+import java.io.IOException;+import java.io.PrintWriter;+import java.nio.file.Path;+import java.nio.file.Paths;+import java.util.Arrays;+import java.util.stream.Collectors;++public class ServerConfigGen {++    public static final String ANNOTATION_JSON_PROPERTY = ""com.fasterxml.jackson.annotation.JsonProperty"";+    public static final String ANNOTATION_JSON_PROPERTY_DESCRIPTION = ""com.fasterxml.jackson.annotation.JsonPropertyDescription"";++    public void generate(Log log, File destination) {+        String className = ""ServerConfig"";+        String[] packageName = new String[]{""org"", ""keycloak"", ""operator"", ""codegen"", ""configuration""};+        CompilationUnit cu = new CompilationUnit();+        cu.setPackageDeclaration(Arrays.stream(packageName).collect(Collectors.joining(""."")));++        ClassOrInterfaceDeclaration serverConfig = cu.addClass(className);++        Path dest = Paths.get(destination.getAbsolutePath(), packageName);+        dest.toFile().mkdirs();++        AllOptions.ALL_OPTIONS.forEach(o -> {+            if (o.getSupportedRuntimes().contains(Option.Runtime.OPERATOR)) {+                String fieldName = CaseUtils.toCamelCase(o.getKey(), false, '-');",i'm totally for being lazy in 99.9% of cases. this is the 0.1% I am not ;),
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11929,877201400,2022-05-19T15:18:43Z,operator/maven-plugin/src/main/java/org/keycloak/operator/maven/ServerConfigGen.java,"@@ -0,0 +1,67 @@+package org.keycloak.operator.maven;++import com.github.javaparser.ast.CompilationUnit;+import com.github.javaparser.ast.Modifier;+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;+import com.github.javaparser.ast.body.FieldDeclaration;+import com.github.javaparser.ast.expr.StringLiteralExpr;+import com.github.javaparser.utils.StringEscapeUtils;+import org.apache.commons.text.CaseUtils;+import org.apache.maven.plugin.logging.Log;+import org.keycloak.config.AllOptions;+import org.keycloak.config.Option;++import java.io.File;+import java.io.FileWriter;+import java.io.IOException;+import java.io.PrintWriter;+import java.nio.file.Path;+import java.nio.file.Paths;+import java.util.Arrays;+import java.util.stream.Collectors;++public class ServerConfigGen {++    public static final String ANNOTATION_JSON_PROPERTY = ""com.fasterxml.jackson.annotation.JsonProperty"";+    public static final String ANNOTATION_JSON_PROPERTY_DESCRIPTION = ""com.fasterxml.jackson.annotation.JsonPropertyDescription"";++    public void generate(Log log, File destination) {+        String className = ""ServerConfig"";+        String[] packageName = new String[]{""org"", ""keycloak"", ""operator"", ""codegen"", ""configuration""};+        CompilationUnit cu = new CompilationUnit();+        cu.setPackageDeclaration(Arrays.stream(packageName).collect(Collectors.joining(""."")));++        ClassOrInterfaceDeclaration serverConfig = cu.addClass(className);++        Path dest = Paths.get(destination.getAbsolutePath(), packageName);+        dest.toFile().mkdirs();++        AllOptions.ALL_OPTIONS.forEach(o -> {+            if (o.getSupportedRuntimes().contains(Option.Runtime.OPERATOR)) {+                String fieldName = CaseUtils.toCamelCase(o.getKey(), false, '-');",I'm with @DGuhr on this one. We're introducing a new dependency (with many transitive dependencies) that would have to be productized just for one specific use case.I'd maybe suggest to try to check if we already don't have a dependency that would provide such a basic feature as CamelCase conversion.,x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/11929,879155400,2022-05-23T08:21:52Z,pom.xml,"@@ -129,10 +129,12 @@         <commons-lang.version>2.6</commons-lang.version>         <commons-lang3.version>3.11</commons-lang3.version>         <commons-io.version>2.7</commons-io.version>+        <commons-text.version>1.9</commons-text.version>         <apacheds.version>2.0.0.AM26</apacheds.version>         <apacheds.codec.version>2.0.0</apacheds.codec.version>         <google.zxing.version>3.4.0</google.zxing.version>         <freemarker.version>2.3.31</freemarker.version>+        <javaparser.version>3.24.2</javaparser.version>",it's not directly coming. i.e. not a transitive dependency.,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11929,879251158,2022-05-23T09:49:21Z,dist-config/src/main/java/org/keycloak/config/Option.java,"@@ -0,0 +1,75 @@+package org.keycloak.config;++import java.util.Collections;+import java.util.HashSet;+import java.util.List;+import java.util.Optional;+import java.util.Set;+import java.util.stream.Collectors;+import java.util.stream.StreamSupport;++public class Option<T> {++    public enum Runtime {+        QUARKUS,+        DOCS,+        OPERATOR;++        public static Set<Runtime> getAll() {+            Set runtimes = new HashSet<>();+            runtimes.add(QUARKUS);+            runtimes.add(DOCS);+            runtimes.add(OPERATOR);+            return runtimes;+        }+    }++    private final Class<T> type;+    private final String key;+    private final OptionCategory category;+    private final Set<Runtime> supportedRuntimes;+    private final boolean build;+    private final String description;+    private final Optional<T> defaultValue;","I see. I assume you are referring to this: https://github.com/keycloak/keycloak/pull/11929#discussion_r874437889 (CC @DGuhr).I'm not fussy on it, we could leave it as is. Just from my PoV the point in the mentioned article:> The class is definitively not intended for use as a propertyas well as a note in the [official docs](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Optional.html):> Optional is primarily intended for use as a method return type where there is a clear need to represent ""no result,""are clear to me that it should not be used as field types.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11929,879254856,2022-05-23T09:52:03Z,dist-config/src/main/java/org/keycloak/config/OptionBuilder.java,"@@ -0,0 +1,84 @@+package org.keycloak.config;++import java.util.ArrayList;+import java.util.HashSet;+import java.util.List;+import java.util.Optional;+import java.util.Set;++public class OptionBuilder<T> {+    private Class<T> type;+    private String key;+    private OptionCategory category;+    private Set<Option.Runtime> supportedRuntimes;+    private boolean build;+    private String description;+    private Optional<T> defaultValue;+    private List<T> expectedValues;++    public OptionBuilder(String key) {+        type = (Class<T>) String.class;","I'd suggest to make it a mandatory constructor argument. Something like:```javapublic OptionBuilder(String key, Class<T> classType) {```This is really to avoid warnings about unsafe casting.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/11739,879324748,2022-05-23T11:06:10Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/SingleUseObjectModelCriteriaBuilder.java,"@@ -0,0 +1,81 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.chm;++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.storage.SearchableModelField;++import java.util.Map;+import java.util.function.Predicate;++/**+ * @author <a href=""mailto:mkanis@redhat.com"">Martin Kanis</a>+ */+public class SingleUseObjectModelCriteriaBuilder<K, V extends AbstractEntity, M> extends MapModelCriteriaBuilder<K, V, M> {++    private String userId;++    private String actionId;++    private String actionVerificationNonce;++    StringKeyConverter<K> keyConverter;++    Map<SearchableModelField<? super M>, UpdatePredicatesFunc<K, V, M>> fieldPredicates;++    public SingleUseObjectModelCriteriaBuilder(StringKeyConverter<K> keyConverter,+                                               Map<SearchableModelField<? super M>, UpdatePredicatesFunc<K, V, M>> fieldPredicates) {+        this(keyConverter, fieldPredicates, ALWAYS_TRUE, ALWAYS_TRUE);+    }++    protected SingleUseObjectModelCriteriaBuilder(StringKeyConverter<K> keyConverter, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<K, V, M>> fieldPredicates, Predicate<? super K> indexReadFilter, Predicate<? super V> sequentialReadFilter) {+        super(keyConverter, fieldPredicates, indexReadFilter, sequentialReadFilter);+        this.keyConverter = keyConverter;+        this.fieldPredicates = fieldPredicates;+    }++    @Override+    public MapModelCriteriaBuilder<K, V, M> compare(SearchableModelField<? super M> modelField, Operator op, Object... values) {+        if (modelField == org.keycloak.models.ActionTokenValueModel.SearchableFields.USER_ID) {+            userId = values[0].toString();+        } else if (modelField == org.keycloak.models.ActionTokenValueModel.SearchableFields.ACTION_ID) {+            actionId = values[0].toString();+        } else if (modelField == org.keycloak.models.ActionTokenValueModel.SearchableFields.ACTION_VERIFICATION_NONCE) {+            actionVerificationNonce = values[0].toString();+        }+        return super.compare(modelField, op, values);","This is a little bit confusing. Do we want to support other queries than `USER_ID && ACTION_ID &&  ACTION_VERIFICATION_NONCE`? It seems `SingleUseObjectModelCriteriaBuilder` wants to allow that by including `fieldPredicates`, `indexReadFilter`, `sequentialReadFilter` in the constructor, however, I don't see how this could work as using parent compare method basically removes all fields from this object.I would say we should start with supporting only these three parameters and refactor in the future if we need more attributes. We should probably stop extending `MapModelCriteriaBuilder` and implement only `ModelCriteriaBuilder` interface, this way we would get rid of `fieldPredicates`, `indexReadFilter` and `sequentialReadFilter` completely.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12066,879543477,2022-05-23T14:45:06Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509DirectGrantTest.java,"@@ -264,6 +267,8 @@ public void loginCertificateNotExpired() throws Exception {      @Test     public void loginCertificateExpired() throws Exception {+        Assume.assumeFalse(""Time offset is causing integer overflow. With the old store it works, because root authentication session has also timestamp overflown, this is not true for the new store so the test is failing."", keycloakUsingProviderWithId(AuthenticationSessionProvider.class, ""map""));+         X509AuthenticatorConfigModel config =                 new X509AuthenticatorConfigModel()                     .setCertValidationEnabled(true)","I once gave it a start for #11053 and it turned out to be so big that I doubt that someone will be able review it in the near future (unfortunately). Therefore recommend to look at that new issue independently. With what you wrote about which certificate would be involved here, that analysis should be part of that other issue.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/11929,879679159,2022-05-23T16:46:37Z,operator/README.md,"@@ -14,6 +14,7 @@ Ensure you have JDK 11 (or newer) installed. Build the Docker image with:  ```bash+mvn clean install -pl :keycloak-operator-maven-plugin -am",I did a quick test (`mvn clean install` in `operator` module with local mvn repo cleaned of any traces of the Operator) and seemed to work fine. Maven seems smart enough to build the plugin dependency first.,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12149,880152268,2022-05-24T07:27:37Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/authorization/ResourceServerAdapter.java,"@@ -32,11 +32,14 @@ public class ResourceServerAdapter implements ResourceServer, CachedModel<ResourceServer> {     protected CachedResourceServer cached;     protected StoreFactoryCacheSession cacheSession;+    private RealmModel realm;     protected ResourceServer updated; -    public ResourceServerAdapter(CachedResourceServer cached, StoreFactoryCacheSession cacheSession) {+    public ResourceServerAdapter(CachedResourceServer cached, StoreFactoryCacheSession cacheSession,+            RealmModel realm) {","In map storage, when using `RealmModel` as parameter, it's always as first parameter, So in sake of consistency:```suggestion    public ResourceServerAdapter(RealmModel realm, CachedResourceServer cached,            StoreFactoryCacheSession cacheSession) {```",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/11739,880304567,2022-05-24T09:54:08Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/LdapMapStorage.java,"@@ -104,7 +103,9 @@ public void updateConfig(Config cf) {                 .spi(""authorizationPersister"").config(""map.storage.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)                 .spi(""authenticationSessions"").config(""map.storage.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)                 .spi(EventStoreSpi.NAME).config(""map.storage-admin-events.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)-                .spi(EventStoreSpi.NAME).config(""map.storage-auth-events.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID);+                .spi(EventStoreSpi.NAME).config(""map.storage-auth-events.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)+                .spi(ActionTokenStoreSpi.NAME).config(""map.storage.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID)+                .spi(SingleUseObjectSpi.NAME).config(""map.storage.provider"", ConcurrentHashMapStorageProviderFactory.PROVIDER_ID);",Shoudn't be also similarly updated `JpaMapStorage`?,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12157,880682738,2022-05-24T15:47:43Z,quarkus/tests/integration/src/main/java/org/keycloak/it/junit5/extension/DatabaseContainer.java,"@@ -0,0 +1,76 @@+/*+ * Copyright 2021 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.it.junit5.extension;++import java.time.Duration;+import org.testcontainers.containers.JdbcDatabaseContainer;+import org.testcontainers.containers.MariaDBContainer;+import org.testcontainers.containers.PostgreSQLContainer;++public class DatabaseContainer {++    static final String DEFAULT_PASSWORD = ""Password1!"";++    private final String alias;+    private JdbcDatabaseContainer container;++    DatabaseContainer(String alias) {+        this.alias = alias;+    }++    void start() {+        container = createContainer()+                .withDatabaseName(""keycloak"")+                .withUsername(getUsername())+                .withPassword(getPassword());++        container.withStartupTimeout(Duration.ofMinutes(5)).start();+    }++    boolean isRunning() {+        return container.isRunning();+    }++    String getJdbcUrl() {+        return container.getJdbcUrl();+    }++    String getUsername() {+        return ""keycloak"";","Why? It should be in the constant pool, doesn't it? Different than the default password, this one is only used within this class so I did not find it necessary to create a constant.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12157,880688388,2022-05-24T15:53:03Z,quarkus/tests/integration/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java,"@@ -237,10 +243,26 @@ private void configureDatabase(ExtensionContext context) {         WithDatabase database = context.getTestClass().orElse(Object.class).getDeclaredAnnotation(WithDatabase.class);          if (database != null) {-            configureDevServices();-            setProperty(""kc.db"", database.alias());-            // databases like mssql are very strict about password policy-            setProperty(""kc.db-password"", ""Password1!"");+            if (dist == null) {+                configureDevServices();+                setProperty(""kc.db"", database.alias());+                setProperty(""kc.db-password"", DatabaseContainer.DEFAULT_PASSWORD);+            } else {+                databaseContainer = new DatabaseContainer(database.alias());++                databaseContainer.start();++                dist.setProperty(""db"", database.alias());+                dist.setProperty(""db-username"", databaseContainer.getUsername());+                dist.setProperty(""db-password"", databaseContainer.getPassword());+                dist.setProperty(""db-url"", databaseContainer.getJdbcUrl());++                dist.start(List.of(""build""));++                if (database.removeBuildOptionsAfterBuild()) {",The annotation is related to a database already. I don't think we need `DB` in the name and it should be generic enough to remove *any*  build option set when configuring the database.,x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12157,880718043,2022-05-24T16:21:37Z,quarkus/tests/integration/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java,"@@ -237,10 +243,26 @@ private void configureDatabase(ExtensionContext context) {         WithDatabase database = context.getTestClass().orElse(Object.class).getDeclaredAnnotation(WithDatabase.class);          if (database != null) {-            configureDevServices();-            setProperty(""kc.db"", database.alias());-            // databases like mssql are very strict about password policy-            setProperty(""kc.db-password"", ""Password1!"");+            if (dist == null) {+                configureDevServices();+                setProperty(""kc.db"", database.alias());+                setProperty(""kc.db-password"", DatabaseContainer.DEFAULT_PASSWORD);+            } else {+                databaseContainer = new DatabaseContainer(database.alias());++                databaseContainer.start();++                dist.setProperty(""db"", database.alias());+                dist.setProperty(""db-username"", databaseContainer.getUsername());+                dist.setProperty(""db-password"", databaseContainer.getPassword());+                dist.setProperty(""db-url"", databaseContainer.getJdbcUrl());++                dist.start(List.of(""build""));++                if (database.removeBuildOptionsAfterBuild()) {","> it should be generic enough to remove any build option set when configuring the database.fine for me if that's the behavior, in this case, we are only removing the `db` property, we can use the `PropertyMapper` and iterate all the build time properties.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12157,880909462,2022-05-24T20:10:38Z,quarkus/tests/integration/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java,"@@ -237,10 +243,26 @@ private void configureDatabase(ExtensionContext context) {         WithDatabase database = context.getTestClass().orElse(Object.class).getDeclaredAnnotation(WithDatabase.class);          if (database != null) {-            configureDevServices();-            setProperty(""kc.db"", database.alias());-            // databases like mssql are very strict about password policy-            setProperty(""kc.db-password"", ""Password1!"");+            if (dist == null) {+                configureDevServices();+                setProperty(""kc.db"", database.alias());+                setProperty(""kc.db-password"", DatabaseContainer.DEFAULT_PASSWORD);+            } else {+                databaseContainer = new DatabaseContainer(database.alias());++                databaseContainer.start();++                dist.setProperty(""db"", database.alias());+                dist.setProperty(""db-username"", databaseContainer.getUsername());+                dist.setProperty(""db-password"", databaseContainer.getPassword());+                dist.setProperty(""db-url"", databaseContainer.getJdbcUrl());++                dist.start(List.of(""build""));++                if (database.removeBuildOptionsAfterBuild()) {",You make me wonder if this option makes more sense at the `DistributionTest` annotation instead because it is not specific to database tests.I've updated the PR and moved this option to reflect that. Looks better to me now.,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/11739,881318393,2022-05-25T07:35:28Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/JpaMapStorage.java,"@@ -83,16 +86,18 @@ public void updateConfig(Config cf) {                 .config(""driverDialect"", ""org.keycloak.models.map.storage.jpa.hibernate.dialect.JsonbPostgreSQL95Dialect"");          cf.spi(AuthenticationSessionSpi.PROVIDER_ID).provider(MapRootAuthenticationSessionProviderFactory.PROVIDER_ID)  .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)-          .spi(""client"").provider(MapClientProviderFactory.PROVIDER_ID)                                                 .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)-          .spi(""clientScope"").provider(MapClientScopeProviderFactory.PROVIDER_ID)                                       .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)-          .spi(""group"").provider(MapGroupProviderFactory.PROVIDER_ID)                                                   .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)-          .spi(""realm"").provider(MapRealmProviderFactory.PROVIDER_ID)                                                   .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)-          .spi(""role"").provider(MapRoleProviderFactory.PROVIDER_ID)                                                     .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)+          .spi(""client"").provider(MapClientProviderFactory.PROVIDER_ID)                                         .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)+          .spi(""clientScope"").provider(MapClientScopeProviderFactory.PROVIDER_ID)                               .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)+          .spi(""group"").provider(MapGroupProviderFactory.PROVIDER_ID)                                           .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)+          .spi(""realm"").provider(MapRealmProviderFactory.PROVIDER_ID)                                           .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)+          .spi(""role"").provider(MapRoleProviderFactory.PROVIDER_ID)                                             .config(STORAGE_CONFIG, JpaMapStorageProviderFactory.PROVIDER_ID)",Please do not change the formatting. After the change the file looks like: https://github.com/keycloak/keycloak/blob/5753e56e6efb0b4e776b96adf7b2f04898017de6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/JpaMapStorage.java,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/11739,881324470,2022-05-25T07:42:06Z,model/map/src/main/java/org/keycloak/models/map/singleUseObject/MapSingleUseObjectProvider.java,"@@ -0,0 +1,234 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.singleUseObject;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.models.ActionTokenKeyModel;+import org.keycloak.models.ActionTokenStoreProvider;+import org.keycloak.models.ActionTokenValueModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ModelDuplicateException;+import org.keycloak.models.SingleUseObjectProvider;+import org.keycloak.models.map.common.TimeAdapter;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelCriteriaBuilder;+import org.keycloak.models.map.storage.criteria.DefaultModelCriteria;++import java.util.Collections;+import java.util.Map;++import static org.keycloak.common.util.StackUtil.getShortStackTrace;+import static org.keycloak.models.map.storage.QueryParameters.withCriteria;+import static org.keycloak.models.map.storage.criteria.DefaultModelCriteria.criteria;++/**+ * @author <a href=""mailto:mkanis@redhat.com"">Martin Kanis</a>+ */+public class MapSingleUseObjectProvider implements ActionTokenStoreProvider, SingleUseObjectProvider {++    private static final Logger LOG = Logger.getLogger(MapSingleUseObjectProvider.class);+    private final KeycloakSession session;+    protected final MapKeycloakTransaction<MapSingleUseObjectEntity, ActionTokenValueModel> actionTokenStoreTx;++    public MapSingleUseObjectProvider(KeycloakSession session, MapStorage<MapSingleUseObjectEntity, ActionTokenValueModel> storage) {+        this.session = session;+        actionTokenStoreTx = storage.createTransaction(session);++        session.getTransactionManager().enlistAfterCompletion(actionTokenStoreTx);+    }++    private ActionTokenValueModel singleUseEntityToAdapter(MapSingleUseObjectEntity origEntity) {+        long expiration = origEntity.getExpiration() != null ? origEntity.getExpiration() : 0L;+        if (Time.currentTime() < expiration)  {+            return new MapSingleUseObjectAdapter(session, origEntity);+        } else {+            actionTokenStoreTx.delete(origEntity.getId());+            return null;+        }+    }++    @Override+    public void put(ActionTokenKeyModel actionTokenKey, Map<String, String> notes) {+        if (actionTokenKey == null || actionTokenKey.getUserId() == null || actionTokenKey.getActionId() == null || actionTokenKey.getActionVerificationNonce() == null) {+            return;+        }++        LOG.tracef(""put(%s, %s, %s)%s"", actionTokenKey.getUserId(), actionTokenKey.getActionId(), actionTokenKey.getActionVerificationNonce(), getShortStackTrace());++        DefaultModelCriteria<ActionTokenValueModel> mcb = criteria();+        mcb = mcb.compare(ActionTokenValueModel.SearchableFields.USER_ID, ModelCriteriaBuilder.Operator.EQ, actionTokenKey.getUserId())+                .compare(ActionTokenValueModel.SearchableFields.ACTION_ID, ModelCriteriaBuilder.Operator.EQ, actionTokenKey.getActionId())+                .compare(ActionTokenValueModel.SearchableFields.ACTION_VERIFICATION_NONCE, ModelCriteriaBuilder.Operator.EQ, actionTokenKey.getActionVerificationNonce().toString());++        ActionTokenValueModel existing = actionTokenStoreTx.read(withCriteria(mcb))+                .findFirst().map(this::singleUseEntityToAdapter).orElse(null);++        if (existing == null) {+            MapSingleUseObjectEntity actionTokenStoreEntity = new MapSingleUseObjectEntityImpl();+            actionTokenStoreEntity.setUserId(actionTokenKey.getUserId());+            actionTokenStoreEntity.setActionId(actionTokenKey.getActionId());+            actionTokenStoreEntity.setActionVerificationNonce(actionTokenKey.getActionVerificationNonce().toString());+            actionTokenStoreEntity.setExpiration(TimeAdapter.fromIntegerWithTimeInSecondsToLongWithTimeAsInSeconds(actionTokenKey.getExpiration()));+            actionTokenStoreEntity.setNotes(notes);++            LOG.debugf(""Adding used action token to actionTokens cache: %s"", actionTokenKey.toString());++            actionTokenStoreTx.create(actionTokenStoreEntity);+        }+    }++    @Override+    public ActionTokenValueModel get(ActionTokenKeyModel key) {+        LOG.tracef(""get(%s, %s, %s)%s"", key.getUserId(), key.getActionId(), key.getActionVerificationNonce(), getShortStackTrace());++        DefaultModelCriteria<ActionTokenValueModel> mcb = criteria();+        mcb = mcb.compare(ActionTokenValueModel.SearchableFields.USER_ID, ModelCriteriaBuilder.Operator.EQ, key.getUserId())+                .compare(ActionTokenValueModel.SearchableFields.ACTION_ID, ModelCriteriaBuilder.Operator.EQ, key.getActionId())+                .compare(ActionTokenValueModel.SearchableFields.ACTION_VERIFICATION_NONCE, ModelCriteriaBuilder.Operator.EQ, key.getActionVerificationNonce().toString());","We might want to add similar check (`key.getActionVerificationNonce() != null`) here as well, right? There are also other methods within the class.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11929,882114027,2022-05-25T21:03:35Z,docs/maven-plugin/src/main/java/org/keycloak/guides/maven/Options.java,"@@ -5,25 +5,22 @@ import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;","Although we don't have yet a proper support for exposing SPI configuration options, the new module should be able to provide them similarly to what you did to `HttpOptions`.The difference here is that these options are dynamic as they come from whatever provider is installed on the server. In the future, and that is related to the extension story, it should also resolve options from custom providers.If you want, I can look at this closer and try to come up with something to support this.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12202,882730840,2022-05-26T14:28:43Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java,"@@ -166,13 +168,25 @@ public Response logout(@QueryParam(OIDCLoginProtocol.REDIRECT_URI_PARAM) String             return ErrorPage.error(session, null, Response.Status.BAD_REQUEST, Messages.INVALID_PARAMETER, OIDCLoginProtocol.REDIRECT_URI_PARAM);         } -        if (postLogoutRedirectUri != null && encodedIdToken == null) {+        if (postLogoutRedirectUri != null && encodedIdToken == null && clientId == null) {             event.event(EventType.LOGOUT);             event.error(Errors.INVALID_REQUEST);-            logger.warnf(""Parameter 'id_token_hint' is required when 'post_logout_redirect_uri' is used."");+            logger.warnf(""Either the parameter 'client_id' or the parameter 'id_token_hint' is required when 'post_logout_redirect_uri' is used."");             return ErrorPage.error(session, null, Response.Status.BAD_REQUEST, Messages.MISSING_PARAMETER, OIDCLoginProtocol.ID_TOKEN_HINT);         } +        boolean confirmationNeeded = true;+        boolean forcedConfirmation = false;+        ClientModel client = clientId == null ? null : realm.getClientByClientId(clientId);+        if (clientId != null) {+            client = realm.getClientByClientId(clientId);+            // Forced confirmation if client referenced by client_id was not found+            if (client == null) {+                logger.warnf(""Client '%s' not found."", clientId);+                forcedConfirmation = true;+            }+        }","@mabartos Good catch! During the refactoring, I did the unneccessary duplicated retrieval of the client. Agree that this can be skipped.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12202,883481569,2022-05-27T10:22:49Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java,"@@ -229,8 +258,22 @@ public Response logout(@QueryParam(OIDCLoginProtocol.REDIRECT_URI_PARAM) String         LoginFormsProvider loginForm = session.getProvider(LoginFormsProvider.class)                 .setAuthenticationSession(logoutSession); -        // Client was not sent in id_token_hint or has consentRequired. Logout confirmation screen will be displayed to the user in this case-        if (client == null || client.isConsentRequired()) {+        // Check if we have session in the browser. If yes and it is different session than referenced by id_token_hint, the confirmation should be displayed+        AuthenticationManager.AuthResult authResult = AuthenticationManager.authenticateIdentityCookie(session, realm, false);+        if (authResult != null) {+            if (idToken != null && idToken.getSessionState() != null && !idToken.getSessionState().equals(authResult.getSession().getId())) {+                forcedConfirmation = true;+            }+        } else {+            // Skip confirmation in case that valid redirect URI was setup for given client_id and there is no session in the browser as well as no id_token_hint.+            // We can do automatic redirect as there is no logout needed at all for this scenario (Session was probably already logged-out before)+            if (encodedIdToken == null && client != null && validatedRedirectUri != null) {+                confirmationNeeded = false;+            }+        }++        // Logout confirmation screen will be displayed to the user in this case+        if (confirmationNeeded || forcedConfirmation) {",Those are just 2 helper boolean variables. First is true by default and switches to false once the conditions are evaluated that confirmation not needed (EG. valid id_token). Second is true by default and can switch to false if confirmation should be always shown regardless of any other things (Like the case with unknown client discussed above).Was just easier for me to have 2 boolean variables to be on the safe side and not miss any obvious combination when the confirmation should be shown and is not (also recall some recent example from security training related to this :-),x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12191,883927202,2022-05-27T19:29:17Z,services/src/main/java/org/keycloak/services/managers/CodeGenerateUtil.java,"@@ -173,5 +173,47 @@ public String getClientNote(AuthenticationSessionModel clientSession, String not         }     } +    /**+     * A {@link KeycloakTransaction} that runs a task only when {@link #rollback()} is called.+     */+    static class RollbackDrivenTransaction implements KeycloakTransaction {",Should this be a `private` class,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/12229,884680631,2022-05-30T10:32:34Z,operator/app/src/test/java/org/keycloak/operator/utils/CRAssert.java,"@@ -32,13 +33,17 @@ public static void assertKeycloakStatusCondition(Keycloak kc, String condition,         assertKeycloakStatusCondition(kc, condition, status, null);     }     public static void assertKeycloakStatusCondition(Keycloak kc, String condition, boolean status, String containedMessage) {-        Log.infof(""Asserting CR: %s, condition: %s, status: %s, message: %s"", kc.getMetadata().getName(), condition, status, containedMessage);-        assertThat(kc.getStatus().getConditions().stream()-                .anyMatch(c ->-                        c.getType().equals(condition) &&-                        c.getStatus() == status &&-                        (containedMessage == null || c.getMessage().contains(containedMessage)))-                    ).isTrue();+        try {+            assertThat(kc.getStatus().getConditions().stream()+                    .anyMatch(c ->+                            c.getType().equals(condition) &&+                                    c.getStatus() == status &&+                                    (containedMessage == null || c.getMessage().contains(containedMessage)))+            ).isTrue();+        } catch (Exception e) {+            Log.infof(""Asserting CR: %s with status:\n%s"", kc.getMetadata().getName(), Serialization.asYaml(kc.getStatus()));","I know this is a matter of preference, but I liked that the log was printed during each poll in a waiting loop. Particularly when running on my machine it made the test look alive and it was much quickly visible what is going on, what we're waiting for (especially in the amount of other log messages). Maybe we could decrease the level of that log message instead? That would make it possible to hide it by default but visible when needed (local development).",x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12229,884684640,2022-05-30T10:36:42Z,operator/app/src/test/java/org/keycloak/operator/ClusteringE2EIT.java,"@@ -173,11 +177,14 @@ public void testKeycloakCacheIsConnected() throws Exception {         // This is to test passing through the ""Service"", not 100% deterministic, but a smoke test that things are working as expected         // Executed here to avoid paying the setup time again         var service = new KeycloakService(k8sclient, kc);-        Awaitility.await().atMost(5, MINUTES).ignoreExceptions().untilAsserted(() -> {+        Awaitility.await()+                .atMost(20, MINUTES)+                .pollDelay(5, SECONDS)+                .ignoreExceptions()+                .untilAsserted(() -> {             String token2 = null;             // Obtaining the token from the first pod-            // Connecting using port-forward and a fixed port to respect the instance issuer used hostname-            for (int i = 0; i < (targetInstances * 2); i++) {+            for (int i = 0; i < (targetInstances + 1); i++) {","That's the intention, unfortunately, the cache takes quite some time to ""connect"" and stay reliable in all instances.The alternative would be to turn those tests into even more ""long-running"" E2E.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12230,884702135,2022-05-30T10:58:03Z,model/map/src/main/java/org/keycloak/models/map/common/ExpirationUtils.java,"@@ -0,0 +1,34 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.common;++import org.keycloak.common.util.Time;++public class ExpirationUtils {++    /**+     * Checks whether the {@code entity} is expired+     *+     * @param entity to check+     * @return true if the {@code entity} is expired (expiration time is in the past or now), false otherwise+     */+    public static boolean isExpired(ExpirableEntity entity) {+        Long expiration = entity.getExpiration();+        return expiration != null && expiration <= Time.currentTimeMillis();","Good point. However, the behaviour you described conflicts with [Javadoc here](https://github.com/keycloak/keycloak/blob/main/model/map/src/main/java/org/keycloak/models/map/common/ExpirableEntity.java). We should discuss this, I am adding discussion point to the meeting today. ",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/12233,884792572,2022-05-30T12:43:37Z,model/map-jpa/src/main/resources/META-INF/auth-events/jpa-auth-events-changelog-1.xml,"@@ -0,0 +1,71 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.+Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at+http://www.apache.org/licenses/LICENSE-2.0+Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <!-- format of id of changeSet: auth-events-${org.keycloak.models.map.storage.jpa.Constants.CURRENT_SCHEMA_VERSION_AUTH_EVENT} -->+    <changeSet author=""keycloak"" id=""auth-events-1"">++        <createTable tableName=""kc_auth_event"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_auth_event"">+            <ext:column name=""entityversion"" type=""INTEGER"" jsonColumn=""metadata"" jsonProperty=""entityVersion""/>+            <ext:column name=""realmid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fRealmId""/>+            <ext:column name=""timestamp"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fTimestamp""/>+            <ext:column name=""expiration"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fExpiration""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_auth_event"" indexName=""auth_event_entityversion"">+            <column name=""entityversion""/>+        </createIndex>+        <createIndex tableName=""kc_auth_event"" indexName=""auth_event_realmid_time"">+            <column name=""realmid""/>+            <column name=""timestamp""/>+        </createIndex>++        <createTable tableName=""kc_auth_event_detail"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""auth_event_detail_fk_root_fkey"" references=""kc_auth_event(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""TEXT""/>+        </createTable>+        <createIndex tableName=""kc_auth_event_detail"" indexName=""auth_event_detail_fk_root"">+            <column name=""fk_root""/>+        </createIndex>","Question: This is similar to the attributes tables we have for other entities, and those have an index for the name/value. I haven´t added such index here because the details are never queried by name or value, they are always loaded in their entirety, so to me only the fk_root index should be enough. Thoughts?",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/12233,884795050,2022-05-30T12:46:29Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/event/admin/delegate/JpaAdminEventDelegateProvider.java,"@@ -0,0 +1,67 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.event.admin.delegate;++import java.util.UUID;++import javax.persistence.EntityManager;++import org.keycloak.models.map.common.EntityField;+import org.keycloak.models.map.common.delegate.DelegateProvider;+import org.keycloak.models.map.events.MapAdminEventEntity;+import org.keycloak.models.map.events.MapAdminEventEntityFields;+import org.keycloak.models.map.storage.jpa.JpaDelegateProvider;+import org.keycloak.models.map.storage.jpa.event.admin.entity.JpaAdminEventEntity;++/**+ * A {@link DelegateProvider} implementation for {@link JpaAdminEventEntity}.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class JpaAdminEventDelegateProvider extends JpaDelegateProvider<JpaAdminEventEntity> implements DelegateProvider<MapAdminEventEntity> {++    private final EntityManager em;++    public JpaAdminEventDelegateProvider(final JpaAdminEventEntity delegate, final EntityManager em) {+        super(delegate);+        this.em = em;+    }++    @Override+    public MapAdminEventEntity getDelegate(boolean isRead, Enum<? extends EntityField<MapAdminEventEntity>> field, Object... parameters) {+        if (getDelegate().isMetadataInitialized()) return getDelegate();+        if (isRead) {+            if(field instanceof MapAdminEventEntityFields) {+                switch ((MapAdminEventEntityFields) field) {+                    case ID:+                    case REALM_ID:+                    case TIMESTAMP:+                    case EXPIRATION:+                        return getDelegate();++                    default:+                        setDelegate(em.find(JpaAdminEventEntity.class, UUID.fromString(getDelegate().getId())));+                }+            } else {+                throw new IllegalStateException(""Not a valid client scope field: "" + field);+            }+        } else {+            setDelegate(em.find(JpaAdminEventEntity.class, UUID.fromString(getDelegate().getId())));+        }+        return getDelegate();+    }+}","@vramik I've added the delegate for now, although we might decide to simply load everything - including the metadata - in read with parameters. You mentioned you would follow this approach for the user sessions, and if you do I'll update this one to be consistent with what you are doing there. ",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/12249,884925825,2022-05-30T15:13:48Z,operator/app/src/main/java/org/keycloak/operator/v2alpha1/KeycloakDeployment.java,"@@ -403,6 +402,60 @@ private void configureTLS(Deployment deployment) {             deployment.getSpec().getTemplate().getSpec().getVolumes().add(volume);             kcContainer.getVolumeMounts().add(volumeMount);         }++        var userRelativePath = readConfigurationValue(Constants.KEYCLOAK_HTTP_RELATIVE_PATH_KEY);+        var kcRelativePath = (userRelativePath == null) ? ""/"" : userRelativePath;+        var protocol = (this.keycloakCR.getSpec().isHttp()) ? ""http"" : ""https"";+        var kcPort = (this.keycloakCR.getSpec().isHttp()) ? Constants.KEYCLOAK_HTTP_PORT : Constants.KEYCLOAK_HTTPS_PORT;++        var baseProbe = new ArrayList(List.of(""curl"", ""--head"", ""--fail"", ""--silent""));++        if (!this.keycloakCR.getSpec().isHttp()) {+            baseProbe.add(""--insecure"");+        }++        var readyProbe = new ArrayList<>(baseProbe);+        readyProbe.add(protocol + ""://127.0.0.1:"" + kcPort + kcRelativePath + ""/health/ready"");+        var liveProbe = new ArrayList<>(baseProbe);+        liveProbe.add(protocol + ""://127.0.0.1:"" + kcPort + kcRelativePath + ""/health/live"");++        kcContainer+                .getReadinessProbe()+                .setExec(new ExecActionBuilder().withCommand(readyProbe).build());+        kcContainer+                .getLivenessProbe()+                .setExec(new ExecActionBuilder().withCommand(liveProbe).build());+    }++    public String readConfigurationValue(String key) {+        if (this.keycloakCR != null &&+                this.keycloakCR.getSpec() != null &&+                this.keycloakCR.getSpec().getServerConfiguration() != null+        ) {+            var serverConfigValue = this.keycloakCR+                    .getSpec()+                    .getServerConfiguration()+                    .stream()+                    .filter(sc -> sc.getName().equals(key))+                    .findFirst();+            if (serverConfigValue.isPresent()) {+                if (serverConfigValue.get().getValue() != null) {+                    return serverConfigValue.get().getValue();+                } else {+                    var secretSelector = serverConfigValue.get().getSecret();+                    var secret = client.secrets().inNamespace(getNamespace()).withName(secretSelector.getName()).get();","I believe we can get an NPE here if `secretSelector == null`. I know we should theoretically in any case get an error from here:https://github.com/keycloak/keycloak/blob/ea22989d8963a6089a0e357fbf4bb409de3800c7/operator/app/src/main/java/org/keycloak/operator/v2alpha1/WatchedSecretsStore.java#L174But still for debugging purposes, I think we could throw some more meaningful exception. 🙂 WDYT?",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/12252,884928563,2022-05-30T15:17:09Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java,"@@ -272,6 +277,17 @@ public Response logout(@QueryParam(OIDCLoginProtocol.REDIRECT_URI_PARAM) String             }         } +        if (userSession == null && idToken != null && idToken.getSessionState() != null) {+            userSession = session.sessions().getUserSession(realm, idToken.getSessionState());+        }++        // Try to figure user because of localization+        if (userSession != null) {+            UserModel user = userSession.getUser();+            logoutSession.setAuthenticatedUser(user);+            loginForm.setUser(user);","Just consideration.I've been kinda worried about the use of the found user session, as when the `KEYCLOAK_IDENTITY` cookie is set and also the `id_token_hint` is specified and contains a different user session (somehow). In this case, the confirmation page is displayed, but in the code below, the user is set in the logout auth session and login form. However, I'm not sure which user should be set there. In this case, the user is fetched from the `KEYCLOAK_IDENTITY` cookie. Is it possible that those users are different?Do you think it has some security vulnerabilities or weaknesses? Like, I mean, a different user can be logged out (some shared PC in the library, or sth?!). Just the first thing, which comes to my mind.",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/12252,884929471,2022-05-30T15:18:21Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java,"@@ -347,6 +365,48 @@ public Response logoutConfirmAction() {     }  +    // Typically shown when user changes localization on the logout confirmation screen+    @Path(""/logout-confirm"")+    @NoCache+    @GET+    public Response logoutConfirmGet() {","I presume it's not possible to use the existing approach as for the `logoutConfirmAction` POST method, right? Due to the fact, that the authz code is not present there and other properties are not there as well. The thing is, that it seems we need to maintain similar logic only because of the localization.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/12244,885306183,2022-05-31T07:42:58Z,saml-core/src/main/java/org/keycloak/saml/processing/core/util/ProvidersUtil.java,"@@ -44,7 +44,7 @@ public Boolean run() {                 // register Apache Santuario 1.5.x XMLDSig version                 addXMLDSigRI();                 // register BC provider if available (to have additional encryption algorithms, etc.)-                addJceProvider(""BC"", ""org.bouncycastle.jce.provider.BouncyCastleProvider"");+//                addJceProvider(""BC"", ""org.bouncycastle.jce.provider.BouncyCastleProvider"");","Nah, but think we need a follow-up on the ProvidersUtil class in general with regard to FIPS, as it's registering Apache Santuario, and adding it to the top of the security providers list I think, which doesn't seem right to me, and not sure if it's FIPS compliant or not, so just left the comment in for now, mostly to remember that this thing used to also register BC.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/12249,885480609,2022-05-31T10:38:06Z,operator/app/src/main/java/org/keycloak/operator/v2alpha1/KeycloakDeployment.java,"@@ -403,6 +402,64 @@ private void configureTLS(Deployment deployment) {             deployment.getSpec().getTemplate().getSpec().getVolumes().add(volume);             kcContainer.getVolumeMounts().add(volumeMount);         }++        var userRelativePath = readConfigurationValue(Constants.KEYCLOAK_HTTP_RELATIVE_PATH_KEY);+        var kcRelativePath = (userRelativePath == null) ? ""/"" : userRelativePath;+        var protocol = (this.keycloakCR.getSpec().isHttp()) ? ""http"" : ""https"";+        var kcPort = (this.keycloakCR.getSpec().isHttp()) ? Constants.KEYCLOAK_HTTP_PORT : Constants.KEYCLOAK_HTTPS_PORT;++        var baseProbe = new ArrayList<>(List.of(""curl"", ""--head"", ""--fail"", ""--silent""));++        if (!this.keycloakCR.getSpec().isHttp()) {+            baseProbe.add(""--insecure"");+        }++        var readyProbe = new ArrayList<>(baseProbe);+        readyProbe.add(protocol + ""://127.0.0.1:"" + kcPort + kcRelativePath + ""/health/ready"");+        var liveProbe = new ArrayList<>(baseProbe);+        liveProbe.add(protocol + ""://127.0.0.1:"" + kcPort + kcRelativePath + ""/health/live"");++        kcContainer+                .getReadinessProbe()+                .setExec(new ExecActionBuilder().withCommand(readyProbe).build());+        kcContainer+                .getLivenessProbe()+                .setExec(new ExecActionBuilder().withCommand(liveProbe).build());+    }++    public String readConfigurationValue(String key) {+        if (this.keycloakCR != null &&+                this.keycloakCR.getSpec() != null &&+                this.keycloakCR.getSpec().getServerConfiguration() != null+        ) {+            var serverConfigValue = this.keycloakCR+                    .getSpec()+                    .getServerConfiguration()+                    .stream()+                    .filter(sc -> sc.getName().equals(key))+                    .findFirst();+            if (serverConfigValue.isPresent()) {+                if (serverConfigValue.get().getValue() != null) {+                    return serverConfigValue.get().getValue();+                } else {+                    try {+                        var secretSelector = serverConfigValue.get().getSecret();+                        var secret = client.secrets().inNamespace(getNamespace()).withName(secretSelector.getName()).get();+                        if (secret.getData().containsKey(secretSelector.getKey())) {+                            return new String(Base64.getDecoder().decode(secret.getData().get(secretSelector.getKey())), StandardCharsets.UTF_8);+                        } else {+                            return null;+                        }+                    } catch (Exception e) {+                        throw new IllegalStateException(""Secret "" + serverConfigValue.get().getName() + "" not found"", e);+                    }","I don't want to be nitpicky here but I believe this is not a very correct approach, TBH. 🙂 The exception can be anything, it doesn't imply that the Secret is missing.I'd imagine something like this might be better?```javaif (secretSelector == null) {   throw new IllegalStateException(""Secret "" + serverConfigValue.get().getName() + "" not found"", e);}```WDYT?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12252,885647670,2022-05-31T13:35:39Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java,"@@ -272,6 +277,17 @@ public Response logout(@QueryParam(OIDCLoginProtocol.REDIRECT_URI_PARAM) String             }         } +        if (userSession == null && idToken != null && idToken.getSessionState() != null) {+            userSession = session.sessions().getUserSession(realm, idToken.getSessionState());+        }++        // Try to figure user because of localization+        if (userSession != null) {+            UserModel user = userSession.getUser();+            logoutSession.setAuthenticatedUser(user);+            loginForm.setUser(user);","Good point! Yes, it can possibly happen that `id_token_hint` is different session_id than the browser session.In this case, the specification does not prescribe to show the error and skip logout, but rather just show the confirmation dialog as described in the https://openid.net/specs/openid-connect-rpinitiated-1_0.html#RPLogout :```At the Logout Endpoint, the OP SHOULD ask the End-User whether to log out of the OP as well. Furthermore, the OP MUST ask the End-User this question if an id_token_hint was not provided or if the supplied ID Token does not belong to the current OP session with the RP and/or currently logged in End-User. If the End-User says ""yes"", then the OP MUST log out the End-User. ```So in case of the mismatch with the browser session, the `id_token_hint` cannot be used as a valid token to protect against CSRF, and hence the confirmation must be displayed. This itself is enough as security protection and I don't see any other security implications. The logout confirmation itself (POST logout request) also has CSRF protection based on the `code` parameter (same mechanism as used during login by the `LoginActionsService`.)The user in the logout session is used only to help with setting the proper localization on the logout confirm page (in case that this user has the locale set on his user profile). I've used the user from browser SSO session as this is same user, who already logged in the same browser. I don't see any security implications of this as CSRF protection is in place.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12252,885650409,2022-05-31T13:37:57Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java,"@@ -347,6 +365,48 @@ public Response logoutConfirmAction() {     }  +    // Typically shown when user changes localization on the logout confirmation screen+    @Path(""/logout-confirm"")+    @NoCache+    @GET+    public Response logoutConfirmGet() {","Yes, exactly. It is a bit similar, but not the same. I originally though to re-use this, but in the end I've rather used separate GET method as there are differences and I wanted to rather be on the safe side and not mix these two together (especially to not accidentally introduce any situation when the logout confirmation, which is currently done in the POST method, won't be properly protected against CSRF)",
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/12144,885785171,2022-05-31T15:26:26Z,.github/scripts/need-respin.sh,"@@ -0,0 +1,22 @@+#! /bin/bash+set -euxo pipefail++image=$1+#  Get Latest Keycloak release tag+tag=$(curl -sL http://github.com/keycloak/keycloak/releases/latest -H ""Accept: application/json"" | jq -r '.tag_name')++docker pull ${image}:${tag}++base_image_url=$(docker inspect ${image}:${tag} | jq -r '.[0].Config.Labels.url')++base_image_name=$(docker inspect ${image}:${tag} | jq -r '.[0].Config.Labels.url' | sed 's/.*#\///' | sed 's/\/images.*//')++docker pull ${base_image_name}:latest++latest_base_image_url=$(docker inspect ${base_image_name}:latest | jq -r '.[0].Config.Labels.url')","It is possible to access the manifests without downloading the images. It's a little tricky, as each repo seems to implement the dockerhttp API slightly differently (particularly around the access tokens), but it could save a lot of time.Quay needs an anonymous token with the right service and scope parameters:```bashhost=quay.iorepository=keycloak/keycloaktag=18.0.0token=""$(curl -sSfL 'https://$host/v2/auth?service=$host&scope=repository:$repository:pull' | jq -r '.token')""curl -sSfL -H ""Authorization: Bearer $token"" ""https://$host/v2/$repository/manifests/$tag"" | jq -r '.history[0].v1Compatibility' | jq -r '.config.Labels.url'```Which returns `https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8-minimal/images/8.6-751`Red Hat's repo provides tokenless anonymous access:``````bashhost=registry.access.redhat.comrepository=ubi8-minimaltag=latestcurl -sSfL ""https://$host/v2/$repository/manifests/$tag"" | jq -r '.history[0].v1Compatibility' | jq -r '.config.Labels.url'```Which returns `https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8-minimal/images/8.6-751`So you could make your approach to the comparison faster based of off this method. It won't be as generic an approach as you're trying to write. However, the assumption around the url label isn't generic either, it's something that happens to work for UBIThat got me thinking, this check could also be done by comparing the layer hashes. The code for that is simpler, compared to parsing the label, but does require you to hardcode the parent URL:```bashcurl -sSfL -H 'Authorization: Bearer $token' https://quay.io/v2/keycloak/keycloak/manifests/18.0.0 | jq -r '.fsLayers | .[] | .blobSum' > /tmp/layers-kccurl -sSfL https://registry.access.redhat.com/v2/ubi8-minimal/manifests/latest | jq -r '.fsLayers | .[] | .blobSum' > /tmp/layers-ubigrep -qxF -f /tmp/layers-kc /tmp/layers-ubi```Which would return exit code 0 if the latest ubi layers were present in the keycloak layers (no respin required), or exit code 1 if they were not (respin required)",
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/12110,885867170,2022-05-31T16:37:48Z,.github/scripts/incremental-tag.sh,"@@ -0,0 +1,20 @@+#! /bin/bash+set -euo pipefail++SCRIPT_DIR=$( cd -- ""$( dirname -- ""${BASH_SOURCE[0]}"" )"" &> /dev/null && pwd )++image=$1+tag=${2:-$(cd $SCRIPT_DIR/../../ && mvn help:evaluate -Dexpression=project.version -q -DforceStdout)}+original_tag=$tag+c=1++while :+do+  tag=""${original_tag}-${c}""+  if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $image:$tag >/dev/null 2>/dev/null; then+      c=$((c+1))+  else+      echo ""-${c}""+      break+  fi+done","This loop doesn't seem necessary.With anonymous access to the quay API, we can list all the current tags, and determine what the next value for `c` should be from that:```bashcurl -sSfL 'https://quay.io/api/v1/repository/keycloak/keycloak/tag/?onlyActiveTags=true' | jq -r '.tags | .[] | .name' | headnightlylatest18.018.0.0legacy18.0.0-legacy17.0.1-legacy17.017.0.117.0.0-legacy```",
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/12110,885871587,2022-05-31T16:42:51Z,.github/workflows/release-container.yml,"@@ -38,12 +45,13 @@         uses: docker/metadata-action@v4         with:           images: |-            keycloak/keycloak-            quay.io/keycloak/keycloak+            ${{ env.DOCKER_IMAGE }}+            ${{ env.QUAY_IMAGE }}           tags: |             type=ref,event=branch             type=semver,pattern={{version}}             type=semver,pattern={{major}}.{{minor}}+            type=semver,pattern={{version}},suffix=${{ env.INCREMENTAL }}",suffix may require you to add the separator (e.g. `-`) in there too? It's not well documented...https://github.com/docker/metadata-action#typesemver doesn't really say much,x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12110,885901684,2022-05-31T17:17:09Z,.github/scripts/incremental-tag.sh,"@@ -0,0 +1,20 @@+#! /bin/bash+set -euo pipefail++SCRIPT_DIR=$( cd -- ""$( dirname -- ""${BASH_SOURCE[0]}"" )"" &> /dev/null && pwd )++image=$1+tag=${2:-$(cd $SCRIPT_DIR/../../ && mvn help:evaluate -Dexpression=project.version -q -DforceStdout)}+original_tag=$tag+c=1++while :+do+  tag=""${original_tag}-${c}""+  if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $image:$tag >/dev/null 2>/dev/null; then+      c=$((c+1))+  else+      echo ""-${c}""+      break+  fi+done",If I read correctly the documentation:https://docs.quay.io/api/swagger/#!/tag/listRepoTagsthe endpoint you are suggesting will return a paged result and the order is not specified.,
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/12144,886085361,2022-05-31T20:05:15Z,.github/scripts/need-respin.sh,"@@ -0,0 +1,22 @@+#! /bin/bash+set -euxo pipefail++image=$1+#  Get Latest Keycloak release tag+tag=$(curl -sL http://github.com/keycloak/keycloak/releases/latest -H ""Accept: application/json"" | jq -r '.tag_name')++docker pull ${image}:${tag}++base_image_url=$(docker inspect ${image}:${tag} | jq -r '.[0].Config.Labels.url')++base_image_name=$(docker inspect ${image}:${tag} | jq -r '.[0].Config.Labels.url' | sed 's/.*#\///' | sed 's/\/images.*//')++docker pull ${base_image_name}:latest++latest_base_image_url=$(docker inspect ${base_image_name}:latest | jq -r '.[0].Config.Labels.url')","Right, it's a tradeoff :)I think for a once-per-day check, the performance hit of downloading several hundred megabytes of data shouldn't be too bad",x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12110,886952124,2022-06-01T15:34:56Z,.github/scripts/incremental-tag.sh,"@@ -0,0 +1,20 @@+#! /bin/bash+set -euo pipefail++SCRIPT_DIR=$( cd -- ""$( dirname -- ""${BASH_SOURCE[0]}"" )"" &> /dev/null && pwd )++image=$1+tag=${2:-$(cd $SCRIPT_DIR/../../ && mvn help:evaluate -Dexpression=project.version -q -DforceStdout)}+original_tag=$tag+c=1++while :+do+  tag=""${original_tag}-${c}""+  if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $image:$tag >/dev/null 2>/dev/null; then+      c=$((c+1))+  else+      echo ""-${c}""+      break+  fi+done","Thanks for the update @ASzc !This is again a similar tradeoff as the other PR 🙂 , I do believe that plain docker commands are preferable for this task since they work with any Docker registry.Also, the overall complexity of your proposed solution (although shows great `bash` skills 🙂 ) seems to be a little higher than my proposal.It would be nice to have a third opinion to break the tie, cc. @abstractj @stianst ",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12293,886990900,2022-06-01T16:12:54Z,quarkus/dist/src/main/content/bin/kc.sh,"@@ -1,5 +1,32 @@ #!/bin/bash +# With added utility function.+function printArrayElementsInLines() {+    local sourceArray=${!1}+    printf ""%s\n"" ${sourceArray[@]}+}++function checkIfArrayContains() {","I appreciate the attempt to improve this bash script, although we are actually already doing ""contains"" in a different way in the same file:https://github.com/keycloak/keycloak/blob/e28b5cf15b3d42daf055b19a8508ee3284f07a98/quarkus/dist/src/main/content/bin/kc.sh#L139-L140",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12293,886992492,2022-06-01T16:14:02Z,quarkus/dist/src/main/content/bin/kc.sh,"@@ -1,5 +1,32 @@ #!/bin/bash +# With added utility function.+function printArrayElementsInLines() {+    local sourceArray=${!1}+    printf ""%s\n"" ${sourceArray[@]}+}++function checkIfArrayContains() {+    local sourceArray=${!1}+    local stringToSearch=""$2""+    printArrayElementsInLines sourceArray[@] | grep -q ""^$stringToSearch$""+}++function countOccurrencesInArray() {+    local sourceArray=${!1}+    local stringToSearch=""$2""+    let resultOccurrencesCount=0++    for oneElement in ${sourceArray[*]}; do+        if [ $oneElement == $stringToSearch ]; then+            resultOccurrencesCount=$((resultOccurrencesCount + 1))+        fi+    done++    return ${resultOccurrencesCount}","`return` has awful semantics in bash, we can use it in a more ""functional"" way by `echo`ing and assigning directly the result.",x
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/11977,887697833,2022-06-02T08:22:21Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/SingleUseObjectHotRodMapStorage.java,"@@ -0,0 +1,109 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod;++import org.infinispan.client.hotrod.RemoteCache;+import org.keycloak.models.ActionTokenValueModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder;+import org.keycloak.models.map.storage.chm.SingleUseObjectKeycloakTransaction;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.SingleUseObjectModelCriteriaBuilder;+import org.keycloak.models.map.storage.criteria.DefaultModelCriteria;+import org.keycloak.models.map.storage.hotRod.common.AbstractHotRodEntity;+import org.keycloak.models.map.storage.hotRod.common.HotRodEntityDelegate;+import org.keycloak.models.map.storage.hotRod.common.HotRodEntityDescriptor;+import org.keycloak.models.map.storage.hotRod.singleUseObject.HotRodSingleUseObjectEntity;+import org.keycloak.models.map.storage.hotRod.singleUseObject.HotRodSingleUseObjectEntityDelegate;+import org.keycloak.storage.SearchableModelField;++import java.util.Map;+import java.util.stream.Stream;+++/**+ * @author <a href=""mailto:mkanis@redhat.com"">Martin Kanis</a>+ */+public class SingleUseObjectHotRodMapStorage<K, E extends AbstractHotRodEntity, V extends HotRodEntityDelegate<E> & AbstractEntity, M>+        extends HotRodMapStorage<String, HotRodSingleUseObjectEntity, HotRodSingleUseObjectEntityDelegate, ActionTokenValueModel> {++    private final StringKeyConverter<String> keyConverter;+    private final HotRodEntityDescriptor<HotRodSingleUseObjectEntity, HotRodSingleUseObjectEntityDelegate> storedEntityDescriptor;+    private final DeepCloner cloner;++    public SingleUseObjectHotRodMapStorage(RemoteCache<String, HotRodSingleUseObjectEntity> remoteCache, StringKeyConverter<String> keyConverter,+                                           HotRodEntityDescriptor<HotRodSingleUseObjectEntity, HotRodSingleUseObjectEntityDelegate> storedEntityDescriptor,+                                           DeepCloner cloner) {+        super(remoteCache, keyConverter, storedEntityDescriptor, cloner);+        this.keyConverter = keyConverter;+        this.storedEntityDescriptor = storedEntityDescriptor;+        this.cloner = cloner;+    }++    @Override+    public MapKeycloakTransaction<HotRodSingleUseObjectEntityDelegate, ActionTokenValueModel> createTransaction(KeycloakSession session) {+        MapKeycloakTransaction<HotRodSingleUseObjectEntityDelegate, ActionTokenValueModel> transaction = session.getAttribute(""map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (transaction == null) {+            Map<SearchableModelField<? super ActionTokenValueModel>, MapModelCriteriaBuilder.UpdatePredicatesFunc<K, HotRodSingleUseObjectEntityDelegate, ActionTokenValueModel>> fieldPredicates =+                    MapFieldPredicates.getPredicates((Class<ActionTokenValueModel>) storedEntityDescriptor.getModelTypeClass());+            transaction = new SingleUseObjectKeycloakTransaction(this, keyConverter, cloner, fieldPredicates);+            session.setAttribute(""map-transaction-"" + hashCode(), transaction);+        }++        return transaction;+    }++    @Override+    public HotRodSingleUseObjectEntityDelegate create(HotRodSingleUseObjectEntityDelegate value) {+        if (value.getId() == null) {+            if (value.getUserId() != null && value.getActionId() != null && value.getActionVerificationNonce() != null) {+                value.setId(value.getUserId() + "":"" + value.getActionId() + "":"" + value.getActionVerificationNonce());+            }+        }+        return super.create(value);+    }++    @Override+    public Stream<HotRodSingleUseObjectEntityDelegate> read(QueryParameters<ActionTokenValueModel> queryParameters) {+        DefaultModelCriteria<ActionTokenValueModel> criteria = queryParameters.getModelCriteriaBuilder();++        if (criteria == null) {+            return Stream.empty();+        }++        SingleUseObjectModelCriteriaBuilder mcb = criteria.flashToModelCriteriaBuilder(createSingleUseObjectCriteriaBuilder());+        if (mcb.isValid()) {+            HotRodSingleUseObjectEntityDelegate value = read(mcb.getKey());++            return value.getHotRodEntity() != null ? Stream.of(value) : Stream.empty();",I kept the condition for now and created issue to fix HotRodMapStorage read/update methods https://github.com/keycloak/keycloak/issues/12304,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10650,887739152,2022-06-02T09:09:04Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                LOGGER.trace(""Trying to parse: "" + xml);++                Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+?)\"""").matcher(xml);+                Map<String, String> namespaces = new HashMap<>();+                Map<String, String> prefixes = new HashMap<>();+                while (namespaceMatcher.find()) {+                    namespaces.put(namespaceMatcher.group(1), namespaceMatcher.group(2));+                    prefixes.put(namespaceMatcher.group(2), namespaceMatcher.group(1));+                }++                XPath xPath = XPathFactory.newInstance().newXPath();+                xPath.setNamespaceContext(new NamespaceContext() {+                    @Override+                    public String getNamespaceURI(String prefix) {+                        if (namespaces.containsKey(prefix)) {+                            return namespaces.get(prefix);+                        }++                        return XMLConstants.NULL_NS_URI;+                    }++                    @Override+                    public String getPrefix(String namespaceURI) {+                        if (prefixes.containsKey(namespaceURI)) {+                            return prefixes.get(namespaceURI);+                        }++                        return null;+                    }++                    @Override+                    public Iterator<String> getPrefixes(String namespaceURI) {+                        List<String> list = new ArrayList<>();+                        if (prefixes.containsKey(namespaceURI)) {+                            list.add(prefixes.get(namespaceURI));+                        }++                        return list.iterator();+                    }+                });+                Document document = DocumentUtil.getDocument(new StringReader(xml));+                return xPath.compile(attributeXPath).evaluate(document, XPathConstants.STRING);+            } catch (XPathExpressionException e) {+                LOGGER.warn(""Unparsable element will be ignored"", e);+                return """";+            } catch (Exception e) {+                throw new RuntimeException(""Could not parse xml element"", e);+            }+        };+    }++    private List<String> findAttributeValuesInContext(String attributeName, String attributeXPath, BrokeredIdentityContext context) {+        AssertionType assertion = (AssertionType) context.getContextData().get(SAMLEndpoint.SAML_ASSERTION);++        return assertion.getAttributeStatements().stream()+                .flatMap(statement -> statement.getAttributes().stream())+                .filter(elementWith(attributeName))+                .flatMap(attributeType -> attributeType.getAttribute().getAttributeValue().stream())+                .filter(String.class::isInstance)+                .map(String.class::cast)+                .map(s -> ""<root>"" + s + ""</root>"")+                .map(applyXPath(attributeXPath))+                .filter(Objects::nonNull)+                .map(Object::toString)+                .filter(x -> !x.isEmpty())+                .collect(Collectors.toList());+    }++    @Override+    public void updateBrokeredUser(KeycloakSession session, RealmModel realm, UserModel user, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);+        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (attribute.equalsIgnoreCase(EMAIL)) {+            setIfNotEmptyAndDifferent(user::setEmail, user::getEmail, attributeValuesInContext);+        } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+            setIfNotEmptyAndDifferent(user::setFirstName, user::getFirstName, attributeValuesInContext);+        } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+            setIfNotEmptyAndDifferent(user::setLastName, user::getLastName, attributeValuesInContext);+        } else {+            List<String> currentAttributeValues = user.getAttributes().get(attribute);+            if (attributeValuesInContext == null) {+                // attribute no longer sent by brokered idp, remove it+                user.removeAttribute(attribute);+            } else if (currentAttributeValues == null) {+                // new attribute sent by brokered idp, add it+                user.setAttribute(attribute, attributeValuesInContext);+            } else if (!CollectionUtil.collectionEquals(attributeValuesInContext, currentAttributeValues)) {+                // attribute sent by brokered idp has different values as before, update it+                user.setAttribute(attribute, attributeValuesInContext);+            }+            // attribute already set","> I assume that you're referring to the following logic in the Keycloak model to map attributes to fields, like for example here: https://github.com/keycloak/keycloak/blob/main/model/jpa/src/main/java/org/keycloak/models/jpa/UserAdapter.java#L161-L183>> At the same time [BrokeredIdentityContext](https://github.com/keycloak/keycloak/blob/main/server-spi-private/src/main/java/org/keycloak/broker/provider/BrokeredIdentityContext.java) doesn't implement this logic, and for example the email stored in an attribute might be hidden from those calling getEmail().You are correct, `BrokeredIdentityContext` has been forgotten in the #7080 PR. Thank you for checking this. Let's keep it as is for now, and address it in the newly introduced #12307.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12299,888049805,2022-06-02T14:56:29Z,core/src/main/java/org/keycloak/util/EnumWithUnchangeableIndex.java,"@@ -0,0 +1,29 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.util;++/**+ * Interface for marking {@link Enum}s to have an index.+ * The index might be used for persisting so that particular item index + * cannot be changed.+ */+public interface EnumWithUnchangeableIndex {+    /**+     * @return An unchangeable numeric index of {@link Enum} item.",```suggestion     * @return Unique numeric index which is stable in time and identifies an instance.         Reusing the same index for two distinct entries of the same class is forbidden even         if they cannot exist at the same time (e.g. one is deleted before other is introduced).```,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12299,888062409,2022-06-02T15:08:49Z,core/src/main/java/org/keycloak/util/EnumWithUnchangeableIndex.java,"@@ -0,0 +1,29 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.util;++/**+ * Interface for marking {@link Enum}s to have an index.+ * The index might be used for persisting so that particular item index + * cannot be changed.","```suggestion * Classes implementing this interface guarantee that for each instance of this class, * there exists an mutually unique integer which is stable in time, and identifies * always the same instance of this class. * The index might be used for persistence, hence the index of a particular item * cannot be changed. * This is mostly usable for @{code enum}s.```",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12299,888394318,2022-06-02T20:38:47Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/hibernate/jsonb/JsonbType.java,"@@ -115,6 +116,13 @@ abstract class IgnoredMetadataFieldsMixIn {         @JsonIgnore public abstract Boolean isClientRole();     } +    abstract static class EnumsMixIn implements EnumWithUnchangeableIndex {++        // we convert enums to its index and vice versa+        @Override+        @JsonValue public abstract Integer getUnchangeableIndex();",According to javadoc: https://github.com/FasterXML/jackson-annotations/blob/jackson-annotations-2.13.2/src/main/java/com/fasterxml/jackson/annotation/JsonValue.java#L33-L35 it is possible with enums. Also it works only since 2.13.0 version due to this bug: https://github.com/FasterXML/jackson-databind/issues/1850. The version is upgraded within this PR as well.,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12299,888443201,2022-06-02T21:55:03Z,model/map/src/main/java/org/keycloak/models/map/events/MapAdminEventQuery.java,"@@ -90,7 +90,7 @@ public AdminEventQuery operation(OperationType... operations) {      @Override     public AdminEventQuery resourceType(ResourceType... resourceTypes) {-        mcb = mcb.compare(SearchableFields.RESOURCE_TYPE, EQ, Arrays.stream(resourceTypes));+        mcb = mcb.compare(SearchableFields.RESOURCE_TYPE, IN, Arrays.stream(resourceTypes));","Thanks for pointing this out. I agree it is not very well tested. I believe we cannot use enum type in the entity interface due to custom event types (KEYCLOAK-9573). We have to be able to store exact string of the custom type (test `AdminEventsStoreProviderTest.handleCustomResourceTypeEvents`). Unless we'd store the value somewhere else (e.g. we can add attributes and put it there).But with custom types querying starts to be a little bit tricky. In scenario when there is more than one custom resource type and admin events are queried by `ResourceType.CUSTOM`, all custom events are returned regardless of its actual value. Is this expected behavior?If not we'd need to make additional changes anyway.If so (and we don't want to store custom type value elsewhere) easiest way seems to be to use `Arrays.stream(resourceTypes).map(Enum::toString)` but in that case I'd also change fieldType to `String``AdminEvent`:``` public static final SearchableModelField<AdminEvent> RESOURCE_TYPE   = new SearchableModelField<>(""resourceType"", String.class);```",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/12359,890261755,2022-06-06T15:19:05Z,pom.xml,"@@ -1718,9 +1718,8 @@                 <plugin>                     <groupId>org.apache.maven.plugins</groupId>                     <artifactId>maven-surefire-plugin</artifactId>-                    <version>3.0.0-M5</version>+                    <version>3.0.0-M6</version>                     <configuration>-                        <forkNode implementation=""org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory""/>",This workaround should be no longer needed with the newer surefire version: [SUREFIRE-1983](https://issues.apache.org/jira/browse/SUREFIRE-1983).,
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/12144,890290224,2022-06-06T15:49:04Z,.github/scripts/need-respin.sh,"@@ -0,0 +1,22 @@+#! /bin/bash+set -euxo pipefail++image=$1+#  Get Latest Keycloak release tag+tag=$(curl -sL http://github.com/keycloak/keycloak/releases/latest -H ""Accept: application/json"" | jq -r '.tag_name')++docker pull ${image}:${tag}++base_image_url=$(docker inspect ${image}:${tag} | jq -r '.[0].Config.Labels.url')++base_image_name=$(docker inspect ${image}:${tag} | jq -r '.[0].Config.Labels.url' | sed 's/.*#\///' | sed 's/\/images.*//')++docker pull ${base_image_name}:latest++latest_base_image_url=$(docker inspect ${base_image_name}:latest | jq -r '.[0].Config.Labels.url')++if [ ""${base_image_url}"" = ""${latest_base_image_url}"" ]; then","@andreaTP no problem, we can wait for more feedback. Even with less frequent respins, which is a valid concern. We need some agreement about when to patch those CVEs. As you are already aware, we have 2 alternatives:1. Patch CVEs only when there's a new UBI image2. Patch when there are some dependency updates + a new UBI image",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/11933,890467508,2022-06-06T19:17:20Z,server-spi/src/main/java/org/keycloak/models/SingleEntityCredentialManager.java,"@@ -0,0 +1,129 @@+/*+ * Copyright 2022. Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models;++import org.keycloak.credential.CredentialInput;+import org.keycloak.credential.CredentialModel;++import java.util.Arrays;+import java.util.List;+import java.util.stream.Stream;++/**+ * Validates and manages the credentials of a known entity (for example, a user).+ */+public interface SingleEntityCredentialManager {","I would name this one just `CredentialManager` or `SubjectCredentialManager` if you want to be generic enough to support entities other than users.It is a nitpick, but the name for me is too long and too generic.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/12232,890858870,2022-06-07T07:29:13Z,themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js,"@@ -1752,10 +1753,14 @@ module.controller('RealmUserProfileCtrl', function($scope, Realm, realm, clientS         }          $scope.isRequired = attribute.required != null;-        $scope.canUserView = attribute.permissions.view.includes('user');-        $scope.canAdminView = attribute.permissions.view.includes('admin');-        $scope.canUserEdit = attribute.permissions.edit.includes('user');-        $scope.canAdminEdit = attribute.permissions.edit.includes('admin');++        if (attribute.permissions != null) {+            $scope.canUserView = attribute.permissions.view.includes('user');+            $scope.canAdminView = attribute.permissions.view.includes('admin');+            $scope.canUserEdit = attribute.permissions.edit.includes('user');+            $scope.canAdminEdit = attribute.permissions.edit.includes('admin');+        }",Do we need to do a similar change in the new Admin Console?,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11933,891975409,2022-06-08T06:42:32Z,server-spi/src/main/java/org/keycloak/models/UserCredentialManager.java,"@@ -26,9 +26,13 @@ import java.util.stream.Stream;  /**+ * Manage the credentials for a user.+ *+ * @deprecated Instead of this class, use {@link UserModel#getUserCredentialManager()} instead.  * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>  * @version $Revision: 1 $  */+@Deprecated","Eventually yes, for now it will stay here as it is used by KeycloakSession via the `userCredentialManager()` method. Once that method is gone, this class can be moved. ",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/11933,892001045,2022-06-08T07:14:54Z,model/legacy-private/src/main/java/org/keycloak/storage/datastore/LegacyDatastoreProvider.java,"@@ -66,6 +72,13 @@ public GroupProvider groupStorageManager() {         return groupStorageManager;     } +    public UserProvider userStorageManager() {","Hmm, I see. It would be quite hard to preserve the functionality as it was before as the `LegacyStoreManagers` interface is not available in the `DefaultKeycloakSession` class. On the other hand, the purpose of calling `userLocalStorage` instead of `users`/`userStoreManager` was to bypass cache/storageManager and call storage directly (the only reason I can see is to avoid the method loop). This means that after this PR the method basically stops working which means any call to this method leads to false/unexpected behaviour. Should we rather throw an exception whenever this method is called?  ",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/12371,892252992,2022-06-08T11:40:15Z,operator/app/pom.xml,"@@ -35,7 +35,6 @@         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>         <quarkus.operator.sdk.version>3.0.7</quarkus.operator.sdk.version>-        <quarkus.version>2.7.5.Final</quarkus.version>",Seems we're actually NOT overriding the Quarkus version used by the SDK:```mvn dependency:tree | grep quarkusPicked up JAVA_TOOL_OPTIONS: -Djava.awt.headless=true[INFO] +- io.quarkiverse.operatorsdk:quarkus-operator-sdk:jar:3.0.7:compile[INFO] |  +- io.quarkiverse.operatorsdk:quarkus-operator-sdk-common:jar:3.0.7:compile[INFO] |  +- io.quarkus:quarkus-arc:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-core:jar:2.7.5.Final:compile[INFO] |  |  +- io.quarkus:quarkus-ide-launcher:jar:2.7.5.Final:compile[INFO] |  |  +- io.quarkus:quarkus-development-mode-spi:jar:2.7.5.Final:compile[INFO] |  |  +- io.quarkus:quarkus-bootstrap-runner:jar:2.7.5.Final:compile[INFO] |  |  \- io.quarkus:quarkus-fs-util:jar:0.0.9:compile[INFO] |  +- io.quarkus.arc:arc:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-openshift-client:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-kubernetes:jar:2.7.5.Final:compile[INFO] |  |  \- io.quarkus:quarkus-container-image:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-container-image-jib:jar:2.7.5.Final:compile[INFO] |  \- io.quarkus:quarkus-smallrye-health:jar:2.7.5.Final:compile[INFO] |     +- io.quarkus:quarkus-vertx-http:jar:2.7.5.Final:compile[INFO] |     |  +- io.quarkus:quarkus-security-runtime-spi:jar:2.7.5.Final:compile[INFO] |     |  +- io.quarkus:quarkus-mutiny:jar:2.7.5.Final:compile[INFO] |     |  |  +- io.quarkus:quarkus-smallrye-context-propagation:jar:2.7.5.Final:compile[INFO] |     |  +- io.quarkus:quarkus-vertx-http-dev-console-runtime-spi:jar:2.7.5.Final:compile[INFO] |     |  +- io.quarkus.security:quarkus-security:jar:1.1.4.Final:compile[INFO] |     |  +- io.quarkus:quarkus-vertx:jar:2.7.5.Final:compile[INFO] |     |  |  +- io.quarkus:quarkus-netty:jar:2.7.5.Final:compile[INFO] |     \- io.quarkus:quarkus-jsonp:jar:2.7.5.Final:compile[INFO] +- io.quarkiverse.operatorsdk:quarkus-operator-sdk-csv-generator:jar:3.0.7:compile[INFO] +- io.quarkus:quarkus-resteasy-jackson:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-resteasy:jar:2.7.5.Final:compile[INFO] |  |  \- io.quarkus:quarkus-resteasy-server-common:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-jackson:jar:2.7.5.Final:compile[INFO] +- io.quarkus:quarkus-rest-client:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-resteasy-common:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-apache-httpclient:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-rest-client-config:jar:2.7.5.Final:compile[INFO] +- io.quarkus:quarkus-rest-client-jackson:jar:2.7.5.Final:compile[INFO] +- io.quarkus:quarkus-openshift:jar:2.7.5.Final:compile[INFO] |  +- io.quarkus:quarkus-kubernetes-client-internal:jar:2.7.5.Final:compile[INFO] |  \- io.quarkus:quarkus-container-image-openshift:jar:2.7.5.Final:compile[INFO] +- io.quarkus:quarkus-minikube:jar:2.7.5.Final:compile[INFO] +- io.quarkus:quarkus-kubernetes-client:jar:2.7.5.Final:compile[INFO] +- io.quarkiverse.operatorsdk:quarkus-operator-sdk-csv-generator-deployment:jar:3.0.7:provided[INFO] |  +- io.quarkiverse.operatorsdk:quarkus-operator-sdk-deployment:jar:3.0.7:provided[INFO] |  |  +- io.quarkus:quarkus-arc-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  +- io.quarkus:quarkus-vertx-http-dev-console-spi:jar:2.7.5.Final:provided[INFO] |  |  |  \- io.quarkus.arc:arc-processor:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-openshift-client-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  \- io.quarkus:quarkus-kubernetes-client-deployment:jar:2.7.5.Final:provided[INFO] |  |  |     \- io.quarkus:quarkus-jackson-deployment:jar:2.7.5.Final:provided[INFO] |  |  |        \- io.quarkus:quarkus-jackson-spi:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-container-image-jib-deployment:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-smallrye-health-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  +- io.quarkus:quarkus-vertx-http-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  |  +- io.quarkus:quarkus-vertx-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  |  |  \- io.quarkus:quarkus-netty-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  |  +- io.quarkus:quarkus-vertx-http-deployment-spi:jar:2.7.5.Final:provided[INFO] |  |  |  |  +- io.quarkus:quarkus-mutiny-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  |  |  \- io.quarkus:quarkus-smallrye-context-propagation-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  |  \- io.quarkus.qute:qute-core:jar:2.7.5.Final:provided[INFO] |  |  |  +- io.quarkus:quarkus-smallrye-health-spi:jar:2.7.5.Final:provided[INFO] |  |  |  +- io.quarkus:quarkus-smallrye-openapi-spi:jar:2.7.5.Final:provided[INFO] |  +- io.quarkus:quarkus-core-deployment:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus.gizmo:gizmo:jar:1.0.10.Final:provided[INFO] |  |  +- io.quarkus:quarkus-class-change-agent:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-devtools-utilities:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-builder:jar:2.7.5.Final:provided[INFO] |  +- io.quarkus:quarkus-kubernetes-deployment:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-container-image-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  +- io.quarkus:quarkus-container-image-spi:jar:2.7.5.Final:provided[INFO] |  |  |  \- io.quarkus:quarkus-container-image-util:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-kubernetes-spi:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-kubernetes-client-internal-deployment:jar:2.7.5.Final:provided[INFO] |  |  |  \- io.quarkus:quarkus-kubernetes-client-spi:jar:2.7.5.Final:provided[INFO] +- io.quarkus:quarkus-test-common:jar:2.7.5.Final:test[INFO] |  +- io.quarkus:quarkus-jsonp-deployment:jar:2.7.5.Final:provided[INFO] +- io.quarkus:quarkus-junit5:jar:2.7.5.Final:test[INFO] |  +- io.quarkus:quarkus-bootstrap-core:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-bootstrap-app-model:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-bootstrap-maven-resolver:jar:2.7.5.Final:provided[INFO] |  |  +- io.quarkus:quarkus-bootstrap-gradle-resolver:jar:2.7.5.Final:provided[INFO] |  +- io.quarkus:quarkus-junit5-properties:jar:2.7.5.Final:test```,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11933,892316300,2022-06-08T12:48:12Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java,"@@ -86,7 +86,7 @@ public void authenticate(AuthenticationFlowContext context) {         String spnegoToken = tokens[1];         UserCredentialModel spnegoCredential = UserCredentialModel.kerberos(spnegoToken); -        CredentialValidationOutput output = context.getSession().userCredentialManager().authenticate(context.getSession(), context.getRealm(), spnegoCredential);+        CredentialValidationOutput output = context.getSession().users().getUserByCredential(context.getRealm(), spnegoCredential);","Thank you for this comment. This touches a very important split of credential handling logic. Let me explain why the split is there:[`UserCredentialManager`](https://github.com/keycloak/keycloak/blob/c18b87af5f733a0ce0d284cda5469dbb1c15b5f3/server-spi/src/main/java/org/keycloak/models/UserCredentialManager.java) got deprecated and was refactored into two parts:* Where `UserModel` is known, methods were extracted into `SingleEntityCredentialManager` (to be renamed per the [comment above](https://github.com/keycloak/keycloak/pull/11933#discussion_r890467508)).  Specifically, the `isValid` method validates credentials of a particular object (a user in this case). It is thus a method of [`SingleEntityCredentialManager`](https://github.com/hmlnarik/keycloak/blob/5d48f340f68628167d10204f4bb2e0cdb3ea8fb8/server-spi/src/main/java/org/keycloak/models/SingleEntityCredentialManager.java#L37)* The only remaining method was [`authenticate`](https://github.com/keycloak/keycloak/blob/c18b87af5f733a0ce0d284cda5469dbb1c15b5f3/server-spi/src/main/java/org/keycloak/models/UserCredentialManager.java#L153). This method returns `CredentialValidationOutput`, part of which is the respective [`UserModel`](https://github.com/keycloak/keycloak/blob/c18b87af5f733a0ce0d284cda5469dbb1c15b5f3/server-spi/src/main/java/org/keycloak/models/CredentialValidationOutput.java#L30) found by the store. This lookup is used when the credentials or appropriate authenticator are not available to Keycloak and the authentication for the particular credentials has to be delegated to the store itself. In other words, this is a lookup for a single object (a user) by the store based on a condition - credentials. In that nature it is similar to lookup by ID or username.",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12233,892554426,2022-06-08T15:47:33Z,model/map/src/main/java/org/keycloak/models/map/events/MapAdminEventQuery.java,"@@ -90,7 +90,7 @@ public AdminEventQuery operation(OperationType... operations) {      @Override     public AdminEventQuery resourceType(ResourceType... resourceTypes) {-        mcb = mcb.compare(SearchableFields.RESOURCE_TYPE, EQ, Arrays.stream(resourceTypes));+        mcb = mcb.compare(SearchableFields.RESOURCE_TYPE, IN, Arrays.stream(resourceTypes).map(Enum::toString));","I believe we shouldn't transform `ResouceType` to `String` at this level, the searchable field states that it expects `ResourceType.class` as a filed type. I'd suggest rather change `MapFiledsPredicates` class as mentioned in https://github.com/keycloak/keycloak/pull/12299#discussion_r888707679 but fist we should decide how the search should behave for ResourceType.CUSTOM (https://github.com/keycloak/keycloak/pull/12299#discussion_r889222201)",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12233,892561195,2022-06-08T15:53:39Z,model/map-jpa/src/main/resources/META-INF/admin-events/jpa-admin-events-changelog-1.xml,"@@ -0,0 +1,49 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.+Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at+http://www.apache.org/licenses/LICENSE-2.0+Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <!-- format of id of changeSet: admin-events-${org.keycloak.models.map.storage.jpa.Constants.CURRENT_SCHEMA_VERSION_ADMIN_EVENT} -->+    <changeSet author=""keycloak"" id=""admin-events-1"">++        <createTable tableName=""kc_admin_event"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_admin_event"">+            <ext:column name=""entityversion"" type=""INTEGER"" jsonColumn=""metadata"" jsonProperty=""entityVersion""/>+            <ext:column name=""realmid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fRealmId""/>+            <ext:column name=""timestamp"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fTimestamp""/>+            <ext:column name=""expiration"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fExpiration""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_admin_event"" indexName=""admin_event_entityversion"">+            <column name=""entityversion""/>+        </createIndex>+        <createIndex tableName=""kc_admin_event"" indexName=""admin_event_realmid_time"">+            <column name=""realmid""/>+            <column name=""timestamp""/>","Not sure to be honest. It might make sense to have it due to being part of each search as you said. On the other hand expiration field would be changed very often which would mean the need for re-calculating the index very often. I'd go without it for now as database should be able to uset currently existing index and then ""just"" filter non-expired objects. And if it turns out the index is needed it can be added later, wdyt?",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/12233,892710057,2022-06-08T18:08:07Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/event/admin/delegate/JpaAdminEventDelegateProvider.java,"@@ -0,0 +1,67 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.event.admin.delegate;++import java.util.UUID;++import javax.persistence.EntityManager;++import org.keycloak.models.map.common.EntityField;+import org.keycloak.models.map.common.delegate.DelegateProvider;+import org.keycloak.models.map.events.MapAdminEventEntity;+import org.keycloak.models.map.events.MapAdminEventEntityFields;+import org.keycloak.models.map.storage.jpa.JpaDelegateProvider;+import org.keycloak.models.map.storage.jpa.event.admin.entity.JpaAdminEventEntity;++/**+ * A {@link DelegateProvider} implementation for {@link JpaAdminEventEntity}.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class JpaAdminEventDelegateProvider extends JpaDelegateProvider<JpaAdminEventEntity> implements DelegateProvider<MapAdminEventEntity> {++    private final EntityManager em;++    public JpaAdminEventDelegateProvider(final JpaAdminEventEntity delegate, final EntityManager em) {+        super(delegate);+        this.em = em;+    }++    @Override+    public MapAdminEventEntity getDelegate(boolean isRead, Enum<? extends EntityField<MapAdminEventEntity>> field, Object... parameters) {+        if (getDelegate().isMetadataInitialized()) return getDelegate();+        if (isRead) {+            if(field instanceof MapAdminEventEntityFields) {+                switch ((MapAdminEventEntityFields) field) {+                    case ID:+                    case REALM_ID:+                    case TIMESTAMP:+                    case EXPIRATION:+                        return getDelegate();++                    default:+                        setDelegate(em.find(JpaAdminEventEntity.class, UUID.fromString(getDelegate().getId())));+                }+            } else {+                throw new IllegalStateException(""Not a valid client scope field: "" + field);+            }+        } else {+            setDelegate(em.find(JpaAdminEventEntity.class, UUID.fromString(getDelegate().getId())));+        }+        return getDelegate();+    }+}","Changed, both event entities no longer have a delegate.",
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/12144,892786684,2022-06-08T19:36:02Z,.github/scripts/need-respin.sh,"@@ -0,0 +1,22 @@+#! /bin/bash+set -euxo pipefail++image=$1+#  Get Latest Keycloak release tag+tag=$(curl -sL http://github.com/keycloak/keycloak/releases/latest -H ""Accept: application/json"" | jq -r '.tag_name')++docker pull ${image}:${tag}++base_image_url=$(docker inspect ${image}:${tag} | jq -r '.[0].Config.Labels.url')++base_image_name=$(docker inspect ${image}:${tag} | jq -r '.[0].Config.Labels.url' | sed 's/.*#\///' | sed 's/\/images.*//')++docker pull ${base_image_name}:latest++latest_base_image_url=$(docker inspect ${base_image_name}:latest | jq -r '.[0].Config.Labels.url')++if [ ""${base_image_url}"" = ""${latest_base_image_url}"" ]; then","In theory UBI should be maintained at a Health Score of A at all times, so there shouldn't be significant public CVEs whenever you happen to pull the latest UBI, even though it could be many weeks old (29 days as of this comment, with [no CVEs listed](https://catalog.redhat.com/software/containers/ubi8/5c647760bed8bd28d0e38f9f?container-tabs=security)).I don't think `microdnf update` would be required at any point to fix a CVE from UBI. Anything that's embargoed wouldn't show up in the updates, and it would be embargoed until a new UBI is published",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/10917,893131872,2022-06-09T06:51:02Z,adapters/oidc/installed/src/main/java/org/keycloak/adapters/installed/KeycloakInstalled.java,"@@ -567,10 +567,9 @@ protected ResteasyClient getResteasyClient() {     }      protected ResteasyClient createResteasyClient() {-        return new ResteasyClientBuilder()+        return ((ResteasyClientBuilder) ResteasyClientBuilder.newBuilder())                 .connectionCheckoutTimeout(1, TimeUnit.HOURS)                 .connectionTTL(1, TimeUnit.HOURS)-                .socketTimeout(1, TimeUnit.HOURS)","I see that the call to `socketTimeout` has been removed. It was deprecated, and the replacement is `readTimeout`. I would therefore recomment to re-add this. To be consistent, there should also be a `connectTimeout` of one hour. ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/10917,893155869,2022-06-09T07:20:36Z,adapters/oidc/installed/src/main/java/org/keycloak/adapters/installed/KeycloakInstalled.java,"@@ -567,10 +567,9 @@ protected ResteasyClient getResteasyClient() {     }      protected ResteasyClient createResteasyClient() {-        return new ResteasyClientBuilder()+        return ((ResteasyClientBuilder) ResteasyClientBuilder.newBuilder())                 .connectionCheckoutTimeout(1, TimeUnit.HOURS)                 .connectionTTL(1, TimeUnit.HOURS)-                .socketTimeout(1, TimeUnit.HOURS)                 .disableTrustManager().build();","I see that the trustmanager is disabled here. I'm lacking a comment why this would be a good idea here, and also doing this as a default without an option to re-configure it. I know this hasn't been changed in this PR, so it might a new issue. I had a look into [keycloak-documentation](https://github.com/keycloak/keycloak-documentation/blob/main/securing_apps/topics/oidc/java/installed-adapter.adoc) to find out what this class is trying to achieve, and didn't find a reason why not to check the certificates of the Keycloak server. ",x
39339428,leischt,https://api.github.com/repos/keycloak/keycloak/pulls/11852,893159116,2022-06-09T07:24:05Z,themes/src/main/resources/theme/base/admin/resources/js/services.js,"@@ -387,6 +387,14 @@ module.factory('RealmSpecificLocalizationTexts', function($resource) {     return $resource(authUrl + '/admin/realms/:id/localization/:locale', {         id : '@realm',         locale : '@locale'+    }, {+        get: {+            isArray: false,+                method: 'GET',+                params: {+                    useRealmDefaultLocaleFallback: '@useRealmDefaultLocaleFallback'","There is also a UI page to manage the localization texts. This page should only show the texts which are defined for a given locale and don't use the fallback feature. I'm not sure if it is better to specify the value of the parameter ""useRealmDefaultLocaleFallback"" each time or have a default and modify it for one of the calls.Relevant call for the localization management UI page: https://github.com/keycloak/keycloak/blob/b34f46155c494bb3944913eb94cd6bdb845eae33/themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js#L614",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10332,893216221,2022-06-09T08:23:51Z,model/map/src/main/java/org/keycloak/models/map/common/AbstractMapProviderFactory.java,"@@ -78,4 +78,8 @@ public void init(Scope config) {     public boolean isSupported() {         return Profile.isFeatureEnabled(Profile.Feature.MAP_STORAGE);     }++    public Scope getStorageConfigScope() {+        return storageConfigScope;+    }","@sguilhen @vramik This scope is the right one for the storage config, the options inherited from the root (and perhaps profile) are available transparently from this scope. See [`ComponentModelScope`](https://github.com/keycloak/keycloak/blob/b34f46155c494bb3944913eb94cd6bdb845eae33/server-spi-private/src/main/java/org/keycloak/component/ComponentModelScope.java#L67-L71). However, storage maintains the capability of the storage to respect letter case. Whether the lettercase should be respected _if the store supports it_ is however setting on the realm, so it has to be a property of the map user provider.---@vramik Factory should translate the configuration `Scope` values into properties and the objects created by the factory should not be given access to the `Scope` instance unless justified.The reason is to keep the configuration management maintained in a single place (factory), and translated once (in the factory) rather than multiple times (in each created instance).It seems that the only reason for this method is the eventually be searched for `username-lettercase` option. This by itself is not sufficient justification. Is there any other?",x
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12393,893345359,2022-06-09T10:36:48Z,CODE_OF_CONDUCT.md,"@@ -0,0 +1,128 @@+# Contributor Covenant Code of Conduct++## Our Pledge++We as members, contributors, and leaders pledge to make participation in our+community a harassment-free experience for everyone, regardless of age, body+size, visible or invisible disability, ethnicity, sex characteristics, gender+identity and expression, level of experience, education, socio-economic status,+nationality, personal appearance, race, religion, or sexual identity+and orientation.++We pledge to act and interact in ways that contribute to an open, welcoming,+diverse, inclusive, and healthy community.++## Our Standards++Examples of behavior that contributes to a positive environment for our+community include:++* Demonstrating empathy and kindness toward other people+* Being respectful of differing opinions, viewpoints, and experiences+* Giving and gracefully accepting constructive feedback+* Accepting responsibility and apologizing to those affected by our mistakes,+  and learning from the experience+* Focusing on what is best not just for us as individuals, but for the+  overall community++Examples of unacceptable behavior include:++* The use of sexualized language or imagery, and sexual attention or+  advances of any kind+* Trolling, insulting or derogatory comments, and personal or political attacks+* Public or private harassment+* Publishing others' private information, such as a physical or email+  address, without their explicit permission+* Other conduct which could reasonably be considered inappropriate in a+  professional setting++## Enforcement Responsibilities++Community leaders are responsible for clarifying and enforcing our standards of","Do we have the current list of ""Community leaders"", maybe it should be matching the maintainers: https://github.com/keycloak/keycloak/blob/main/MAINTAINERS.md ? and, in case, can we link it?",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12435,894505978,2022-06-10T13:09:37Z,config-api/src/main/java/org/keycloak/config/ProxyOptions.java,"@@ -0,0 +1,37 @@+package org.keycloak.config;++import java.util.ArrayList;+import java.util.Arrays;+import java.util.List;+import java.util.stream.Collectors;++public class ProxyOptions {++    public enum Mode {+        none,+        edge,+        reencrypt,+        passthrough;+    }++    public final static Option proxy = new OptionBuilder<>(""proxy"", Mode.class)+            .category(OptionCategory.PROXY)+            .description(""The proxy address forwarding mode if the server is behind a reverse proxy. "" ++                    ""Possible values are: "" + String.join("","", Arrays.stream(Mode.values()).skip(1).map(m -> m.name()).collect(Collectors.joining("",""))))+            .defaultValue(Mode.none)+            .expectedValues(Mode.values())+            .build();++    // TODO: check originally missing a ""from""+    public final static Option proxyForwardedHost = new OptionBuilder<>(""proxy-forwarded-host"", Boolean.class)","Yes, it is. And it is not a `kc` property if you look at its original name (`quarkus.http.proxy.enable-forwarded-host`).We have it there to dynamically set the corresponding Quarkus property based on the `proxy` option.You don't need to have that one in the list of supported options. It should be there in the server extension.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12386,894559215,2022-06-10T13:53:25Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -153,6 +153,14 @@             <artifactId>infinispan-server-hotrod</artifactId>             <version>${infinispan.version}</version>         </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-quarkus-server</artifactId>+        </dependency>+        <dependency>+            <groupId>com.sun.xml.ws</groupId>",Could you please elaborate on why we need this dependency? Looks like you added after the first round of reviews?,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12386,894559532,2022-06-10T13:53:43Z,testsuite/model/pom.xml,"@@ -100,6 +100,11 @@             <groupId>org.keycloak</groupId>             <artifactId>keycloak-model-map-ldap</artifactId>         </dependency>+        <dependency>+            <groupId>org.infinispan</groupId>+            <artifactId>infinispan-commons</artifactId>",Could you please elaborate on why we need this dependency? Looks like you added after the first round of reviews?,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11933,895417315,2022-06-13T07:42:18Z,model/legacy-private/src/main/java/org/keycloak/storage/datastore/LegacyDatastoreProvider.java,"@@ -66,6 +72,13 @@ public GroupProvider groupStorageManager() {         return groupStorageManager;     } +    public UserProvider userStorageManager() {","Good catch. I'd say it makes sense to have a thread-local check for each of this methods to capture (indirect) call to the same method from within itself leading to stack overflow (e.g. `userLocalStorage` calling indirectly `userLocalStorage`), and throw an exception stating that this is illegal and the provider needs adjustment per migration guide. This in turn also means updating the migration notes with an example of how to update such a user provider in backwards-compatible manner.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/11933,895525225,2022-06-13T09:40:06Z,testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java,"@@ -157,7 +159,7 @@ public boolean updateCredential(RealmModel realm, UserModel user, CredentialInpu              users.get(translateUserName(user.getUsername())).hashedPassword = newPassword; -            UserCache userCache = session.userCache();+            UserCache userCache = UserStorageUtil.userCache(session);","The point of the `BackwardsCompatibilityUserStorage` was to preserve backwards compatibility of the user storage providers. So ideally this class should be kept without changes to ""simulate"" that custom user storage providers deployed by the users in the previous Keycloak versions still work without code changes needed.If there is code change really needed, it means the backwards incompatible change.My vote is to avoid changes in this class unless necessary  (which doesn't seem so as the methods on `KeycloakSession` are still kept in this PR?). If there is code change really needed, it is good indication that there is a need to document something in the migration guide that people need to update their user storage providers.",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12386,895984792,2022-06-13T17:50:24Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -150,7 +150,8 @@ private Process startContainer() throws IOException {     private String[] getProcessCommands() {         List<String> commands = new ArrayList<>(); -        commands.add(""./kc.sh"");+        String os = System.getProperty(""os.name"").toLowerCase();","Works for me to not add the SystemUtils library (or the Environment wrapper we use and you used in your previous version), but then please check if ""os.name"" is null before lowercasing, bc. even when true for 99% of the systems, it may be (and I experienced this in the past 😅 ) that os.name is not set at all for some reason.  Apache commons [checks](https://github.com/apache/commons-lang/blob/2b13f5b9fd288e4cce3300a6644181f67d6fc3a1/src/main/java/org/apache/commons/lang3/SystemUtils.java#L1908-L1913) for that, and so should we :)",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12339,896492524,2022-06-14T07:51:45Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/singleUseObject/HotRodSingleUseObjectEntity.java,"@@ -42,18 +42,21 @@ public class HotRodSingleUseObjectEntity extends AbstractHotRodEntity {     public String id;      @ProtoField(number = 3)-    public String userId;+    public String objectKey;","Just a note, not necessary to change in this PR as we don't need the no-downtime upgrade yet. But in the future, if you add a new field to `HotRod*Entity` never change numbers assigned to existing fields. It is important that all new fields are added at the end of the field list with the number `LAST_FIELD_NUMBER + 1` (If not stated otherwise by some comment).",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/12435,896600178,2022-06-14T09:35:48Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java,"@@ -74,78 +104,27 @@ public String apply(String value, ConfigSourceInterceptorContext configSourceInt                                 return rootLevel;                             }                         })-                        .defaultValue(DEFAULT_LOG_LEVEL)-                        .description(""The log level of the root category or a comma-separated list of individual categories and their levels. For the root category, you don't need to specify a category."")                         .paramLabel(""category:level"")-                        .build(),-                builder().from(""log-console-output"")-                        .to(""quarkus.log.console.json"")-                        .defaultValue(DEFAULT_CONSOLE_OUTPUT)-                        .description(""Set the log output to JSON or default (plain) unstructured logging."")-                        .paramLabel(""default|json"")-                        .expectedValues(DEFAULT_CONSOLE_OUTPUT,""json"")-                        .transformer((value, context) -> {-                            if(value.equals(DEFAULT_CONSOLE_OUTPUT)) {-                                return Boolean.FALSE.toString();-                            }-                            return Boolean.TRUE.toString();-                        })-                        .build(),-                builder().from(""log-console-format"")-                        .to(""quarkus.log.console.format"")-                        .defaultValue(""%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c] (%t) %s%e%n"")-                        .description(""The format of unstructured console log entries. If the format has spaces in it, escape the value using \""<format>\""."")-                        .paramLabel(""format"")-                        .build(),-                builder().from(""log-console-color"")-                        .to(""quarkus.log.console.color"")-                        .defaultValue(Boolean.FALSE.toString())-                        .description(""Enable or disable colors when logging to console."")-                        .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)-                        .build(),-                builder().from(""log-console-enabled"")-                        .mapFrom(""log"")-                        .to(""quarkus.log.console.enable"")-                        .hidden(true)-                        .transformer(resolveLogHandler(DEFAULT_LOG_HANDLER))-                        .build(),-                builder().from(""log-file-enabled"")-                        .mapFrom(""log"")-                        .to(""quarkus.log.file.enable"")-                        .hidden(true)-                        .transformer(resolveLogHandler(""file""))-                        .build(),-                builder().from(""log-file"")-                        .to(""quarkus.log.file.path"")-                        .defaultValue(DEFAULT_LOG_PATH)-                        .description(""Set the log file path and filename."")-                        .paramLabel(""<path>/<file-name>.log"")-                        .transformer(LoggingPropertyMappers::resolveFileLogLocation)-                        .build(),-                builder().from(""log-file-format"")-                        .to(""quarkus.log.file.format"")-                        .defaultValue(""%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c] (%t) %s%e%n"")-                        .description(""Set a format specific to file log entries."")-                        .paramLabel(""<format>"")                         .build()         };     } -    private static BiFunction<String, ConfigSourceInterceptorContext, String> resolveLogHandler(String handler) {+    private static BiFunction<String, ConfigSourceInterceptorContext, String> ResolveLogHandler(String handler) {","Without this change the code won't compile, if you prefer a different encoding I'm up for changing it, but this (or a similar) change is strictly necessary.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11933,896726653,2022-06-14T11:59:14Z,server-spi/src/main/java/org/keycloak/models/SingleEntityCredentialManager.java,"@@ -0,0 +1,129 @@+/*+ * Copyright 2022. Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models;++import org.keycloak.credential.CredentialInput;+import org.keycloak.credential.CredentialModel;++import java.util.Arrays;+import java.util.List;+import java.util.stream.Stream;++/**+ * Validates and manages the credentials of a known entity (for example, a user).+ */+public interface SingleEntityCredentialManager {",Renaming has been done in b37af25bc4dc4a33a70487eb15c813ab298f165a,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11933,896741877,2022-06-14T12:16:27Z,testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java,"@@ -157,7 +159,7 @@ public boolean updateCredential(RealmModel realm, UserModel user, CredentialInpu              users.get(translateUserName(user.getUsername())).hashedPassword = newPassword; -            UserCache userCache = session.userCache();+            UserCache userCache = UserStorageUtil.userCache(session);","Hi @hmlnarik - I had a look and `UserCache` is part of the interface of `KeycloakSession`, so I suppose it can be only deprecated in this release and not moved or removed (the same way we did this for `userCredentialManager()`).And it also has the semantic that it returns null when no cache is available, and non-null when there is a cache. As there is no cache in map store mode, it will return null and it fine. ",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11933,897625276,2022-06-15T07:23:26Z,testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java,"@@ -157,7 +159,7 @@ public boolean updateCredential(RealmModel realm, UserModel user, CredentialInpu              users.get(translateUserName(user.getUsername())).hashedPassword = newPassword; -            UserCache userCache = session.userCache();+            UserCache userCache = UserStorageUtil.userCache(session);",`UserCache` is a `UserProvider`. Could you please deprecate it and make it return `null` by default? The existing code should be handled similarly to other `KeycloakSession` methods which were transformed in this PR.,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/11933,897714768,2022-06-15T08:52:35Z,testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java,"@@ -157,7 +159,7 @@ public boolean updateCredential(RealmModel realm, UserModel user, CredentialInpu              users.get(translateUserName(user.getUsername())).hashedPassword = newPassword; -            UserCache userCache = session.userCache();+            UserCache userCache = UserStorageUtil.userCache(session);","After talking to @hmlnarik I now know that I'm allowed to make this breaking change. While the method in `KeycloakSession` wasn't used any more, there were other classes and interfaces depending on `UserCache`, which have been refactored and moved. See 0f0d9fd11738a1beb37d6e81e5c5d08d9b5b91c4 for the commit.Update of the migration guide will follow shortly.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/12513,897851338,2022-06-15T11:16:45Z,core/src/main/java/org/keycloak/crypto/integration/CryptoIntegration.java,"@@ -0,0 +1,47 @@+package org.keycloak.crypto.integration;++import org.jboss.logging.Logger;+import org.keycloak.common.util.BouncyIntegration;+import org.keycloak.common.util.reflections.Reflections;++/**","Ideally this should be a KC SPI, and not something different, but for the time being we need this to work with adapters as well, but would be good to refactor this when we no longer have any adapters.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/12513,897856172,2022-06-15T11:20:31Z,pom.xml,"@@ -75,6 +75,12 @@         <apache.mime4j.version>0.6</apache.mime4j.version>         <jboss.dmr.version>1.5.1.Final</jboss.dmr.version>         <bouncycastle.version>1.68</bouncycastle.version>++        <!-- TODO Are these correct versions? -->+        <bouncycastle.fips.version>1.0.2</bouncycastle.fips.version>+        <bouncycastle.pkixfips.version>1.0.3</bouncycastle.pkixfips.version>+        <bouncycastle.tlsfips.version>1.0.11</bouncycastle.tlsfips.version>",I used some newer versions here:https://github.com/stianst/keycloak/blob/24f10231fd49db6c34fcca222d720b683f523069/quarkus/runtime/pom.xml#L526,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/12513,897856818,2022-06-15T11:21:19Z,quarkus/runtime/pom.xml,"@@ -583,6 +563,88 @@                 </dependency>             </dependencies>         </profile>++        <profile>+            <id>crypto-default</id>+            <activation>+                <property>+                    <name>!fips140-2</name>+                </property>+            </activation>+            <dependencies>+                <dependency>+                    <groupId>org.bouncycastle</groupId>+                    <artifactId>bcpkix-jdk15on</artifactId>+                    <exclusions>+                        <exclusion>+                            <groupId>*</groupId>+                            <artifactId>*</artifactId>+                        </exclusion>+                    </exclusions>+                </dependency>+                <dependency>+                    <groupId>org.bouncycastle</groupId>+                    <artifactId>bcprov-jdk15on</artifactId>+                    <exclusions>+                        <exclusion>+                            <groupId>*</groupId>+                            <artifactId>*</artifactId>+                        </exclusion>+                    </exclusions>+                </dependency>",Can we inherit these dependencies from crypto-default and crypto-fips1402 instead of listing them again here?,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11933,898880293,2022-06-16T09:20:00Z,testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java,"@@ -157,7 +159,7 @@ public boolean updateCredential(RealmModel realm, UserModel user, CredentialInpu              users.get(translateUserName(user.getUsername())).hashedPassword = newPassword; -            UserCache userCache = session.userCache();+            UserCache userCache = UserStorageUtil.userCache(session);",Fixed in b78a39ce68d3a06252eb92377f413acf52264aff and 10f9bad15789b60bfd4199e7bea7b2bc4d1c7199,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/11933,899148011,2022-06-16T14:28:17Z,model/legacy-private/src/main/java/org/keycloak/storage/datastore/LegacyDatastoreProvider.java,"@@ -66,6 +72,13 @@ public GroupProvider groupStorageManager() {         return groupStorageManager;     } +    public UserProvider userStorageManager() {","Thank you for the fix @ahus1. I think I didn't describe what I meant properly in my previous comment. We discussed this with @hmlnarik in the office and concluded that `ThreadLocal` may not be the best solution in some situations.The reason why methods `*localStorage` and `*storageManager` exist is to avoid visiting cache or storage managers in this method call. In this PR we basically replaced these methods with calling the `users()` method. The problem with these methods is that majority of people don't know what is the purpose of them and it may be often the case that there is no reason for calling them and the method can be replaced with `users()` call with no problem. For those, the solution from this PR would work. However, there are cases where there is a real reason for calling them and these cases may be broken in a not very straightforward, hard-to-find way. To give you some specific example: One of the use-cases for `userLocalStorage` was to import users from custom storage implementation (one of them was our LDAP provider) on reading. This means when a user was read from LDAP, there was some logic to import the user into the database if necessary. The import is done using the `addUser` method. The problem here is that after this PR the `addUser` method call can end up even in the same provider, hence it will be importing users to itself.This is just an artificial example. It may be the case that nothing like that will happen. However, I am afraid there is a high probability some weird issues may pop up.Currently, I can see 3 solutions to this.1. Add legacy modules import to `services`; make these methods work as before; deprecate all these methods and include a big warning that this is the last version that has these methods and they need to do this simple fix: [example from LDAP provider](https://github.com/keycloak/keycloak/pull/11933/files#diff-bb4ffa08fae23dc22710d174b81fadf5028b58a8742d9fba4035a2c916e92982R538)2. Throw an exception right after calling them. I would say using the `users()` method basically breaks the purpose of these methods and we should make sure nobody is using them anymore as they can cause some funny behaviour like the one I described above.3. Remove these methods from `KeycloakSession` interface completely. If we don't want solution 1 and these methods no longer do what they should and require migration, we can basically remove them right away. This is similar to solution 2., however, in this case, the necessity of migration can be discovered sooner (in compile time).WDYT @hmlnarik @ahus1? ",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11933,899878587,2022-06-17T08:11:17Z,model/legacy-private/src/main/java/org/keycloak/storage/datastore/LegacyDatastoreProvider.java,"@@ -66,6 +72,13 @@ public GroupProvider groupStorageManager() {         return groupStorageManager;     } +    public UserProvider userStorageManager() {","Thank you @mhajas - these comments make sense.The original intention accounted for a harmless misuse of these methods in custom extensions where they were confused for ordinary `users()` and similar methd. Yet I agree with your reasoning. Ad the options:1. Option 1 is not viable - it would violate the very purpose of this PR2. This seems the best option. Ideal would be to fix it in this PR, but I would be open to fixing this in a follow-up PR which would need to be done before Keycloak 19.3. This is not possible at this moment. We need to keep the API compatibility for some time to deprecate the methods.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/12393,899898099,2022-06-17T08:33:58Z,CODE_OF_CONDUCT.md,"@@ -0,0 +1,128 @@+# Contributor Covenant Code of Conduct++## Our Pledge++We as members, contributors, and leaders pledge to make participation in our+community a harassment-free experience for everyone, regardless of age, body+size, visible or invisible disability, ethnicity, sex characteristics, gender+identity and expression, level of experience, education, socio-economic status,+nationality, personal appearance, race, religion, or sexual identity+and orientation.++We pledge to act and interact in ways that contribute to an open, welcoming,+diverse, inclusive, and healthy community.++## Our Standards++Examples of behavior that contributes to a positive environment for our+community include:++* Demonstrating empathy and kindness toward other people+* Being respectful of differing opinions, viewpoints, and experiences+* Giving and gracefully accepting constructive feedback+* Accepting responsibility and apologizing to those affected by our mistakes,+  and learning from the experience+* Focusing on what is best not just for us as individuals, but for the+  overall community++Examples of unacceptable behavior include:++* The use of sexualized language or imagery, and sexual attention or+  advances of any kind+* Trolling, insulting or derogatory comments, and personal or political attacks+* Public or private harassment+* Publishing others' private information, such as a physical or email+  address, without their explicit permission+* Other conduct which could reasonably be considered inappropriate in a+  professional setting++## Enforcement Responsibilities++Community leaders are responsible for clarifying and enforcing our standards of","I think maintainers is probably the best definition we have of `community leaders` so I'd suggest changing the naming from community leaders to maintainers, and also including the link as @andreaTP suggested.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/11933,899976721,2022-06-17T10:08:56Z,model/legacy-private/src/main/java/org/keycloak/storage/datastore/LegacyDatastoreProvider.java,"@@ -66,6 +72,13 @@ public GroupProvider groupStorageManager() {         return groupStorageManager;     } +    public UserProvider userStorageManager() {","Yes, the other ones will need it as well.We need to address the `userLocalStorage()` and `userCache()` at least as well along with `userStorageManager()`.Let's keep it then in a separate PR then completely. #12556",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12230,901398171,2022-06-20T08:34:00Z,model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProvider.java,"@@ -123,14 +123,6 @@ public void clear(RealmModel realm, long olderThan) {     @Override     public void clearExpiredEvents() {         LOG.tracef(""clearExpiredEvents()%s"", getShortStackTrace());","Make this log also warning that expiration should not be called explicitly, and deprecate this method",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12230,901401573,2022-06-20T08:37:31Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java,"@@ -24,6 +24,7 @@ import org.keycloak.authorization.DefaultAuthorizationProviderFactory; import org.keycloak.authorization.store.StoreFactorySpi; import org.keycloak.cluster.ClusterSpi;+import org.keycloak.common.util.Time;",unused import?,x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12230,901489067,2022-06-20T10:07:37Z,model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProvider.java,"@@ -123,14 +123,6 @@ public void clear(RealmModel realm, long olderThan) {     @Override     public void clearExpiredEvents() {         LOG.tracef(""clearExpiredEvents()%s"", getShortStackTrace());",Warning added. The method is already deprecated.,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12609,902248370,2022-06-21T07:24:31Z,services/src/main/java/org/keycloak/services/clientregistration/oidc/DescriptionConverter.java,"@@ -326,7 +323,7 @@ public static OIDCClientRepresentation toExternalResponse(KeycloakSession sessio             }         } -        if (client.getClientAuthenticatorType().equals(ClientIdAndSecretAuthenticator.PROVIDER_ID)) {+        if (!client.getClientAuthenticatorType().equals(JWTClientAuthenticator.PROVIDER_ID)) {","This solution is not flexible enough as there are other client authenticators (like for example `X509ClientAuthenticator`), which should not include secrets. Also secret should not be included for public clients (case when `none` is used as client authentication method).I suggest something bit more flexible like:- Introduce new method on `ClientAuthenticatorFactory` interface like:``` boolean default supportsSecret() {     return false;}```And override that just for ClientIdAndSecretAuthenticator and for JWTClientSecretAuthenticator.- Move the check inside this ""else"" block https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/clientregistration/oidc/DescriptionConverter.java#L322-L326 . Note that you already have ClientAuthenticatorFactory here. So perhaps something like this will do the trick:```if (clientAuth.supportsSecret() {            response.setClientSecret(client.getSecret());            response.setClientSecretExpiresAt(                    OIDCClientSecretConfigWrapper.fromClientRepresentation(client).getClientSecretExpirationTime());}```Is it fine for you to update like this?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12513,902354418,2022-06-21T08:59:53Z,core/src/main/java/org/keycloak/crypto/integration/DefaultCryptoProvider.java,"@@ -0,0 +1,23 @@+package org.keycloak.crypto.integration;++import java.security.NoSuchAlgorithmException;+import java.security.SecureRandom;++import org.keycloak.jose.jwe.alg.AesKeyWrapAlgorithmProvider;+import org.keycloak.jose.jwe.alg.JWEAlgorithmProvider;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class DefaultCryptoProvider implements CryptoProvider {","Yes, the plan is to do it later. Moving it now will mean that module ""crypto/default"" will be new mandatory module for the default distribution (including adapters), which will mean lots of additional changes in this PR in the packaging etc.IMO The ideal final state will be, that modules like keycloak-common or keycloak-core don't have dependency on bouncyCastle and hence the crypto stuff is incrementally moved into ""crypto/default"" and ""crypto/fips"" and at this stage the DefaultCryptoProvider will be in ""crypto/default"" .",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12627,902551080,2022-06-21T12:22:44Z,config-api/src/main/java/org/keycloak/config/TransactionOptions.java,"@@ -5,17 +5,26 @@  public class TransactionOptions { -    public static final Option<Boolean> TRANSACTION_XA_ENABLED = new OptionBuilder<>(""transaction-xa-enabled"", Boolean.class)+    public static final Option<Boolean> DB_XA_ENABLED = new OptionBuilder<>(""db-xa-enabled"", Boolean.class)","Please, change the option. IMO, it belongs to the database namespace.Another option is to keep the option name (`transaction-xa-enabled`). Perhaps this makes more sense? ",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12627,902554840,2022-06-21T12:26:48Z,config-api/src/main/java/org/keycloak/config/TransactionOptions.java,"@@ -5,17 +5,26 @@  public class TransactionOptions { -    public static final Option<Boolean> TRANSACTION_XA_ENABLED = new OptionBuilder<>(""transaction-xa-enabled"", Boolean.class)+    public static final Option<Boolean> DB_XA_ENABLED = new OptionBuilder<>(""db-xa-enabled"", Boolean.class)             .category(OptionCategory.TRANSACTION)-            .description(""Manually override the transaction type. Transaction type XA and the appropriate driver is used by default."")+            .description(""Set if the XA transaction type is used. Transaction type XA and the appropriate database driver is used by default."")","I would change to:```If set to false, allow using a non-XA data source in case the database does not support XA transactions. By default, only XA data sources are supported. This option is automatically set to false if the `transactions-jta-enabled` option is set to false. ```",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12627,902566292,2022-06-21T12:38:46Z,config-api/src/main/java/org/keycloak/config/TransactionOptions.java,"@@ -5,17 +5,26 @@  public class TransactionOptions { -    public static final Option<Boolean> TRANSACTION_XA_ENABLED = new OptionBuilder<>(""transaction-xa-enabled"", Boolean.class)+    public static final Option<Boolean> DB_XA_ENABLED = new OptionBuilder<>(""db-xa-enabled"", Boolean.class)             .category(OptionCategory.TRANSACTION)-            .description(""Manually override the transaction type. Transaction type XA and the appropriate driver is used by default."")+            .description(""Set if the XA transaction type is used. Transaction type XA and the appropriate database driver is used by default."")             .buildTime(true)             .defaultValue(Boolean.TRUE)             .expectedValues(Boolean.TRUE, Boolean.FALSE)             .build(); +    public static final Option<Boolean> TRANSACTION_JTA_ENABLED = new OptionBuilder<>(""transaction-jta-enabled"", Boolean.class)+            .category(OptionCategory.TRANSACTION)+            .description(""Set if JTA is used. Transaction type XA and the appropriate driver is used by default."")","Set if distributed transactions are supported. If set to false, transactions are managed by the server and can not be joined if multiple data sources are used. By default, distributed transactions are enabled and only XA data sources can be used.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12501,903756723,2022-06-22T13:38:57Z,model/jpa/src/main/resources/META-INF/jpa-changelog-master.xml,"@@ -73,5 +73,5 @@     <include file=""META-INF/jpa-changelog-15.0.0.xml""/>     <include file=""META-INF/jpa-changelog-17.0.0.xml""/>     <include file=""META-INF/jpa-changelog-18.0.0.xml""/>-+    <include file=""META-INF/jpa-changelog-19.0.0.xml"" />","In order to avoid changing the database schema, please use realm attributes rather than adding a column.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12501,903761010,2022-06-22T13:42:23Z,services/src/main/java/org/keycloak/services/scheduled/ClearExpiredAdminEvents.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.scheduled;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.models.KeycloakSession;+import org.keycloak.timer.ScheduledTask;++public class ClearExpiredAdminEvents implements ScheduledTask {",This does not belong to server-spi-private but to legacy-private module now.,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12501,903762020,2022-06-22T13:43:17Z,server-spi-private/src/main/java/org/keycloak/events/EventStoreProvider.java,"@@ -78,6 +78,10 @@ public interface EventStoreProvider extends EventListenerProvider {      *      */     void clearExpiredEvents();+    /**+     * Clears all expired admin events in all realms+     */+    void clearExpiredAdminEvents();","Adding this method cannot be accepted.The clear expired methods are [deprecated](https://github.com/keycloak/keycloak/blob/95528e77bbd6cc7986c2e1de6bf89cbf50803aec/server-spi-private/src/main/java/org/keycloak/events/EventStoreProvider.java#L75-L77) and do not want to introduce new `clear` methods. In the new store, it is responsibility of the store, not the event provider, to clear the entities e.g. via scheduled database task.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12501,905029995,2022-06-23T13:34:34Z,services/src/main/java/org/keycloak/services/scheduled/ClearExpiredAdminEvents.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.scheduled;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.models.KeycloakSession;+import org.keycloak.timer.ScheduledTask;++public class ClearExpiredAdminEvents implements ScheduledTask {","It is now responsibility of the appropriate technology. Scheduling is still an option, only needs to be kept local to that technology (legacy datastore in this case).The only difference is cleanup methods are not in the interface, but you can still implement those in `JpaEventStoreProvider` directly. In the scheduled task, you can then look for `EventStoreProvider`. Given that legacy store is in operation, it can be safely cast to `JpaEventStoreProvider` directly, as that is the only implementation of `EventStoreProvider`. Hence you could use```java((JpaEventStoreProvider) session.getProvider(EventStoreProvider).clearExpiredAdminEvents();```The cleanup tasks have been moved to `LegacyDatastoreProvider`:https://github.com/keycloak/keycloak/blob/d048bf22fbf648f6b25f13223d7da0fc258ec5d2/model/legacy-private/src/main/java/org/keycloak/storage/datastore/LegacyDatastoreProviderFactory.java#L99-L102Cleanup would be registered there.When setting up the task, ensure that the cleanup task does not take too long and is not spawn too often, otherwise it would cause `OptimisticLockingExceptions` due to concurrent access to the database. Keycloak already has suffered from these issues and we should not introduce more of that strain to the database.",
38664348,thpeter,https://api.github.com/repos/keycloak/keycloak/pulls/12501,905763311,2022-06-24T06:42:40Z,services/src/main/java/org/keycloak/services/scheduled/ClearExpiredAdminEvents.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.scheduled;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.models.KeycloakSession;+import org.keycloak.timer.ScheduledTask;++public class ClearExpiredAdminEvents implements ScheduledTask {",Hi thanks for the hints. I did find the new location of the scheduled tasks before but was not sure if it would be fine to have an explicit dependency to the implementation of the store in this place.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12241,905764927,2022-06-24T06:45:40Z,model/map-jpa/src/main/resources/META-INF/user-sessions/client/jpa-client-sessions-changelog-1.xml,"@@ -0,0 +1,69 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.++Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at++http://www.apache.org/licenses/LICENSE-2.0++Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <changeSet author=""keycloak"" id=""client-sessions-1"">++        <createTable tableName=""kc_client_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""usersessionid"" type=""UUID"">+                <constraints foreignKeyName=""client_session_fk_user_session_fkey"" references=""kc_user_session(id)"" deleteCascade=""true"" deferrable=""true"" initiallyDeferred=""true"" />","The deferrable/initiallyDeferring don't work on CockroachDB AFAIK, therefore I suggest to put this into a separate changeset that only runs for PostgreSQL. For CockroachDB, there should be an index on that column instead to be able to efficiently query all client sessions for a user session. To make the cleanup  work on CockroachDB, I suppose there needs to be a change in this issue to delete all client session when a user session is removed (critieria query?), and a new issue to be implemented later with a housekeeping mechanism that cleans up client_session that might be left-over. Until that is implemented we could count on the regular expiry of client sessions.UPDATE: maybe the MapUserSessionProvider.removeUserSession(realm, session)/removeUserSessions(realm, user) could call also call clientSessionTx.delete() ... it might be less straightforward for removeUserSessions(realm).It might be reasonable to do some things in a separate issue as long as it works with CockroachDB now. ",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12241,905772380,2022-06-24T06:58:28Z,model/map-jpa/src/main/resources/META-INF/user-sessions/user/jpa-user-sessions-changelog-1.xml,"@@ -0,0 +1,93 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.++Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at++http://www.apache.org/licenses/LICENSE-2.0++Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <changeSet author=""keycloak"" id=""user-sessions-1"">++        <createTable tableName=""kc_user_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_user_session"">+            <ext:column name=""entityversion"" type=""INTEGER"" jsonColumn=""metadata"" jsonProperty=""entityVersion""/>+            <ext:column name=""offline"" type=""BOOLEAN"" jsonColumn=""metadata"" jsonProperty=""fOffline""/>+            <ext:column name=""realmid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fRealmId""/>+            <ext:column name=""userid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fUserId""/>+            <ext:column name=""brokersessionid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fBrokerSessionId""/>+            <ext:column name=""brokeruserid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fBrokerUserId""/>+            <ext:column name=""lastsessionrefresh"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fLastSessionRefresh""/>+            <ext:column name=""expiration"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fExpiration""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_user_session"" indexName=""user_session_entityVersion"">+            <column name=""entityversion""/>+        </createIndex>+        <createIndex tableName=""kc_user_session"" indexName=""user_session_realm_offline_user"">+            <column name=""realmid""/>+            <column name=""offline""/>+            <column name=""userid""/>+        </createIndex>++        <createTable tableName=""kc_user_session_note"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_session_note_fk_root_fkey"" references=""kc_user_session(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""TEXT""/>+        </createTable>+        <createIndex tableName=""kc_user_session_note"" indexName=""kc_user_session_note_fk_root_name_key"">+            <column name=""fk_root""/>+            <column name=""name""/>+        </createIndex>++        <createTable tableName=""kc_user_session_client_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_session_client_fk_root_fkey"" references=""kc_user_session(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""VARCHAR(255)""/>+        </createTable>+        <createIndex tableName=""kc_user_session_client_session"" indexName=""user_session_client_fk_root_name"">+            <column name=""fk_root""/>+            <column name=""name""/>+        </createIndex>",Looking at this table I assume it is a list of client sessions in a user session. I'd assume this has already been implemented with the foreign key to client session. So I wonder: Can this table be removed?,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12241,905778932,2022-06-24T07:09:02Z,server-spi-private/src/main/java/org/keycloak/models/LockObjectsForModification.java,"@@ -0,0 +1,82 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models;",I placed this class in the same package as KeycloakSession. I'd be happy for a comment if it should be placed somewhere else.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12501,905781827,2022-06-24T07:13:20Z,services/src/main/java/org/keycloak/services/scheduled/ClearExpiredAdminEvents.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.scheduled;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.models.KeycloakSession;+import org.keycloak.timer.ScheduledTask;++public class ClearExpiredAdminEvents implements ScheduledTask {","I realized that you can also do the cleanup indirectly, say by having the `JpaEventStoreProvider` implement `InvalidationHandler` and sending an invalidation event from the scheduled task. Feel free to introduce a new `InvalidableObjectType` for that purpose in the legacy-private module, say `PeriodicEventInvalidation` could be the name. Given that the tasks are scheduled in the legacy-private module, this might even be the right option, since jpa classes are not available in legacy-private module.See `InfinispanUserCacheProviderFactory` for an example of an `InvalidationHandler`.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12241,905782144,2022-06-24T07:13:48Z,server-spi-private/src/main/java/org/keycloak/models/LockObjectsForModification.java,"@@ -0,0 +1,82 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models;++/**+ * This flags the session that all information loaded from the stores should be locked as the service layer+ * plans to modify it.+ *+ * This is just a hint to the underlying storage, and a store might choose to ignore it.+ * The lock for any object retrieved from the session will be kept until the end of the transaction.+ *+ * If the store supports it, this could prevent exceptions due to optimistic locking+ * problems later in the processing. If the caller retrieved objects without this wrapper, they would still be+ * able to modify those objects, and those changes would be written to the store at the end of the transaction at the lastet,+ * but they won't be locked.+ *+ *+ * @author Alexander Schwartz+ */+public class LockObjectsForModification {++    private static final String ATTRIBUTE = LockObjectsForModification.class.getCanonicalName();++    public static LockObjectsForModification.Enabled enable(KeycloakSession session) {+        return new Enabled(session);+    }++    public static boolean isEnabled(KeycloakSession session) {+        return session.getAttribute(ATTRIBUTE) != null;+    }++    public static <V> V lockObjectsForModification(KeycloakSession session, CallableWithoutThrowingAnException<V> callable) {","After creating this method, I found that this would lock all entities retrieved from the DB in the Callable. The current way to avoid locking Clients is that the transaction has a flag lockingSupportedForEntity().Thinking about this a bit more, the call could be more specific here: Instead of lockObjectsForModification it could be lockUsersSessionsForModification. This would provide a clearer intent what the caller tries to achieve. Instead of setting a boolean flag, it would then populate a Map with the models to be locks (UserSessionModel.class in this case).I'd like to hear your thoughts. I'd suggest a new issue for that. It should still be part of the next upcoming release to avoid spreading this API.  ",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/12692,905803587,2022-06-24T07:40:57Z,adapters/oidc/adapter-core/pom.xml,"@@ -73,6 +73,10 @@             <artifactId>keycloak-core</artifactId>             <scope>provided</scope>         </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>${keycloak.crypto.artifactId}</artifactId>",Shouldn't this just be `keycloak-crypto-default`? We shouldn't put any effort into FIPS around adapters since they are being deprecated.,x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/12692,905805333,2022-06-24T07:43:09Z,common/src/main/java/org/keycloak/common/crypto/CryptoIntegration.java,"@@ -0,0 +1,58 @@+package org.keycloak.common.crypto;++import java.util.ArrayList;+import java.util.List;+import java.util.ServiceLoader;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import java.util.stream.StreamSupport;++import org.jboss.logging.Logger;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class CryptoIntegration {++    protected static final Logger logger = Logger.getLogger(CryptoIntegration.class);++    private static volatile CryptoProvider securityProvider;++    private static volatile ClassLoader classLoader;++    public static void setClassLoader(ClassLoader classLoader) {+        CryptoIntegration.classLoader = classLoader;+    }++    public static CryptoProvider getProvider() {+        if (securityProvider == null) {+            securityProvider = detectProvider();+            logger.infof(""Detected security provider: %s"", securityProvider.getClass().getName());+        }+        return securityProvider;+    }",This isn't concurrency safe? Could it be better to instead rename `setClassLoader` to `init` and have it create instantiate `securityProvider`.,x
38664348,thpeter,https://api.github.com/repos/keycloak/keycloak/pulls/12501,905805490,2022-06-24T07:43:21Z,services/src/main/java/org/keycloak/services/scheduled/ClearExpiredAdminEvents.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.scheduled;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.models.KeycloakSession;+import org.keycloak.timer.ScheduledTask;++public class ClearExpiredAdminEvents implements ScheduledTask {","Thanks, this was the way I was thinking as well, I was about to find a place for a new TriggeredExpiration interface or something alike, but the `InvalidationHandler` seems fine, too. :)However in this case if I need to check for the correct `InvalidableObjectType` in the `JpaEventStoreProvider` this introduces a new dependency to `legacy-private`. So the options would be to move the new `InvalidableObjectType` elsewhere or skip the check.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12692,905814008,2022-06-24T07:53:47Z,adapters/oidc/adapter-core/pom.xml,"@@ -73,6 +73,10 @@             <artifactId>keycloak-core</artifactId>             <scope>provided</scope>         </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>${keycloak.crypto.artifactId}</artifactId>","Agree that we shouldn't put effort into FIPS in adapters. And in fact the changes in the adapter WF modules in this PR have it hardcoded.However there are some other potential things that for example our testsuite has dependency on `keycloak-adapter-core`. In case it is hardcoded here to `keycloak-crypto-default`, then when the testsuite is executed with the `fips` profile, it will bring to the classpath both the `keycloak-crypto-fips` (through keycloak-services) and the `keycloak-crypto-default` (through keycloak-adapter-core), making it probably some issues due the conflicts due both BC and BC-FIPS would be on the classpath.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12692,905822141,2022-06-24T08:04:01Z,crypto/default/src/main/java/org/keycloak/crypto/def/DefaultCryptoProvider.java,"@@ -0,0 +1,38 @@+package org.keycloak.crypto.def;++import java.security.NoSuchAlgorithmException;+import java.security.SecureRandom;+import java.util.HashMap;+import java.util.Map;+import java.util.function.Supplier;++import org.bouncycastle.jce.provider.BouncyCastleProvider;+import org.keycloak.common.crypto.CryptoProvider;+import org.keycloak.common.crypto.CryptoProviderTypes;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class DefaultCryptoProvider implements CryptoProvider {++    private Map<String, Supplier<?>> providers = new HashMap<>();++    public DefaultCryptoProvider() {+        providers.put(CryptoProviderTypes.BC_SECURITY_PROVIDER, BouncyCastleProvider::new);+        providers.put(CryptoProviderTypes.AES_KEY_WRAP_ALGORITHM_PROVIDER, AesKeyWrapAlgorithmProvider::new);+    }++    @Override+    public SecureRandom getSecureRandom() throws NoSuchAlgorithmException {+        return SecureRandom.getInstance(""SHA1PRNG"");+    }++    @Override+    public <T> T getCryptoUtility(Class<T> clazz, String typeId) {","That's what I was initially thinking, but looks harder to achieve due the reasons like:- The CryptoProvider is on the keycloak-common, but some method arguments are available just on the `keycloak-core` (or other modules). For example interface `JWEAlgorithmProvider` itself is in the `keycloak-core` and it has 2 methods, which both has arguments classes also available only in the `keycloak-core` . So adding directly methods like `encodeAesKeyWrap` and `decodeAesKeyWrap` on the CryptoProvider doesn't simply work (without moving some more classes from keycloak-common to the keycloak-core and/or doing some more changes in the arguments etc. In general, harder to achieve and not so nice).- Also there will be too much methods on the CryptoProvider, which IMO will make it rather bloated class.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12241,905829782,2022-06-24T08:13:45Z,model/map-jpa/src/main/resources/META-INF/user-sessions/client/jpa-client-sessions-changelog-1.xml,"@@ -0,0 +1,69 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.++Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at++http://www.apache.org/licenses/LICENSE-2.0++Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <changeSet author=""keycloak"" id=""client-sessions-1"">++        <createTable tableName=""kc_client_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""usersessionid"" type=""UUID"">+                <constraints foreignKeyName=""client_session_fk_user_session_fkey"" references=""kc_user_session(id)"" deleteCascade=""true"" deferrable=""true"" initiallyDeferred=""true"" />","Thanks @ahus!> The deferrable/initiallyDeferring don't work on CockroachDB AFAIK, therefore I suggest to put this into a separate changeset that only runs for PostgreSQL. You're right deferrable/initiallyDeferring don't work on CockroachDB, at least not yet. For the reference there is opened issue for that: https://go.crdb.dev/issue-v/31632/v21.2> For CockroachDB, there should be an index on that column instead to be able to efficiently query all client sessions for a user session.There is index for that column with name `client_session_user_session_id_fk` for both PostgreSQL and CockroachDB> To make the cleanup work on CockroachDB, I suppose there needs to be a change in this issue to delete all client session when a user session is removed (critieria query?), and a new issue to be implemented later with a housekeeping mechanism that cleans up client_session that might be left-over. Until that is implemented we could count on the regular expiry of client sessions.I'd like to avoid adding any additional code for removing clients sessions just for CRDB. When we move the constraint into separate changeset which would be run for Postgres, in CRDB we'd leave client session stored without its user/session. Once we'll have the housekeeping mechanism to remove expired entities we might want to extend it to remove also orphaned client session. So the question is if we are ok with leaving some abandoned client session in CRDB for now. > UPDATE: maybe the MapUserSessionProvider.removeUserSession(realm, session)/removeUserSessions(realm, user) could call also call clientSessionTx.delete() ... it might be less straightforward for removeUserSessions(realm).It might be reasonable to do some things in a separate issue as long as it works with CockroachDB now.I was proposing something like that within https://github.com/keycloak/keycloak/issues/12096#issuecomment-1136921712 and it turned out we need to let each implementation provide its own way how to implement this cascade removal. While on PostgreSQL it works fine, on CRDB unfortunately not.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12241,905841696,2022-06-24T08:28:55Z,model/map-jpa/src/main/resources/META-INF/user-sessions/user/jpa-user-sessions-changelog-1.xml,"@@ -0,0 +1,93 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.++Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at++http://www.apache.org/licenses/LICENSE-2.0++Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <changeSet author=""keycloak"" id=""user-sessions-1"">++        <createTable tableName=""kc_user_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_user_session"">+            <ext:column name=""entityversion"" type=""INTEGER"" jsonColumn=""metadata"" jsonProperty=""entityVersion""/>+            <ext:column name=""offline"" type=""BOOLEAN"" jsonColumn=""metadata"" jsonProperty=""fOffline""/>+            <ext:column name=""realmid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fRealmId""/>+            <ext:column name=""userid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fUserId""/>+            <ext:column name=""brokersessionid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fBrokerSessionId""/>+            <ext:column name=""brokeruserid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fBrokerUserId""/>+            <ext:column name=""lastsessionrefresh"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fLastSessionRefresh""/>+            <ext:column name=""expiration"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fExpiration""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_user_session"" indexName=""user_session_entityVersion"">+            <column name=""entityversion""/>+        </createIndex>+        <createIndex tableName=""kc_user_session"" indexName=""user_session_realm_offline_user"">+            <column name=""realmid""/>+            <column name=""offline""/>+            <column name=""userid""/>+        </createIndex>++        <createTable tableName=""kc_user_session_note"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_session_note_fk_root_fkey"" references=""kc_user_session(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""TEXT""/>+        </createTable>+        <createIndex tableName=""kc_user_session_note"" indexName=""kc_user_session_note_fk_root_name_key"">+            <column name=""fk_root""/>+            <column name=""name""/>+        </createIndex>++        <createTable tableName=""kc_user_session_client_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_session_client_fk_root_fkey"" references=""kc_user_session(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""VARCHAR(255)""/>+        </createTable>+        <createIndex tableName=""kc_user_session_client_session"" indexName=""user_session_client_fk_root_name"">+            <column name=""fk_root""/>+            <column name=""name""/>+        </createIndex>","This table represents map of client session ids and client.id's. [`MapUserSessionEntity`](https://github.com/keycloak/keycloak/blob/main/model/map/src/main/java/org/keycloak/models/map/userSession/MapUserSessionEntity.java#L113-L117) stores authenticated client session in format `Map<String, String>` where key is `clientUUID` and value is `clientSessionId`. `MapUserSessionAdapter` then loads client session on-by-one:  https://github.com/keycloak/keycloak/blob/main/model/map/src/main/java/org/keycloak/models/map/userSession/MapUserSessionAdapter.java#L116-L145. Because of that the table exist. Maybe we might consider to re-design this pattern. But that'd require another issue IMO.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/12692,905856939,2022-06-24T08:47:26Z,crypto/default/src/main/java/org/keycloak/crypto/def/DefaultCryptoProvider.java,"@@ -0,0 +1,38 @@+package org.keycloak.crypto.def;++import java.security.NoSuchAlgorithmException;+import java.security.SecureRandom;+import java.util.HashMap;+import java.util.Map;+import java.util.function.Supplier;++import org.bouncycastle.jce.provider.BouncyCastleProvider;+import org.keycloak.common.crypto.CryptoProvider;+import org.keycloak.common.crypto.CryptoProviderTypes;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class DefaultCryptoProvider implements CryptoProvider {++    private Map<String, Supplier<?>> providers = new HashMap<>();++    public DefaultCryptoProvider() {+        providers.put(CryptoProviderTypes.BC_SECURITY_PROVIDER, BouncyCastleProvider::new);+        providers.put(CryptoProviderTypes.AES_KEY_WRAP_ALGORITHM_PROVIDER, AesKeyWrapAlgorithmProvider::new);+    }++    @Override+    public SecureRandom getSecureRandom() throws NoSuchAlgorithmException {+        return SecureRandom.getInstance(""SHA1PRNG"");+    }++    @Override+    public <T> T getCryptoUtility(Class<T> clazz, String typeId) {","I didn't mean adding the methods directly, but rather specific methods to get specific providers.Instead of:```Provider provider = CryptoIntegration.getProvider().getCryptoUtility(Provider.class, CryptoProviderTypes.BC_SECURITY_PROVIDER);JWEAlgorithmProvider jweAlg = CryptoIntegration.getProvider().getCryptoUtility(JWEAlgorithmProvider.class, CryptoProviderTypes.AES_KEY_WRAP_ALGORITHM_PROVIDER);```You'd have something like:```Provider provider = CryptoIntegration.getProvider().getDefaultSecurityProvider();JWEAlgorithmProvider provider = CryptoIntegration.getProvider().getJWEAlgorithmProvider();```",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12501,905858810,2022-06-24T08:49:41Z,model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProvider.java,"@@ -179,4 +175,11 @@ public void clearAdmin(RealmModel realm, long olderThan) {     public void close() {      }+    @Override","Expiration works differently in the new storage. Previously the event expiration duration was used at the time of removing events. The scheduled task executed a query that removed all entities with a time (time of firing the event) is less than something.In the new store, we compute the expiration timestamp at the event firing time. This way the cleanup task does not depend on any information from the realm and cleanup can be done independently of Keycloak.Therefore we need to compute this expiration time in this file. You can see how we do it for auth events:https://github.com/keycloak/keycloak/blob/3d2c3fbc6aa73116edeaabf6b3a7f8ba0ae9769c/model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProvider.java#L71-L79",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12501,905867250,2022-06-24T08:59:50Z,services/src/main/java/org/keycloak/services/scheduled/ClearExpiredAdminEvents.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.scheduled;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.models.KeycloakSession;+import org.keycloak.timer.ScheduledTask;++public class ClearExpiredAdminEvents implements ScheduledTask {","@hmlnarik will know better, but I would say it is ok to add `legacy-private` dependency to `model/jpa` module. Also, you should not check `InvalidationObjectType` in `JpaEventStoreProvider` but in `JpaEventStoreProviderFactory`. From the factory, you should then call a method on `JpaEventStoreProvider`.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12692,905868891,2022-06-24T09:01:53Z,crypto/default/src/main/java/org/keycloak/crypto/def/DefaultCryptoProvider.java,"@@ -0,0 +1,38 @@+package org.keycloak.crypto.def;++import java.security.NoSuchAlgorithmException;+import java.security.SecureRandom;+import java.util.HashMap;+import java.util.Map;+import java.util.function.Supplier;++import org.bouncycastle.jce.provider.BouncyCastleProvider;+import org.keycloak.common.crypto.CryptoProvider;+import org.keycloak.common.crypto.CryptoProviderTypes;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class DefaultCryptoProvider implements CryptoProvider {++    private Map<String, Supplier<?>> providers = new HashMap<>();++    public DefaultCryptoProvider() {+        providers.put(CryptoProviderTypes.BC_SECURITY_PROVIDER, BouncyCastleProvider::new);+        providers.put(CryptoProviderTypes.AES_KEY_WRAP_ALGORITHM_PROVIDER, AesKeyWrapAlgorithmProvider::new);+    }++    @Override+    public SecureRandom getSecureRandom() throws NoSuchAlgorithmException {+        return SecureRandom.getInstance(""SHA1PRNG"");+    }++    @Override+    public <T> T getCryptoUtility(Class<T> clazz, String typeId) {","@stianst This works if the returned class like `Provider` is available on the classpath of `keycloak-common`. It doesn't work if returned class like `JWEAlgorithmProvider` is itself not available on the classpath of `keycloak-common`. For that case, the alternative is to:1) return `Object` as return type:```Object getAesKeyWrapAlgorithm();```And the caller would need to retype something like:```JWEAlgorithmProvider alg =  (JWEAlgorithmProvider) CryptoIntegration.getProvider().getAesKeyWrapAlgorithm();```2) or to avoid casting something like:```T getAesKeyWrapAlgorithm(Class<T> clazz);```And the caller do this:```JWEAlgorithmProvider alg =  CryptoIntegration.getProvider().getAesKeyWrapAlgorithm(JWEAlgorithmPRovider.class);```Which one do you prefer? Or any other idea?",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12501,905876123,2022-06-24T09:10:58Z,services/src/main/java/org/keycloak/services/scheduled/ClearExpiredAdminEvents.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.scheduled;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.events.EventStoreProvider;+import org.keycloak.models.KeycloakSession;+import org.keycloak.timer.ScheduledTask;++public class ClearExpiredAdminEvents implements ScheduledTask {","@mhajas Thank you for spotting this! Indeed, `JpaEventStoreProviderFactory` is the right one. @thpeter Apologies for the typo.@thpeter `legacy-private` module is fine to be added to as a dependency to `model/jpa` module. Beware that the same is being added in #12686, so whichever goes into main first makes the second in the need for rebasing.",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12241,905897536,2022-06-24T09:37:20Z,model/map-jpa/src/main/resources/META-INF/user-sessions/user/jpa-user-sessions-changelog-1.xml,"@@ -0,0 +1,93 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.++Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at++http://www.apache.org/licenses/LICENSE-2.0++Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <changeSet author=""keycloak"" id=""user-sessions-1"">++        <createTable tableName=""kc_user_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_user_session"">+            <ext:column name=""entityversion"" type=""INTEGER"" jsonColumn=""metadata"" jsonProperty=""entityVersion""/>+            <ext:column name=""offline"" type=""BOOLEAN"" jsonColumn=""metadata"" jsonProperty=""fOffline""/>+            <ext:column name=""realmid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fRealmId""/>+            <ext:column name=""userid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fUserId""/>+            <ext:column name=""brokersessionid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fBrokerSessionId""/>+            <ext:column name=""brokeruserid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fBrokerUserId""/>+            <ext:column name=""lastsessionrefresh"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fLastSessionRefresh""/>+            <ext:column name=""expiration"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fExpiration""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_user_session"" indexName=""user_session_entityVersion"">+            <column name=""entityversion""/>+        </createIndex>+        <createIndex tableName=""kc_user_session"" indexName=""user_session_realm_offline_user"">+            <column name=""realmid""/>+            <column name=""offline""/>+            <column name=""userid""/>+        </createIndex>++        <createTable tableName=""kc_user_session_note"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_session_note_fk_root_fkey"" references=""kc_user_session(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""TEXT""/>+        </createTable>+        <createIndex tableName=""kc_user_session_note"" indexName=""kc_user_session_note_fk_root_name_key"">+            <column name=""fk_root""/>+            <column name=""name""/>+        </createIndex>++        <createTable tableName=""kc_user_session_client_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_session_client_fk_root_fkey"" references=""kc_user_session(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""VARCHAR(255)""/>+        </createTable>+        <createIndex tableName=""kc_user_session_client_session"" indexName=""user_session_client_fk_root_name"">+            <column name=""fk_root""/>+            <column name=""name""/>+        </createIndex>","Client ID can be extracted from json and stored directly in `kc_client_session` table. I am wondering whether `JpaUserSessionEntity` should store rather `Set<JpaClientSessionEntity>` instead of `Set<JpaUserSessionClientSessionEntity>`. I am thinking about a workflow when all `JpaClientSessionEntity`s of the particular user session would be loaded from the database, then only `clientId` and `id` of it would be used to construct the `Map<String, String>` and then within `MapUserSessionAdapter` client sessions would be loaded by ids again. Shoudn't it be changed prior this?UPDATE: But since we cache returned entities within the session it shouldn't be such an issue.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12241,905946560,2022-06-24T10:45:20Z,model/map-jpa/src/main/resources/META-INF/user-sessions/user/jpa-user-sessions-changelog-1.xml,"@@ -0,0 +1,93 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.++Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at++http://www.apache.org/licenses/LICENSE-2.0++Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <changeSet author=""keycloak"" id=""user-sessions-1"">++        <createTable tableName=""kc_user_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_user_session"">+            <ext:column name=""entityversion"" type=""INTEGER"" jsonColumn=""metadata"" jsonProperty=""entityVersion""/>+            <ext:column name=""offline"" type=""BOOLEAN"" jsonColumn=""metadata"" jsonProperty=""fOffline""/>+            <ext:column name=""realmid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fRealmId""/>+            <ext:column name=""userid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fUserId""/>+            <ext:column name=""brokersessionid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fBrokerSessionId""/>+            <ext:column name=""brokeruserid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fBrokerUserId""/>+            <ext:column name=""lastsessionrefresh"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fLastSessionRefresh""/>+            <ext:column name=""expiration"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fExpiration""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_user_session"" indexName=""user_session_entityVersion"">+            <column name=""entityversion""/>+        </createIndex>+        <createIndex tableName=""kc_user_session"" indexName=""user_session_realm_offline_user"">+            <column name=""realmid""/>+            <column name=""offline""/>+            <column name=""userid""/>+        </createIndex>++        <createTable tableName=""kc_user_session_note"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_session_note_fk_root_fkey"" references=""kc_user_session(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""TEXT""/>+        </createTable>+        <createIndex tableName=""kc_user_session_note"" indexName=""kc_user_session_note_fk_root_name_key"">+            <column name=""fk_root""/>+            <column name=""name""/>+        </createIndex>++        <createTable tableName=""kc_user_session_client_session"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_session_client_fk_root_fkey"" references=""kc_user_session(id)"" deleteCascade=""true""/>+            </column>+            <column name=""name"" type=""VARCHAR(255)""/>+            <column name=""value"" type=""VARCHAR(255)""/>+        </createTable>+        <createIndex tableName=""kc_user_session_client_session"" indexName=""user_session_client_fk_root_name"">+            <column name=""fk_root""/>+            <column name=""name""/>+        </createIndex>","(and yes, it could be its own issue as long as it is in phase 1)",
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/12293,906021073,2022-06-24T12:36:57Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java,"@@ -25,6 +25,7 @@ public abstract class AbstractStartCommand extends AbstractCommand implements Runnable {      public static final String AUTO_BUILD_OPTION_LONG = ""--auto-build"";+    public static final String NO_AUTO_BUILD_OPTION_LONG = ""--no-auto-build"";","@andreaTP ,By what I could understand from the Proposal/Discussion [Changing the `start` command to run `auto-build` by default #1045](https://github.com/keycloak/keycloak/discussions/10451), at this moment, the ""--auto-build"" option should just be deprecated and not totally removed. And the ""--no-auto-build"" option should be added to give the opportunity to the User to handle the ""build"" by his/her own.",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12501,906032687,2022-06-24T12:52:31Z,model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProvider.java,"@@ -179,4 +175,11 @@ public void clearAdmin(RealmModel realm, long olderThan) {     public void close() {      }+    @Override","The expiration field is already present in the new store [MapAdminEventEntity](https://github.com/keycloak/keycloak/blob/main/model/map/src/main/java/org/keycloak/models/map/events/MapAdminEventEntity.java) (see `ExpirableEntity` interface). DB migration is not necessary at the moment, because we added the expiration field only to the new store, the legacy store will continue working as now.Basically, what you need is to add the snippet of code I sent in the first comment to [onEvent method](https://github.com/keycloak/keycloak/blob/main/model/map/src/main/java/org/keycloak/models/map/events/MapEventStoreProvider.java#L132).",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12339,907079082,2022-06-27T07:50:19Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/singleUseObject/entity/JpaSingleUseObjectNoteEntity.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.singleUseObject.entity;++import javax.persistence.Entity;+import javax.persistence.Table;+import javax.persistence.UniqueConstraint;++import org.keycloak.models.map.storage.jpa.JpaAttributeEntity;++/**+ * JPA implementation for single-use object notes. This entity represents a note and has a many-to-one relationship+ * with the single-use object entity.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+@Entity+@Table(name = ""kc_single_use_obj_note"", uniqueConstraints = {+        @UniqueConstraint(columnNames = {""fk_root"", ""name"", ""value""})+})+public class JpaSingleUseObjectNoteEntity extends JpaAttributeEntity<JpaSingleUseObjectEntity> {",I wonder whether we need to override `equals` similarly to https://github.com/keycloak/keycloak/blob/main/model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/authorization/policy/entity/JpaPolicyConfigEntity.java#L41-L47,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12736,907102587,2022-06-27T08:15:54Z,common/pom.xml,"@@ -42,6 +42,13 @@         </keycloak.osgi.import>     </properties>     <dependencies>++        <dependency>+            <groupId>org.wildfly.security</groupId>+            <artifactId>wildfly-elytron</artifactId>+            <version>2.0.0.Beta1</version>","It will be good to remove `version` line, which means that it will use same version used in the `pom.xml`, which is currently `1.18.3.Final` . AFAIK we need to use this version due the Wildfly uses it.Could you remove the `version` line? If there is no big change in the elytron API between 1.18.3.Final and 2.0.0..Beta1, your code will still work fine though (hopefully that is the case).",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12705,907138769,2022-06-27T08:52:12Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/QuarkusKeycloakApplication.java,"@@ -47,6 +53,18 @@ private static boolean filterSingletons(Object o) {     @Override     protected void startup() {         initializeKeycloakSessionFactory();++        ExportImportManager exportImportManager = bootstrap();++        if (exportImportManager.isRunImport() || exportImportManager.isRunExport()) {+            Quarkus.asyncExit();+            return;+        }++        if (!Profile.isFeatureEnabled(Profile.Feature.MAP_STORAGE)) {+            setupScheduledTasks(sessionFactory);+        }+","In order to extract legacy store, `ExportImportManager` will also vanish, and setting up scheduled tasks is done [in legacy module](https://github.com/keycloak/keycloak/blob/c05898365528d19bf62677b97925b21b954365d9/model/legacy-private/src/main/java/org/keycloak/storage/datastore/LegacyDatastoreProviderFactory.java#L92-L107).Does this need to be here or can it be kept in e.g. [`QuarkusJpaConnectionProviderFactory`](https://github.com/keycloak/keycloak/pull/12705/files#diff-a539705f942144f495a409069bcf60949264dde01a68f4d97db0ea98fb8d40a1).",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12705,907146867,2022-06-27T08:59:59Z,quarkus/runtime/src/main/resources/META-INF/keycloak.conf,"@@ -24,4 +24,7 @@ metrics-enabled=false  #logging defaults log-console-output=default-log-file=${kc.home.dir:default}data/log/keycloak.log\ No newline at end of file+log-file=${kc.home.dir:default}data/log/keycloak.log++# Storage defaults+spi-map-storage-concurrenthashmap-dir=${kc.home.dir:default}data/chms",```suggestionspi-map-storage-concurrenthashmap-dir=${kc.home.dir:default}data/chm```,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12705,907147362,2022-06-27T09:00:27Z,quarkus/tests/integration/src/test/java/org/keycloak/it/storage/map/ChmsStorageDistTest.java,"@@ -0,0 +1,55 @@+/*+ * Copyright 2021 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.it.storage.map;++import org.junit.Assert;+import org.junit.jupiter.api.Test;+import org.keycloak.it.junit5.extension.CLIResult;+import org.keycloak.it.junit5.extension.DistributionTest;+import org.keycloak.it.junit5.extension.RawDistOnly;+import org.keycloak.it.utils.RawDistRootPath;++import io.quarkus.test.junit.main.Launch;+import io.quarkus.test.junit.main.LaunchResult;++@RawDistOnly(reason = ""Need to check dist path"")+@DistributionTest(reInstall = DistributionTest.ReInstall.BEFORE_TEST)+public class ChmsStorageDistTest {",```suggestionpublic class ChmStorageDistTest {```,
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/12339,907354357,2022-06-27T12:52:42Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/singleUseObject/entity/JpaSingleUseObjectNoteEntity.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.singleUseObject.entity;++import javax.persistence.Entity;+import javax.persistence.Table;+import javax.persistence.UniqueConstraint;++import org.keycloak.models.map.storage.jpa.JpaAttributeEntity;++/**+ * JPA implementation for single-use object notes. This entity represents a note and has a many-to-one relationship+ * with the single-use object entity.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+@Entity+@Table(name = ""kc_single_use_obj_note"", uniqueConstraints = {+        @UniqueConstraint(columnNames = {""fk_root"", ""name"", ""value""})+})+public class JpaSingleUseObjectNoteEntity extends JpaAttributeEntity<JpaSingleUseObjectEntity> {","Good catch, I didn't notice the `equals` semantics that was inherited from the `JpaAttributeEntity` was different than when we have only single-valued attributes (or notes in this case)",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12692,907466875,2022-06-27T14:39:29Z,common/src/main/java/org/keycloak/common/crypto/CryptoIntegration.java,"@@ -0,0 +1,52 @@+package org.keycloak.common.crypto;++import java.util.List;+import java.util.ServiceLoader;+import java.util.concurrent.atomic.AtomicReference;+import java.util.stream.Collectors;+import java.util.stream.StreamSupport;++import org.jboss.logging.Logger;+import org.keycloak.common.util.BouncyIntegration;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class CryptoIntegration {++    protected static final Logger logger = Logger.getLogger(CryptoIntegration.class);++    private static volatile AtomicReference<CryptoProvider> securityProvider = new AtomicReference<>();++    public static void init(ClassLoader classLoader) {+        securityProvider.set(detectProvider(classLoader));+        logger.debugv(""BouncyCastle provider: {0}"", BouncyIntegration.PROVIDER);+    }++    public static CryptoProvider getProvider() {+        CryptoProvider cryptoProvider = securityProvider.get();+        if (cryptoProvider == null) {+            securityProvider.compareAndSet(null, detectProvider(CryptoIntegration.class.getClassLoader()));+            cryptoProvider = securityProvider.get();+        }+        return cryptoProvider;","The simple static init does not work due the fact that classloader needs to be passed. Note that classloader of `CryptoIntegration` itself is `keycloak-common` module, which does not have access to crypto modules. In the Wildfly, there is classloader of `keycloak-services` passed here from `KeycloakApplication` during initialization (or classloader of `keycloak-adapter-core` is passed in case of adapters).I can possibly enforce `init` called before any call to `getProvider` . The only reason why it was not yet done are the unit tests. So in that case the getProvider method would look like this ( I would prefer this instead of just `securityProvider.get()` just to avoid NullPointerException, but rather `IllegalStateException` with some cleaner description of what is going on):```    public static CryptoProvider getProvider() {        CryptoProvider cryptoProvider = securityProvider.get();        if (cryptoProvider == null) {            throw new IllegalStateException(""Illegal state. Please init first before obtaining provider"");        }        return cryptoProvider;    }```WDYT?",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12692,907909998,2022-06-28T00:18:25Z,common/src/main/java/org/keycloak/common/crypto/CryptoProvider.java,"@@ -17,6 +15,14 @@ public interface CryptoProvider {      * @return secureRandom implementation based on the available security algorithms according to environment (FIPS non-fips)      */     SecureRandom getSecureRandom() throws NoSuchAlgorithmException, NoSuchProviderException;--    JWEAlgorithmProvider getAesKeyWrapAlgorithmProvider();+    +    /**+     * Get some cryptographic utility implementation. Returned implementation can be dependent according to if we have+     * non-fips bouncycastle or fips bouncycastle on the classpath. The implementation should be previously registered by {@link #registerUtility(String, Object)}+     * +     * @param clazz Returned class.+     * @param typeId Type of the utility, which we want to return +     * @return +     */+    <T> T getCryptoUtility(Class<T> clazz, String typeId);","The former (typed) sounds better. But yeah, basically naming.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/12757,908219431,2022-06-28T08:53:53Z,operator/app/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakDeploymentTest.java,"@@ -286,15 +286,36 @@ public void testHostnameStrictDisabled() {     @Test     public void testInitialAdminUser() {         try {+            var kc = getDefaultKeycloakDeployment();+            var kcAdminSecret = new KeycloakAdminSecret(k8sclient, kc);++            k8sclient+                    .resources(Keycloak.class)+                    .inNamespace(namespace)+                    .delete();+            k8sclient+                    .secrets()+                    .inNamespace(namespace)+                    .withName(kcAdminSecret.getName())+                    .delete();++            // Making sure no other Keycloak pod is still around",I appreciate this check is needed but should we rather tweak the [generic cleanup method](https://github.com/keycloak/keycloak/blob/39ef151f4cf31f471b1f8e8a85e6e6e15d97f3cc/operator/app/src/test/java/org/keycloak/operator/testsuite/integration/BaseOperatorTest.java#L222-L237) rather than tackling it for just this one tests? Other tests (in the future) might need this tweak as well.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12705,908352656,2022-06-28T11:12:39Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/storage/database/jpa/QuarkusJpaConnectionProviderFactory.java,"@@ -160,8 +160,6 @@ public void postInit(KeycloakSessionFactory factory) {          if (schemaChanged || Environment.isImportExportMode()) {             runJobInTransaction(factory, this::initSchema);-        } else if (System.getProperty(""keycloak.import"") != null) {","Probably yet, but I would avoid doing this as part of this PR. As discussed, migrating Quarkus-legacy specific code should also involve removing duplicates between legacy and new dist.",
3833769,sschu,https://api.github.com/repos/keycloak/keycloak/pulls/12654,908667903,2022-06-28T16:08:21Z,services/src/main/java/org/keycloak/services/resources/admin/permissions/UserPermissions.java,"@@ -262,7 +262,7 @@ public void requireManage() {      */     @Override     public boolean canManage(UserModel user) {-        return canManage() || canManageByGroup(user);+        return canManage() || (Profile.isFeatureEnabled(Profile.Feature.AUTHORIZATION) && canManageByGroup(user));","@pedroigor Could be possible, but I basically just copied how it is done elsewhere like here: https://github.com/keycloak/keycloak/blob/99c06d11023689875b48ef56442c90bdb744c869/services/src/main/java/org/keycloak/services/resources/admin/permissions/MgmtPermissions.java#L254Its basically like that all over the place. ;)",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12705,909194374,2022-06-29T04:50:32Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -17,13 +17,145 @@  package org.keycloak.config; +import java.util.ArrayList;+import java.util.Arrays;+import java.util.List;+import java.util.stream.Collectors;+ public class StorageOptions { +    public enum StorageType {+        legacy,+        chm+    }+     public static final Option<Boolean> DEFAULT_PERSISTENCE_UNIT_ENABLED = new OptionBuilder<>(""storage-default-persistence-unit-enabled"", Boolean.class)             .category(OptionCategory.STORAGE)             .defaultValue(true)             .hidden()             .buildTime(true)             .build(); +    public static final Option<StorageType> STORAGE = new OptionBuilder<>(""storage"", StorageType.class)+            .category(OptionCategory.STORAGE)+            .description(String.format(""Sets a storage mechanism. Possible values are: %s."",+                    String.join("","", String.join("", "", Arrays.stream(StorageType.values()).map(StorageType::name).collect(Collectors.toList())))))+            .expectedValues(StorageType.values())+            .defaultValue(StorageType.legacy)+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_REALM = new OptionBuilder<>(""storage-realm"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CLIENT = new OptionBuilder<>(""storage-client"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CLIENT_SCOPE = new OptionBuilder<>(""storage-client-scope"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_GROUP = new OptionBuilder<>(""storage-group"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_ROLE = new OptionBuilder<>(""storage-role"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER = new OptionBuilder<>(""storage-user"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_DEPLOYMENT_STATE = new OptionBuilder<>(""storage-deployment-state"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_AUTH_SESSION = new OptionBuilder<>(""storage-auth-session"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER_SESSION = new OptionBuilder<>(""storage-user-session"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_LOGIN_FAILURE = new OptionBuilder<>(""storage-login-failure"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_AUTHORIZATION_PERSISTER = new OptionBuilder<>(""storage-authorization-persister"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER_SESSION_PERSISTER = new OptionBuilder<>(""storage-user-session-persister"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_ACTION_TOKEN = new OptionBuilder<>(""storage-action-token"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_DBLOCK = new OptionBuilder<>(""storage-dblock"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CACHE_REALM_ENABLED = new OptionBuilder<>(""cache-realm-enabled"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CACHE_USER_ENABLED = new OptionBuilder<>(""cache-user-enabled"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_SINGLE_USE_OBJECT = new OptionBuilder<>(""storage-single-user-object"", String.class)","```suggestion    public static final Option<String> STORAGE_SINGLE_USE_OBJECT = new OptionBuilder<>(""storage-single-use-object"", String.class)```",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12705,909196684,2022-06-29T04:56:30Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -17,13 +17,145 @@  package org.keycloak.config; +import java.util.ArrayList;+import java.util.Arrays;+import java.util.List;+import java.util.stream.Collectors;+ public class StorageOptions { +    public enum StorageType {+        legacy,+        chm+    }+     public static final Option<Boolean> DEFAULT_PERSISTENCE_UNIT_ENABLED = new OptionBuilder<>(""storage-default-persistence-unit-enabled"", Boolean.class)             .category(OptionCategory.STORAGE)             .defaultValue(true)             .hidden()             .buildTime(true)             .build(); +    public static final Option<StorageType> STORAGE = new OptionBuilder<>(""storage"", StorageType.class)+            .category(OptionCategory.STORAGE)+            .description(String.format(""Sets a storage mechanism. Possible values are: %s."",+                    String.join("","", String.join("", "", Arrays.stream(StorageType.values()).map(StorageType::name).collect(Collectors.toList())))))+            .expectedValues(StorageType.values())+            .defaultValue(StorageType.legacy)+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_REALM = new OptionBuilder<>(""storage-realm"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CLIENT = new OptionBuilder<>(""storage-client"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CLIENT_SCOPE = new OptionBuilder<>(""storage-client-scope"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_GROUP = new OptionBuilder<>(""storage-group"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_ROLE = new OptionBuilder<>(""storage-role"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER = new OptionBuilder<>(""storage-user"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_DEPLOYMENT_STATE = new OptionBuilder<>(""storage-deployment-state"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_AUTH_SESSION = new OptionBuilder<>(""storage-auth-session"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER_SESSION = new OptionBuilder<>(""storage-user-session"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_LOGIN_FAILURE = new OptionBuilder<>(""storage-login-failure"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_AUTHORIZATION_PERSISTER = new OptionBuilder<>(""storage-authorization-persister"", String.class)","To keep this option consistent with the rest, I suggest removing the `persister` part:```suggestion    public static final Option<String> STORAGE_AUTHORIZATION = new OptionBuilder<>(""storage-authorization"", String.class)```",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12705,909492460,2022-06-29T10:59:45Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -17,13 +17,145 @@  package org.keycloak.config; +import java.util.ArrayList;+import java.util.Arrays;+import java.util.List;+import java.util.stream.Collectors;+ public class StorageOptions { +    public enum StorageType {+        legacy,+        chm+    }+     public static final Option<Boolean> DEFAULT_PERSISTENCE_UNIT_ENABLED = new OptionBuilder<>(""storage-default-persistence-unit-enabled"", Boolean.class)             .category(OptionCategory.STORAGE)             .defaultValue(true)             .hidden()             .buildTime(true)             .build(); +    public static final Option<StorageType> STORAGE = new OptionBuilder<>(""storage"", StorageType.class)+            .category(OptionCategory.STORAGE)+            .description(String.format(""Sets a storage mechanism. Possible values are: %s."",+                    String.join("","", String.join("", "", Arrays.stream(StorageType.values()).map(StorageType::name).collect(Collectors.toList())))))+            .expectedValues(StorageType.values())+            .defaultValue(StorageType.legacy)+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_REALM = new OptionBuilder<>(""storage-realm"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CLIENT = new OptionBuilder<>(""storage-client"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CLIENT_SCOPE = new OptionBuilder<>(""storage-client-scope"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_GROUP = new OptionBuilder<>(""storage-group"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_ROLE = new OptionBuilder<>(""storage-role"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER = new OptionBuilder<>(""storage-user"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_DEPLOYMENT_STATE = new OptionBuilder<>(""storage-deployment-state"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_AUTH_SESSION = new OptionBuilder<>(""storage-auth-session"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER_SESSION = new OptionBuilder<>(""storage-user-session"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_LOGIN_FAILURE = new OptionBuilder<>(""storage-login-failure"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_AUTHORIZATION_PERSISTER = new OptionBuilder<>(""storage-authorization-persister"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER_SESSION_PERSISTER = new OptionBuilder<>(""storage-user-session-persister"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_ACTION_TOKEN = new OptionBuilder<>(""storage-action-token"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_DBLOCK = new OptionBuilder<>(""storage-dblock"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CACHE_REALM_ENABLED = new OptionBuilder<>(""cache-realm-enabled"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CACHE_USER_ENABLED = new OptionBuilder<>(""cache-user-enabled"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();","Yes, we need to have them to be able to map/disable providers accordingly.In fact, that is something I'm evaluating because the current status of the new store is not yet disabling the legacy-related components completely, as we discussed. That was a bit surprising.That said, I think the best here is to make legacy components environment-dependent and check whether or not the map storage is supported.Wdyt?",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/12716,909539509,2022-06-29T11:57:03Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/common/HotRodVersionUtils.java,"@@ -0,0 +1,70 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.common;++import java.util.regex.Matcher;+import java.util.regex.Pattern;++public class HotRodVersionUtils {++    private static final Pattern schemaVersionPattern = Pattern.compile(""schema-version: (\\d+)$"", Pattern.MULTILINE);++    /**+     * Decides whether {@code version1} is older than {@code version2}+     *+     * @param version1 first version+     * @param version2 second version+     * @return returns true when {@code version1} is older than {@code version2} and false when versions are equal+     * or {@code version2} is older than {@code version1}+     */+    public static boolean isNewer(Integer version1, Integer version2) {","Maybe it would be good to come with better name so it's immediately clear how this method should be called and which parameter is newer/older without need to carefully study javadoc. For example `isVersion2NewerThanVersion1(Integer version1, Integer version2)` or `isVersion2Newer(Integer version1, Integer version2)` or `isCurrentSchemaNewer(Integer deployedSchemaVersion, Integer currentSchemaVersion)`, ...WDYT?",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12705,910321931,2022-06-29T19:23:44Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -17,13 +17,145 @@  package org.keycloak.config; +import java.util.ArrayList;+import java.util.Arrays;+import java.util.List;+import java.util.stream.Collectors;+ public class StorageOptions { +    public enum StorageType {+        legacy,+        chm+    }+     public static final Option<Boolean> DEFAULT_PERSISTENCE_UNIT_ENABLED = new OptionBuilder<>(""storage-default-persistence-unit-enabled"", Boolean.class)             .category(OptionCategory.STORAGE)             .defaultValue(true)             .hidden()             .buildTime(true)             .build(); +    public static final Option<StorageType> STORAGE = new OptionBuilder<>(""storage"", StorageType.class)+            .category(OptionCategory.STORAGE)+            .description(String.format(""Sets a storage mechanism. Possible values are: %s."",+                    String.join("","", String.join("", "", Arrays.stream(StorageType.values()).map(StorageType::name).collect(Collectors.toList())))))+            .expectedValues(StorageType.values())+            .defaultValue(StorageType.legacy)+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_REALM = new OptionBuilder<>(""storage-realm"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CLIENT = new OptionBuilder<>(""storage-client"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_CLIENT_SCOPE = new OptionBuilder<>(""storage-client-scope"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_GROUP = new OptionBuilder<>(""storage-group"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_ROLE = new OptionBuilder<>(""storage-role"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER = new OptionBuilder<>(""storage-user"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_DEPLOYMENT_STATE = new OptionBuilder<>(""storage-deployment-state"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_AUTH_SESSION = new OptionBuilder<>(""storage-auth-session"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER_SESSION = new OptionBuilder<>(""storage-user-session"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_LOGIN_FAILURE = new OptionBuilder<>(""storage-login-failure"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_AUTHORIZATION_PERSISTER = new OptionBuilder<>(""storage-authorization-persister"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();++    public static final Option<String> STORAGE_USER_SESSION_PERSISTER = new OptionBuilder<>(""storage-user-session-persister"", String.class)+            .category(OptionCategory.STORAGE)+            .hidden()+            .buildTime(true)+            .build();","Exactly, once we have that we can remove this option.Do not worry too much about options now because they are going to change once we review not only this but other providers that should be marked as env dependent. The options are internal.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12705,910955999,2022-06-30T12:17:53Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/StoragePropertyMappers.java,"@@ -30,10 +31,161 @@ private StoragePropertyMappers(){}      public static PropertyMapper[] getMappers() {         return new PropertyMapper[] {-                fromOption(StorageOptions.DEFAULT_PERSISTENCE_UNIT_ENABLED)-                        .to(""kc.spi-connections-jpa-quarkus-enabled"")+                fromOption(StorageOptions.STORAGE_LEGACY_ENABLED)+                        .to(""kc.spi-connections-jpa-legacy-enabled"")+                        .mapFrom(""storage"")                         .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)-                        .build()+                        .transformer(StoragePropertyMappers::isDefaultPersistenceUnitEnabled)+                        .build(),+                fromOption(StorageOptions.STORAGE)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_PROVIDER)+                        .mapFrom(""storage"")+                        .to(""kc.spi-map-storage-provider"")+                        .transformer(StoragePropertyMappers::resolveStorageProvider)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_REALM)+                        .to(""kc.spi-realm-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_CLIENT)+                        .to(""kc.spi-client-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_CLIENT_SCOPE)+                        .to(""kc.spi-client-scope-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_GROUP)+                        .to(""kc.spi-group-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_ROLE)+                        .to(""kc.spi-role-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_USER)+                        .to(""kc.spi-user-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_DEPLOYMENT_STATE)+                        .to(""kc.spi-deployment-state-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_AUTH_SESSION)+                        .to(""kc.spi-authentication-sessions-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_USER_SESSION)+                        .to(""kc.spi-user-sessions-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_LOGIN_FAILURE)+                        .to(""kc.spi-login-failure-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_USER_SESSION_PERSISTER)+                        .to(""kc.spi-user-session-persister-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getUserSessionPersisterStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_AUTHORIZATION_PERSISTER)+                        .to(""kc.spi-authorization-persister-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_ACTION_TOKEN)+                        .to(""kc.spi-action-token-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_DBLOCK)+                        .to(""kc.spi-dblock-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getDbLockProvider)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_CACHE_REALM_ENABLED)+                        .to(""kc.spi-realm-cache-default-enabled"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::isCacheAreaEnabledForStorage)+                        .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)+                        .build(),+                fromOption(StorageOptions.STORAGE_CACHE_AUTHORIZATION_ENABLED)+                        .to(""kc.spi-authorization-cache-default-enabled"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::isCacheAreaEnabledForStorage)+                        .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)+                        .build(),+                fromOption(StorageOptions.STORAGE_CACHE_USER_ENABLED)+                        .to(""kc.spi-user-cache-default-enabled"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::isCacheAreaEnabledForStorage)+                        .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)+                        .build(),+                fromOption(StorageOptions.STORAGE_SINGLE_USE_OBJECT)+                        .to(""kc.spi-single-use-object-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),         };     }++    private static Optional<String> getAreaStorage(Optional<String> storage, ConfigSourceInterceptorContext context) {+        return of(""legacy"".equals(storage.orElse(null)) ? ""jpa"" : ""map"");+    }++    private static Optional<String> getCacheStorage(Optional<String> storage, ConfigSourceInterceptorContext context) {+        return of(""legacy"".equals(storage.orElse(null)) ? ""infinispan"" : ""map"");+    }++    private static Optional<String> getDbLockProvider(Optional<String> storage, ConfigSourceInterceptorContext context) {+        return of(""legacy"".equals(storage.orElse(null)) ? ""jpa"" : ""none"");+    }++    private static Optional<String> getUserSessionPersisterStorage(Optional<String> storage, ConfigSourceInterceptorContext context) {+        return of(""legacy"".equals(storage.orElse(null)) ? ""jpa"" : ""disabled"");+    }++    private static Optional<String> isDefaultPersistenceUnitEnabled(Optional<String> value, ConfigSourceInterceptorContext context) {+        if (value.get().equals(StorageOptions.StorageType.legacy.name())) {+            return of(Boolean.TRUE.toString());+        }++        return of(Boolean.valueOf(value.get()).toString());+    }++    private static Optional<String> resolveStorageProvider(Optional<String> value, ConfigSourceInterceptorContext context) {+        return Optional.ofNullable(""legacy"".equals(value.orElse(null)) ? null : ""concurrenthashmap"");+    }","I see that this resolve to `null` for the legacy storage provider, and to `concurrenthashmap` for everything else.As we only want to support CHM, this is find for this PR. For the future, we would have for example ""jpa"" or ""hotrod"" here, but also ""null"" for any mixed storage. At least with the non-Quarkus runtimes I fell into the trap several times that I needed to set ""null"" here to have ""jpa"" running for some stores, and ""concurrenthashmap"" for others.Whenever (in the old world) the ""provider"" was set, the lookup of any other provider was no longer working. If this will change in the next PR soonish, let's keep it as is. ",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12724,910965536,2022-06-30T12:27:14Z,server-spi/src/main/java/org/keycloak/models/UserModel.java,"@@ -311,7 +311,9 @@ enum RequiredAction {         UPDATE_PASSWORD,         TERMS_AND_CONDITIONS,         VERIFY_PROFILE,-        UPDATE_EMAIL+        UPDATE_EMAIL,+        WEBAUTHN_REGISTER,","Maybe there is no need to add these required actions to UserModel at all as they are not used anyway due the backwards compatibility (besides potentially incorrect usage, which I've pointed in the comments above). I think we already have few other required actions, which are not on UserModel. My vote is to revert this change and keep the UserModel class unchanged in this PR.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12705,910974949,2022-06-30T12:36:53Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/StoragePropertyMappers.java,"@@ -30,10 +31,161 @@ private StoragePropertyMappers(){}      public static PropertyMapper[] getMappers() {         return new PropertyMapper[] {-                fromOption(StorageOptions.DEFAULT_PERSISTENCE_UNIT_ENABLED)-                        .to(""kc.spi-connections-jpa-quarkus-enabled"")+                fromOption(StorageOptions.STORAGE_LEGACY_ENABLED)+                        .to(""kc.spi-connections-jpa-legacy-enabled"")+                        .mapFrom(""storage"")                         .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)-                        .build()+                        .transformer(StoragePropertyMappers::isDefaultPersistenceUnitEnabled)+                        .build(),+                fromOption(StorageOptions.STORAGE)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_PROVIDER)+                        .mapFrom(""storage"")+                        .to(""kc.spi-map-storage-provider"")+                        .transformer(StoragePropertyMappers::resolveStorageProvider)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_REALM)+                        .to(""kc.spi-realm-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_CLIENT)+                        .to(""kc.spi-client-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_CLIENT_SCOPE)+                        .to(""kc.spi-client-scope-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_GROUP)+                        .to(""kc.spi-group-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_ROLE)+                        .to(""kc.spi-role-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_USER)+                        .to(""kc.spi-user-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_DEPLOYMENT_STATE)+                        .to(""kc.spi-deployment-state-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_AUTH_SESSION)+                        .to(""kc.spi-authentication-sessions-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_USER_SESSION)+                        .to(""kc.spi-user-sessions-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_LOGIN_FAILURE)+                        .to(""kc.spi-login-failure-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_USER_SESSION_PERSISTER)+                        .to(""kc.spi-user-session-persister-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getUserSessionPersisterStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_AUTHORIZATION_PERSISTER)+                        .to(""kc.spi-authorization-persister-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getAreaStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_ACTION_TOKEN)+                        .to(""kc.spi-action-token-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_DBLOCK)+                        .to(""kc.spi-dblock-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getDbLockProvider)+                        .paramLabel(""type"")+                        .build(),+                fromOption(StorageOptions.STORAGE_CACHE_REALM_ENABLED)+                        .to(""kc.spi-realm-cache-default-enabled"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::isCacheAreaEnabledForStorage)+                        .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)+                        .build(),+                fromOption(StorageOptions.STORAGE_CACHE_AUTHORIZATION_ENABLED)+                        .to(""kc.spi-authorization-cache-default-enabled"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::isCacheAreaEnabledForStorage)+                        .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)+                        .build(),+                fromOption(StorageOptions.STORAGE_CACHE_USER_ENABLED)+                        .to(""kc.spi-user-cache-default-enabled"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::isCacheAreaEnabledForStorage)+                        .paramLabel(Boolean.TRUE + ""|"" + Boolean.FALSE)+                        .build(),+                fromOption(StorageOptions.STORAGE_SINGLE_USE_OBJECT)+                        .to(""kc.spi-single-use-object-provider"")+                        .mapFrom(""storage"")+                        .transformer(StoragePropertyMappers::getCacheStorage)+                        .paramLabel(""type"")+                        .build(),         };     }++    private static Optional<String> getAreaStorage(Optional<String> storage, ConfigSourceInterceptorContext context) {+        return of(""legacy"".equals(storage.orElse(null)) ? ""jpa"" : ""map"");+    }++    private static Optional<String> getCacheStorage(Optional<String> storage, ConfigSourceInterceptorContext context) {+        return of(""legacy"".equals(storage.orElse(null)) ? ""infinispan"" : ""map"");+    }++    private static Optional<String> getDbLockProvider(Optional<String> storage, ConfigSourceInterceptorContext context) {+        return of(""legacy"".equals(storage.orElse(null)) ? ""jpa"" : ""none"");+    }++    private static Optional<String> getUserSessionPersisterStorage(Optional<String> storage, ConfigSourceInterceptorContext context) {+        return of(""legacy"".equals(storage.orElse(null)) ? ""jpa"" : ""disabled"");+    }++    private static Optional<String> isDefaultPersistenceUnitEnabled(Optional<String> value, ConfigSourceInterceptorContext context) {+        if (value.get().equals(StorageOptions.StorageType.legacy.name())) {+            return of(Boolean.TRUE.toString());+        }++        return of(Boolean.valueOf(value.get()).toString());+    }++    private static Optional<String> resolveStorageProvider(Optional<String> value, ConfigSourceInterceptorContext context) {+        return Optional.ofNullable(""legacy"".equals(value.orElse(null)) ? null : ""concurrenthashmap"");+    }","Yeah, that is correct in the sense that it will change in the future. As I mentioned before, most of those ""internal"" options should be temporary while we don't start the next round of changes to integrate jpa, ""mixed"", and even the tree store.I did not have much experience on running multiple stores so I can't yet give you much about this topic :)But yeah, one step at a time.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12282,911022644,2022-06-30T13:23:42Z,model/legacy-private/src/main/java/org/keycloak/migration/migrators/MigrateTo19_0_0.java,"@@ -0,0 +1,64 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */++package org.keycloak.migration.migrators;++import org.jboss.logging.Logger;+import org.keycloak.common.Profile;+import org.keycloak.migration.MigrationProvider;+import org.keycloak.migration.ModelVersion;+import org.keycloak.models.ClientModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.protocol.oidc.OIDCConfigAttributes;+import org.keycloak.representations.idm.RealmRepresentation;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class MigrateTo19_0_0 implements Migration {",Is it possible to remove this class from this PR? Iterating over all realms and clients is performance killer and it is exactly the reason why the DB migration is used directly in liquibase rather than the programmatic way.,x
94353089,KnauerSecunet,https://api.github.com/repos/keycloak/keycloak/pulls/10650,911840996,2022-07-01T10:32:09Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }",I think its correct to only call `setUserAttribute` when I find a value / the list is not empty,
94353089,KnauerSecunet,https://api.github.com/repos/keycloak/keycloak/pulls/10650,911842772,2022-07-01T10:33:51Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                LOGGER.trace(""Trying to parse: "" + xml);++                Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+?)\"""").matcher(xml);+                Map<String, String> namespaces = new HashMap<>();+                Map<String, String> prefixes = new HashMap<>();+                while (namespaceMatcher.find()) {+                    namespaces.put(namespaceMatcher.group(1), namespaceMatcher.group(2));+                    prefixes.put(namespaceMatcher.group(2), namespaceMatcher.group(1));+                }++                XPath xPath = XPathFactory.newInstance().newXPath();",I now reuse the XPathFactory but I don't think its possible to use a XPathVariableResolver: It would be used to replace parameters in the expression (e.g. $bookId) with a value (e.g. bk102) that will be fully escaped. But in our case we are supplying the whole expression not just the parameters and the expression must not be escaped. Furthermore the injection is only possible with the expression (not the saml attributes) thus only admins could carry out the attack.,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12791,911849512,2022-07-01T10:42:05Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/role/JpaMapRoleEntityDelegate.java,"@@ -0,0 +1,102 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.jpa.role;",Would it make sense to place this class to `org.keycloak.models.map.storage.jpa.role.delegate` package?,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12791,911861822,2022-07-01T11:00:50Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/role/JpaMapRoleEntityDelegate.java,"@@ -0,0 +1,102 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.jpa.role;++import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.role.MapRoleEntityDelegate;+import org.keycloak.models.map.storage.jpa.role.delegate.JpaRoleDelegateProvider;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleCompositeEntity;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleCompositeEntityKey;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleEntity;++import javax.persistence.EntityManager;+import javax.persistence.Query;+import javax.persistence.TypedQuery;+import java.util.Set;+import java.util.stream.Collectors;++/**+ * Delegate for the JPA implementation for MapRoleEntityDelegate.+ * It will delegate all access to the composite roles to a separate table.+ *+ * For performance reasons, it caches the composite roles within the session if they have already been retrieved.+ * This relies on the behavior of {@link org.keycloak.models.map.storage.jpa.JpaMapKeycloakTransaction} that+ * each entity is created only once within each session.+ *+ * @author Alexander Schwartz+ */+public class JpaMapRoleEntityDelegate extends MapRoleEntityDelegate {+    private final EntityManager em;++    private Set<String> compositeRoles;++    public JpaMapRoleEntityDelegate(JpaRoleEntity original, EntityManager em) {+        super(new JpaRoleDelegateProvider(original, em));+        this.em = em;+    }++    @Override+    public Set<String> getCompositeRoles() {","All this methods are always used instead of the original methods declared in `JpaRoleEntity`. I can see it's described here in class javadoc, but I took me a while to find this info out. Would it make sense to note this fact within `JpaRoleEntity` as well? wdyt?",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/12791,911873032,2022-07-01T11:19:16Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/role/JpaMapRoleEntityDelegate.java,"@@ -0,0 +1,102 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.jpa.role;++import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.role.MapRoleEntityDelegate;+import org.keycloak.models.map.storage.jpa.role.delegate.JpaRoleDelegateProvider;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleCompositeEntity;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleCompositeEntityKey;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleEntity;++import javax.persistence.EntityManager;+import javax.persistence.Query;+import javax.persistence.TypedQuery;+import java.util.Set;+import java.util.stream.Collectors;++/**+ * Delegate for the JPA implementation for MapRoleEntityDelegate.+ * It will delegate all access to the composite roles to a separate table.+ *+ * For performance reasons, it caches the composite roles within the session if they have already been retrieved.+ * This relies on the behavior of {@link org.keycloak.models.map.storage.jpa.JpaMapKeycloakTransaction} that+ * each entity is created only once within each session.+ *+ * @author Alexander Schwartz+ */+public class JpaMapRoleEntityDelegate extends MapRoleEntityDelegate {+    private final EntityManager em;++    private Set<String> compositeRoles;++    public JpaMapRoleEntityDelegate(JpaRoleEntity original, EntityManager em) {+        super(new JpaRoleDelegateProvider(original, em));+        this.em = em;+    }++    @Override+    public Set<String> getCompositeRoles() {","I had in mind something like this (`JpaRoleEntity`):```    // method is not used, it's overridden by JpaMapRoleEntityDelegate    @Override    public Set<String> getCompositeRoles() {        return metadata.getCompositeRoles();    }    // method is not used, it's overridden by JpaMapRoleEntityDelegate    @Override    public void setCompositeRoles(Set<String> compositeRoles) {        metadata.setCompositeRoles(compositeRoles);    }    // method is not used, it's overridden by JpaMapRoleEntityDelegate    @Override    public void addCompositeRole(String roleId) {        metadata.addCompositeRole(roleId);    }    // method is not used, it's overridden by JpaMapRoleEntityDelegate    @Override    public void removeCompositeRole(String roleId) {        metadata.removeCompositeRole(roleId);    }```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12791,911913574,2022-07-01T12:21:46Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/role/JpaMapRoleEntityDelegate.java,"@@ -0,0 +1,102 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.jpa.role;++import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.role.MapRoleEntityDelegate;+import org.keycloak.models.map.storage.jpa.role.delegate.JpaRoleDelegateProvider;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleCompositeEntity;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleCompositeEntityKey;+import org.keycloak.models.map.storage.jpa.role.entity.JpaRoleEntity;++import javax.persistence.EntityManager;+import javax.persistence.Query;+import javax.persistence.TypedQuery;+import java.util.Set;+import java.util.stream.Collectors;++/**+ * Delegate for the JPA implementation for MapRoleEntityDelegate.+ * It will delegate all access to the composite roles to a separate table.+ *+ * For performance reasons, it caches the composite roles within the session if they have already been retrieved.+ * This relies on the behavior of {@link org.keycloak.models.map.storage.jpa.JpaMapKeycloakTransaction} that+ * each entity is created only once within each session.+ *+ * @author Alexander Schwartz+ */+public class JpaMapRoleEntityDelegate extends MapRoleEntityDelegate {+    private final EntityManager em;++    private Set<String> compositeRoles;++    public JpaMapRoleEntityDelegate(JpaRoleEntity original, EntityManager em) {+        super(new JpaRoleDelegateProvider(original, em));+        this.em = em;+    }++    @Override+    public Set<String> getCompositeRoles() {","Thanks for this suggestion to document this, and also to make this interface safe. I decided to throw an exception when this is being called, and then found that the cloner calls this. Then I allowed at least `setCompositeRoles` to be called with a `null` parameter. Please have a look if you like this better.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12865,912805273,2022-07-04T09:22:16Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -852,6 +852,7 @@                                 <keycloak.authorizationCache.enabled>false</keycloak.authorizationCache.enabled>                                 <keycloak.realmCache.enabled>false</keycloak.realmCache.enabled>                                 <keycloak.userCache.enabled>false</keycloak.userCache.enabled>+                                <keycloak.userSessionPersister.provider></keycloak.userSessionPersister.provider>","Thanks @mhajas for reviewing this. The configuration in `keycloak-server.json` sets `jpa` as the default, and as that one is no longer available after this change once Map storage is enabled, I needed to disable it in the profile. https://github.com/keycloak/keycloak/blob/7d96f3ad5ad32c4a78a9d571ad891ae953258332/testsuite/integration-arquillian/tests/base/src/test/resources/META-INF/keycloak-server.json#L184-L186I briefly considered changing the default there, but as map store is not the default yet, I decided against it.Please let me know if you hold the same or a different view.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12865,912887728,2022-07-04T10:59:05Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -852,6 +852,7 @@                                 <keycloak.authorizationCache.enabled>false</keycloak.authorizationCache.enabled>                                 <keycloak.realmCache.enabled>false</keycloak.realmCache.enabled>                                 <keycloak.userCache.enabled>false</keycloak.userCache.enabled>+                                <keycloak.userSessionPersister.provider></keycloak.userSessionPersister.provider>",I would just expect this is not necessary as `userSessionPersister` is disabled by the `isSupported` method. Should this be done also for?:https://github.com/keycloak/keycloak/blob/7d96f3ad5ad32c4a78a9d571ad891ae953258332/testsuite/integration-arquillian/tests/base/src/test/resources/META-INF/keycloak-server.json#L180-L182,x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12851,912910997,2022-07-04T11:30:54Z,quarkus/server/pom.xml,"@@ -21,6 +21,12 @@         </dependency>     </dependencies> +    <properties>+        <!-- define this as a property, so it can still be overwritten on the CLI -->+        <!-- direct the auto-created files to the target folder, so they are cleaned by ""mvn clean"" -->+        <kc.home.dir>${project.build.directory}/kc</kc.home.dir>","Have you thought of using the sub-module target folder quarkus/target instead? Asking bc. in my usual dev flow I avoid to build the whole project bc. it takes too long (around 4-5 min). Instead I run `mvn clean install -DskipTests` in the quarkus subfolder whenever possible (takes only ~50s). But I rarely touch code outside of my module (then a complete build would be needed), so maybe it makes sense to leave it as is, considering your usecase. wdyt? ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12851,912980927,2022-07-04T12:59:34Z,quarkus/server/pom.xml,"@@ -21,6 +21,12 @@         </dependency>     </dependencies> +    <properties>+        <!-- define this as a property, so it can still be overwritten on the CLI -->+        <!-- direct the auto-created files to the target folder, so they are cleaned by ""mvn clean"" -->+        <kc.home.dir>${project.build.directory}/kc</kc.home.dir>","With the run target and the IDELauncher present in this module, I'd prefer to have also the temporary folder here, therefore I'd like to keep it as-is. I understand why you're running `mvn clean install -DskipTests` in the subfolder, and regardless of the location this would clean the target folder in both locations. BTW and unrelated to this: I raised on issue upstream quarkusio/quarkus#26476 to avoid having the target `clean` all the time, and start a discussion soon to integrate `gitflow-incremental-builder` as done in the Quarkus project to support fast incremental multi-module builds. ",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12851,913244247,2022-07-04T19:44:49Z,quarkus/server/pom.xml,"@@ -21,6 +21,12 @@         </dependency>     </dependencies> +    <properties>+        <!-- define this as a property, so it can still be overwritten on the CLI -->+        <!-- direct the auto-created files to the target folder, so they are cleaned by ""mvn clean"" -->+        <kc.home.dir>${project.build.directory}/kc</kc.home.dir>",just seen that I read this wrong and it definitely is where it belongs (and not as I misread it at project level). So even better ;),
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/12871,913743483,2022-07-05T12:32:31Z,model/map-jpa/src/main/resources/META-INF/users/jpa-users-changelog-1.xml,"@@ -0,0 +1,180 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.++Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at++http://www.apache.org/licenses/LICENSE-2.0++Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <changeSet author=""keycloak"" id=""users-1"">++        <createTable tableName=""kc_user"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_user"">+            <ext:column name=""entityversion"" type=""INTEGER"" jsonColumn=""metadata"" jsonProperty=""entityVersion""/>+            <ext:column name=""realmid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fRealmId""/>+            <ext:column name=""username"" type=""VARCHAR(255)"" jsonColumn=""metadata"" jsonProperty=""fUsername""/>+            <ext:column name=""firstname"" type=""VARCHAR(255)"" jsonColumn=""metadata"" jsonProperty=""fFirstName""/>+            <ext:column name=""lastname"" type=""VARCHAR(255)"" jsonColumn=""metadata"" jsonProperty=""fLastName""/>+            <ext:column name=""email"" type=""VARCHAR(255)"" jsonColumn=""metadata"" jsonProperty=""fEmail""/>+            <ext:column name=""emailconstraint"" type=""VARCHAR(255)"" jsonColumn=""metadata"" jsonProperty=""fEmailConstraint""/>+            <ext:column name=""federationlink"" type=""VARCHAR(255)"" jsonColumn=""metadata"" jsonProperty=""fFederationLink""/>+            <ext:column name=""enabled"" type=""BOOLEAN"" jsonColumn=""metadata"" jsonProperty=""fEnabled""/>+            <ext:column name=""emailverified"" type=""BOOLEAN"" jsonColumn=""metadata"" jsonProperty=""fEmailVerified""/>+            <ext:column name=""timestamp"" type=""BIGINT"" jsonColumn=""metadata"" jsonProperty=""fCreatedTimestamp""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_user"" indexName=""user_entityVersion"">+            <column name=""entityversion""/>+        </createIndex>+        <createIndex tableName=""kc_user"" indexName=""user_realmId"">+            <column name=""realmid""/>+        </createIndex>+        <createIndex tableName=""kc_user"" indexName=""user_username_realmid"">+            <column name=""username""/>+            <column name=""realmid""/>+        </createIndex>+        <createIndex tableName=""kc_user"" indexName=""user_email_realmid"">+            <column name=""email""/>+            <column name=""realmid""/>+        </createIndex>+        <createIndex tableName=""kc_user"" indexName=""user_email_constraint_realmid"">+            <column name=""emailconstraint""/>+            <column name=""realmid""/>+        </createIndex>+        <!-- TODO: create individual indexes for all other searchable columns (firstname, lastname, enabled, etc) ? -->+        <ext:createJsonIndex tableName=""kc_user"" indexName=""user_serviceAccountClientLink"">+            <ext:column jsonColumn=""metadata"" jsonProperty=""fServiceAccountClientLink""/>+        </ext:createJsonIndex>++        <createTable tableName=""kc_user_consent"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_consent_fk_root_fkey"" references=""kc_user(id)"" deleteCascade=""true""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_user_consent"">+            <ext:column name=""clientid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fClientId""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_user_consent"" indexName=""user_consent_fk_root"">+            <column name=""fk_root""/>+        </createIndex>+        <createIndex tableName=""kc_user_consent"" indexName=""user_consent_clientId"">+            <column name=""clientid""/>+        </createIndex>+        <ext:createJsonIndex tableName=""kc_user_consent"" indexName=""user_consent_grantedClientScopes"">+            <ext:column jsonColumn=""metadata"" jsonProperty=""fGrantedClientScopesIds""/>+        </ext:createJsonIndex>++        <createTable tableName=""kc_user_federated_identity"">+            <column name=""id"" type=""UUID"">+                <constraints primaryKey=""true"" nullable=""false""/>+            </column>+            <column name=""version"" type=""INTEGER"" defaultValueNumeric=""0"">+                <constraints nullable=""false""/>+            </column>+            <column name=""fk_root"" type=""UUID"">+                <constraints foreignKeyName=""user_federated_identity_fk_root_fkey"" references=""kc_user(id)"" deleteCascade=""true""/>+            </column>+            <column name=""metadata"" type=""json""/>+        </createTable>+        <ext:addGeneratedColumn tableName=""kc_user_federated_identity"">+            <ext:column name=""identityprovider"" type=""VARCHAR(255)"" jsonColumn=""metadata"" jsonProperty=""fIdentityProvider""/>+            <ext:column name=""userid"" type=""KC_KEY"" jsonColumn=""metadata"" jsonProperty=""fUserId""/>+        </ext:addGeneratedColumn>+        <createIndex tableName=""kc_user_federated_identity"" indexName=""user_federated_identity_fk_root"">+            <column name=""fk_root""/>+        </createIndex>+        <createIndex tableName=""kc_user_federated_identity"" indexName=""user_federated_identity_idp"">+            <column name=""identityprovider""/>+        </createIndex>+        <createIndex tableName=""kc_user_federated_identity"" indexName=""user_federated_identity_userId"">+            <column name=""userid""/>+        </createIndex>++        <createTable tableName=""kc_user_group"">+            <column name=""user_id"" type=""UUID"">+                <constraints nullable=""false"" foreignKeyName=""user_group_userid_fkey"" references=""kc_user(id)"" deleteCascade=""true""/>+            </column>+            <column name=""group_id"" type=""KC_KEY""/>+        </createTable>+        <createIndex tableName=""kc_user_group"" indexName=""user_group_userId"">+            <column name=""user_id""/>+        </createIndex>+        <createIndex tableName=""kc_user_group"" indexName=""user_group_groupId"">+            <column name=""group_id""/>+        </createIndex>++        <createTable tableName=""kc_user_role"">+            <column name=""user_id"" type=""UUID"">+                <constraints nullable=""false"" foreignKeyName=""user_role_userid_fkey"" references=""kc_user(id)"" deleteCascade=""true""/>+            </column>+            <column name=""role_id"" type=""KC_KEY""/>+        </createTable>+        <createIndex tableName=""kc_user_role"" indexName=""user_role_userId"">+            <column name=""user_id""/>","Funny you mentioned this because yesterday I was looking into some of our schemas and I noticed the very same inconsistency in naming the columns. I personally like it better with underscores, but I don't have a strong opinion on which format should be used. On the other hand I really think we should review the schemas and go for a single and unified format for the column names.",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12789,915498261,2022-07-07T06:19:46Z,services/src/main/java/org/keycloak/protocol/oidc/DefaultTokenExchangeProvider.java,"@@ -370,6 +371,13 @@ protected Response exchangeClientToOIDCClient(UserModel targetUser, UserSessionM         authSession.setClientNote(OIDCLoginProtocol.ISSUER, Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()));         authSession.setClientNote(OIDCLoginProtocol.SCOPE_PARAM, scope); +        if (targetUserSession == null) {+            // if no session is associated with a subject_token, a stateless session is created to only allow building a token to the audience+            targetUserSession = session.sessions().createUserSession(authSession.getParentSession().getId(), realm, targetUser, targetUser.getUsername(),","Question: Is this really the place where this code should be executed? I've seen that we're doing nearly the same thing here:https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/protocol/oidc/DefaultTokenExchangeProvider.java#L226before calling the `exchangeClientToClient` that in turn calls `exchangeClientToOIDCClient` - all with a userSession that is `null`. this leads me to the assumption that this should be done beforehand, no? ",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12967,918914650,2022-07-12T12:34:51Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -142,17 +163,35 @@ private Process startContainer() throws IOException {         builder.environment().put(""KEYCLOAK_ADMIN_PASSWORD"", ""admin"");          if (restart.compareAndSet(false, true)) {-            FileUtils.deleteDirectory(configuration.getProvidersPath().resolve(""data"").toFile());+            if (SystemUtils.IS_OS_WINDOWS) {+                deleteTempFilesOnWindows(configuration.getProvidersPath().resolve(""data""));+            } else {+                FileUtils.deleteDirectory(configuration.getProvidersPath().resolve(""data"").toFile());+            }         }          return builder.start();     }      private String[] getProcessCommands() {         List<String> commands = new ArrayList<>();-        commands.add(getCommand());-        commands.add(""-v"");++        if(SystemUtils.IS_OS_WINDOWS) {+            commands.add(configuration.getProvidersPath().resolve(""bin"") + File.separator + SCRIPT_CMD_INVOKABLE);+        } else {+            commands.add(SCRIPT_CMD_INVOKABLE);+            commands.add(""-v""); // see #11185, has to be fixed before using -v on windows.+        }+         commands.add(""start"");++        if (SystemUtils.IS_OS_WINDOWS && firstStart.compareAndSet(true, false)) {",We have a similar logic already for server restarts or when running cluster tests. Also not sure if you need `firstStart` if there is a `restart` flag.,
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12967,918920829,2022-07-12T12:41:13Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -142,17 +163,35 @@ private Process startContainer() throws IOException {         builder.environment().put(""KEYCLOAK_ADMIN_PASSWORD"", ""admin"");          if (restart.compareAndSet(false, true)) {-            FileUtils.deleteDirectory(configuration.getProvidersPath().resolve(""data"").toFile());+            if (SystemUtils.IS_OS_WINDOWS) {+                deleteTempFilesOnWindows(configuration.getProvidersPath().resolve(""data""));+            } else {+                FileUtils.deleteDirectory(configuration.getProvidersPath().resolve(""data"").toFile());+            }         }          return builder.start();     }      private String[] getProcessCommands() {         List<String> commands = new ArrayList<>();-        commands.add(getCommand());-        commands.add(""-v"");++        if(SystemUtils.IS_OS_WINDOWS) {+            commands.add(configuration.getProvidersPath().resolve(""bin"") + File.separator + SCRIPT_CMD_INVOKABLE);+        } else {+            commands.add(SCRIPT_CMD_INVOKABLE);+            commands.add(""-v""); // see #11185, has to be fixed before using -v on windows.+        }+         commands.add(""start"");++        if (SystemUtils.IS_OS_WINDOWS && firstStart.compareAndSet(true, false)) {","`firstStart` is effectively avoiding the ant task, mimicking the behaviour of the [configure.xml](https://github.com/keycloak/keycloak/blob/240de2aeb0fef64b050838aa3c3dfb9ef380aa2b/testsuite/integration-arquillian/servers/auth-server/quarkus/ant/configure.xml) we use for unix, to avoid setting the (dynamic) full-path to jar as outlined in the description (see also: https://ant.apache.org/manual/Tasks/exec.html ).  We could think about re-using the `restart` flag for it, but in my head it made more sense at nearly no cost to add a specific flag. Not hard on this, though.",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/13048,919002379,2022-07-12T13:54:21Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/UserSessionExpirationTest.java,"@@ -0,0 +1,76 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.session;++import org.junit.Test;+import org.keycloak.common.util.Time;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RealmProvider;+import org.keycloak.models.UserSessionProvider;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;+import org.keycloak.testsuite.model.infinispan.InfinispanTestUtil;+import org.keycloak.timer.TimerProvider;++import static org.hamcrest.CoreMatchers.notNullValue;+import static org.hamcrest.CoreMatchers.nullValue;+import static org.hamcrest.MatcherAssert.assertThat;++@RequireProvider(value = UserSessionProvider.class, only = ""map"")","Nitpick: Consider using static property for consistency with existing classes. ```suggestion@RequireProvider(value = UserSessionProvider.class, only = MapUserSessionProviderFactory.PROVIDER_ID)```",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/13091,920240636,2022-07-13T15:48:02Z,themes/src/main/resources-community/theme/base/admin/messages/admin-messages_pt_BR.properties,"@@ -883,23 +883,23 @@ key-password.tooltip=Senha para acessar a chave privada no certificado. store-password.tooltip=Senha para acessar o arquivo em si. jwt-import.key-alias.tooltip=Alias do arquivo para o seu certificado. registrationAccessToken.tooltip=O token de acesso para registro provê acesso aos cliente para o serviço de registro cliente.-scope-param-required.tooltip=Este role somente será concedido se os parâmetros de escopo com os nomes dos roles forem utilizados durante a autorização/solicitação de token.-composite-roles.tooltip=Quando este role é associado/removido de um usuário, qualquer role associado com ele também será adicionado/removido implicitamente.-composite.associated-realm-roles.tooltip=Roles de nível de realm associados com este role composto.-composite.available-realm-roles.tooltip=Roles de nível de realm disponíveis para este role composto.-available-roles.tooltip=Roles para este cliente que você pode associar a este role composto.-scope.available-roles.tooltip=Roles do Realm que podem ser associados a este escopo.-service-account.available-roles.tooltip=Roles do Realm que podem ser associados a contas de serviço.-client.associated-roles.tooltip=Roles do Cliente associados a este role composto.+scope-param-required.tooltip=Esta fun\u00E7\u00E3o somente será concedida se os parâmetros de escopo com os nomes dos fun\u00E7\u00F5es forem utilizadas durante a autorização/solicitação de token.","```suggestionscope-param-required.tooltip=Esta fun\u00E7\u00E3o somente será concedida se os parâmetros de escopo com os nomes das fun\u00E7\u00F5es forem utilizados durante a autorização/solicitação de token.```I believe the word ""utilizados"" refers to the parameters, not the roles.",x
3108527,trixpan,https://api.github.com/repos/keycloak/keycloak/pulls/13091,920552463,2022-07-13T22:08:05Z,themes/src/main/resources-community/theme/base/admin/messages/admin-messages_pt_BR.properties,"@@ -421,19 +421,19 @@ import-users=Importar usuários import-groups=Importar grupos import-clients=Importar clientes import-identity-providers=Importar provedores de identificação-import-realm-roles=Importar roles do realm-import-client-roles=Importar roles de cliente+import-realm-roles=Importar fun\u00E7\u00F5es do realm+import-client-roles=Importar fun\u00E7\u00F5es de cliente",Good point. I did some updates to those as well. Seems to me most of the time lower case client is better (I left a few exceptions - either due to punctuation or because consistency isn't required).,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13097,920881830,2022-07-14T08:14:33Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -265,6 +265,7 @@ public void init(Config.Scope config) {      @Override     public void postInit(KeycloakSessionFactory factory) {+        this.emf = createEntityManagerFactory();     } ","When testing this in Undertow and Quarkus, I found that this is being called twice (actually the logging in the undertow setup put me on this). Due to this, at least in the Undertow setup two EMFs will be set up, with two connection pools. I assume the same happens for Quarkus as well.I remember this happens for all (?) `AmphibianProviderFactory`. This was apparently the reason why it was lazily initialized. Locally I rolled back the change and made it lazily-initializable. This then still worked for both Undertow and Quarkus.```suggestion    @Override    public void postInit(KeycloakSessionFactory factory) {    }    // ... and then call lazyInit() again from create()    private void lazyInit() {        if (emf == null) {            synchronized (this) {                if (emf == null) {                    this.emf = createEntityManagerFactory();                }            }        }    }",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12241,920933256,2022-07-14T09:09:33Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java,"@@ -441,7 +442,8 @@ private Response doBrowserLogout(AuthenticationSessionModel logoutSession) {         // authenticate identity cookie, but ignore an access token timeout as we're logging out anyways.         AuthenticationManager.AuthResult authResult = AuthenticationManager.authenticateIdentityCookie(session, realm, false);         if (authResult != null) {-            userSession = userSession != null ? userSession : authResult.getSession();+            userSession = userSession != null ? userSession : +                    lockObjectsForModification(session, () -> session.sessions().getUserSession(realm, authResult.getSession().getId()));","Locking of rows in the database works only when the entity is read from the database in the session for the first time. When it is locked later, the session might already have a stale entry in its persistence context. Therefore, the `lockObjectsForModification()` should wrap the `AuthenticationManager.authenticateIdentityCookie()`. This way the `userSession` embodied in there will be locked when read from the database the first time. No further locking is necessary, so the other `lockObjectsForModification()` can then be removed.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/12241,920942910,2022-07-14T09:19:54Z,services/src/main/java/org/keycloak/authentication/authenticators/sessionlimits/UserSessionLimitsAuthenticator.java,"@@ -165,6 +167,6 @@ private void handleLimitExceeded(AuthenticationFlowContext context, List<UserSes     private void logoutOldestSession(List<UserSessionModel> userSessions) {         logger.info(""Logging out oldest session"");         Optional<UserSessionModel> oldest = userSessions.stream().sorted(Comparator.comparingInt(UserSessionModel::getLastSessionRefresh)).findFirst();-        oldest.ifPresent(userSession -> AuthenticationManager.backchannelLogout(session, userSession, true));+        oldest.ifPresent(userSession -> AuthenticationManager.backchannelLogout(session, lockObjectsForModification(session, () -> session.sessions().getUserSession(userSession.getRealm(), userSession.getId())), true));","Here, I have the same comment as below: Locking of rows in the database works only when the entity is read from the database in the session for the first time. When it is locked later, the session might already have a stale entry in its persistence context.Here, the list of session is collected in line 56 with `session.sessions().getUserSessionsStream(context.getRealm(), context.getUser())`. IMHO this is the call that should be wrapped with `lockObjectsForModification()`, afterwards no locking will be necessary. I wonder if locking was necessary here to make a test pass? Without locking, this could lead to exceptions when a user tries to log in simultaneously, and their oldest session is beging logged out concurrently. When this would lock the whole list of the user's sessions in line 56, this would ensure that no concurrent counting of those sessions happens, and that the simultaneous log in would wait until the first evaluation has completed. Using locking in this way will lead to consistent outcomes, and no concurrency problems.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13064,920973655,2022-07-14T09:53:44Z,operator/pom.xml,"@@ -114,6 +114,16 @@             <artifactId>keycloak-common</artifactId>         </dependency> +        <!-- FIXME: Adding BC since removed from common, this will need to be removed -->+        <dependency>","It will be nice to remove the bouncycastle dependency from here.I may be wrong, but it seems to me that only usage of bouncycastle in operator is in the class `WatchedSecretsTest` . They use the class `org.bouncycastle.util.encoders.Base64` for base64 encoding. However I think that this one can be simply replaced by `org.keycloak.common.util.Base64`, which will allow to get rid of bouncycastlle import from `WathcedSecretsTest` class. Can you try to change the `WatchedSecretsTest` class acording to it and remove this dependency and check it works?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13064,920984668,2022-07-14T10:06:01Z,common/src/main/java/org/keycloak/common/crypto/CertificateUtils.java,"@@ -0,0 +1,60 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.common.crypto;++import java.math.BigInteger;+import java.security.KeyPair;+import java.security.PrivateKey;+import java.security.cert.X509Certificate;++/**+ * The Class CertificateUtils provides utility functions for generation of V1 and V3 {@link java.security.cert.X509Certificate}+ *+ */+public interface CertificateUtils {","Is it possible to slightly rename this class, so we don't have 2 classes named `CertificateUtils` ? For example this one can be renamed to `CertificateUtilsProvider` ? Same applies for implementation classes (EG. `CertificateUtilsBC` can be renamed to `BCCertificateUtilsProvider` and the fips can be `BCFipsCertificateUtilsProvider`). WDYT?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13064,920996969,2022-07-14T10:20:42Z,common/src/main/java/org/keycloak/common/crypto/PemUtils.java,"@@ -0,0 +1,100 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.common.crypto;++import java.security.Key;+import java.security.NoSuchAlgorithmException;+import java.security.PrivateKey;+import java.security.PublicKey;+import java.security.cert.Certificate;+import java.security.cert.X509Certificate;++/**+ * Utility classes to extract PublicKey, PrivateKey, and X509Certificate from openssl generated PEM files+ *+ * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>+ * @version $Revision: 1 $+ */+public interface PemUtils {","2 comments to this:- Is it possible to rename this to `PemUtilsProvider` ? See the similar comment like for `CertificateUtils` - I see that current class `org.keycloak.common.util.PemUtils` has only minimal usage of BouncyCastle. It is used only in the private method `private static String encode(Object obj)` - https://github.com/keycloak/keycloak/blob/main/common/src/main/java/org/keycloak/common/util/PemUtils.java#L139 . So I suggest to extract to cryptoProvider just the parts dependent on BouncyCastle, but keep the other parts in the `org.keycloak.common.util.PemUtils` to avoid some unecessary code duplicities. So for example interface `PemUtilsProvider` can have only single method `String encode(Object obj)` . And most of the content of the class `org.keycloak.common.util.PemUtils` will be kept as is in the current Keycloak main. With only exception that private method `String encode(Object obj)` will be removed from this class and instead all the places of `org.keycloak.common.util.PemUtils`, which calls this private method, would instead call `cryptoProvider.getPemUtils().encode()` . Will this approach work for you?",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12967,921169074,2022-07-14T13:41:11Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -44,6 +44,10 @@         <mvel.version>2.4.0.Final</mvel.version>         <systemrules.version>1.19.0</systemrules.version>         <common.resources>${basedir}/../../servers/auth-server/jboss/common</common.resources>+        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>+        <maven.compiler.release>11</maven.compiler.release>+        <maven.compiler.target>11</maven.compiler.target>+        <maven.compiler.source>11</maven.compiler.source>","Is it an option to udpate them to use JDK 11? It will be the default/minimum JDK version for quarkus based keycloak and the other modules have afaik the targets set accordingly (we also use JDK 11 to build upstream, see https://github.com/keycloak/keycloak/blob/main/.github/workflows/ci.yml#L14 ) - cc @nehachopra27 @vmuzikar fyi",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12967,921190635,2022-07-14T14:00:37Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -165,18 +186,34 @@ private Process startContainer() throws IOException {         builder.environment().put(""KEYCLOAK_ADMIN"", ""admin"");         builder.environment().put(""KEYCLOAK_ADMIN_PASSWORD"", ""admin""); -        if (restart.compareAndSet(false, true)) {-            FileUtils.deleteDirectory(configuration.getProvidersPath().resolve(""data"").toFile());+        if (isStartupNeeded.compareAndSet(false, true)) {+            if (SystemUtils.IS_OS_WINDOWS) {","If i remember correctly (tbh I copied this part over from the changes I made some time ago for the quarkus testsuite as part of #11567 ) The `deleteDirectory` helper also couldn't handle non-empty directories the right way on windows. For more information see e.g. https://www.marcobehler.com/guides/java-files#_moving_deleting_listing_files (Section ""How to delete non-empty directories"") - but will give it another try if you insist :)",
18038099,david-rh,https://api.github.com/repos/keycloak/keycloak/pulls/13064,921274353,2022-07-14T15:15:25Z,operator/pom.xml,"@@ -114,6 +114,16 @@             <artifactId>keycloak-common</artifactId>         </dependency> +        <!-- FIXME: Adding BC since removed from common, this will need to be removed -->+        <dependency>","Not including the BC dep leads to errors like the one below. I think this will be easier to resolve after we remove the dependency from core. So for now, I will update the Base64 to java.util, but leave the bc dep in the pom.xmlError:  COMPILATION ERROR : [INFO] -------------------------------------------------------------Error:  /home/runner/work/keycloak/keycloak/operator/target/keycloak-core/org/keycloak/jose/jwk/JWKParser.java:[20,28] package org.bouncycastle.jce does not existError:  /home/runner/work/keycloak/keycloak/operator/target/keycloak-core/org/keycloak/jose/jwk/JWKParser.java:[21,33] package org.bouncycastle.jce.spec does not existError:  /home/runner/work/keycloak/keycloak/operator/target/keycloak-core/org/keycloak/jose/jwk/JWKParser.java:[22,33] package org.bouncycastle.jce.spec does not exist",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13064,921286435,2022-07-14T15:26:47Z,operator/pom.xml,"@@ -114,6 +114,16 @@             <artifactId>keycloak-common</artifactId>         </dependency> +        <!-- FIXME: Adding BC since removed from common, this will need to be removed -->+        <dependency>","Yeah, ok. I've created https://github.com/keycloak/keycloak/issues/13115 as a follow-up for removing this dependency from operator.",
18038099,david-rh,https://api.github.com/repos/keycloak/keycloak/pulls/13064,921713560,2022-07-15T00:34:45Z,common/src/main/java/org/keycloak/common/crypto/PemUtils.java,"@@ -0,0 +1,100 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.common.crypto;++import java.security.Key;+import java.security.NoSuchAlgorithmException;+import java.security.PrivateKey;+import java.security.PublicKey;+import java.security.cert.Certificate;+import java.security.cert.X509Certificate;++/**+ * Utility classes to extract PublicKey, PrivateKey, and X509Certificate from openssl generated PEM files+ *+ * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>+ * @version $Revision: 1 $+ */+public interface PemUtils {",moved code to abstract class,
18038099,david-rh,https://api.github.com/repos/keycloak/keycloak/pulls/13064,921714291,2022-07-15T00:36:52Z,common/src/main/java/org/keycloak/common/util/PemUtils.java,"@@ -17,31 +17,28 @@  package org.keycloak.common.util; -import org.bouncycastle.openssl.jcajce.JcaPEMWriter;--import java.io.ByteArrayInputStream;-import java.io.IOException;-import java.io.StringWriter; import java.security.Key;-import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; import java.security.PrivateKey; import java.security.PublicKey; import java.security.cert.Certificate; import java.security.cert.X509Certificate; +import org.keycloak.common.crypto.CryptoIntegration;+ /**  * Utility classes to extract PublicKey, PrivateKey, and X509Certificate from openssl generated PEM files  *  * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>  * @version $Revision: 1 $  */-public final class PemUtils {+public class PemUtils {      public static final String BEGIN_CERT = ""-----BEGIN CERTIFICATE-----"";     public static final String END_CERT = ""-----END CERTIFICATE-----""; -    private PemUtils() {+    static {+        CryptoIntegration.init(ClassLoader.getSystemClassLoader());","Added @Deprecated to static classes, I would prefer to open follow-up issue to remove static calls.",
18038099,david-rh,https://api.github.com/repos/keycloak/keycloak/pulls/13064,921714516,2022-07-15T00:37:18Z,common/src/main/java/org/keycloak/common/util/CertificateUtils.java,"@@ -17,38 +17,24 @@  package org.keycloak.common.util; -import org.bouncycastle.asn1.x500.X500Name;-import org.bouncycastle.asn1.x509.BasicConstraints;-import org.bouncycastle.asn1.x509.ExtendedKeyUsage;-import org.bouncycastle.asn1.x509.Extension;-import org.bouncycastle.asn1.x509.KeyPurposeId;-import org.bouncycastle.asn1.x509.KeyUsage;-import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;-import org.bouncycastle.cert.X509CertificateHolder;-import org.bouncycastle.cert.X509v1CertificateBuilder;-import org.bouncycastle.cert.X509v3CertificateBuilder;-import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;-import org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils;-import org.bouncycastle.operator.ContentSigner;-import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;- import java.math.BigInteger; import java.security.KeyPair; import java.security.PrivateKey;-import java.security.SecureRandom; import java.security.cert.X509Certificate;-import java.util.Calendar;-import java.util.Date;++import org.keycloak.common.crypto.CryptoIntegration;  /**  * The Class CertificateUtils provides utility functions for generation of V1 and V3 {@link java.security.cert.X509Certificate}  *- * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>- * @author <a href=""mailto:giriraj.sharma27@gmail.com"">Giriraj Sharma</a>- * @version $Revision: 2 $  */ public class CertificateUtils { +    static {","Added @Deprecated to static classes, I would prefer to open follow-up issue to remove static calls. Do you concur?",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13064,921936791,2022-07-15T08:25:38Z,common/src/main/java/org/keycloak/common/util/CertificateUtils.java,"@@ -17,38 +17,24 @@  package org.keycloak.common.util; -import org.bouncycastle.asn1.x500.X500Name;-import org.bouncycastle.asn1.x509.BasicConstraints;-import org.bouncycastle.asn1.x509.ExtendedKeyUsage;-import org.bouncycastle.asn1.x509.Extension;-import org.bouncycastle.asn1.x509.KeyPurposeId;-import org.bouncycastle.asn1.x509.KeyUsage;-import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;-import org.bouncycastle.cert.X509CertificateHolder;-import org.bouncycastle.cert.X509v1CertificateBuilder;-import org.bouncycastle.cert.X509v3CertificateBuilder;-import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;-import org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils;-import org.bouncycastle.operator.ContentSigner;-import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;- import java.math.BigInteger; import java.security.KeyPair; import java.security.PrivateKey;-import java.security.SecureRandom; import java.security.cert.X509Certificate;-import java.util.Calendar;-import java.util.Date;++import org.keycloak.common.crypto.CryptoIntegration;  /**  * The Class CertificateUtils provides utility functions for generation of V1 and V3 {@link java.security.cert.X509Certificate}  *- * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>- * @author <a href=""mailto:giriraj.sharma27@gmail.com"">Giriraj Sharma</a>- * @version $Revision: 2 $  */ public class CertificateUtils { +    static {","Ok, I've created follow-up task for remove static initialization block https://github.com/keycloak/keycloak/issues/13128 . But I am not sure about the @deprecated annotation on static classes. IMO there is not any reason for these classes to be deprecated as they are still widely used from Keycloak codebase?Just to doublecheck, I was referring only to remove static initialization block in the comment above, not to remove whole static class (or deprecate whole class).",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/13127,922097991,2022-07-15T11:58:58Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/liquibase/connection/DefaultLiquibaseConnectionProvider.java,"@@ -56,14 +59,50 @@ public void close() {     public Liquibase getLiquibaseForCustomUpdate(final Connection connection, final String defaultSchema, final String changelogLocation,                                                  final ClassLoader classloader, final String changelogTableName) throws LiquibaseException { -        Database database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(new JdbcConnection(connection));-        if (defaultSchema != null) {-            database.setDefaultSchemaName(defaultSchema);+        String scopeId = enterLiquibaseScope();+        try {+            Database database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(new JdbcConnectionFromPool(connection));",Shouldn't we also wrap the connection [here](https://github.com/keycloak/keycloak/blob/main/model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/liquibase/updater/MapJpaLiquibaseUpdaterProvider.java#L201)?,
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13142,922175792,2022-07-15T13:39:24Z,quarkus/README.md,"@@ -104,4 +104,7 @@ These tests are disabled by default. They using Quarkus development mode predefi      mvn clean install -Dkc.test.storage.database=true -Dtest=MariaDBStartDatabaseTest -to spin up a MariaDB container and start Keycloak with it.\ No newline at end of file+to spin up a MariaDB container and start Keycloak with it.++To use speccific database image with containers  use option -Dkc.db.postgresql.container.image to specify the specific version of the image to be used.","```suggestionTo use a specific database container image,  use the option -Dkc.db.postgresql.container.image to specify the image tag of the postgres image to use or -Dkc.db.mariadb.container.image=<name:tag> for mariadb.```",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13142,922177087,2022-07-15T13:40:48Z,quarkus/README.md,"@@ -104,4 +104,7 @@ These tests are disabled by default. They using Quarkus development mode predefi      mvn clean install -Dkc.test.storage.database=true -Dtest=MariaDBStartDatabaseTest -to spin up a MariaDB container and start Keycloak with it.\ No newline at end of file+to spin up a MariaDB container and start Keycloak with it.++To use speccific database image with containers  use option -Dkc.db.postgresql.container.image to specify the specific version of the image to be used.+mvn clean install -Dkc.test.storage.database=true -Dtest=PostgreSQLDistTest -Dkc.db.postgresql.container.image=postgres:",```suggestionExample:mvn clean install -Dkc.test.storage.database=true -Dtest=PostgreSQLDistTest -Dkc.db.postgresql.container.image=postgres:```,
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13142,922196125,2022-07-15T14:01:07Z,quarkus/README.md,"@@ -104,4 +104,8 @@ These tests are disabled by default. They using Quarkus development mode predefi      mvn clean install -Dkc.test.storage.database=true -Dtest=MariaDBStartDatabaseTest -to spin up a MariaDB container and start Keycloak with it.\ No newline at end of file+to spin up a MariaDB container and start Keycloak with it.++To use a specific database container image,  use the option -Dkc.db.postgresql.container.image to specify the image tag of the postgres image to use or -Dkc.db.mariadb.container.image=<name:tag> for mariadb.","```suggestionTo use a specific database container image, use the option -Dkc.db.postgresql.container.image to specify the image tag of the postgres image to use or -Dkc.db.mariadb.container.image=<name:tag> for mariadb.```",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12789,923233412,2022-07-18T10:58:48Z,services/src/main/java/org/keycloak/protocol/oidc/DefaultTokenExchangeProvider.java,"@@ -370,6 +371,13 @@ protected Response exchangeClientToOIDCClient(UserModel targetUser, UserSessionM         authSession.setClientNote(OIDCLoginProtocol.ISSUER, Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()));         authSession.setClientNote(OIDCLoginProtocol.SCOPE_PARAM, scope); +        if (targetUserSession == null) {+            // if no session is associated with a subject_token, a stateless session is created to only allow building a token to the audience+            targetUserSession = session.sessions().createUserSession(authSession.getParentSession().getId(), realm, targetUser, targetUser.getUsername(),","ah right. this method is a bit big, so i got lost. but that's for another one ;) approved.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13138,923241594,2022-07-18T11:09:39Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/UserSessionConcurrencyTest.java,"@@ -0,0 +1,95 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.session;++import org.junit.Test;+import org.keycloak.models.AuthenticatedClientSessionModel;+import org.keycloak.models.ClientModel;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.models.UserSessionModel;+import org.keycloak.models.UserSessionProvider;+import org.keycloak.protocol.oidc.OIDCLoginProtocol;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;++import java.util.concurrent.CountDownLatch;+import java.util.concurrent.TimeUnit;+import java.util.stream.IntStream;+++@RequireProvider(UserSessionProvider.class)+public class UserSessionConcurrencyTest extends KeycloakModelTest {++    private String realmId;+    private static final int CLIENTS_COUNT = 10;++    @Override+    public void createEnvironment(KeycloakSession s) {+        RealmModel realm = s.realms().createRealm(""test"");+        realm.setDefaultRole(s.roles().addRealmRole(realm, Constants.DEFAULT_ROLES_ROLE_PREFIX + ""-"" + realm.getName()));+        realm.setSsoSessionIdleTimeout(1800);+        realm.setSsoSessionMaxLifespan(36000);+        realm.setClientSessionIdleTimeout(500);+        this.realmId = realm.getId();++        s.users().addUser(realm, ""user1"").setEmail(""user1@localhost"");+        s.users().addUser(realm, ""user2"").setEmail(""user2@localhost"");++        for (int i = 0; i < CLIENTS_COUNT; i++) {+            s.clients().addClient(realm, ""client"" + i);+        }+    }++    @Override+    public void cleanEnvironment(KeycloakSession s) {+        s.realms().removeRealm(realmId);+    }++    @Override+    protected boolean isUseSameKeycloakSessionFactoryForAllThreads() {+        return true;+    }++    @Test+    public void testConcurrentNotesChange() {","During development, I was getting some `ConcurrentModificationException` so I created this test to reproduce. This is doing a similar thing as `TokenManager` does [here](https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/protocol/oidc/TokenManager.java#L539-L564). Maybe we can add some assertions like there should be some amount of clients session and each has some value of the note. I will add it.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13159,923344022,2022-07-18T12:58:39Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -374,24 +374,30 @@ public void validateAndUpdateSchema(KeycloakSession session, Class<?> modelType)          if (this.validatedModelNames.add(modelName)) {         */-        if (this.validatedModels.add(modelType)) {-            Connection connection = getConnection();-            try {-                if (logger.isDebugEnabled()) printOperationalInfo(connection);--                MapJpaUpdaterProvider updater = session.getProvider(MapJpaUpdaterProvider.class);-                MapJpaUpdaterProvider.Status status = updater.validate(modelType, connection, config.get(""schema""));--                if (!status.equals(VALID)) {-                    update(modelType, connection, session);-                }-            } finally {-                if (connection != null) {+        if (!this.validatedModels.contains(modelType)) {+            if (!this.validatedModels.contains(modelType)) {+                //noinspection SynchronizationOnLocalVariableOrMethodParameter+                synchronized (modelType) {","My IDE had a similar suggestion, therefore the ""noinspection SynchronizationOnLocalVariableOrMethodParameter"" comment. This could be debatable, as `modelType` is a class, and classes are singletons inside a classloader context. That's why I kept it as is.",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13197,924077929,2022-07-19T05:39:13Z,quarkus/CONTRIBUTING.md,"@@ -0,0 +1,211 @@+# Contributing guide++## Keycloak Quarkus Extension++Keycloak on Quarkus is basically a Quarkus Extension. For more details about extensions, please take a look at [Writing Your Own Extension](https://quarkus.io/guides/writing-extensions) guide.++As an extension, the server can be embedded in any Quarkus application by adding the following dependency:++```+<dependencies>+    <dependency>+        <groupId>org.keycloak</groupId>+        <artifactId>keycloak-quarkus-server</artifactId>+    </dependency>+</dependencies>+```++Just like any other extension, the server extension has two main modules:++* `deployment`+* `runtime`++Within the `deployment` module you'll find the implementation for the build steps that run when (re)augmenting the application. This module+is responsible for all metadata processing, such as:++* Lookup SPIs and their providers and enable/disable them accordingly+* Create a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`+* Customizations to how Hibernate, Resteasy, Liquibase, Infinispan, and other dependencies are configured and bootstrapped+* Creating Jandex indexes for some server dependencies++The output of this module is bytecode generated by Quarkus that improves the server startup time and memory usage so that any processing+done during (re)augmentation does not happen again when actually starting the server. Note that the code from this module does+not run at all at runtime (when running the server) but only when building the project (the `server` module in particular, more on that later) or when triggering+a re-augmentation when running the `build` command.++Within the `runtime` module you'll find the code that is run at runtime when starting and running the server. The main link between+the `deployment` and `runtime` modules is the `org.keycloak.quarkus.runtime.KeycloakRecorder` class. The `KeycloakRecorder` holds+a set of methods that are invoked from build steps that will end up in recorded bytecode. The recorded bytecode executes those methods at runtime+just like they were called when a build step is run, with the exact same arguments nad values, if any.++As an example, let us look at how the SPIs and their providers are discovered and how the `KeycloakSessionFactory` is created. +Quarkus will run the `org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders` build step whenever you are (re)augmenting the server. The main outcome from this method",Maybe better to provide direct links to the methods/classes instead of the fully qualified name?,
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13197,924087465,2022-07-19T05:58:04Z,quarkus/CONTRIBUTING.md,"@@ -0,0 +1,211 @@+# Contributing guide++## Keycloak Quarkus Extension++Keycloak on Quarkus is basically a Quarkus Extension. For more details about extensions, please take a look at [Writing Your Own Extension](https://quarkus.io/guides/writing-extensions) guide.++As an extension, the server can be embedded in any Quarkus application by adding the following dependency:++```+<dependencies>+    <dependency>+        <groupId>org.keycloak</groupId>+        <artifactId>keycloak-quarkus-server</artifactId>+    </dependency>+</dependencies>+```++Just like any other extension, the server extension has two main modules:++* `deployment`+* `runtime`++Within the `deployment` module you'll find the implementation for the build steps that run when (re)augmenting the application. This module+is responsible for all metadata processing, such as:++* Lookup SPIs and their providers and enable/disable them accordingly+* Create a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`+* Customizations to how Hibernate, Resteasy, Liquibase, Infinispan, and other dependencies are configured and bootstrapped+* Creating Jandex indexes for some server dependencies++The output of this module is bytecode generated by Quarkus that improves the server startup time and memory usage so that any processing+done during (re)augmentation does not happen again when actually starting the server. Note that the code from this module does+not run at all at runtime (when running the server) but only when building the project (the `server` module in particular, more on that later) or when triggering+a re-augmentation when running the `build` command.++Within the `runtime` module you'll find the code that is run at runtime when starting and running the server. The main link between+the `deployment` and `runtime` modules is the `org.keycloak.quarkus.runtime.KeycloakRecorder` class. The `KeycloakRecorder` holds+a set of methods that are invoked from build steps that will end up in recorded bytecode. The recorded bytecode executes those methods at runtime+just like they were called when a build step is run, with the exact same arguments nad values, if any.++As an example, let us look at how the SPIs and their providers are discovered and how the `KeycloakSessionFactory` is created. +Quarkus will run the `org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders` build step whenever you are (re)augmenting the server. The main outcome from this method+is to invoke the `org.keycloak.quarkus.runtime.KeycloakRecorder.configSessionFactory` so that the code from this method is executed at+*runtime* with a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`. At runtime the code from that method is executed+and a `KeycloakSessionFactory` is created without any processing to discover SPIs and their providers.++There are a few reasons why we have Keycloak as a Quarkus extension:++* More control over the build-time augmentation and runtime stages.+* More flexibility when extending Quarkus itself and the extensions used by the server (e.g.: Hibernate, Resteasy, etc.)+* Make it easier to embed the server into Quarkus applications+* Make it possible to allow Keycloak developers to customize the server distribution++## Keycloak Server++The `server` module holds the Keycloak Server itself. It is basically a regular Quarkus application using the `keycloak-quarkus-server` extension. If you look at the+[pom.xml](server/pom.xml) from this module you'll notice that it is a very simple Quarkus application with the bare minimum configuration+to actually build and run the server.++As Quarkus application, the server is a [mutable](https://quarkus.io/guides/reaugmentation#how-to-re-augment-a-quarkus-application) application using the +[mutable-jar](server/src/main/resources/application.properties) package type. As a mutable application, Keycloak is able to allow+users to configure some aspects of the server without having to re-build this module, something impractical from a user perspective.++The mutability of the server is directly related to the `build` command. As mentioned before, the build steps from the `deployment` module+are only run when (re)augmenting the server and when running the `build` command, the server will indicate to Quarkus that the build steps+should re-run and the recorded bytecode should be updated to reflect any change to the server configuration.++From a Quarkus perspective, the server is also a [Command Mode Application](https://quarkus.io/guides/command-mode-reference) and provides+a CLI based on [Picocli](https://picocli.info/). As such, there is a single entrypoint that executes the code to execute the CLI and bootstrap the server. This entry point+is the `org.keycloak.quarkus.runtime.KeycloakMain` class from the `runtime` module.++## Keycloak Distribution++The server distribution is created by build the `dist` module. This module basically consists of packaging the `deployment`, `runtime`,+and `server` modules artifacts and their dependencies to a `ZIP` or tarball file.++Within this directory you'll find the directory structure of the distribution and what is included in it.++## Running the server in development mode++As a regular Quarkus application, you should be able to run the `server` module in [dev mode](https://quarkus.io/guides/maven-tooling#dev-mode) just like any regular application:++```+cd server+mvn clean quarkus:dev -Dquarkus.args=""start-dev""+```++You can set any command or configuration option to the server by setting the `quarkus.args` environment variable.++When running in dev mode, you can benefit from the dev mode capabilities from Quarkus but with some limitations. The main limitations you'll find+at the moment are:++* Changes are only automatically reflected at runtime if you are changing resources from the `deployment`, `runtime`, and `server` modules. Other modules, such as `keycloak-services` still rely on Hot Swap in Java debuggers to reload classes.+* There is nothing in the Dev UI related to the server itself, although you can still change some configuration from there.+* There are some limitations when passing some options when running in dev mode. You should expect more improvements in this area.++We are working to improve the dev experience, and you should expect improvements over time.++## Debugging the server distribution++The `kc.sh|bat` script allows you to remotely debug the distribution. For that, you should run the server as follows:++```+kc.sh --debug start-dev+```++By default, the debug port is available at `8787`.++An additional environment variable `DEBUG_SUSPEND` can be set to suspend the JVM, when launched in debug mode. The `DEBUG_SUSPEND` variable supports the following values:++* `y` - The debug mode JVM launch is suspended+* `n` - The debug mode JVM is started without suspending++Suspending the JVM when in debug mode is useful if you want to debug the early stages of the bootstrap code.++When making changes to the `deployment`, `runtime`, or `server` modules, you can update the distribution with the new artifacts by executing+the following command:++```+mvn -DskipTests clean install+```++After the `quarkus` module and sub-modules are built, you can update the distribution as follows:++```+cp -r server/target/lib ${KC_HOME_DIR}+```++In the example above, the `${KC_HOME_DIR}` variable points to the root directory of the distribution.++You should also be able to update a server dependency directly. For that, copy the jar to the following location:++```+cp services/target/keycloak-services-${KC_VERSION}.jar ${KC_HOME_DIR}/lib/lib/main/org.keycloak.keycloak-services-${KC_VERSION}.jar+```++## Running tests++The distribution has its own distribution and the main tests are within the [tests/integration](tests/integration) module.++The test suite has two main types of tests:++* `jvm`+* `distribution`++The `jvm` tests execute both the test class and server within the same JVM. While the `distribution` tests execute the server+by running the distribution in a separte JVM.++The `distribution` tests are marked as such using the `DistributionTest` annotation. If not marked with this annotation, the test is a `JVM` test.++To run the tests, execute the following command within the `quarkus` module:++```+mvn clean install+```++By default, the tests will run using a raw distribution. If you want to run tests from the [tests/integration](tests/integration) module directly,+please make sure the distribution was built with the latest changes you did to it and its dependencies.++### Running tests using a container++You can also run tests using a container instead of the raw distribution by setting the `kc.quarkus.tests.dist` property as follows:++```+mvn clean install -Dkc.quarkus.tests.dist=docker+```++When setting the `kc.quarkus.tests.dist` to `docker` tests will run using a container instead of the raw distribution.++### Running storage tests++The storage tests are disabled by default but you should be able to run them by activating the `test-database` profile:",```suggestionThe storage tests are disabled by default but can be activated using the `test-database` profile:```,
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13197,924088166,2022-07-19T05:59:26Z,quarkus/CONTRIBUTING.md,"@@ -0,0 +1,211 @@+# Contributing guide++## Keycloak Quarkus Extension++Keycloak on Quarkus is basically a Quarkus Extension. For more details about extensions, please take a look at [Writing Your Own Extension](https://quarkus.io/guides/writing-extensions) guide.++As an extension, the server can be embedded in any Quarkus application by adding the following dependency:++```+<dependencies>+    <dependency>+        <groupId>org.keycloak</groupId>+        <artifactId>keycloak-quarkus-server</artifactId>+    </dependency>+</dependencies>+```++Just like any other extension, the server extension has two main modules:++* `deployment`+* `runtime`++Within the `deployment` module you'll find the implementation for the build steps that run when (re)augmenting the application. This module+is responsible for all metadata processing, such as:++* Lookup SPIs and their providers and enable/disable them accordingly+* Create a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`+* Customizations to how Hibernate, Resteasy, Liquibase, Infinispan, and other dependencies are configured and bootstrapped+* Creating Jandex indexes for some server dependencies++The output of this module is bytecode generated by Quarkus that improves the server startup time and memory usage so that any processing+done during (re)augmentation does not happen again when actually starting the server. Note that the code from this module does+not run at all at runtime (when running the server) but only when building the project (the `server` module in particular, more on that later) or when triggering+a re-augmentation when running the `build` command.++Within the `runtime` module you'll find the code that is run at runtime when starting and running the server. The main link between+the `deployment` and `runtime` modules is the `org.keycloak.quarkus.runtime.KeycloakRecorder` class. The `KeycloakRecorder` holds+a set of methods that are invoked from build steps that will end up in recorded bytecode. The recorded bytecode executes those methods at runtime+just like they were called when a build step is run, with the exact same arguments nad values, if any.++As an example, let us look at how the SPIs and their providers are discovered and how the `KeycloakSessionFactory` is created. +Quarkus will run the `org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders` build step whenever you are (re)augmenting the server. The main outcome from this method+is to invoke the `org.keycloak.quarkus.runtime.KeycloakRecorder.configSessionFactory` so that the code from this method is executed at+*runtime* with a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`. At runtime the code from that method is executed+and a `KeycloakSessionFactory` is created without any processing to discover SPIs and their providers.++There are a few reasons why we have Keycloak as a Quarkus extension:++* More control over the build-time augmentation and runtime stages.+* More flexibility when extending Quarkus itself and the extensions used by the server (e.g.: Hibernate, Resteasy, etc.)+* Make it easier to embed the server into Quarkus applications+* Make it possible to allow Keycloak developers to customize the server distribution++## Keycloak Server++The `server` module holds the Keycloak Server itself. It is basically a regular Quarkus application using the `keycloak-quarkus-server` extension. If you look at the+[pom.xml](server/pom.xml) from this module you'll notice that it is a very simple Quarkus application with the bare minimum configuration+to actually build and run the server.++As Quarkus application, the server is a [mutable](https://quarkus.io/guides/reaugmentation#how-to-re-augment-a-quarkus-application) application using the +[mutable-jar](server/src/main/resources/application.properties) package type. As a mutable application, Keycloak is able to allow+users to configure some aspects of the server without having to re-build this module, something impractical from a user perspective.++The mutability of the server is directly related to the `build` command. As mentioned before, the build steps from the `deployment` module+are only run when (re)augmenting the server and when running the `build` command, the server will indicate to Quarkus that the build steps+should re-run and the recorded bytecode should be updated to reflect any change to the server configuration.++From a Quarkus perspective, the server is also a [Command Mode Application](https://quarkus.io/guides/command-mode-reference) and provides+a CLI based on [Picocli](https://picocli.info/). As such, there is a single entrypoint that executes the code to execute the CLI and bootstrap the server. This entry point+is the `org.keycloak.quarkus.runtime.KeycloakMain` class from the `runtime` module.++## Keycloak Distribution++The server distribution is created by build the `dist` module. This module basically consists of packaging the `deployment`, `runtime`,+and `server` modules artifacts and their dependencies to a `ZIP` or tarball file.++Within this directory you'll find the directory structure of the distribution and what is included in it.++## Running the server in development mode++As a regular Quarkus application, you should be able to run the `server` module in [dev mode](https://quarkus.io/guides/maven-tooling#dev-mode) just like any regular application:++```+cd server+mvn clean quarkus:dev -Dquarkus.args=""start-dev""+```++You can set any command or configuration option to the server by setting the `quarkus.args` environment variable.++When running in dev mode, you can benefit from the dev mode capabilities from Quarkus but with some limitations. The main limitations you'll find+at the moment are:++* Changes are only automatically reflected at runtime if you are changing resources from the `deployment`, `runtime`, and `server` modules. Other modules, such as `keycloak-services` still rely on Hot Swap in Java debuggers to reload classes.+* There is nothing in the Dev UI related to the server itself, although you can still change some configuration from there.+* There are some limitations when passing some options when running in dev mode. You should expect more improvements in this area.++We are working to improve the dev experience, and you should expect improvements over time.++## Debugging the server distribution++The `kc.sh|bat` script allows you to remotely debug the distribution. For that, you should run the server as follows:++```+kc.sh --debug start-dev+```++By default, the debug port is available at `8787`.++An additional environment variable `DEBUG_SUSPEND` can be set to suspend the JVM, when launched in debug mode. The `DEBUG_SUSPEND` variable supports the following values:++* `y` - The debug mode JVM launch is suspended+* `n` - The debug mode JVM is started without suspending++Suspending the JVM when in debug mode is useful if you want to debug the early stages of the bootstrap code.++When making changes to the `deployment`, `runtime`, or `server` modules, you can update the distribution with the new artifacts by executing+the following command:++```+mvn -DskipTests clean install+```++After the `quarkus` module and sub-modules are built, you can update the distribution as follows:++```+cp -r server/target/lib ${KC_HOME_DIR}+```++In the example above, the `${KC_HOME_DIR}` variable points to the root directory of the distribution.++You should also be able to update a server dependency directly. For that, copy the jar to the following location:++```+cp services/target/keycloak-services-${KC_VERSION}.jar ${KC_HOME_DIR}/lib/lib/main/org.keycloak.keycloak-services-${KC_VERSION}.jar+```++## Running tests++The distribution has its own distribution and the main tests are within the [tests/integration](tests/integration) module.++The test suite has two main types of tests:++* `jvm`+* `distribution`++The `jvm` tests execute both the test class and server within the same JVM. While the `distribution` tests execute the server+by running the distribution in a separte JVM.++The `distribution` tests are marked as such using the `DistributionTest` annotation. If not marked with this annotation, the test is a `JVM` test.++To run the tests, execute the following command within the `quarkus` module:++```+mvn clean install+```++By default, the tests will run using a raw distribution. If you want to run tests from the [tests/integration](tests/integration) module directly,+please make sure the distribution was built with the latest changes you did to it and its dependencies.++### Running tests using a container++You can also run tests using a container instead of the raw distribution by setting the `kc.quarkus.tests.dist` property as follows:++```+mvn clean install -Dkc.quarkus.tests.dist=docker+```++When setting the `kc.quarkus.tests.dist` to `docker` tests will run using a container instead of the raw distribution.++### Running storage tests++The storage tests are disabled by default but you should be able to run them by activating the `test-database` profile:++```+mvn clean install -Ptest-database -Dtest=PostgreSQLDistTest+```+","Add sth around these lines: ```As with the docker tests, the storage tests are using containers - either using quarkus' dev containers or specific ones - to spin up the supported databases, so make sure you have docker installed. ```",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13197,924090228,2022-07-19T06:03:12Z,quarkus/CONTRIBUTING.md,"@@ -0,0 +1,211 @@+# Contributing guide++## Keycloak Quarkus Extension++Keycloak on Quarkus is basically a Quarkus Extension. For more details about extensions, please take a look at [Writing Your Own Extension](https://quarkus.io/guides/writing-extensions) guide.++As an extension, the server can be embedded in any Quarkus application by adding the following dependency:++```+<dependencies>+    <dependency>+        <groupId>org.keycloak</groupId>+        <artifactId>keycloak-quarkus-server</artifactId>+    </dependency>+</dependencies>+```++Just like any other extension, the server extension has two main modules:++* `deployment`+* `runtime`++Within the `deployment` module you'll find the implementation for the build steps that run when (re)augmenting the application. This module+is responsible for all metadata processing, such as:++* Lookup SPIs and their providers and enable/disable them accordingly+* Create a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`+* Customizations to how Hibernate, Resteasy, Liquibase, Infinispan, and other dependencies are configured and bootstrapped+* Creating Jandex indexes for some server dependencies++The output of this module is bytecode generated by Quarkus that improves the server startup time and memory usage so that any processing+done during (re)augmentation does not happen again when actually starting the server. Note that the code from this module does+not run at all at runtime (when running the server) but only when building the project (the `server` module in particular, more on that later) or when triggering+a re-augmentation when running the `build` command.++Within the `runtime` module you'll find the code that is run at runtime when starting and running the server. The main link between+the `deployment` and `runtime` modules is the `org.keycloak.quarkus.runtime.KeycloakRecorder` class. The `KeycloakRecorder` holds+a set of methods that are invoked from build steps that will end up in recorded bytecode. The recorded bytecode executes those methods at runtime+just like they were called when a build step is run, with the exact same arguments nad values, if any.++As an example, let us look at how the SPIs and their providers are discovered and how the `KeycloakSessionFactory` is created. +Quarkus will run the `org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders` build step whenever you are (re)augmenting the server. The main outcome from this method+is to invoke the `org.keycloak.quarkus.runtime.KeycloakRecorder.configSessionFactory` so that the code from this method is executed at+*runtime* with a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`. At runtime the code from that method is executed+and a `KeycloakSessionFactory` is created without any processing to discover SPIs and their providers.++There are a few reasons why we have Keycloak as a Quarkus extension:++* More control over the build-time augmentation and runtime stages.+* More flexibility when extending Quarkus itself and the extensions used by the server (e.g.: Hibernate, Resteasy, etc.)+* Make it easier to embed the server into Quarkus applications+* Make it possible to allow Keycloak developers to customize the server distribution++## Keycloak Server++The `server` module holds the Keycloak Server itself. It is basically a regular Quarkus application using the `keycloak-quarkus-server` extension. If you look at the+[pom.xml](server/pom.xml) from this module you'll notice that it is a very simple Quarkus application with the bare minimum configuration+to actually build and run the server.++As Quarkus application, the server is a [mutable](https://quarkus.io/guides/reaugmentation#how-to-re-augment-a-quarkus-application) application using the +[mutable-jar](server/src/main/resources/application.properties) package type. As a mutable application, Keycloak is able to allow+users to configure some aspects of the server without having to re-build this module, something impractical from a user perspective.++The mutability of the server is directly related to the `build` command. As mentioned before, the build steps from the `deployment` module+are only run when (re)augmenting the server and when running the `build` command, the server will indicate to Quarkus that the build steps+should re-run and the recorded bytecode should be updated to reflect any change to the server configuration.++From a Quarkus perspective, the server is also a [Command Mode Application](https://quarkus.io/guides/command-mode-reference) and provides+a CLI based on [Picocli](https://picocli.info/). As such, there is a single entrypoint that executes the code to execute the CLI and bootstrap the server. This entry point+is the `org.keycloak.quarkus.runtime.KeycloakMain` class from the `runtime` module.++## Keycloak Distribution++The server distribution is created by build the `dist` module. This module basically consists of packaging the `deployment`, `runtime`,+and `server` modules artifacts and their dependencies to a `ZIP` or tarball file.++Within this directory you'll find the directory structure of the distribution and what is included in it.++## Running the server in development mode++As a regular Quarkus application, you should be able to run the `server` module in [dev mode](https://quarkus.io/guides/maven-tooling#dev-mode) just like any regular application:++```+cd server+mvn clean quarkus:dev -Dquarkus.args=""start-dev""+```++You can set any command or configuration option to the server by setting the `quarkus.args` environment variable.++When running in dev mode, you can benefit from the dev mode capabilities from Quarkus but with some limitations. The main limitations you'll find+at the moment are:++* Changes are only automatically reflected at runtime if you are changing resources from the `deployment`, `runtime`, and `server` modules. Other modules, such as `keycloak-services` still rely on Hot Swap in Java debuggers to reload classes.+* There is nothing in the Dev UI related to the server itself, although you can still change some configuration from there.+* There are some limitations when passing some options when running in dev mode. You should expect more improvements in this area.++We are working to improve the dev experience, and you should expect improvements over time.++## Debugging the server distribution++The `kc.sh|bat` script allows you to remotely debug the distribution. For that, you should run the server as follows:++```+kc.sh --debug start-dev+```++By default, the debug port is available at `8787`.++An additional environment variable `DEBUG_SUSPEND` can be set to suspend the JVM, when launched in debug mode. The `DEBUG_SUSPEND` variable supports the following values:++* `y` - The debug mode JVM launch is suspended+* `n` - The debug mode JVM is started without suspending++Suspending the JVM when in debug mode is useful if you want to debug the early stages of the bootstrap code.++When making changes to the `deployment`, `runtime`, or `server` modules, you can update the distribution with the new artifacts by executing+the following command:++```+mvn -DskipTests clean install+```++After the `quarkus` module and sub-modules are built, you can update the distribution as follows:++```+cp -r server/target/lib ${KC_HOME_DIR}+```++In the example above, the `${KC_HOME_DIR}` variable points to the root directory of the distribution.++You should also be able to update a server dependency directly. For that, copy the jar to the following location:++```+cp services/target/keycloak-services-${KC_VERSION}.jar ${KC_HOME_DIR}/lib/lib/main/org.keycloak.keycloak-services-${KC_VERSION}.jar+```++## Running tests++The distribution has its own distribution and the main tests are within the [tests/integration](tests/integration) module.++The test suite has two main types of tests:++* `jvm`+* `distribution`++The `jvm` tests execute both the test class and server within the same JVM. While the `distribution` tests execute the server+by running the distribution in a separte JVM.++The `distribution` tests are marked as such using the `DistributionTest` annotation. If not marked with this annotation, the test is a `JVM` test.++To run the tests, execute the following command within the `quarkus` module:++```+mvn clean install+```++By default, the tests will run using a raw distribution. If you want to run tests from the [tests/integration](tests/integration) module directly,+please make sure the distribution was built with the latest changes you did to it and its dependencies.++### Running tests using a container++You can also run tests using a container instead of the raw distribution by setting the `kc.quarkus.tests.dist` property as follows:++```+mvn clean install -Dkc.quarkus.tests.dist=docker+```++When setting the `kc.quarkus.tests.dist` to `docker` tests will run using a container instead of the raw distribution.++### Running storage tests++The storage tests are disabled by default but you should be able to run them by activating the `test-database` profile:++```+mvn clean install -Ptest-database -Dtest=PostgreSQLDistTest+```++### Running tests from the IDE++You should also be able to run tests from your IDE. For that, choose a test from the [tests/integration](tests/integration) module+and execute it accordingly.++### Running tests from the `base` testsuite++Sometimes you might want to run the tests from the `base` test suite using the distribution. For that, make sure you have built the `quarkus` module+and then execute the following command from the project root directory:++```+mvn -f testsuite/integration-arquillian/pom.xml clean install -Pauth-server-quarkus -Dtest=OIDCProtocolMappersTest+```++## Documentation++The documentation is a set of guides available from the [docs](../docs/guides/src/main/server) module. Please,+look at the this [guide](../docs/building.md) about how to update and build the distribution guides.++## Before contributing the changes++Before contributing changes, make to read the main [Keycloak Contributing Guide](https://github.com/keycloak/keycloak/blob/main/CONTRIBUTING.md).++Please, make sure:+","Can we also mention the general contributing.md guidelines, especially the issue linking part? -> https://github.com/keycloak/keycloak/blob/main/CONTRIBUTING.md#commit-messages-and-issue-linking",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13197,924357765,2022-07-19T11:00:03Z,quarkus/CONTRIBUTING.md,"@@ -0,0 +1,211 @@+# Contributing guide++## Keycloak Quarkus Extension++Keycloak on Quarkus is basically a Quarkus Extension. For more details about extensions, please take a look at [Writing Your Own Extension](https://quarkus.io/guides/writing-extensions) guide.++As an extension, the server can be embedded in any Quarkus application by adding the following dependency:++```+<dependencies>+    <dependency>+        <groupId>org.keycloak</groupId>+        <artifactId>keycloak-quarkus-server</artifactId>+    </dependency>+</dependencies>+```++Just like any other extension, the server extension has two main modules:++* `deployment`+* `runtime`++Within the `deployment` module you'll find the implementation for the build steps that run when (re)augmenting the application. This module+is responsible for all metadata processing, such as:++* Lookup SPIs and their providers and enable/disable them accordingly+* Create a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`+* Customizations to how Hibernate, Resteasy, Liquibase, Infinispan, and other dependencies are configured and bootstrapped+* Creating Jandex indexes for some server dependencies++The output of this module is bytecode generated by Quarkus that improves the server startup time and memory usage so that any processing+done during (re)augmentation does not happen again when actually starting the server. Note that the code from this module does+not run at all at runtime (when running the server) but only when building the project (the `server` module in particular, more on that later) or when triggering+a re-augmentation when running the `build` command.++Within the `runtime` module you'll find the code that is run at runtime when starting and running the server. The main link between+the `deployment` and `runtime` modules is the `org.keycloak.quarkus.runtime.KeycloakRecorder` class. The `KeycloakRecorder` holds+a set of methods that are invoked from build steps that will end up in recorded bytecode. The recorded bytecode executes those methods at runtime+just like they were called when a build step is run, with the exact same arguments nad values, if any.++As an example, let us look at how the SPIs and their providers are discovered and how the `KeycloakSessionFactory` is created. +Quarkus will run the `org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders` build step whenever you are (re)augmenting the server. The main outcome from this method",Consider you are in your IDE and analyzing code. I think opening the class directly is better. I would keep as is.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13197,924363673,2022-07-19T11:07:20Z,quarkus/CONTRIBUTING.md,"@@ -0,0 +1,211 @@+# Contributing guide++## Keycloak Quarkus Extension++Keycloak on Quarkus is basically a Quarkus Extension. For more details about extensions, please take a look at [Writing Your Own Extension](https://quarkus.io/guides/writing-extensions) guide.++As an extension, the server can be embedded in any Quarkus application by adding the following dependency:++```+<dependencies>+    <dependency>+        <groupId>org.keycloak</groupId>+        <artifactId>keycloak-quarkus-server</artifactId>+    </dependency>+</dependencies>+```++Just like any other extension, the server extension has two main modules:++* `deployment`+* `runtime`++Within the `deployment` module you'll find the implementation for the build steps that run when (re)augmenting the application. This module+is responsible for all metadata processing, such as:++* Lookup SPIs and their providers and enable/disable them accordingly+* Create a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`+* Customizations to how Hibernate, Resteasy, Liquibase, Infinispan, and other dependencies are configured and bootstrapped+* Creating Jandex indexes for some server dependencies++The output of this module is bytecode generated by Quarkus that improves the server startup time and memory usage so that any processing+done during (re)augmentation does not happen again when actually starting the server. Note that the code from this module does+not run at all at runtime (when running the server) but only when building the project (the `server` module in particular, more on that later) or when triggering+a re-augmentation when running the `build` command.++Within the `runtime` module you'll find the code that is run at runtime when starting and running the server. The main link between+the `deployment` and `runtime` modules is the `org.keycloak.quarkus.runtime.KeycloakRecorder` class. The `KeycloakRecorder` holds+a set of methods that are invoked from build steps that will end up in recorded bytecode. The recorded bytecode executes those methods at runtime+just like they were called when a build step is run, with the exact same arguments nad values, if any.++As an example, let us look at how the SPIs and their providers are discovered and how the `KeycloakSessionFactory` is created. +Quarkus will run the `org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders` build step whenever you are (re)augmenting the server. The main outcome from this method+is to invoke the `org.keycloak.quarkus.runtime.KeycloakRecorder.configSessionFactory` so that the code from this method is executed at+*runtime* with a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`. At runtime the code from that method is executed+and a `KeycloakSessionFactory` is created without any processing to discover SPIs and their providers.++There are a few reasons why we have Keycloak as a Quarkus extension:++* More control over the build-time augmentation and runtime stages.+* More flexibility when extending Quarkus itself and the extensions used by the server (e.g.: Hibernate, Resteasy, etc.)+* Make it easier to embed the server into Quarkus applications+* Make it possible to allow Keycloak developers to customize the server distribution++## Keycloak Server++The `server` module holds the Keycloak Server itself. It is basically a regular Quarkus application using the `keycloak-quarkus-server` extension. If you look at the+[pom.xml](server/pom.xml) from this module you'll notice that it is a very simple Quarkus application with the bare minimum configuration+to actually build and run the server.++As Quarkus application, the server is a [mutable](https://quarkus.io/guides/reaugmentation#how-to-re-augment-a-quarkus-application) application using the +[mutable-jar](server/src/main/resources/application.properties) package type. As a mutable application, Keycloak is able to allow+users to configure some aspects of the server without having to re-build this module, something impractical from a user perspective.++The mutability of the server is directly related to the `build` command. As mentioned before, the build steps from the `deployment` module+are only run when (re)augmenting the server and when running the `build` command, the server will indicate to Quarkus that the build steps+should re-run and the recorded bytecode should be updated to reflect any change to the server configuration.++From a Quarkus perspective, the server is also a [Command Mode Application](https://quarkus.io/guides/command-mode-reference) and provides+a CLI based on [Picocli](https://picocli.info/). As such, there is a single entrypoint that executes the code to execute the CLI and bootstrap the server. This entry point+is the `org.keycloak.quarkus.runtime.KeycloakMain` class from the `runtime` module.++## Keycloak Distribution++The server distribution is created by build the `dist` module. This module basically consists of packaging the `deployment`, `runtime`,+and `server` modules artifacts and their dependencies to a `ZIP` or tarball file.++Within this directory you'll find the directory structure of the distribution and what is included in it.++## Running the server in development mode++As a regular Quarkus application, you should be able to run the `server` module in [dev mode](https://quarkus.io/guides/maven-tooling#dev-mode) just like any regular application:++```+cd server+mvn clean quarkus:dev -Dquarkus.args=""start-dev""+```++You can set any command or configuration option to the server by setting the `quarkus.args` environment variable.++When running in dev mode, you can benefit from the dev mode capabilities from Quarkus but with some limitations. The main limitations you'll find+at the moment are:++* Changes are only automatically reflected at runtime if you are changing resources from the `deployment`, `runtime`, and `server` modules. Other modules, such as `keycloak-services` still rely on Hot Swap in Java debuggers to reload classes.+* There is nothing in the Dev UI related to the server itself, although you can still change some configuration from there.+* There are some limitations when passing some options when running in dev mode. You should expect more improvements in this area.",I don't think it makes sense to add them now because we should be fixing some of them:* The ability to pass certain build options via CLI and have them recognized by the server* Improvements to Dev UI* Improvements to run the server using a specific database by spinning up a testcontainer database* See how we can recognize changes to dependencies and automatic restart the application* Make sure the experience is at least the same when using Undertow for development,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13197,924365683,2022-07-19T11:09:51Z,quarkus/CONTRIBUTING.md,"@@ -0,0 +1,211 @@+# Contributing guide++## Keycloak Quarkus Extension++Keycloak on Quarkus is basically a Quarkus Extension. For more details about extensions, please take a look at [Writing Your Own Extension](https://quarkus.io/guides/writing-extensions) guide.++As an extension, the server can be embedded in any Quarkus application by adding the following dependency:++```+<dependencies>+    <dependency>+        <groupId>org.keycloak</groupId>+        <artifactId>keycloak-quarkus-server</artifactId>+    </dependency>+</dependencies>+```++Just like any other extension, the server extension has two main modules:++* `deployment`+* `runtime`++Within the `deployment` module you'll find the implementation for the build steps that run when (re)augmenting the application. This module+is responsible for all metadata processing, such as:++* Lookup SPIs and their providers and enable/disable them accordingly+* Create a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`+* Customizations to how Hibernate, Resteasy, Liquibase, Infinispan, and other dependencies are configured and bootstrapped+* Creating Jandex indexes for some server dependencies++The output of this module is bytecode generated by Quarkus that improves the server startup time and memory usage so that any processing+done during (re)augmentation does not happen again when actually starting the server. Note that the code from this module does+not run at all at runtime (when running the server) but only when building the project (the `server` module in particular, more on that later) or when triggering+a re-augmentation when running the `build` command.++Within the `runtime` module you'll find the code that is run at runtime when starting and running the server. The main link between+the `deployment` and `runtime` modules is the `org.keycloak.quarkus.runtime.KeycloakRecorder` class. The `KeycloakRecorder` holds+a set of methods that are invoked from build steps that will end up in recorded bytecode. The recorded bytecode executes those methods at runtime+just like they were called when a build step is run, with the exact same arguments nad values, if any.++As an example, let us look at how the SPIs and their providers are discovered and how the `KeycloakSessionFactory` is created. +Quarkus will run the `org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders` build step whenever you are (re)augmenting the server. The main outcome from this method+is to invoke the `org.keycloak.quarkus.runtime.KeycloakRecorder.configSessionFactory` so that the code from this method is executed at+*runtime* with a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`. At runtime the code from that method is executed+and a `KeycloakSessionFactory` is created without any processing to discover SPIs and their providers.++There are a few reasons why we have Keycloak as a Quarkus extension:++* More control over the build-time augmentation and runtime stages.+* More flexibility when extending Quarkus itself and the extensions used by the server (e.g.: Hibernate, Resteasy, etc.)+* Make it easier to embed the server into Quarkus applications+* Make it possible to allow Keycloak developers to customize the server distribution++## Keycloak Server++The `server` module holds the Keycloak Server itself. It is basically a regular Quarkus application using the `keycloak-quarkus-server` extension. If you look at the+[pom.xml](server/pom.xml) from this module you'll notice that it is a very simple Quarkus application with the bare minimum configuration+to actually build and run the server.++As Quarkus application, the server is a [mutable](https://quarkus.io/guides/reaugmentation#how-to-re-augment-a-quarkus-application) application using the +[mutable-jar](server/src/main/resources/application.properties) package type. As a mutable application, Keycloak is able to allow+users to configure some aspects of the server without having to re-build this module, something impractical from a user perspective.++The mutability of the server is directly related to the `build` command. As mentioned before, the build steps from the `deployment` module+are only run when (re)augmenting the server and when running the `build` command, the server will indicate to Quarkus that the build steps+should re-run and the recorded bytecode should be updated to reflect any change to the server configuration.++From a Quarkus perspective, the server is also a [Command Mode Application](https://quarkus.io/guides/command-mode-reference) and provides+a CLI based on [Picocli](https://picocli.info/). As such, there is a single entrypoint that executes the code to execute the CLI and bootstrap the server. This entry point+is the `org.keycloak.quarkus.runtime.KeycloakMain` class from the `runtime` module.++## Keycloak Distribution++The server distribution is created by build the `dist` module. This module basically consists of packaging the `deployment`, `runtime`,+and `server` modules artifacts and their dependencies to a `ZIP` or tarball file.++Within this directory you'll find the directory structure of the distribution and what is included in it.++## Running the server in development mode++As a regular Quarkus application, you should be able to run the `server` module in [dev mode](https://quarkus.io/guides/maven-tooling#dev-mode) just like any regular application:++```+cd server+mvn clean quarkus:dev -Dquarkus.args=""start-dev""+```++You can set any command or configuration option to the server by setting the `quarkus.args` environment variable.++When running in dev mode, you can benefit from the dev mode capabilities from Quarkus but with some limitations. The main limitations you'll find+at the moment are:++* Changes are only automatically reflected at runtime if you are changing resources from the `deployment`, `runtime`, and `server` modules. Other modules, such as `keycloak-services` still rely on Hot Swap in Java debuggers to reload classes.+* There is nothing in the Dev UI related to the server itself, although you can still change some configuration from there.+* There are some limitations when passing some options when running in dev mode. You should expect more improvements in this area.++We are working to improve the dev experience, and you should expect improvements over time.++## Debugging the server distribution++The `kc.sh|bat` script allows you to remotely debug the distribution. For that, you should run the server as follows:++```+kc.sh --debug start-dev+```++By default, the debug port is available at `8787`.++An additional environment variable `DEBUG_SUSPEND` can be set to suspend the JVM, when launched in debug mode. The `DEBUG_SUSPEND` variable supports the following values:++* `y` - The debug mode JVM launch is suspended+* `n` - The debug mode JVM is started without suspending++Suspending the JVM when in debug mode is useful if you want to debug the early stages of the bootstrap code.++When making changes to the `deployment`, `runtime`, or `server` modules, you can update the distribution with the new artifacts by executing+the following command:++```+mvn -DskipTests clean install+```++After the `quarkus` module and sub-modules are built, you can update the distribution as follows:++```+cp -r server/target/lib ${KC_HOME_DIR}+```++In the example above, the `${KC_HOME_DIR}` variable points to the root directory of the distribution.++You should also be able to update a server dependency directly. For that, copy the jar to the following location:++```+cp services/target/keycloak-services-${KC_VERSION}.jar ${KC_HOME_DIR}/lib/lib/main/org.keycloak.keycloak-services-${KC_VERSION}.jar+```++## Running tests++The distribution has its own distribution and the main tests are within the [tests/integration](tests/integration) module.++The test suite has two main types of tests:++* `jvm`+* `distribution`++The `jvm` tests execute both the test class and server within the same JVM. While the `distribution` tests execute the server+by running the distribution in a separte JVM.++The `distribution` tests are marked as such using the `DistributionTest` annotation. If not marked with this annotation, the test is a `JVM` test.++To run the tests, execute the following command within the `quarkus` module:++```+mvn clean install+```++By default, the tests will run using a raw distribution. If you want to run tests from the [tests/integration](tests/integration) module directly,+please make sure the distribution was built with the latest changes you did to it and its dependencies.++### Running tests using a container++You can also run tests using a container instead of the raw distribution by setting the `kc.quarkus.tests.dist` property as follows:++```+mvn clean install -Dkc.quarkus.tests.dist=docker+```++When setting the `kc.quarkus.tests.dist` to `docker` tests will run using a container instead of the raw distribution.++### Running storage tests++The storage tests are disabled by default but you should be able to run them by activating the `test-database` profile:++```+mvn clean install -Ptest-database -Dtest=PostgreSQLDistTest+```+",Could you please elaborate a bit more? What are Quarkus dev containers? Note that database tests do not rely entirely on dev services and it should be transparent to devs if they only have docker installed.,
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13197,924366489,2022-07-19T11:10:48Z,quarkus/CONTRIBUTING.md,"@@ -0,0 +1,211 @@+# Contributing guide++## Keycloak Quarkus Extension++Keycloak on Quarkus is basically a Quarkus Extension. For more details about extensions, please take a look at [Writing Your Own Extension](https://quarkus.io/guides/writing-extensions) guide.++As an extension, the server can be embedded in any Quarkus application by adding the following dependency:++```+<dependencies>+    <dependency>+        <groupId>org.keycloak</groupId>+        <artifactId>keycloak-quarkus-server</artifactId>+    </dependency>+</dependencies>+```++Just like any other extension, the server extension has two main modules:++* `deployment`+* `runtime`++Within the `deployment` module you'll find the implementation for the build steps that run when (re)augmenting the application. This module+is responsible for all metadata processing, such as:++* Lookup SPIs and their providers and enable/disable them accordingly+* Create a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`+* Customizations to how Hibernate, Resteasy, Liquibase, Infinispan, and other dependencies are configured and bootstrapped+* Creating Jandex indexes for some server dependencies++The output of this module is bytecode generated by Quarkus that improves the server startup time and memory usage so that any processing+done during (re)augmentation does not happen again when actually starting the server. Note that the code from this module does+not run at all at runtime (when running the server) but only when building the project (the `server` module in particular, more on that later) or when triggering+a re-augmentation when running the `build` command.++Within the `runtime` module you'll find the code that is run at runtime when starting and running the server. The main link between+the `deployment` and `runtime` modules is the `org.keycloak.quarkus.runtime.KeycloakRecorder` class. The `KeycloakRecorder` holds+a set of methods that are invoked from build steps that will end up in recorded bytecode. The recorded bytecode executes those methods at runtime+just like they were called when a build step is run, with the exact same arguments nad values, if any.++As an example, let us look at how the SPIs and their providers are discovered and how the `KeycloakSessionFactory` is created. +Quarkus will run the `org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders` build step whenever you are (re)augmenting the server. The main outcome from this method+is to invoke the `org.keycloak.quarkus.runtime.KeycloakRecorder.configSessionFactory` so that the code from this method is executed at+*runtime* with a closed-world assumption about the providers that should be registered to the `KeycloakSessionFactory`. At runtime the code from that method is executed+and a `KeycloakSessionFactory` is created without any processing to discover SPIs and their providers.++There are a few reasons why we have Keycloak as a Quarkus extension:++* More control over the build-time augmentation and runtime stages.+* More flexibility when extending Quarkus itself and the extensions used by the server (e.g.: Hibernate, Resteasy, etc.)+* Make it easier to embed the server into Quarkus applications+* Make it possible to allow Keycloak developers to customize the server distribution++## Keycloak Server++The `server` module holds the Keycloak Server itself. It is basically a regular Quarkus application using the `keycloak-quarkus-server` extension. If you look at the+[pom.xml](server/pom.xml) from this module you'll notice that it is a very simple Quarkus application with the bare minimum configuration+to actually build and run the server.++As Quarkus application, the server is a [mutable](https://quarkus.io/guides/reaugmentation#how-to-re-augment-a-quarkus-application) application using the +[mutable-jar](server/src/main/resources/application.properties) package type. As a mutable application, Keycloak is able to allow+users to configure some aspects of the server without having to re-build this module, something impractical from a user perspective.++The mutability of the server is directly related to the `build` command. As mentioned before, the build steps from the `deployment` module+are only run when (re)augmenting the server and when running the `build` command, the server will indicate to Quarkus that the build steps+should re-run and the recorded bytecode should be updated to reflect any change to the server configuration.++From a Quarkus perspective, the server is also a [Command Mode Application](https://quarkus.io/guides/command-mode-reference) and provides+a CLI based on [Picocli](https://picocli.info/). As such, there is a single entrypoint that executes the code to execute the CLI and bootstrap the server. This entry point+is the `org.keycloak.quarkus.runtime.KeycloakMain` class from the `runtime` module.++## Keycloak Distribution++The server distribution is created by build the `dist` module. This module basically consists of packaging the `deployment`, `runtime`,+and `server` modules artifacts and their dependencies to a `ZIP` or tarball file.++Within this directory you'll find the directory structure of the distribution and what is included in it.++## Running the server in development mode++As a regular Quarkus application, you should be able to run the `server` module in [dev mode](https://quarkus.io/guides/maven-tooling#dev-mode) just like any regular application:++```+cd server+mvn clean quarkus:dev -Dquarkus.args=""start-dev""+```++You can set any command or configuration option to the server by setting the `quarkus.args` environment variable.++When running in dev mode, you can benefit from the dev mode capabilities from Quarkus but with some limitations. The main limitations you'll find+at the moment are:++* Changes are only automatically reflected at runtime if you are changing resources from the `deployment`, `runtime`, and `server` modules. Other modules, such as `keycloak-services` still rely on Hot Swap in Java debuggers to reload classes.+* There is nothing in the Dev UI related to the server itself, although you can still change some configuration from there.+* There are some limitations when passing some options when running in dev mode. You should expect more improvements in this area.++We are working to improve the dev experience, and you should expect improvements over time.++## Debugging the server distribution++The `kc.sh|bat` script allows you to remotely debug the distribution. For that, you should run the server as follows:++```+kc.sh --debug start-dev+```++By default, the debug port is available at `8787`.++An additional environment variable `DEBUG_SUSPEND` can be set to suspend the JVM, when launched in debug mode. The `DEBUG_SUSPEND` variable supports the following values:++* `y` - The debug mode JVM launch is suspended+* `n` - The debug mode JVM is started without suspending++Suspending the JVM when in debug mode is useful if you want to debug the early stages of the bootstrap code.++When making changes to the `deployment`, `runtime`, or `server` modules, you can update the distribution with the new artifacts by executing+the following command:++```+mvn -DskipTests clean install+```++After the `quarkus` module and sub-modules are built, you can update the distribution as follows:++```+cp -r server/target/lib ${KC_HOME_DIR}+```++In the example above, the `${KC_HOME_DIR}` variable points to the root directory of the distribution.++You should also be able to update a server dependency directly. For that, copy the jar to the following location:++```+cp services/target/keycloak-services-${KC_VERSION}.jar ${KC_HOME_DIR}/lib/lib/main/org.keycloak.keycloak-services-${KC_VERSION}.jar+```++## Running tests++The distribution has its own distribution and the main tests are within the [tests/integration](tests/integration) module.++The test suite has two main types of tests:++* `jvm`+* `distribution`++The `jvm` tests execute both the test class and server within the same JVM. While the `distribution` tests execute the server+by running the distribution in a separte JVM.++The `distribution` tests are marked as such using the `DistributionTest` annotation. If not marked with this annotation, the test is a `JVM` test.++To run the tests, execute the following command within the `quarkus` module:++```+mvn clean install+```++By default, the tests will run using a raw distribution. If you want to run tests from the [tests/integration](tests/integration) module directly,+please make sure the distribution was built with the latest changes you did to it and its dependencies.++### Running tests using a container++You can also run tests using a container instead of the raw distribution by setting the `kc.quarkus.tests.dist` property as follows:++```+mvn clean install -Dkc.quarkus.tests.dist=docker+```++When setting the `kc.quarkus.tests.dist` to `docker` tests will run using a container instead of the raw distribution.++### Running storage tests++The storage tests are disabled by default but you should be able to run them by activating the `test-database` profile:++```+mvn clean install -Ptest-database -Dtest=PostgreSQLDistTest+```++### Running tests from the IDE++You should also be able to run tests from your IDE. For that, choose a test from the [tests/integration](tests/integration) module+and execute it accordingly.++### Running tests from the `base` testsuite++Sometimes you might want to run the tests from the `base` test suite using the distribution. For that, make sure you have built the `quarkus` module+and then execute the following command from the project root directory:++```+mvn -f testsuite/integration-arquillian/pom.xml clean install -Pauth-server-quarkus -Dtest=OIDCProtocolMappersTest+```++## Documentation++The documentation is a set of guides available from the [docs](../docs/guides/src/main/server) module. Please,+look at the this [guide](../docs/building.md) about how to update and build the distribution guides.++## Before contributing the changes++Before contributing changes, make to read the main [Keycloak Contributing Guide](https://github.com/keycloak/keycloak/blob/main/CONTRIBUTING.md).++Please, make sure:+","argh, my bad, sry",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/13192,924601793,2022-07-19T14:51:34Z,server-spi-private/src/main/java/org/keycloak/utils/LockObjectsForModification.java,"@@ -38,21 +42,36 @@ public class LockObjectsForModification {      private static final String ATTRIBUTE = LockObjectsForModification.class.getCanonicalName(); -    public static LockObjectsForModification.Enabled enable(KeycloakSession session) {-        return new Enabled(session);+    public static boolean isEnabled(KeycloakSession session, Class<?> model) {+        Set<Class<?>> lockedModels = getAttribute(session);+        return lockedModels != null && lockedModels.contains(model);+    }++    private static Set<Class<?>> getAttribute(KeycloakSession session) {+        //noinspection unchecked+        return (Set<Class<?>>) session.getAttribute(ATTRIBUTE);+    }++    private static Set<Class<?>> getOrCreateAttribute(KeycloakSession session) {+        Set<Class<?>> attribute = getAttribute(session);+        if (attribute == null) {+            attribute = new HashSet<>();+            session.setAttribute(ATTRIBUTE, attribute);+        }+        return attribute;     } -    public static boolean isEnabled(KeycloakSession session) {-        return session.getAttribute(ATTRIBUTE) != null;+    public static <V> V lockUserSessionForModification(KeycloakSession session, CallableWithoutThrowingAnException<V> callable) {+        return lockUserSessionForModification(session, UserSessionModel.class, callable);     } -    public static <V> V lockObjectsForModification(KeycloakSession session, CallableWithoutThrowingAnException<V> callable) {-        if (LockObjectsForModification.isEnabled(session)) {+    private static <V> V lockUserSessionForModification(KeycloakSession session, Class<?> model, CallableWithoutThrowingAnException<V> callable) {","I'd leave the name `lockObjectsForModification` as the objectType which is meant to be locked is specified by `model` parameter. wdyt?```suggestion    private static <V> V lockObjectsForModification(KeycloakSession session, Class<?> model, CallableWithoutThrowingAnException<V> callable) {```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13192,924872397,2022-07-19T19:13:40Z,server-spi-private/src/main/java/org/keycloak/utils/LockObjectsForModification.java,"@@ -38,21 +42,36 @@ public class LockObjectsForModification {      private static final String ATTRIBUTE = LockObjectsForModification.class.getCanonicalName(); -    public static LockObjectsForModification.Enabled enable(KeycloakSession session) {-        return new Enabled(session);+    public static boolean isEnabled(KeycloakSession session, Class<?> model) {+        Set<Class<?>> lockedModels = getAttribute(session);+        return lockedModels != null && lockedModels.contains(model);+    }++    private static Set<Class<?>> getAttribute(KeycloakSession session) {+        //noinspection unchecked+        return (Set<Class<?>>) session.getAttribute(ATTRIBUTE);+    }++    private static Set<Class<?>> getOrCreateAttribute(KeycloakSession session) {+        Set<Class<?>> attribute = getAttribute(session);+        if (attribute == null) {+            attribute = new HashSet<>();+            session.setAttribute(ATTRIBUTE, attribute);+        }+        return attribute;     } -    public static boolean isEnabled(KeycloakSession session) {-        return session.getAttribute(ATTRIBUTE) != null;+    public static <V> V lockUserSessionsForModification(KeycloakSession session, CallableWithoutThrowingAnException<V> callable) {+        return lockObjectsForModification(session, UserSessionModel.class, callable);     } -    public static <V> V lockObjectsForModification(KeycloakSession session, CallableWithoutThrowingAnException<V> callable) {-        if (LockObjectsForModification.isEnabled(session)) {+    private static <V> V lockObjectsForModification(KeycloakSession session, Class<?> model, CallableWithoutThrowingAnException<V> callable) {","yes, that was the intention - add area specific methods as needed. I don't want people to pick the classes manually; they won't be type safe so they could place any class there. There is no base interface/class for the models AFAIK.",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/11507,926473020,2022-07-21T09:40:54Z,quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java,"@@ -482,48 +476,36 @@ void indexJpaStore(BuildProducer<IndexDependencyBuildItem> indexDependencyBuildI         indexDependencyBuildItemBuildProducer.produce(new IndexDependencyBuildItem(""org.keycloak"", ""keycloak-model-map-jpa""));     } +    @Record(ExecutionTime.STATIC_INIT)     @BuildStep-    void initializeFilter(BuildProducer<FilterBuildItem> filters, LaunchModeBuildItem launchModeBuildItem) {-        QuarkusRequestFilter filter = new QuarkusRequestFilter();-        LaunchMode launchMode = launchModeBuildItem.getLaunchMode();+    void initializeFilter(BuildProducer<FilterBuildItem> filters, KeycloakRecorder recorder) {+        filters.produce(new FilterBuildItem(recorder.createRequestFilter(isHealthEnabled() || isMetricsEnabled()),FilterBuildItem.AUTHORIZATION - 10));","just to make sure I understand: This effectively gives this filter a priority of 90, so the filter is called as part of the ""middleware filtering"" request pipeline (I came up with that term, thinking of equivalent to https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-6.0 ) before normal routes are called, right?",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13228,926492576,2022-07-21T10:01:36Z,model/map/src/main/java/org/keycloak/models/map/common/AbstractMapProviderFactory.java,"@@ -108,13 +106,32 @@ public String getId() {     }      protected MapStorage<V, M> getStorage(KeycloakSession session) {-        ProviderFactory<MapStorageProvider> storageProviderFactory = getComponentFactory(session.getKeycloakSessionFactory(),-          MapStorageProvider.class, storageConfigScope, MapStorageSpi.NAME);+        ProviderFactory<MapStorageProvider> storageProviderFactory = getProviderFactoryOrComponentFactory(session, storageConfigScope);         final MapStorageProvider factory = storageProviderFactory.create(session);-         return factory.getStorage(modelType);     } +    public static ProviderFactory<MapStorageProvider> getProviderFactoryOrComponentFactory(KeycloakSession session, Scope storageConfigScope) {+        ProviderFactory<MapStorageProvider> storageProviderFactory;+        if (storageConfigScope.get(""realmId"") == null) {",What is this condition used for?,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13228,926511903,2022-07-21T10:23:22Z,model/map/src/main/java/org/keycloak/models/map/common/AbstractMapProviderFactory.java,"@@ -108,13 +106,32 @@ public String getId() {     }      protected MapStorage<V, M> getStorage(KeycloakSession session) {-        ProviderFactory<MapStorageProvider> storageProviderFactory = getComponentFactory(session.getKeycloakSessionFactory(),-          MapStorageProvider.class, storageConfigScope, MapStorageSpi.NAME);+        ProviderFactory<MapStorageProvider> storageProviderFactory = getProviderFactoryOrComponentFactory(session, storageConfigScope);         final MapStorageProvider factory = storageProviderFactory.create(session);-         return factory.getStorage(modelType);     } +    public static ProviderFactory<MapStorageProvider> getProviderFactoryOrComponentFactory(KeycloakSession session, Scope storageConfigScope) {+        ProviderFactory<MapStorageProvider> storageProviderFactory;+        if (storageConfigScope.get(""realmId"") == null) {","The idea of that condition is to see if the provider is not configured for a realm. I found similar checks in the DefaultComponentFactoryProviderFactory, and thought this would be the way to go. I'd be happy for advice on how to do this differently.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13228,926521274,2022-07-21T10:34:19Z,model/map/src/main/java/org/keycloak/models/map/common/AbstractMapProviderFactory.java,"@@ -108,13 +106,32 @@ public String getId() {     }      protected MapStorage<V, M> getStorage(KeycloakSession session) {-        ProviderFactory<MapStorageProvider> storageProviderFactory = getComponentFactory(session.getKeycloakSessionFactory(),-          MapStorageProvider.class, storageConfigScope, MapStorageSpi.NAME);+        ProviderFactory<MapStorageProvider> storageProviderFactory = getProviderFactoryOrComponentFactory(session, storageConfigScope);         final MapStorageProvider factory = storageProviderFactory.create(session);-         return factory.getStorage(modelType);     } +    public static ProviderFactory<MapStorageProvider> getProviderFactoryOrComponentFactory(KeycloakSession session, Scope storageConfigScope) {+        ProviderFactory<MapStorageProvider> storageProviderFactory;+        if (storageConfigScope.get(""realmId"") == null) {","I agree that this check belongs here, but now it's shape is not clear; most likely will be an attribute in a realm, or component lookup in it.Could you please introduce a `boolean hasRealmSpecificStorage(session) { return false; }` method and use it instead of the `null` check?Additional info: The `DefaultComponentFactoryProviderFactory` (or more specifically, `KeycloakModelUtils.getComponentFactory`) is a shortcut to use realm-specific component to configure system-wide provider and does not map directly to the condition here.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13230,927017232,2022-07-21T19:05:46Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -308,5 +309,46 @@ public String getProvider() {             .buildTime(true)             .build(); -    public static final List<Option<?>> ALL_OPTIONS = List.of(STORAGE);+    public static final Option<String> STORAGE_HOTROD_HOST = new OptionBuilder<>(""storage-hotrod-host"", String.class)+            .category(OptionCategory.STORAGE)+            .description(""Sets the host of the Infinispan server."")+            .build();++    public static final Option<Integer> STORAGE_HOTROD_PORT = new OptionBuilder<>(""storage-hotrod-port"", Integer.class)+            .category(OptionCategory.STORAGE)+            .description(""Sets the port of the Infinispan server."")+            .build();++    public static final Option<String> STORAGE_HOTROD_USERNAME = new OptionBuilder<>(""storage-hotrod-username"", String.class)+            .category(OptionCategory.STORAGE)+            .description(""Sets the username of the Infinispan user."")+            .build();++    public static final Option<String> STORAGE_HOTROD_PASSWORD = new OptionBuilder<>(""storage-hotrod-password"", String.class)+            .category(OptionCategory.STORAGE)+            .description(""Sets the password of the Infinispan user."")+            .build();++    public static final Option<Boolean> STORAGE_HOTROD_CONFIGURE_CACHES = new OptionBuilder<>(""storage-hotrod-configure-caches"", Boolean.class)","```suggestion    public static final Option<Boolean> STORAGE_HOTROD_CONFIGURE_CACHES = new OptionBuilder<>(""storage-hotrod-cache-create"", Boolean.class)```",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13230,927017530,2022-07-21T19:06:11Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -308,5 +309,46 @@ public String getProvider() {             .buildTime(true)             .build(); -    public static final List<Option<?>> ALL_OPTIONS = List.of(STORAGE);+    public static final Option<String> STORAGE_HOTROD_HOST = new OptionBuilder<>(""storage-hotrod-host"", String.class)+            .category(OptionCategory.STORAGE)+            .description(""Sets the host of the Infinispan server."")+            .build();++    public static final Option<Integer> STORAGE_HOTROD_PORT = new OptionBuilder<>(""storage-hotrod-port"", Integer.class)+            .category(OptionCategory.STORAGE)+            .description(""Sets the port of the Infinispan server."")+            .build();++    public static final Option<String> STORAGE_HOTROD_USERNAME = new OptionBuilder<>(""storage-hotrod-username"", String.class)+            .category(OptionCategory.STORAGE)+            .description(""Sets the username of the Infinispan user."")+            .build();++    public static final Option<String> STORAGE_HOTROD_PASSWORD = new OptionBuilder<>(""storage-hotrod-password"", String.class)+            .category(OptionCategory.STORAGE)+            .description(""Sets the password of the Infinispan user."")+            .build();++    public static final Option<Boolean> STORAGE_HOTROD_CONFIGURE_CACHES = new OptionBuilder<>(""storage-hotrod-configure-caches"", Boolean.class)+            .category(OptionCategory.STORAGE)+            .defaultValue(true)+            .description(""When set to true, Keycloak will create Infinispan caches on startup. Defaults to true."")+            .build();++    public static final Option<String> STORAGE_HOTROD_REINDEX_CACHES = new OptionBuilder<>(""storage-hotrod-reindex-caches"", String.class)","```suggestion    public static final Option<String> STORAGE_HOTROD_REINDEX_CACHES = new OptionBuilder<>(""storage-hotrod-cache-reindex"", String.class)```",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12654,927034901,2022-07-21T19:30:20Z,services/src/main/java/org/keycloak/services/resources/admin/permissions/UserPermissions.java,"@@ -262,7 +262,7 @@ public void requireManage() {      */     @Override     public boolean canManage(UserModel user) {-        return canManage() || canManageByGroup(user);+        return canManage() || (Profile.isFeatureEnabled(Profile.Feature.AUTHORIZATION) && canManageByGroup(user));",Sorry. My last comment is because `AUTHORIZATION` should always be enabled. But not the `ADMIN_FINE_GRAINED_AUTHZ` feature.So I'm wondering what difference that condition makes if you remove it or at least change it to `ADMIN_FINE_GRAINED_AUTHZ` if there is a difference.,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13249,927392325,2022-07-22T07:56:52Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/AuthorizationEndpoint.java,"@@ -290,7 +290,6 @@ private void updateAuthenticationSession() {         if (request.getResponseMode() != null) authenticationSession.setClientNote(OIDCLoginProtocol.RESPONSE_MODE_PARAM, request.getResponseMode());         if (request.getClaims()!= null) authenticationSession.setClientNote(OIDCLoginProtocol.CLAIMS_PARAM, request.getClaims());         if (request.getAcr() != null) authenticationSession.setClientNote(OIDCLoginProtocol.ACR_PARAM, request.getAcr());-        if (request.getDisplay() != null) authenticationSession.setAuthNote(OAuth2Constants.DISPLAY, request.getDisplay());","Minor concern: Do we really want to remove the `display` support also from this and `AuthorizationEndpointRequest`, `OAuth2Constants` and related classes? The `display` is standard OIDC parameter https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest . And it is possible that people already use it in their authenticator providers for some reason (even though we probably have freedom to remove it as it is not documented anywhere). And we might possibly rething and start to use it again in the future.Or do you prefer to remove it entirely now and then if we use inthe future, re-add it to the codebase?",
3833769,sschu,https://api.github.com/repos/keycloak/keycloak/pulls/12654,927493834,2022-07-22T09:55:31Z,services/src/main/java/org/keycloak/services/resources/admin/permissions/UserPermissions.java,"@@ -262,7 +262,7 @@ public void requireManage() {      */     @Override     public boolean canManage(UserModel user) {-        return canManage() || canManageByGroup(user);+        return canManage() || (Profile.isFeatureEnabled(Profile.Feature.AUTHORIZATION) && canManageByGroup(user));","@pedroigor If `AUTHORIZATION`is always enabled but the `ADMIN_FINE_GRAINED_AUTHZ` is the correct one to use, it is probably used wrong all over the place. There is only one place where `ADMIN_FINE_GRAINED_AUTHZ` is used: https://github.com/keycloak/keycloak/blob/820ab52dce148eae0d51ba194ba9248bf83a69c6/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java#L191`AUTHORIZATION` is used much more often and I assume it's used wrong in these places:https://github.com/keycloak/keycloak/blob/cdef39f76c50506681227b627e678bdbf15779a4/services/src/main/java/org/keycloak/services/resources/admin/permissions/UserPermissions.java#L86https://github.com/keycloak/keycloak/blob/cdef39f76c50506681227b627e678bdbf15779a4/services/src/main/java/org/keycloak/services/resources/admin/permissions/GroupPermissions.java#L64https://github.com/keycloak/keycloak/blob/99c06d11023689875b48ef56442c90bdb744c869/services/src/main/java/org/keycloak/services/resources/admin/permissions/MgmtPermissions.java#L76https://github.com/keycloak/keycloak/blob/99c06d11023689875b48ef56442c90bdb744c869/services/src/main/java/org/keycloak/services/resources/admin/permissions/MgmtPermissions.java#L254https://github.com/keycloak/keycloak/blob/99c06d11023689875b48ef56442c90bdb744c869/services/src/main/java/org/keycloak/services/resources/admin/permissions/MgmtPermissions.java#L265I especially find https://github.com/keycloak/keycloak/blob/99c06d11023689875b48ef56442c90bdb744c869/services/src/main/java/org/keycloak/services/resources/admin/permissions/MgmtPermissions.java#L254dangerous, as the decision that fine-grained permissions are not used is essentially taken by searching for a resource server for the realm-management client and not finding it in:https://github.com/keycloak/keycloak/blob/99c06d11023689875b48ef56442c90bdb744c869/services/src/main/java/org/keycloak/services/resources/admin/permissions/MgmtPermissions.java#L259This would mean that if fine-grained permissions were enabled before and a resource server was created for the realm management client, they would still be used even after the profile was changed to not support fine-grained permissions.WDYT?",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/13262,927739922,2022-07-22T15:01:20Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -904,6 +905,7 @@                                 <keycloak.singleUseObject.map.storage.provider>jpa</keycloak.singleUseObject.map.storage.provider>                                 <keycloak.user.map.storage.provider>jpa</keycloak.user.map.storage.provider>                                 <keycloak.userSession.map.storage.provider>jpa</keycloak.userSession.map.storage.provider>+                                <auth.server.quarkus.mapStorage.profile.config>jpa</auth.server.quarkus.mapStorage.profile.config>","How does it work when two active profiles specifies the same property to different values? It's possible to activate `map-storage-jpa` profile only when `map-storage` profile is activated. If there would be an issue with it, it'd be possible to duplicate properties from `map-storage` to `map-storage-jpa` to avoid activation of both of them.",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13138,928763836,2022-07-25T11:14:24Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/HotRodUserSessionClientSessionRelationshipTest.java,"@@ -0,0 +1,144 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.session;++import org.infinispan.client.hotrod.RemoteCache;+import org.junit.Test;+import org.keycloak.models.AuthenticatedClientSessionModel;+import org.keycloak.models.ClientModel;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserSessionModel;+import org.keycloak.models.UserSessionProvider;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.hotRod.connections.DefaultHotRodConnectionProviderFactory;+import org.keycloak.models.map.storage.hotRod.connections.HotRodConnectionProvider;+import org.keycloak.models.map.storage.hotRod.userSession.HotRodUserSessionEntity;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;++import java.util.concurrent.atomic.AtomicReference;+import java.util.function.Consumer;++import static org.hamcrest.MatcherAssert.assertThat;+import static org.hamcrest.Matchers.aMapWithSize;+import static org.hamcrest.Matchers.anEmptyMap;+import static org.hamcrest.Matchers.containsInAnyOrder;++@RequireProvider(UserSessionProvider.class)+@RequireProvider(value = HotRodConnectionProvider.class, only = DefaultHotRodConnectionProviderFactory.PROVIDER_ID)+public class HotRodUserSessionClientSessionRelationshipTest extends KeycloakModelTest {++    private String realmId;+    private String CLIENT0_CLIENT_ID = ""client0"";++    @Override+    public void createEnvironment(KeycloakSession s) {+        RealmModel realm = s.realms().createRealm(""test"");+        realm.setDefaultRole(s.roles().addRealmRole(realm, Constants.DEFAULT_ROLES_ROLE_PREFIX + ""-"" + realm.getName()));+        realm.setSsoSessionIdleTimeout(1800);+        realm.setSsoSessionMaxLifespan(36000);+        this.realmId = realm.getId();+        s.clients().addClient(realm, CLIENT0_CLIENT_ID);++        s.users().addUser(realm, ""user1"").setEmail(""user1@localhost"");+    }++    @Override+    public void cleanEnvironment(KeycloakSession s) {+        if (realmId != null) {+            s.realms().removeRealm(realmId);+        }+    }++    @Test+    public void testClientSessionAreRemovedOnUserSessionRemoval() {+        AtomicReference<String> uSessionId = new AtomicReference<>();+        AtomicReference<String> cSessionId = new AtomicReference<>();+        prepareSessions(uSessionId, cSessionId);++        withRealm(realmId, (session, realm) -> {+            UserSessionModel uSession = session.sessions().getUserSession(realm, uSessionId.get());+            session.sessions().removeUserSession(realm, uSession);+            return null;+        });++        assertCacheContains(remoteCache -> assertThat(remoteCache, anEmptyMap()));+    }++    @Test+    public void testSessionsAreRemovedOnUserRemoval() {+        AtomicReference<String> uSessionId = new AtomicReference<>();+        AtomicReference<String> cSessionId = new AtomicReference<>();+        prepareSessions(uSessionId, cSessionId);++        withRealm(realmId, (session, realm) -> {+            session.clients().removeClient(realm, CLIENT0_CLIENT_ID);","No, it is not. It is a relict from a similar test I created for clients. Then I realised we are not removing client sessions on client removal. We are just checking whether the client exists on querying client sessions.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12786,929290759,2022-07-25T20:54:16Z,crypto/default/src/test/java/org/keycloak/crypto/def/test/DefaultSecureRandomTest.java,"@@ -0,0 +1,40 @@+package org.keycloak.crypto.def.test;++import java.security.SecureRandom;++import org.jboss.logging.Logger;+import org.junit.ClassRule;+import org.junit.Test;+import org.keycloak.common.crypto.CryptoIntegration;+import org.keycloak.rule.CryptoInitRule;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class DefaultSecureRandomTest {++    @ClassRule+    public static CryptoInitRule cryptoInitRule = new CryptoInitRule();++    protected static final Logger logger = Logger.getLogger(DefaultSecureRandomTest.class);++    @Test+    public void testSecureRandom() throws Exception {+        logger.info(CryptoIntegration.dumpJavaSecurityProviders());++        SecureRandom sc1 = new SecureRandom();+        logger.infof(dumpSecureRandom(""new SecureRandom()"", sc1));++        SecureRandom sc3 = SecureRandom.getInstance(""SHA1PRNG"");+        logger.infof(dumpSecureRandom(""SecureRandom.getInstance(\""SHA1PRNG\"")"", sc3));","Good point. I've added some asserts for the things, which are safe to test on all platforms (EG. for `SecureRandom.getInstance()` is not possible to test anything as both default provider and algorithm are dependent on the platform where the test is executed).I've originally used unit tests just to test on various platforms that SecureRandom is possible to instantiate (no exception thrown) for the given algorithm.I've used separate commit for this just so you can see what is changed, but I am planning to squash during merge.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12786,929293126,2022-07-25T20:57:29Z,common/src/main/java/org/keycloak/common/util/Environment.java,"@@ -35,4 +38,16 @@ public static int getServerStartupTimeout() {         }     } +    /**+     * Tries to detect if Java platform is in the FIPS mode+     * @return true if java is FIPS mode+     */+    public static boolean isJavaInFipsMode() {+        for (Provider provider : Security.getProviders()) {+            if (provider.getName().equals(""BCFIPS"")) continue; // Ignore BCFIPS provider for the detection as we may register it programatically+            if (provider.getName().toUpperCase().contains(""FIPS"")) return true;+        }+        return false;+    }","This is an attempt to ""autodetect"" if we are in the FIPS enabled platform or not.IMO in the future, it may be good that administrator has the possibility to enable FIPS manually when running Keycloak. However at the same time, it can be good to ""autodetect"" the default in case that it is not overriden by administrator, so for example when Keycloak is executed on the FIPS enabled platform, Keycloak will automatically choose (probably at the time of running `./kc.sh build`) whether to use FIPS based crypto (including BCFIPS dependencies) or non-FIPS providers (like plain BC dependencies). So far, this ""autodetection"" is used only in the unit tests in this PR.The autodetection is based on available Java providers. I am not aware of any better way right now. On the RHEL 8.6 with FIPS enabled, the default java security file has enabled some FIPS providers when running in the FIPS mode. The list of providers in the java.security file looks like this:```security.provider.1=SUNsecurity.provider.2=SunRsaSignsecurity.provider.3=SunECsecurity.provider.4=SunJSSEsecurity.provider.5=SunJCEsecurity.provider.6=SunJGSSsecurity.provider.7=SunSASLsecurity.provider.8=XMLDSigsecurity.provider.9=SunPCSCsecurity.provider.10=JdkLDAPsecurity.provider.11=JdkSASLsecurity.provider.12=SunPKCS11#security.provider.1=SunPKCS11 ${java.home}/lib/security/nss.cfg## Security providers used when global crypto-policies are set to FIPS.#fips.provider.1=SunPKCS11 ${java.home}/conf/security/nss.fips.cfgfips.provider.2=SUNfips.provider.3=SunECfips.provider.4=com.sun.net.ssl.internal.ssl.Provider SunPKCS11-NSS-FIPS```The providers with the `security.provider` prefix are used just when Java application is executed in the non-fips mode with `-Dcom.redhat.fips=false` (very similar providers are also in the java file on my non-FIPS based Ubuntu laptop). The providers with `fips.provider` prefix are used by default on FIPS enabled RHEL 8.6 system.",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13326,929813283,2022-07-26T10:47:11Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDeployment.java,"@@ -633,6 +639,23 @@ public void rollingRestart() {                 .rolling().restart();     } +    public void migrateDeployment(StatefulSet previousDeployment, StatefulSet reconciledDeployment) {+        var previousContainer = previousDeployment.getSpec().getTemplate().getSpec().getContainers().get(0);+        var reconciledContainer = reconciledDeployment.getSpec().getTemplate().getSpec().getContainers().get(0);++        if (!previousContainer.getImage().equals(reconciledContainer.getImage())+                && previousDeployment.getStatus().getReplicas() > 1) {+            // TODO Check if migration is really needed (e.g. based on actual KC version); https://github.com/keycloak/keycloak/issues/10441+            Log.info(""Detected changed Keycloak image, assuming Keycloak upgrade, scaling down the deployment to perform safe DB migration"");","```suggestion            Log.info(""Detected changed Keycloak image, assuming Keycloak upgrade. Scaling down the deployment to one instance to perform a safe database migration"");```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13306,930909398,2022-07-27T10:44:47Z,model/map/src/main/java/org/keycloak/models/map/deploymentState/MapDeploymentStateProviderFactory.java,"@@ -50,13 +50,18 @@ public void init(Config.Scope config) {         String seed = config.get(RESOURCES_VERSION_SEED);         if (seed == null) {             Logger.getLogger(DeploymentStateProviderFactory.class)-                    .warnf(""It is recommended to set '%s' property in the %s provider config of %s SPI"", RESOURCES_VERSION_SEED, PROVIDER_ID, DeploymentStateSpi.NAME);+                    .warnf(""Version seed for deployment state set with a random number. Caution: This can lead to unstable operations when serving resources from the cluster without a sticky loadbalancer or when restarting nodes. Set the '%s' property in the %s provider config of %s SPI for stable operations"", RESOURCES_VERSION_SEED, PROVIDER_ID, DeploymentStateSpi.NAME);             //generate random string for this installation             seed = SecretGenerator.getInstance().randomString(10);         }         try {+            StringBuilder toDigest = new StringBuilder(seed);+            toDigest.append(""-"").append(new ModelVersion(Version.VERSION_KEYCLOAK));+            if (Version.VERSION_KEYCLOAK.endsWith(""-SNAPSHOT"")) {+                toDigest.append(""-"").append(Version.BUILD_TIME);+            }","The situation you describe will only apply when a SNAPSHOT version is run without the parameter `--storage-deployment-state-version-seed`. When running load tests or exploratory tests with a nightly build for example as part of keycloak-benchmark, I'd expect the parameter to be set. Once this parameter is being set, the `RESOURCES_VERSION` should change with newly deployed nightly build, therefore I added the `BUILD_TIME` as done in the Version - see below for the code in Version.java.https://github.com/keycloak/keycloak/blob/ddeaa6b3c4df61e89fd2f8d020924c981a2c27cc/common/src/main/java/org/keycloak/common/Version.java#L52-L54",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13306,930975743,2022-07-27T12:01:08Z,model/map/src/main/java/org/keycloak/models/map/deploymentState/MapDeploymentStateProviderFactory.java,"@@ -50,13 +50,18 @@ public void init(Config.Scope config) {         String seed = config.get(RESOURCES_VERSION_SEED);         if (seed == null) {             Logger.getLogger(DeploymentStateProviderFactory.class)-                    .warnf(""It is recommended to set '%s' property in the %s provider config of %s SPI"", RESOURCES_VERSION_SEED, PROVIDER_ID, DeploymentStateSpi.NAME);+                    .warnf(""Version seed for deployment state set with a random number. Caution: This can lead to unstable operations when serving resources from the cluster without a sticky loadbalancer or when restarting nodes. Set the '%s' property in the %s provider config of %s SPI for stable operations"", RESOURCES_VERSION_SEED, PROVIDER_ID, DeploymentStateSpi.NAME);             //generate random string for this installation             seed = SecretGenerator.getInstance().randomString(10);         }         try {+            StringBuilder toDigest = new StringBuilder(seed);+            toDigest.append(""-"").append(new ModelVersion(Version.VERSION_KEYCLOAK));+            if (Version.VERSION_KEYCLOAK.endsWith(""-SNAPSHOT"")) {+                toDigest.append(""-"").append(Version.BUILD_TIME);+            }","Yes, I will try to use the `Version.RESOURCES_VERSION` for this; I still need to double-check what is preserved by the `ModelVersion` class that parses the value. Depending on the result I might use the `Version.RESOURCES_VERSION` as is.> Sidenote: any cluster (even the same nightly build) must be deployed with a fresh seed value, hence two consecutive snapshot versions would always have a different Version.RESOURCES_VERSION.Could you please elaborate on the scenario when this comes into play? I haven't yet seen a code snippet that I can connect to that note, and I fear that the warning and description might not reflect the situation when the seed should be changed.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13306,931130299,2022-07-27T14:24:23Z,model/map/src/main/java/org/keycloak/models/map/deploymentState/MapDeploymentStateProviderFactory.java,"@@ -50,13 +50,18 @@ public void init(Config.Scope config) {         String seed = config.get(RESOURCES_VERSION_SEED);         if (seed == null) {             Logger.getLogger(DeploymentStateProviderFactory.class)-                    .warnf(""It is recommended to set '%s' property in the %s provider config of %s SPI"", RESOURCES_VERSION_SEED, PROVIDER_ID, DeploymentStateSpi.NAME);+                    .warnf(""Version seed for deployment state set with a random number. Caution: This can lead to unstable operations when serving resources from the cluster without a sticky loadbalancer or when restarting nodes. Set the '%s' property in the %s provider config of %s SPI for stable operations"", RESOURCES_VERSION_SEED, PROVIDER_ID, DeploymentStateSpi.NAME);             //generate random string for this installation             seed = SecretGenerator.getInstance().randomString(10);         }         try {+            StringBuilder toDigest = new StringBuilder(seed);+            toDigest.append(""-"").append(new ModelVersion(Version.VERSION_KEYCLOAK));+            if (Version.VERSION_KEYCLOAK.endsWith(""-SNAPSHOT"")) {+                toDigest.append(""-"").append(Version.BUILD_TIME);+            }","> pushed changes to `MapDeploymentStateProviderFactory` - as `ModelVersion` wasn't able to parse `RESOURCES_VERSION` with the dash, I now take the `RESOURCES_VERSION` as is together with the seed.Thank you!> > Sidenote: any cluster (even the same nightly build) must be deployed with a fresh seed value, hence two consecutive snapshot versions would always have a different Version.RESOURCES_VERSION.> > Could you please elaborate on the scenario when this comes into play? I haven't yet seen a code snippet that I can connect to that note, and I fear that the warning and description might not reflect the situation when the seed should be changed.This a reaction re the sample scenario:> When running load tests or exploratory tests with a nightly build for example as part of keycloak-benchmark, I'd expect the parameter to be set. Once this parameter is being set, the RESOURCES_VERSION should change with newly deployed nightly build, therefore I added the BUILD_TIME as done in the Version - see below for the code in Version.java.The seed might be kept for the same deployment. Perhaps I should have said ""every distinguishable cluster"" - if there are multiple configurations of the same nightly build cluster run consecutively, it seems about correct to treat them as distinguishable, and thus also set a fresh seed. So specifically for keycloak-benchmark, I'd go with a fresh seed value (consistent across the cluster) everytime the benchmark is run.However for the same deployment (say a production cluster) which keeps about the same configuration, the seed can remain unchanged in time.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/13183,932395677,2022-07-28T15:33:09Z,model/map/src/main/java/org/keycloak/models/map/user/MapUserEntity.java,"@@ -44,6 +44,8 @@ abstract class AbstractUserEntity extends Impl implements MapUserEntity {          private static final Logger LOG = Logger.getLogger(MapUserProvider.class);         private String id;+        private String username;+        private String usernameLowerCase;","> If I understand correctly, is this field only used when serializing to JSON? No, actually the field is used only when querying by username (in case of `case-insensitive` search).> Not sure how difficult is to compute lowercase version of StringNot sure exactly myself atm, it'd have to be updated in classes which actually parses the changesets to allow include a function as well (if it is not allowed already)> but if we add a getter we could use it also in `MapFieldPredicates` as I suggested in the commit I sent you yesterday.I'm not sure I follow here. Do you mean:```put(USER_PREDICATES, UserModel.SearchableFields.USERNAME, u -> (u instanceof MapUserEntityImpl) ? ((MapUserEntityImpl) u).getUsernameLowerCase() : KeycloakModelUtils.toLowerCaseSafe(u.getUsername()));```? If so I'd rather keep current state as it seems to me much cleaner. Maybe I am missing something here.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/13183,932430836,2022-07-28T16:07:49Z,model/map/src/main/java/org/keycloak/models/map/user/MapUserProviderFactory.java,"@@ -40,12 +40,24 @@  */ public class MapUserProviderFactory extends AbstractMapProviderFactory<MapUserProvider, MapUserEntity, UserModel> implements UserProviderFactory<MapUserProvider>, InvalidationHandler { +    public static final String USERNAME_CASE_SENSITIVE = ""username-case-sensitive"";+     public MapUserProviderFactory() {         super(UserModel.class, MapUserProvider.class);     }      @Override     public MapUserProvider createNew(KeycloakSession session) {+        RealmModel realm = session.getContext().getRealm();+        boolean usernameCaseSensitive = false; //default to false++        // if a realm is available take it from there+        if (realm != null) {+            usernameCaseSensitive = realm.getAttribute(USERNAME_CASE_SENSITIVE, Boolean.FALSE);+        }++        session.setAttribute(USERNAME_CASE_SENSITIVE, usernameCaseSensitive);","> Why do we configure case-sensitiveness per realm? The requirement comes from the discussion. See https://github.com/keycloak/keycloak/discussions/10198#discussioncomment-2179669 for the reference.> What if someone disables case-sensitiveness when storage contains conflicting usernames? Should we have this switch somehow more static/fixed as part of the storage config maybe?I asked similar question here: https://github.com/keycloak/keycloak/pull/10332#issuecomment-1169172848 > Why are we storing this value in `session`? If case-sensitiveness is configured per realm, what if we do user search per more realms within one `session`? For example, search admin user in realm1 and then realm2? Can we just do `realm.getAttribute` in `MapUserProvider`?Good point. We've discussed it with @hmlnarik in one of the sync calls and agreed that the session will be used. I don't recall exactly the reason right now, but it's true it won't work as it is now with more realms within one session. I was able to reproduce it in model test. Right now I'm thinking whether it can happen also in 'real' scenario, when you use rest endpoints. Anyway I'm happy to update it. @hmlnarik could you please comment on this? Thank you",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13183,932579355,2022-07-28T19:03:47Z,model/map/src/main/java/org/keycloak/models/map/user/MapUserEntity.java,"@@ -44,6 +44,8 @@ abstract class AbstractUserEntity extends Impl implements MapUserEntity {          private static final Logger LOG = Logger.getLogger(MapUserProvider.class);         private String id;+        private String username;+        private String usernameLowerCase;","> > If I understand correctly, is this field only used when serializing to JSON?> > No, actually the field is used only when querying by username (in case of `case-insensitive` search).Hmm, and when is the lowercase version of the username stored in the database? I thought the `usernameLowercase` field is somehow projected to `usernameLowercase` within the database and that is why we need it.> > but if we add a getter we could use it also in `MapFieldPredicates` as I suggested in the commit I sent you yesterday.> > I'm not sure I follow here. Do you mean:> > ```> put(USER_PREDICATES, UserModel.SearchableFields.USERNAME, u -> (u instanceof MapUserEntityImpl) ? ((MapUserEntityImpl) u).getUsernameLowerCase() : KeycloakModelUtils.toLowerCaseSafe(u.getUsername()));> ```> > ? If so I'd rather keep current state as it seems to me much cleaner. Maybe I am missing something here.Well, in this case, the lowercase version of the username is computed each time the searchable field is used and not only in the CHM but also in HotRod as MapFieldPredicates are partially used also there. But I am not sure how big the problem is.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/13183,932612142,2022-07-28T19:48:44Z,model/map/src/main/java/org/keycloak/models/map/user/MapUserEntity.java,"@@ -44,6 +44,8 @@ abstract class AbstractUserEntity extends Impl implements MapUserEntity {          private static final Logger LOG = Logger.getLogger(MapUserProvider.class);         private String id;+        private String username;+        private String usernameLowerCase;","> Hmm, and when is the lowercase version of the username stored in the database? I thought the `usernameLowercase` field is somehow projected to `usernameLowercase` within the database and that is why we need it.Sorry, maybe I didn't express myself good enough. As the field is part of the `MapUserEntity` and the `JpaUserMetadata` extends `MapUserEntityImpl` it is already part of the json. Then it's generated into separate column in the database. And the column is then used in the search. Hope it makes more sense.> Well, in this case, the lowercase version of the username is computed each time the searchable field is used and not only in the CHM but also in HotRod as MapFieldPredicates are partially used also there. But I am not sure how big the problem is.If it'd be a problem I'd prefer to use the approach with `IgnoreMissingSetterForEntityClonerGenerator` annotation and use ```put(USER_PREDICATES, UserModel.SearchableFields.USERNAME, MapUserEntity::getUsernameLowerCase);```",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13406,933161475,2022-07-29T11:56:09Z,core/src/main/java/org/keycloak/jose/jwe/JWERegistry.java,"@@ -61,7 +46,12 @@ class JWERegistry {       static JWEAlgorithmProvider getAlgProvider(String alg) {-        return ALG_PROVIDERS.get(alg);+        // https://tools.ietf.org/html/rfc7518#page-12+        if (JWEConstants.DIR.equals(alg)) {","+1, constants renamed.The value of the String is the name of the algorithm and it comes from the JWE specification, so I did not renamed that one: https://datatracker.ietf.org/doc/html/rfc7518#section-4.1",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/13413,933252345,2022-07-29T13:16:24Z,testsuite/integration-arquillian/pom.xml,"@@ -575,4 +593,19 @@         </profile>     </profiles> +    <repositories>+        <repository>+            <id>sonatype-snapshots</id>+            <name>Sonatype Snapshots</name>+            <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>+            <snapshots>+                <enabled>true</enabled>+                <updatePolicy>daily</updatePolicy>+            </snapshots>+            <releases>+                <enabled>false</enabled>+            </releases>+        </repository>+    </repositories>","I'm okay with this for now as it's only introducing the Sonatype snapshot repo for the testsuite. We'll want to refactor something around this in the long run regardless, which me an @jonkoops can figure out somehow as it also relates to packaging of new account console + keycloak.js.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13424,933388267,2022-07-29T15:30:56Z,services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java,"@@ -222,9 +224,9 @@ public boolean initialVerify() {         setClientToEvent(client);         session.getContext().setClient(client); -        if (!client.isEnabled()) {+        if (!client.isEnabled() && clientCode != null) {","One note: Is it possible to make sure that `SessionCodeChecks` is ""effectively unchanged"" ?The thing is, that `SessionCodeChecks` is used also during authentication and I fear of the possible security issues. I am thinking about something like:- add the protected method like `checkClientDisabled` in the `SessionCodeChecks` class. This protected method will do exactly same thing as today in the `SessionCodeChecks` class. Something like:```protected boolean checkClientDisabled() {    return !client.isEnabled;}```- In the `LogoutSessionCodeChecks`, this protected method can be overriden and check changed to something like:```protected boolean checkClientEnabled() {    return !client.isEnabled && clientCode != null;}```Will this work?",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10650,934176587,2022-08-01T06:26:48Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }","That's right, and it it is on par with existing code (which alas contains still the specific methods for email / first name / lastname) https://github.com/keycloak/keycloak/blob/7e925bfbff5410d27675f10d596b752fa794a4ab/services/src/main/java/org/keycloak/broker/saml/mappers/UserAttributeMapper.java#L145-L155",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10650,934194336,2022-08-01T06:55:48Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                LOGGER.trace(""Trying to parse: "" + xml);++                Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+?)\"""").matcher(xml);+                Map<String, String> namespaces = new HashMap<>();+                Map<String, String> prefixes = new HashMap<>();+                while (namespaceMatcher.find()) {+                    namespaces.put(namespaceMatcher.group(1), namespaceMatcher.group(2));+                    prefixes.put(namespaceMatcher.group(2), namespaceMatcher.group(1));+                }++                XPath xPath = XPathFactory.newInstance().newXPath();","I agree with the reasoning and with the attack surface being small. Still, Keycloak as a security product prefers reducing attack surface and this change is tiny. Could you please introduce a (singleton)```java    private static XPathVariableResolver XPATH_VARIABLE_RESOLVER = new XPathVariableResolver() {        @Override        Object resolveVariable(QName variableName) {             return null;        }    }```and set it to all newly created `XPath` objects?",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/12961,934674693,2022-08-01T15:46:14Z,server-spi/src/main/java/org/keycloak/models/RealmModel.java,"@@ -862,6 +862,15 @@ default List<GroupModel> searchForGroupByName(String search, Integer first, Inte      */     Stream<GroupModel> searchForGroupByNameStream(String search, Integer first, Integer max); +    /**+     * Searches for groups by provided group attributes. Results that match the given filter are returned as a stream.+     * @param attributes {@code String} Name of a group to be used as a filter.+     * @param first {@code Integer} Index of the first desired group. Ignored if negative or {@code null}.+     * @param max {@code Integer} Maximum number of returned groups. Ignored if negative or {@code null}.+     * @return Stream of {@link GroupModel}. Never returns {@code null}.+     */+    Stream<GroupModel> searchGroupsByAttributes(Map<String, String> attributes, Integer first, Integer max);","Do we need this method? I am aware, that we have quite a lot of similar methods in the `RealmModel` interface, however, we should aim for having only methods relevant to realms in `RealmModel` and avoid such shortcut methods in favour of `session.groups().****`.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12961,935433566,2022-08-02T11:09:44Z,testsuite/utils/src/main/java/org/keycloak/testsuite/util/cli/GroupCommands.java,"@@ -0,0 +1,59 @@+package org.keycloak.testsuite.util.cli;++import org.keycloak.models.GroupModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;++public class GroupCommands {++  public static class Create extends AbstractCommand {",Everywhere in this class it seems that `users` are used instead of `groups` in messages. Please fix.,x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13473,935670256,2022-08-02T14:30:21Z,quarkus/dist/src/main/content/bin/kc.bat,"@@ -129,14 +130,33 @@ set ""JAVA_RUN_OPTS=%JAVA_OPTS% -Dkc.home.dir=""%DIRNAME%.."" -Djboss.server.config  SetLocal EnableDelayedExpansion -set ""ONLY_BUILD_OPTION= build""+set ""ONLY_BUILD_OPTION=build"" set ""NO_AUTO_BUILD_OPTION=optimized""+set ""NO_HELP_LONG_OPTION=--help""","a bit weird naming, but works for me for now. better would be HELP_LONG_OPTION, right?",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12967,935899847,2022-08-02T18:27:13Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -167,19 +188,35 @@ private Process startContainer() throws IOException {         builder.environment().put(""KEYCLOAK_ADMIN"", ""admin"");         builder.environment().put(""KEYCLOAK_ADMIN_PASSWORD"", ""admin""); -        if (restart.compareAndSet(false, true)) {",There is a reason behind the `restart` so that we can track whether subsequent starts can be handled as restarts and not as the first starts.Or is there a specific reason other than renaming the name of the field?,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/12967,935912450,2022-08-02T18:41:16Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -338,6 +375,40 @@ private long getStartTimeout() {         return TimeUnit.SECONDS.toMillis(configuration.getStartupTimeoutInSeconds());     } +    private void killChildProcessesOnWindows(boolean isForced) {+        for (ProcessHandle childProcessHandle : container.children().collect(Collectors.toList())) {","I'm fixing the logic here in the PR you are reviewing that makes it possible to run the dist testsuite on Windows. Basically:* Iterating over the `descendants` is better. It also includes direct children.* It should be more reliable to collect all futures and at the end wait for completion. Note that processes are terminated asynchronously and in parallel. Doing like that gives a bit more time to Windows to terminate the process (yer, windows has some nuances)* Note that `join` and using a `get` with a clear timeout behaves differently. The latter should give more control and not block undefinetly. It also handles thread interruption better. From my PoV, it provided a more stable runtime than using `join`.* Also note from the PR herein mentioned that we have a `sleep` to make sure Windows can terminate processes properly. Don't ask me why we need that but without it, termination is unstable.",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13491,936298179,2022-08-03T06:52:07Z,docs/guides/src/main/server/caching.adoc,"@@ -10,52 +10,110 @@ includedOptions=""cache cache-*""> Keycloak is designed for high availability and multi-node clustered setups. The current distributed cache implementation is built on top of https://infinispan.org[Infinispan], a high-performance, distributable in-memory data grid. -All available cache options are build options, so they need to be applied to a `build` of Keycloak before starting.--== Enable distributed caching+== Enable clustering When you start Keycloak in production mode, by using the `start` command, caching is enabled and all Keycloak nodes in your network are discovered.+By default, caches are using a `UDP` transport stack so that nodes are discovered using IP multicast transport based on UDP. While not suitable","> By default, caches are using a `UDP` transport stack so that nodes are discovered using IP multicast transport based on UDP. While not suitable> for most production deployments, the server allows you to choose other transport stacks as you will see later in this guide.This is a bit ambiguous. Do you mean 1) UDP IP Multicast is not suitable for most production deployments? 2) other transport stacks are not suitable for most production deployments?Suggestion (assuming 1. is what is wanted): By default, caches are using a `UDP` transport stack so that nodes are discovered using IP multicast transport based on UDP. For most production environments, there are better alternatives to UDP available. Keycloak allows you to either choose from a set of pre-defined transport stacks or to define your own custom stack, as you will see later in this guide.",x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13491,936301136,2022-08-03T06:55:59Z,docs/guides/src/main/server/caching.adoc,"@@ -10,52 +10,110 @@ includedOptions=""cache cache-*""> Keycloak is designed for high availability and multi-node clustered setups. The current distributed cache implementation is built on top of https://infinispan.org[Infinispan], a high-performance, distributable in-memory data grid. -All available cache options are build options, so they need to be applied to a `build` of Keycloak before starting.--== Enable distributed caching+== Enable clustering When you start Keycloak in production mode, by using the `start` command, caching is enabled and all Keycloak nodes in your network are discovered.+By default, caches are using a `UDP` transport stack so that nodes are discovered using IP multicast transport based on UDP. While not suitable+for most production deployments, the server allows you to choose other transport stacks as you will see later in this guide. -To explicitly enable distributed infinispan caching, enter this command:+To explicitly enable clustering, enter this command:  <@kc.build parameters=""--cache=ispn""/> -When you start Keycloak in development mode, by using the `start-dev` command, Keycloak uses only local caches, applying the `--cache=local` option.+When you start Keycloak in development mode, by using the `start-dev` command, Keycloak uses only local caches and clustering is completely disabled by implicitly setting the `--cache=local` option. The `local` cache mode is intended only for development and testing purposes.  == Configuring caches Keycloak provides a cache configuration file with sensible defaults located at `conf/cache-ispn.xml`.  The cache configuration is a regular https://infinispan.org/docs/stable/titles/configuring/configuring.html[Infinispan configuration file]. +The following table gives an overview of the specific caches Keycloak uses.+You configure these caches in `conf/cache-ispn.xml`:++|====+|Cache name|Cache Type|Description+|realms|Local|Cache persisted realm data+|users|Local|Cache persisted user data+|authorization|Local|Cache persisted authorization data+|keys|Local|Cache external public keys+|work|Replicated|Propagate invalidation messages across nodes+|authenticationSessions|Distributed|Caches authentication sessions, created/destroyed/expired during the authentication process+|sessions|Distributed|Caches user sessions, created upon successful authentication and destroyed during logout, token revocation, or due to expiration+|clientSessions|Distributed|Caches client sessions, created upon successful authentication to a specific client and destroyed during logout, token revocation, or due to expiration+|offlineSessions|Distributed|Caches offline user sessions, created upon successful authentication and destroyed during logout, token revocation, or due to expiration+|offlineClientSessions|Distributed|Caches client sessions, created upon successful authentication to a specific client and destroyed during logout, token revocation, or due to expiration+|loginFailures|Distributed|keep track of failed logins, fraud detection+|actionTokens|Distributed|Caches action Tokens+|====+ === Cache types and defaults  .Local caches-Keycloak caches persistent data locally to avoid unnecessary database requests.-The following caches are used:+Keycloak caches persistent data locally to avoid unnecessary round-trips to the database.++The following data is kept local to each node in the cluster using local caches:++* *realms* and related data like clients, roles, and groups.+* *users* and related data like, granted roles and group memberships.",```suggestion* *users* and related data like granted roles and group memberships.```,
94353089,KnauerSecunet,https://api.github.com/repos/keycloak/keycloak/pulls/10650,936380492,2022-08-03T08:25:07Z,services/src/main/java/org/keycloak/broker/saml/mappers/XPathAttributeMapper.java,"@@ -0,0 +1,316 @@+package org.keycloak.broker.saml.mappers;++import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;++import java.io.StringReader;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.HashSet;+import java.util.Iterator;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.function.Consumer;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.function.Supplier;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import javax.xml.XMLConstants;+import javax.xml.namespace.NamespaceContext;+import javax.xml.xpath.XPath;+import javax.xml.xpath.XPathConstants;+import javax.xml.xpath.XPathExpressionException;+import javax.xml.xpath.XPathFactory;+import org.jboss.logging.Logger;+import org.keycloak.broker.provider.AbstractIdentityProviderMapper;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.broker.saml.SAMLEndpoint;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.dom.saml.v2.assertion.AssertionType;+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;+import org.keycloak.dom.saml.v2.assertion.AttributeType;+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.saml.mappers.SamlMetadataDescriptorUpdater;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.saml.common.util.DocumentUtil;+import org.keycloak.saml.common.util.StringUtil;+import org.w3c.dom.Document;++public class XPathAttributeMapper extends AbstractIdentityProviderMapper implements SamlMetadataDescriptorUpdater {++    public static final String[] COMPATIBLE_PROVIDERS = {SAMLIdentityProviderFactory.PROVIDER_ID};++    private static final Logger LOGGER = Logger.getLogger(XPathAttributeMapper.class);++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String ATTRIBUTE_XPATH = ""attribute.xpath"";+    public static final String ATTRIBUTE_NAME = ""attribute.name"";+    public static final String ATTRIBUTE_FRIENDLY_NAME = ""attribute.friendly.name"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";+    private static final String EMAIL = ""email"";+    private static final String FIRST_NAME = ""firstName"";+    private static final String LAST_NAME = ""lastName"";+    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_XPATH);+        property.setLabel(""Attribute XPath"");+        property.setHelpText(""XPath expression to search for. All attributes are surrounded with a <root> element. Given prefixes ""+                + ""and namespaces are preserved. Example: <root><myPrefix:Person xmlns:myPrefix=\""http://my.namespace/schema\"">""+                + ""<myPrefix:FirstName>John</myPrefix:FirstName>...</myPrefix:Person></root> or <root>Some attribute value of anyType</root>"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_NAME);+        property.setLabel(""Attribute Name"");+        property.setHelpText(""Name of attribute to search for in assertion and apply XPath. You can leave this blank to try to apply XPath to all attributes or specify a friendly name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(ATTRIBUTE_FRIENDLY_NAME);+        property.setLabel(""Friendly Name"");+        property.setHelpText(""Friendly name of attribute to search for in assertion. You can leave this blank to try to apply XPath to all attributes or specify a name instead."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+        property = new ProviderConfigProperty();+        property.setName(USER_ATTRIBUTE);+        property.setLabel(""User Attribute Name"");+        property.setHelpText(""User attribute name to store XPath value.  Use email, lastName, and firstName to map to those predefined user properties."");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        configProperties.add(property);+    }++    public static final String PROVIDER_ID = ""saml-xpath-attribute-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String[] getCompatibleProviders() {+        return COMPATIBLE_PROVIDERS;+    }++    @Override+    public String getDisplayCategory() {+        return ""Attribute Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""XPath Attribute Importer"";+    }++    @Override+    public void preprocessFederatedIdentity(KeycloakSession session, RealmModel realm, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context) {+        String attribute = mapperModel.getConfig().get(USER_ATTRIBUTE);+        if (StringUtil.isNullOrEmpty(attribute)) {+            return;+        }+        String attributeName = getAttributeNameFromMapperModel(mapperModel);+        String attributeXPath = mapperModel.getConfig().get(ATTRIBUTE_XPATH);++        List<String> attributeValuesInContext = findAttributeValuesInContext(attributeName, attributeXPath, context);+        if (!attributeValuesInContext.isEmpty()) {+            if (attribute.equalsIgnoreCase(EMAIL)) {+                setIfNotEmpty(context::setEmail, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(FIRST_NAME)) {+                setIfNotEmpty(context::setFirstName, attributeValuesInContext);+            } else if (attribute.equalsIgnoreCase(LAST_NAME)) {+                setIfNotEmpty(context::setLastName, attributeValuesInContext);+            } else {+                context.setUserAttribute(attribute, attributeValuesInContext);+            }+        }+    }++    private String getAttributeNameFromMapperModel(IdentityProviderMapperModel mapperModel) {+        String attributeName = mapperModel.getConfig().get(ATTRIBUTE_NAME);+        if (attributeName == null) {+            attributeName = mapperModel.getConfig().get(ATTRIBUTE_FRIENDLY_NAME);+        }+        return attributeName;+    }++    private void setIfNotEmpty(Consumer<String> consumer, List<String> values) {+        if (values != null && !values.isEmpty()) {+            consumer.accept(values.get(0));+        }+    }++    private void setIfNotEmptyAndDifferent(Consumer<String> consumer, Supplier<String> currentValueSupplier, List<String> values) {+        if (values != null && !values.isEmpty() && !values.get(0).equals(currentValueSupplier.get())) {+            consumer.accept(values.get(0));+        }+    }++    private Predicate<AttributeStatementType.ASTChoiceType> elementWith(String attributeName) {+        return attributeType -> {+            AttributeType attribute = attributeType.getAttribute();+            return attributeName == null+                    || Objects.equals(attribute.getName(), attributeName)+                    || Objects.equals(attribute.getFriendlyName(), attributeName);+        };+    }++    private static Function<String, Object> applyXPath(String attributeXPath) {+        return xml -> {+            try {+                LOGGER.trace(""Trying to parse: "" + xml);++                Matcher namespaceMatcher = Pattern.compile(""xmlns:(\\w+)=\""(.+?)\"""").matcher(xml);+                Map<String, String> namespaces = new HashMap<>();+                Map<String, String> prefixes = new HashMap<>();+                while (namespaceMatcher.find()) {+                    namespaces.put(namespaceMatcher.group(1), namespaceMatcher.group(2));+                    prefixes.put(namespaceMatcher.group(2), namespaceMatcher.group(1));+                }++                XPath xPath = XPathFactory.newInstance().newXPath();",I added a XPathVariableResolver and XPathFunctionResolver in ddd7575 that throw exceptions whenever they are called (including an unit-test). Which is basically the same behaviour as returning null.But what I wanted to say: Even before the change it would not have been possible to exploit an xpath injection because we don't concat user parameters to the xpath expression. Moreover it was not possible to replace a variable (or function) because no values are given. What's better now: Maybe (!) a bug will be discovered for the default resolvers that can no longer be exploited.,x
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/12967,936405672,2022-08-03T08:49:47Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -167,19 +188,35 @@ private Process startContainer() throws IOException {         builder.environment().put(""KEYCLOAK_ADMIN"", ""admin"");         builder.environment().put(""KEYCLOAK_ADMIN_PASSWORD"", ""admin""); -        if (restart.compareAndSet(false, true)) {","I had 2 AtomicBooleans first, ""firstStart"" and ""restart"". You [asked ](https://github.com/keycloak/keycloak/pull/12967#discussion_r918914650) me to merge them into one, i did that, but then ""restart"" doesn't really apply anymore bc. we are also using now this one var for evaluating the first start, see https://github.com/keycloak/keycloak/blob/1eb2fa14b26a976a3959559403ae3fabf4cf700f/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java#L214-L219Are you now asking me to change back to use 2 vars instead of one? *insert confused face here",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13488,936520004,2022-08-03T10:51:24Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/HotRodMapStorage.java,"@@ -100,18 +109,16 @@ public void updateConfig(Config cf) {                 .config(""keyType.single-use-objects"", ""string"");          cf.spi(HotRodConnectionSpi.NAME).provider(DefaultHotRodConnectionProviderFactory.PROVIDER_ID)-                .config(""enableSecurity"", ""false"")-                .config(""configureRemoteCaches"", ""false"");+                .config(""host"", hotRodContainer.getContainerIpAddress())+                .config(""port"", String.valueOf(hotRodContainer.getMappedPort(11222)))+                .config(""username"", USERNAME)+                .config(""password"", PASSWORD)+                .config(""configureRemoteCaches"", ""true"");     }      @Override     public void beforeSuite(Config cf) {-        hotRodServerRule.createHotRodMapStoreServer();-    }--    @Override-    public Statement classRule(Statement base, Description description) {-        return hotRodServerRule.apply(base, description);+        hotRodContainer.start();","I added `afterSuite` support using junit `RunListener`. It works correctly with maven.Sadly, it doesn't work using Intellij Junit runner, it seems the listener is not registered at all by Intellij. On the other hand, as I said in the previous comment, the container is stopped automatically, but it takes a few seconds after the run is finished.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13488,937017025,2022-08-03T18:40:43Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/UserSessionConcurrencyTest.java,"@@ -110,6 +109,10 @@ public void testConcurrentNotesChange() {                      cSession.setNote(OIDCLoginProtocol.STATE_PARAM, ""state-"" + n); +                    if (isHotRodStore) {+                        releaseLockOnTransactionCommit(session, SYNC_USESSION);","FYI: This was moved because the user session transaction is `enlistedAfterCompletion` and we need to release the lock after this transaction is committed. As `KeycloakTransactionManager` is using `List` moving this here means we release the lock after the user session transaction is committed. This is not nice but, this is only a temporary solution as it will be removed with HotRod transaction introduction.Maybe we should consider using `enlist` for user session transactions (after we use HR transaction in HotRod store). if I remember correctly `afterCompletion` was used due to legacy Infinispan store.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/13521,937578768,2022-08-04T09:47:14Z,.github/workflows/ci.yml,"@@ -174,7 +174,9 @@ jobs:       - name: Update maven settings         if: ${{ github.event_name != 'pull_request' || matrix.server != 'undertow-map-hot-rod' || env.GIT_HOTROD_RELEVANT_DIFF != 0 }}         run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/-+      - name: Prepare test providers+        if: ${{ matrix.server == 'quarkus' || matrix.server == 'quarkus-map' }}+        run: ./mvnw clean install -nsu -B -e -f testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers -Pauth-server-quarkus",I think this might not be necessary. I might be wrong but I think the testsuite providers are already built here:https://github.com/keycloak/keycloak/blob/cdcd09ad038bd114defa564c923767755fc6d640/.github/workflows/ci.yml#L37,
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13491,937828721,2022-08-04T14:06:33Z,docs/guides/src/main/server/caching.adoc,"@@ -10,52 +10,110 @@ includedOptions=""cache cache-*""> Keycloak is designed for high availability and multi-node clustered setups. The current distributed cache implementation is built on top of https://infinispan.org[Infinispan], a high-performance, distributable in-memory data grid. -All available cache options are build options, so they need to be applied to a `build` of Keycloak before starting.--== Enable distributed caching+== Enable clustering When you start Keycloak in production mode, by using the `start` command, caching is enabled and all Keycloak nodes in your network are discovered.+By default, caches are using a `UDP` transport stack so that nodes are discovered using IP multicast transport based on UDP. While not suitable","as stated before, it is ambiguous for me to read, so can mean 2 things, either:* ""UDP"" is not suitable for prod envs, so the ""while"" refers to the sentence before. or:*  ""cache stacks"" are not suitable for production envs, that happens when you read the second sentence alone: ""While not suitable for most production deployments, the server allows you to choose other transport stacks as you will see later in this guide.""the ""while"" is ambiguous, can reference 2 things, so I changed it in my suggestion to make it more clear that UDP is meant. But not hard on it, should be clear from context. go with whatever you think is best.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13488,938716667,2022-08-05T11:21:39Z,testsuite/model/README.md,"@@ -48,3 +48,34 @@ mvn test -Pjpa -Dtest=ClientModelTest \ ```  The results are available in the `target/profile.html` file.++Usage of Testcontainers+-----------------------++Some profiles within model tests require running 3rd party software, for example, database or Infinispan. For running these we are using [Testconainers](https://www.testcontainers.org/). This may require some additional configuration of your container engine.","```suggestionSome profiles within model tests require running 3rd party software, for example, database or Infinispan. For running these we are using [Testcontainers](https://www.testcontainers.org/). This may require some additional configuration of your container engine.```",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13488,938718127,2022-08-05T11:23:48Z,testsuite/model/README.md,"@@ -48,3 +48,34 @@ mvn test -Pjpa -Dtest=ClientModelTest \ ```  The results are available in the `target/profile.html` file.++Usage of Testcontainers+-----------------------++Some profiles within model tests require running 3rd party software, for example, database or Infinispan. For running these we are using [Testconainers](https://www.testcontainers.org/). This may require some additional configuration of your container engine.++#### Podman settings++For more details see the following [Podman guide from Quarkus webpage](https://quarkus.io/guides/podman).++Specifically, these steps are required:+```shell+# Enable the podman socket with Docker REST API (only needs to be done once)+systemctl --user enable podman.socket --now++# Set the required environment variables (need to be run everytime or added to profile)+export DOCKER_HOST=unix:///run/user/${UID}/podman/podman.sock+```++Testcontainers are using [ryuk](https://hub.docker.com/r/testcontainers/ryuk) to cleanup containers after tests. To make this work with Podman add the following line to `~/.testcontainers.properties`+```shell+ryuk.container.privileged=true+```+alternatively, disable usage of ryuk (using this may result in stale containers still running after tests finish. This is not recommended especially if you are executing tests from Intellij IDE as it [may not stop](https://youtrack.jetbrains.com/issue/IDEA-190385) the containers created during test run.)","```suggestionAlternatively, disable usage of ryuk (using this may result in stale containers still running after tests finish. This is not recommended especially if you are executing tests from Intellij IDE as it [may not stop](https://youtrack.jetbrains.com/issue/IDEA-190385) the containers created during test run).```",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13570,938744377,2022-08-05T12:02:18Z,docs/guides/src/main/server/containers.adoc,"@@ -46,55 +48,78 @@ ENTRYPOINT [""/opt/keycloak/bin/kc.sh""] ---- The build process includes multiple stages: -* The `build` command applies options and includes custom providers to create an optimized image.+* Run the `build` command to set server build options to create an optimized image. * The files generated by the `build` stage are copied into a new image.-* In this runner image, the specific run configuration is applied. That configuration contains a keystore, the environment-specific hostname configuration, and database configuration.+* In the final image, additional configuration options for the hostname and database are set so that you don't need to set them again when running the container. * In the entrypoint, the `kc.sh` enables access to all the distribution sub-commands. -This example uses a multi-staged build to demonstrate the build and run steps.  However, you can also build a single-staged docker image by removing the following two lines:+When creating the container image, you are able to set any server configuration option using environment variables. For example, if you want to enable a feature like `token-exchange`, you can set the+following environment variable to your `Dockerfile`:","it is a bit unclear now imo for which image the following examples(lines 56 to 73) apply. You mention configuration options the sentence earlier(line 56), these are targeted at the ""runtime image"". The following examples, `token-exchange` and the custom provider example, are targeted at the `builder` image. Can you make this a bit clearer pls? If not, I guess we'd have many people running a pre-optimized image, but applying the Features / providers to the runtime image. As a result, reaug would still be run on startup, which is not what we want to advertize, right?This was the reason I added one complete example instead of showing it fragmented btw. Make clear where what option belongs.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13489,940219169,2022-08-08T13:09:24Z,common/src/main/java/org/keycloak/common/crypto/OCSPUtils.java,"@@ -0,0 +1,159 @@+/*+ * Copyright 2016 Analytical Graphics, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */++package org.keycloak.common.crypto;++import java.net.URI;+import java.security.cert.*;","Minor: Is it possible to remove star imports from this class? In Keycloak, we try to avoid star imports.Btv. the star imports were already presented on this class, so it is not a regression of this PR, but maybe this refactoring is a good opportunity to remove them :-)",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13489,940220896,2022-08-08T13:11:06Z,common/src/main/java/org/keycloak/common/crypto/OCSPUtils.java,"@@ -0,0 +1,159 @@+/*+ * Copyright 2016 Analytical Graphics, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */++package org.keycloak.common.crypto;++import java.net.URI;+import java.security.cert.*;+import java.util.*;+import java.util.logging.Level;+import java.util.logging.Logger;+++/**+ * @author <a href=""mailto:brat000012001@gmail.com"">Peter Nalyvayko</a>+ * @version $Revision: 1 $+ * @since 10/29/2016+ */++public abstract class OCSPUtils {++    private final static Logger logger = Logger.getLogger(""""+OCSPUtils.class);","Minor: I suggest to replace java.util.logging with JBoss logging, which most of the Keycloak classes are using.Btv. Java util logging was already part of this class before this PR, but maybe this refactoring is a good opportunity to change this :-)",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13489,940243199,2022-08-08T13:29:45Z,crypto/elytron/src/main/java/org/keycloak/ElytronSertificateUtils.java,"@@ -0,0 +1,184 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.common.util;++import java.math.BigInteger;+import java.security.KeyPair;+import java.security.PrivateKey;+import java.security.SecureRandom;+import java.security.cert.X509Certificate;+import java.time.ZoneId;+import java.time.ZonedDateTime;+import java.util.ArrayList;+import java.util.Calendar;+import java.util.Date;++import javax.security.auth.x500.X500Principal;++import org.wildfly.security.x500.X500;+import org.wildfly.security.x500.cert.AuthorityKeyIdentifierExtension;+import org.wildfly.security.x500.cert.BasicConstraintsExtension;+import org.wildfly.security.x500.cert.ExtendedKeyUsageExtension;+import org.wildfly.security.x500.cert.KeyUsage;+import org.wildfly.security.x500.cert.KeyUsageExtension;+import org.wildfly.security.x500.cert.SubjectKeyIdentifierExtension;+import org.wildfly.security.x500.cert.X509CertificateBuilder;++/**+ * The Class CertificateUtils provides utility functions for generation of V1 and V3 {@link java.security.cert.X509Certificate}+ *+ * @author <a href=""mailto:david.anderson@redhat.com"">David Anderson</a>+ * @version $Revision: 3 $+ */+public class ElytronCertificateUtils  extends CertificateUtils {","There is a typo in the name of this Java file. The class is called `ElytronCertificateUtils`, but the file name is `ElytronSertificateUtils.java` .I guess this class is not used anywhere and you added it just for the tracking purpose, is it correct? IMO you can keep this class in this PR, but please just rename the java file.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13489,940267108,2022-08-08T13:51:33Z,crypto/default/pom.xml,"@@ -41,7 +41,15 @@             <scope>test</scope>             <type>test-jar</type>         </dependency>-+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-server-spi</artifactId>","I think it is needed to add these dependencies also to the `modules.xml` files of the `keycloak-crypto-default` . Those are in these files:- https://github.com/david-rh/keycloak/blob/main/distribution/feature-packs/server-feature-pack/src/main/resources/modules/system/layers/keycloak/org/keycloak/keycloak-crypto-default/main/module.xml- https://github.com/david-rh/keycloak/blob/main/distribution/galleon-feature-packs/server-galleon-pack/src/main/resources/modules/system/layers/keycloak/org/keycloak/keycloak-crypto-default/main/module.xmlFor some reason, which I am not sure about, we have two `module.xml` file for the server modules and will be good to update both in this PR.",
18038099,david-rh,https://api.github.com/repos/keycloak/keycloak/pulls/13489,940384658,2022-08-08T15:36:59Z,crypto/fips1402/pom.xml,"@@ -30,6 +30,24 @@     <name>Keycloak Crypto FIPS 140-2 Integration</name>     <description/> +    <properties>+        <maven.compiler.release>11</maven.compiler.release>+        <maven.compiler.source>11</maven.compiler.source>+        <maven.compiler.target>11</maven.compiler.target>+    </properties>      ++<dependencyManagement>+		<dependencies>+			<dependency>+				<groupId>org.junit</groupId>","So, I wanted to switch to Java 11 for this so that I could clean up the HTTP request code using the newer APIs.  But, for some reason, when I set the target and source to 11, the JUnit classes were no longer recognized in the build. To fix that, it seemed I had to switch to Junit 5, and junit-vintage is needed in order to support the existing code base. Maybe there was another way to solve this, but I wasn't able to figure it out.",
18038099,david-rh,https://api.github.com/repos/keycloak/keycloak/pulls/13489,940390981,2022-08-08T15:43:14Z,common/src/main/java/org/keycloak/common/crypto/OCSPUtils.java,"@@ -0,0 +1,159 @@+/*+ * Copyright 2016 Analytical Graphics, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */++package org.keycloak.common.crypto;++import java.net.URI;+import java.security.cert.*;+import java.util.*;+import java.util.logging.Level;+import java.util.logging.Logger;+++/**+ * @author <a href=""mailto:brat000012001@gmail.com"">Peter Nalyvayko</a>+ * @version $Revision: 1 $+ * @since 10/29/2016+ */++public abstract class OCSPUtils {++    private final static Logger logger = Logger.getLogger(""""+OCSPUtils.class);","No Problem. Glad to know this, I added logging to some other classes, and wasn't sure what the go to was, so in those cases I picked jboss logging :). ",
105500542,Redhat-Alice,https://api.github.com/repos/keycloak/keycloak/pulls/12961,941782135,2022-08-09T20:39:21Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/group/GroupTest.java,"@@ -160,27 +160,6 @@ public void testClientRemoveWithClientRoleGroupMapping() throws Exception {         assertAdminEvents.assertEvent(testRealmId, OperationType.DELETE, AdminEventPaths.clientResourcePath(clientUuid), ResourceType.CLIENT);     } -    private GroupRepresentation createGroup(RealmResource realm, GroupRepresentation group) {",I took the liberty of moving this to AbstractGroupTest to prevent code duplication,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13677,943143936,2022-08-11T06:43:09Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanSingleUseObjectProvider.java,"@@ -118,12 +177,27 @@ public boolean putIfAbsent(String key, long lifespanInSeconds) {      @Override     public boolean contains(String key) {-        BasicCache<String, ActionTokenValueEntity> cache = tokenCache.get();+        BasicCache<String, ActionTokenValueEntity> cache = singleUseObjectCacheSupplier();         return cache.containsKey(key);     }      @Override     public void close() {      }++    // Use remote cache for single-use objects if available+    private BasicCache singleUseObjectCacheSupplier() {","""Supplier"" indicates a nullary function (signature `() -> T`), see `Supplier` class. Please improve naming, e.g. `getSingleUseObjectCache`",
89905860,DGuhr,https://api.github.com/repos/keycloak/keycloak/pulls/13681,943154743,2022-08-11T07:00:19Z,docs/guides/src/main/server/configuring-hostname.adoc,"@@ -0,0 +1,177 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""Configuring the hostname""+summary=""Learn how to configure the frontend and backchannel endpoints exposed by Keycloak.""+includedOptions=""hostname-* proxy"">++== Server Endpoints++Keycloak exposes different endpoints to talk with applications as well as to allow accessing the administration console. These endpoints+can be categorized into three main groups:++* Frontend+* Backend+* Administration Console++The base URL for each group has an important impact on how tokens are issued and validated, on how links are created for actions that require the user+to be redirected to Keycloak (for example, when resetting password through email links), and, most importantly, how applications will+discover these endpoints when fetching the OpenID Connect Discovery Document from `realms/{realm-name}/.well-known/openid-configuration`.++=== Frontend++The frontend endpoints are those accessible through a public domain and usually related to authentication/authorization flows that happen+through the front-channel. For instance, when an SPA wants to authenticate their users it redirects them to the `authorization_endpoint` so that users+can authenticate using their browsers through the front-channel.++By default, when the hostname settings are not set, the base URL for these endpoints is based on the incoming request so that the HTTP scheme,+host, port, and path, are the same from the request. The default behavior also has a direct impact on how the server is going to issue tokens given that the issuer is also based on+the URL set to the frontend endpoints. If the hostname settings are not set, the token issuer will also be based on the incoming request and also lack consistency if the client is requesting tokens using different URLs.++When deploying to production you usually want a consistent URL for the frontend endpoints and the token issuer regardless of how the request is constructed.+In order to achieve this consistency, you can set either the `hostname` or the `hostname-url` options.++Most of the time, it should be enough to set the `hostname` option in order to change only the *host* of the frontend URLs:++<@kc.start parameters=""--hostname=<host>""/>++When using the `hostname` option the server is going to resolve the HTTP scheme, port, and path, automatically so that:++* `https` scheme is used unless you set `http-strict-https=false`",a) it's `hostname-strict-https=false`b) IMO we should finally unhide this configuration option as part of this PR (would then also solve #13353 and #13270 ),
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13643,943552879,2022-08-11T14:26:50Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/model/MapStoreProvider.java,"@@ -0,0 +1,112 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model;++import org.keycloak.utils.StringUtil;++import java.util.Arrays;+import java.util.Optional;++/**+ * @author <a href=""mailto:mabartos@redhat.com"">Martin Bartos</a>+ */+public enum MapStoreProvider {+    CHM(""chm"") {+        @Override+        public Optional<String> getDbUrl() {+            return Optional.of("""");+        }++        @Override+        public Optional<String> getDbUsername() {+            return Optional.of("""");+        }++        @Override+        public Optional<String> getDbPassword() {+            return Optional.of("""");+        }+    },+    JPA(""jpa"") {+        @Override+        public Optional<String> getDbUrl() {+            return Optional.ofNullable(System.getProperty(""keycloak.map.storage.connectionsJpa.url""));+        }++        @Override+        public Optional<String> getDbUsername() {+            return Optional.ofNullable(System.getProperty(""keycloak.map.storage.connectionsJpa.user""));+        }++        @Override+        public Optional<String> getDbPassword() {+            return Optional.ofNullable(System.getProperty(""keycloak.map.storage.connectionsJpa.password""));+        }+    },+    HOTROD(""hotrod"") {+        @Override+        public Optional<String> getDbUrl() {","@mabartos HotRod has different configuration options as DB in Quarkus dist, see https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/approvals/cli/help/HelpCommandTest.testStartDevHelpAll.unix.approved.txt#L82-L89 ",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13183,943619659,2022-08-11T15:24:30Z,model/map/src/main/java/org/keycloak/models/map/user/MapUserProviderFactory.java,"@@ -40,12 +40,24 @@  */ public class MapUserProviderFactory extends AbstractMapProviderFactory<MapUserProvider, MapUserEntity, UserModel> implements UserProviderFactory<MapUserProvider>, InvalidationHandler { +    public static final String USERNAME_CASE_SENSITIVE = ""username-case-sensitive"";+     public MapUserProviderFactory() {         super(UserModel.class, MapUserProvider.class);     }      @Override     public MapUserProvider createNew(KeycloakSession session) {+        RealmModel realm = session.getContext().getRealm();+        boolean usernameCaseSensitive = false; //default to false++        // if a realm is available take it from there+        if (realm != null) {+            usernameCaseSensitive = realm.getAttribute(USERNAME_CASE_SENSITIVE, Boolean.FALSE);+        }++        session.setAttribute(USERNAME_CASE_SENSITIVE, usernameCaseSensitive);","When discussing this internally with @mhajas, we agreed that it would be good to encode the realm ID into the session as well, and add a guard for lookup by username checking the right realm, e.g. by using `USERNAME_CASE_SENSITIVE + ""."" + realm.getId()` attribute and throwing exception if the expected attribute would not be there.Reasoning is that queries which use username in criteria should always have the appropriate realm in the context, and it is illegal state when a caller queries user by username from a different realm that is in context or when there is no realm set in the context.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13183,943624002,2022-08-11T15:28:32Z,model/map/src/main/java/org/keycloak/models/map/user/MapUserEntity.java,"@@ -44,6 +44,8 @@ abstract class AbstractUserEntity extends Impl implements MapUserEntity {          private static final Logger LOG = Logger.getLogger(MapUserProvider.class);         private String id;+        private String username;+        private String usernameLowerCase;","Each implementation should be able to decide which way it would implement lettercase (in)sensitive search. For that reason, there should be no lowercase username variant prescribed in the generic map entity (nor in the AbstractUserEntity).If that is needed say in JPA, then JPA entity metadata object should extend the `AbstractUserEntity` and add lowercase variant there. Yet - can we do without it?",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13648,944378112,2022-08-12T11:36:15Z,services/src/main/java/org/keycloak/services/resources/admin/permissions/ClientPermissions.java,"@@ -292,6 +293,7 @@ public Resource resource(ClientModel client) {     @Override     public Map<String, String> getPermissions(ClientModel client) {         initialize(client);+        //does it make sense to return the scopes if fine-grained permissions are disabled?",I don't think it does. The calling code does not call this method if the feature is disabled. See https://github.com/keycloak/keycloak/blob/2b996b12a180c426bbefe5cb44b6fce1af982840/services/src/main/java/org/keycloak/services/resources/admin/ClientResource.java#L660.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13648,944378624,2022-08-12T11:37:00Z,services/src/main/java/org/keycloak/services/resources/admin/permissions/GroupPermissions.java,"@@ -222,6 +222,7 @@ public Resource resource(GroupModel group) {     @Override     public Map<String, String> getPermissions(GroupModel group) {         initialize(group);+        //does it make sense to return the scopes if fine-grained permissions are disabled?",Same comment and code pattern from the previous comments on clients.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13648,944378916,2022-08-12T11:37:30Z,services/src/main/java/org/keycloak/services/resources/admin/permissions/IdentityProviderPermissions.java,"@@ -140,6 +141,7 @@ public Resource resource(IdentityProviderModel idp) {     @Override     public Map<String, String> getPermissions(IdentityProviderModel idp) {         initialize(idp);+        //does it make sense to fill the scopes when fine-grained permissions are disabled?",Same comment and code pattern from the previous comments on clients.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13648,944381396,2022-08-12T11:41:07Z,services/src/main/java/org/keycloak/services/resources/admin/permissions/RolePermissions.java,"@@ -91,6 +91,7 @@ private void disablePermissions(RoleModel role) {     @Override     public Map<String, String> getPermissions(RoleModel role) {         initialize(role);+        //does it make sense to initialize the scopes when fine-grained permissions are disabled?",Same comment and code pattern from the previous comments on clients.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13648,944382215,2022-08-12T11:42:20Z,services/src/main/java/org/keycloak/services/resources/admin/permissions/UserPermissions.java,"@@ -145,6 +145,7 @@ private void initialize() {     @Override     public Map<String, String> getPermissions() {         initialize();+        //does it make sense to initialize the scopes when fine-grained permissions are disabled?",Same comment and code pattern from the previous comments on clients.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13724,946626950,2022-08-16T10:56:53Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -247,6 +247,14 @@ private void addStorageOptions(List<String> commands) {         String mapStorageProfile = System.getProperty(AUTH_SERVER_QUARKUS_MAP_STORAGE_PROFILE);          if (mapStorageProfile != null) {+            // We need to drop optimized flag because --storage is build option therefore startup requires re-augmentation+            commands.removeIf(""--optimized""::equals);++            // As config is re-augmented on startup we need to also add --http-relative-path as ant build from+            // integration-arquillian/servers/auth-server/quarkus/ant/configure.xml is replaced by build invoked on+            // startup when we add new build option below+            commands.add(""--http-relative-path=/auth"");+             switch (mapStorageProfile) {                 case ""chm"":                     commands.add(""--storage="" + mapStorageProfile);","@pedroigor This would be possible. However, I thought the build is happening only if some change in config was made, not every time. See https://github.com/keycloak/keycloak/blob/e3af0610e21961c1e8d074a223f9fffee0e56dde/quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java#L125",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13643,946676148,2022-08-16T11:47:13Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -47,20 +48,20 @@ import org.jboss.shrinkwrap.api.exporter.ZipExporter; import org.jboss.shrinkwrap.descriptor.api.Descriptor; import org.keycloak.testsuite.arquillian.SuiteContext;+import org.keycloak.testsuite.model.StoreProvider;  /**  * @author mhajas  */ public class KeycloakQuarkusServerDeployableContainer implements DeployableContainer<KeycloakQuarkusConfiguration> {      private static final int DEFAULT_SHUTDOWN_TIMEOUT_SECONDS = 10;-    private static final String AUTH_SERVER_QUARKUS_MAP_STORAGE_PROFILE = ""auth.server.quarkus.mapStorage.profile.config"";      private static final Logger log = Logger.getLogger(KeycloakQuarkusServerDeployableContainer.class);      private KeycloakQuarkusConfiguration configuration;     private Process container;-    private static AtomicBoolean restart = new AtomicBoolean();+    private static AtomicBoolean firstExecution = new AtomicBoolean(true);","I'm not 100% sure if the best here is to change the logic around this flag.The main idea around that flag is to only run re-augmentation (implicit `build`) when the server is restarting. This eventually happens during test execution due to changes to features, deploying providers, or changing anything else that requires a  `build` prior to starting the server. Also, note that the logic around this flag also makes sure the same build options are set as when running the Ant plugin to pre-configure the distribution (auth-server-quarkus).Instead, I would change the Ant script (`configure.xml` in auth-server-quarkus module) to pre-configure the distribution with the choosen database vendor and then make sure the Arquillian container includes the database vendor when doing restarts.",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13737,946730410,2022-08-16T12:45:19Z,adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java,"@@ -282,11 +286,13 @@ public PathConfig matches(String targetUri) {                             PolicyEnforcerConfig.EnforcementMode enforcementMode = PolicyEnforcerConfig.EnforcementMode.ENFORCING;                             ResourceRepresentation targetResource = matchingResources.get(0);                             List<PolicyEnforcerConfig.MethodConfig> methodConfig = null;+                            boolean isStatic = false;","@pedroigor I am not following the changes below this line. Why is this needed? Usecase where it doesn't make sense to me:1. In `application.properties` file I have some static `pathConfig` that contains `*`  2. Then for all requests that match the `pathConfig` I will set the `isStatic` to `true` even though the config is lazy loaded from server which means that probably should not be static. Am I missing something?  Also, if I am not mistaken the reported issue in point 1. (from report #9855) should be fixed by change on line 200-202.",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13737,947541558,2022-08-17T07:23:52Z,adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java,"@@ -282,11 +286,13 @@ public PathConfig matches(String targetUri) {                             PolicyEnforcerConfig.EnforcementMode enforcementMode = PolicyEnforcerConfig.EnforcementMode.ENFORCING;                             ResourceRepresentation targetResource = matchingResources.get(0);                             List<PolicyEnforcerConfig.MethodConfig> methodConfig = null;+                            boolean isStatic = false;","What I meant by `200-202` is this part: https://github.com/keycloak/keycloak/pull/13737/files#diff-0db76367dca5a7a87f67bf3a27f7e961e885b2361a1e768c44c1fa554a9b8036R200-R202If I am not mistaken it solves the issue where disabled pathConfigs are removed from the cache itself.  What I don't understand is what is the purpose of the other changes in the `PolicyEnforcer` class.This is a scenario I have on my mind when I see the other changes and I am not sure it is correct:1. PolicyEnforcer config contains some path that is statically bound (P1)2. There is a request that partially matches P1 therefore it is taken from the cache on this linehttps://github.com/keycloak/keycloak/blob/e1fed2c95ca275aeee057a7fc0838ebc14324930/adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java#L2713. It is only a partial match, this means we will search Keycloak server for better matches and let's say we have found some resource (R1)4. We create pathConfig based on R1:https://github.com/keycloak/keycloak/blob/e1fed2c95ca275aeee057a7fc0838ebc14324930/adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java#L3065. And then set static flag based on P1https://github.com/keycloak/keycloak/blob/e1fed2c95ca275aeee057a7fc0838ebc14324930/adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java#L3166. And then cache it and never removed because it is statichttps://github.com/keycloak/keycloak/blob/e1fed2c95ca275aeee057a7fc0838ebc14324930/adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java#L326Is this correct? Or Am I missing something?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13827,947658131,2022-08-17T09:14:58Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/StoragePropertyMappers.java,"@@ -319,15 +318,6 @@ private static Optional<String> getAreaStorage(Optional<String> storage, ConfigS         return of(storage.isEmpty() ? ""jpa"" : ""map"");     } -    private static Optional<String> getResourcesVersionSeed(Optional<String> parameterValue, ConfigSourceInterceptorContext context) {-        if (!parameterValue.isEmpty()) {-            return parameterValue;-        }-        Logger.getLogger(StoragePropertyMappers.class)-                .warnf(""Version seed for deployment state set with a random number. Caution: This can lead to unstable operations when serving resources from the cluster without a sticky loadbalancer or when restarting nodes. Set the '--%s' option with a secret seed to ensure stable operations."", StorageOptions.STORAGE_DEPLOYMENT_STATE_RESOURCES_VERSION_SEED.getKey());-        return Optional.of(SecretGenerator.getInstance().randomString(10));","@DGuhr - good question!The only real purpose of the transformer was to log the warning. The `SecretGenerator` is duplicated from the `MapDeploymentStateProviderFactory`. As there is nothing left, I removed the transformer completely.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13643,947777621,2022-08-17T10:48:36Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -47,20 +48,20 @@ import org.jboss.shrinkwrap.api.exporter.ZipExporter; import org.jboss.shrinkwrap.descriptor.api.Descriptor; import org.keycloak.testsuite.arquillian.SuiteContext;+import org.keycloak.testsuite.model.StoreProvider;  /**  * @author mhajas  */ public class KeycloakQuarkusServerDeployableContainer implements DeployableContainer<KeycloakQuarkusConfiguration> {      private static final int DEFAULT_SHUTDOWN_TIMEOUT_SECONDS = 10;-    private static final String AUTH_SERVER_QUARKUS_MAP_STORAGE_PROFILE = ""auth.server.quarkus.mapStorage.profile.config"";      private static final Logger log = Logger.getLogger(KeycloakQuarkusServerDeployableContainer.class);      private KeycloakQuarkusConfiguration configuration;     private Process container;-    private static AtomicBoolean restart = new AtomicBoolean();+    private static AtomicBoolean firstExecution = new AtomicBoolean(true);","Yeah, that is true. By pre-configuring the distribution with a database (default to H2/no-vendor) we add an additional step where the `auth-server-quarkus` module should be built prior to executing tests.However, my argument is all about reducing test execution time. I understand that for H2 tests it should not make a difference but when running DB tests the time will increase significantly.For now, we can focus on enabling the DB tests for Quarkus. And then evaluate later improvements to execution time. Not hard on fixing this now.",
90400807,agandhew,https://api.github.com/repos/keycloak/keycloak/pulls/12961,948884273,2022-08-18T09:27:25Z,model/jpa/src/main/java/org/keycloak/models/jpa/entities/GroupEntity.java,"@@ -33,6 +33,7 @@         @NamedQuery(name=""getGroupIdsByNameContaining"", query=""select u.id from GroupEntity u where u.realm = :realm and u.name like concat('%',:search,'%') order by u.name ASC""),         @NamedQuery(name=""getGroupIdsByNameContainingFromIdList"", query=""select u.id from GroupEntity u where u.realm = :realm and lower(u.name) like lower(concat('%',:search,'%')) and u.id in :ids order by u.name ASC""),         @NamedQuery(name=""getGroupIdsFromIdList"", query=""select u.id from GroupEntity u where u.realm = :realm and u.id in :ids order by u.name ASC""),+        @NamedQuery(name=""getGroupIdsByAttributeNameAndAttributeValue"", query=""select distinct u.id from GroupEntity u join u.attributes a where u.realm = :realm and a.name = :name and a.value = :value""),",Removed unused query,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13727,950161248,2022-08-19T12:56:15Z,.github/workflows/ci.yml,"@@ -144,16 +144,30 @@ jobs:       - name: Check whether HEAD^ contains HotRod storage relevant changes         run: echo ""GIT_HOTROD_RELEVANT_DIFF=$( git diff --name-only HEAD^ | egrep -ic -e '^model/map-hot-rod|^model/map/|^model/build-processor' )"" >> $GITHUB_ENV +      - name: Check whether HotRod storage matrix should be executed+        if: ${{ !endsWith(matrix.server, '-map-hot-rod') || env.GIT_HOTROD_RELEVANT_DIFF != 0 }}+        run: echo ""CHECK_HOTROD_EXECUTION=true"" >> $GITHUB_ENV++      - name: Check whether HEAD^ contains JPA map storage relevant changes+        run: echo ""GIT_MAP_JPA_RELEVANT_DIFF=$( git diff --name-only HEAD^ | egrep -ic -e '^model/map-jpa/|^model/map/|^model/build-processor' )"" >> $GITHUB_ENV++      - name: Check whether Map-JPA storage matrix should be executed+        if: ${{ !endsWith(matrix.server, '-map-jpa') || env.GIT_MAP_JPA_RELEVANT_DIFF != 0 }}+        run: echo ""CHECK_MAP_JPA_EXECUTION=true"" >> $GITHUB_ENV++      - name: Check whether those phases should be executed+        run: echo ""SHOULD_BE_EXECUTED=$( test ""$CHECK_HOTROD_EXECUTION"" = true -a ""$CHECK_MAP_JPA_EXECUTION"" = true && echo true || echo false )"" >> $GITHUB_ENV+       - name: Cache Maven packages-        if: ${{ github.event_name != 'pull_request' || matrix.server != 'undertow-map-hot-rod' || env.GIT_HOTROD_RELEVANT_DIFF != 0 }}+        if: ${{ github.event_name != 'pull_request' || env.SHOULD_BE_EXECUTED == 'true' }}         uses: actions/cache@v3","I had a hard time reading this code with the negations and, to understand the final condition `SHOULD_BE_EXECUTED`.See below for an attempt to remove that last condition, and use `env.SHOULD_BE_EXECUTED != 'false'` for the tests (would need to be applied for all other steps as well). ```      - name: Check whether HEAD^ contains HotRod storage relevant changes        run: echo ""GIT_HOTROD_RELEVANT_DIFF=$( git diff --name-only HEAD^ | egrep -ic -e '^model/map-hot-rod|^model/map/|^model/build-processor' )"" >> $GITHUB_ENV      - name: Check whether HotRod storage matrix should be executed        if: ${{ endsWith(matrix.server, '-map-hot-rod') && env.GIT_HOTROD_RELEVANT_DIFF == 0 }}        run: echo ""SHOULD_BE_EXECUTED=false"" >> $GITHUB_ENV      - name: Check whether HEAD^ contains JPA map storage relevant changes        run: echo ""GIT_MAP_JPA_RELEVANT_DIFF=$( git diff --name-only HEAD^ | egrep -ic -e '^model/map-jpa/|^model/map/|^model/build-processor' )"" >> $GITHUB_ENV      - name: Check whether Map-JPA storage matrix should be executed        if: ${{ endsWith(matrix.server, '-map-jpa') && env.GIT_MAP_JPA_RELEVANT_DIFF == 0 }}        run: echo ""SHOULD_BE_EXECUTED=false"" >> $GITHUB_ENV      - name: Cache Maven packages        if: ${{ github.event_name != 'pull_request' || env.SHOULD_BE_EXECUTED != 'false' }}        uses: actions/cache@v3     ```",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13867,950512224,2022-08-19T19:41:52Z,services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java,"@@ -110,7 +111,20 @@ public boolean isValid(RealmModel realm, UserModel user, CredentialInput credent             return true;         } else if (OTPCredentialModel.TOTP.equals(credentialData.getSubType())) {             TimeBasedOTP validator = new TimeBasedOTP(credentialData.getAlgorithm(), credentialData.getDigits(), credentialData.getPeriod(), policy.getLookAheadWindow());-            return validator.validateTOTP(challengeResponse, secretData.getValue().getBytes(StandardCharsets.UTF_8));++            boolean validReusedOtp = policy.isCodeReusable() || !challengeResponse.equals(secretData.getLastValue());+            if (!validReusedOtp) {+                logger.debug(""It is forbidden to use the same OTP code twice. Please wait for the next one."");+                return false;+            }++            if (validator.validateTOTP(challengeResponse, secretData.getValue().getBytes(StandardCharsets.UTF_8))) {","I think it should be safer to validate codes based on the last successful validation interval rather than the last used code.  Although not a big issue when it happens, it should be possible that the same code is generated for different times. Codes are 6 or 8 digits and I don't think they have enough entropy to assume they won't repeat.By doing checks based on the interval, we store the last interval from here https://github.com/keycloak/keycloak/blob/fd2787ae7da15e50a523d52c59617584e6d09cc7/server-spi-private/src/main/java/org/keycloak/models/utils/TimeBasedOTP.java#L83.Then we change the `validateTOTP` method to accept the last validation interval and introduce a check like:```if (currentInterval <= lastValidationInterval) {    return false;}```",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/13867,951326199,2022-08-22T11:29:36Z,services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java,"@@ -110,7 +111,20 @@ public boolean isValid(RealmModel realm, UserModel user, CredentialInput credent             return true;         } else if (OTPCredentialModel.TOTP.equals(credentialData.getSubType())) {             TimeBasedOTP validator = new TimeBasedOTP(credentialData.getAlgorithm(), credentialData.getDigits(), credentialData.getPeriod(), policy.getLookAheadWindow());-            return validator.validateTOTP(challengeResponse, secretData.getValue().getBytes(StandardCharsets.UTF_8));++            boolean validReusedOtp = policy.isCodeReusable() || !challengeResponse.equals(secretData.getLastValue());+            if (!validReusedOtp) {+                logger.debug(""It is forbidden to use the same OTP code twice. Please wait for the next one."");+                return false;+            }++            if (validator.validateTOTP(challengeResponse, secretData.getValue().getBytes(StandardCharsets.UTF_8))) {","@pedroigor Thanks a lot for your suggestion! I'm aware that the solution with the last used code is not so elegant and brings other problems to consider.However, I've been thinking a little bit about it, and the approach, which you've suggested, has some drawbacks as well. The thing is related to the ""look around window"". The code can be valid even for the following auth windows (the count of valid windows depends on the `lookAroundWindow` field).  I assume that you had in mind, for the successful validation, store either:1) `lastValidationInterval = currentInterval;` -> Store the last ""success"" interval and then use the condition, that you've mentioned above. It'd work only without the ""look around window"" feature. A user can also enter the code from the previous auth window. Moreover, as the code is valid even for the next window, an attacker could use the same code in the next window.or2) `lastValidationInterval = currentInterval + lookAroundWindow;` ->  Store the last ""success"" interval + look around window value (or the evaluation of the valid interval can be done later). It'd mean, that the user is not able to use the code from the next auth window and needs to wait till `currentInterval > lastValidationInterval` - not okay.--------------------------------------------------------------------I think the combination of both could work; store the last successful OTP code and the last successful interval. I can assemble a particular solution for that and you can review it later.If I should elaborate it a little bit more, just feel free to let me know :)) ",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13910,951602622,2022-08-22T15:48:19Z,testsuite/integration-arquillian/servers/cache-server/infinispan/infinispan/pom.xml,"@@ -31,7 +31,8 @@          <properties>         <cache.server>infinispan</cache.server>-        +        <!--  CrossDC tests are failing with ISPN version 13.0.10, these tests will be updated in future therefore we leave this version on ISPN 12  -->",I wonder how much use the test results are when we run them with a different ISPN version. What about disabling them completely?,
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/13889,951613366,2022-08-22T15:58:20Z,services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java,"@@ -134,16 +137,28 @@ protected void backchannelLogout(UserSessionModel userSession, String idToken) {         UriBuilder logoutUri = UriBuilder.fromUri(getConfig().getLogoutUrl())                 .queryParam(""state"", sessionId);         logoutUri.queryParam(""id_token_hint"", idToken);-        String url = logoutUri.build().toString();-        try {-            int status = SimpleHttp.doGet(url, session).asStatus();-            boolean success = status >= 200 && status < 400;-            if (!success) {-                logger.warn(""Failed backchannel broker logout to: "" + url);++        final String url = logoutUri.build().toString();+        final HttpClient client = session.getProvider(HttpClientProvider.class).getHttpClient();+        session.getTransactionManager().enlistAfterCompletion(new AbstractKeycloakTransaction() {+            @Override+            protected void commitImpl() {+                try {+                    int status = SimpleHttp.doGet(url, client).asStatus();","@ahus1 Yes, I've tried using the original `SimpleHttp.doGet(url, session)` variant, which is implemented as```    public static SimpleHttp doGet(String url, KeycloakSession session) {        return doGet(url, session.getProvider(HttpClientProvider.class).getHttpClient());    }```and it failed with the following exception:```org.jboss.resteasy.spi.LoggableFailure: RESTEASY003880: Unable to find contextual data of type: org.keycloak.models.KeycloakSession	at org.jboss.resteasy.core.ContextParameterInjector$GenericDelegatingProxy.invoke(ContextParameterInjector.java:155)	at com.sun.proxy.$Proxy93.getProvider(Unknown Source)	at org.keycloak.broker.provider.util.SimpleHttp.doGet(SimpleHttp.java:106)```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13889,951649260,2022-08-22T16:34:28Z,services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java,"@@ -134,16 +137,28 @@ protected void backchannelLogout(UserSessionModel userSession, String idToken) {         UriBuilder logoutUri = UriBuilder.fromUri(getConfig().getLogoutUrl())                 .queryParam(""state"", sessionId);         logoutUri.queryParam(""id_token_hint"", idToken);-        String url = logoutUri.build().toString();-        try {-            int status = SimpleHttp.doGet(url, session).asStatus();-            boolean success = status >= 200 && status < 400;-            if (!success) {-                logger.warn(""Failed backchannel broker logout to: "" + url);++        final String url = logoutUri.build().toString();+        final HttpClient client = session.getProvider(HttpClientProvider.class).getHttpClient();+        session.getTransactionManager().enlistAfterCompletion(new AbstractKeycloakTransaction() {+            @Override+            protected void commitImpl() {+                try {+                    int status = SimpleHttp.doGet(url, client).asStatus();","I had a look at the code (didn't run it though), and can't why this happens. I'd say it would be good to have a code comment here describing why you did it this way including the error message you saw. If you'd log a GitHub issue on how to reproduce it, I'd be happy to analyze it separately so this can be simplified / doesn't fall on our feet later as it looks something might have been cleaned up before the `enlistAfterCompletion()` methods. WDYT?",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/13889,951707459,2022-08-22T17:27:29Z,services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java,"@@ -134,16 +137,28 @@ protected void backchannelLogout(UserSessionModel userSession, String idToken) {         UriBuilder logoutUri = UriBuilder.fromUri(getConfig().getLogoutUrl())                 .queryParam(""state"", sessionId);         logoutUri.queryParam(""id_token_hint"", idToken);-        String url = logoutUri.build().toString();-        try {-            int status = SimpleHttp.doGet(url, session).asStatus();-            boolean success = status >= 200 && status < 400;-            if (!success) {-                logger.warn(""Failed backchannel broker logout to: "" + url);++        final String url = logoutUri.build().toString();+        final HttpClient client = session.getProvider(HttpClientProvider.class).getHttpClient();+        session.getTransactionManager().enlistAfterCompletion(new AbstractKeycloakTransaction() {+            @Override+            protected void commitImpl() {+                try {+                    int status = SimpleHttp.doGet(url, client).asStatus();","I think this happens because the session in this point is a proxy that isn't available/valid anymore when the second tx runs. The transaction runs as part of the overall commit handled by the filter, and at that point resteasy has already processed the original request and I think the proxies are no longer valid.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13677,952305160,2022-08-23T08:23:09Z,model/map/src/main/java/org/keycloak/models/map/singleUseObject/MapSingleUseObjectProvider.java,"@@ -65,121 +65,69 @@ private ActionTokenValueModel singleUseEntityToAdapter(MapSingleUseObjectEntity     }      @Override-    public void put(ActionTokenKeyModel actionTokenKey, Map<String, String> notes) {-        if (actionTokenKey == null || actionTokenKey.getUserId() == null || actionTokenKey.getActionId() == null || actionTokenKey.getActionVerificationNonce() == null) {-            return;-        }--        LOG.tracef(""put(%s, %s, %s)%s"", actionTokenKey.getUserId(), actionTokenKey.getActionId(), actionTokenKey.getActionVerificationNonce(), getShortStackTrace());--        DefaultModelCriteria<ActionTokenValueModel> mcb = criteria();-        mcb = mcb.compare(ActionTokenValueModel.SearchableFields.USER_ID, ModelCriteriaBuilder.Operator.EQ, actionTokenKey.getUserId())-                .compare(ActionTokenValueModel.SearchableFields.ACTION_ID, ModelCriteriaBuilder.Operator.EQ, actionTokenKey.getActionId())-                .compare(ActionTokenValueModel.SearchableFields.ACTION_VERIFICATION_NONCE, ModelCriteriaBuilder.Operator.EQ, actionTokenKey.getActionVerificationNonce().toString());+    public void put(String key, long lifespanSeconds, Map<String, String> notes) {+        // try to parse provided key to check if we are storing an action token+        ActionTokenKeyModel actionTokenKey = DefaultActionTokenKey.from(key);","`MapSingleUseObjectProvider` should not need to distinguish between action-token and other objects. Ideally, we should completely remove `DefaultActionTokenKey` and `ActionTokenValueModel` from this class. Would this be possible? This way, we could remove all ActionToken-related fields from the storage and retain only `id`, `objectKey` and `notes`. Do you see any problem with this? ",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13910,952683481,2022-08-23T14:13:03Z,testsuite/integration-arquillian/servers/cache-server/infinispan/infinispan/pom.xml,"@@ -31,7 +31,8 @@          <properties>         <cache.server>infinispan</cache.server>-        +        <!--  CrossDC tests are failing with ISPN version 13.0.10, these tests will be updated in future therefore we leave this version on ISPN 12  -->","As far as I know, there is no replacement for these tests at the moment, so I would say we need to leave this running for now. I also raised this at the team meeting and the output was to leave them running with the older version.Regarding the removal of workarounds, this is a little bit more complicated. Currently, CrossDC tests basically run two different versions of ISPN clustered together. The legacy store is using embedded ISPN and it is possible to connect it to a remote ISPN cluster. Currently (not introduced by this PR), embedded ISPN is using version 13 (from Wildfly/Quarkus dist), but the external nodes are using version 12.1.7 (from this^^^^ pom file). Maybe we should investigate what workarounds are touching external and what embedded ISPN and not remove those touching external ISPN to leave crossDC tests stable? WDYT? ",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/13681,953474926,2022-08-24T07:57:50Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HostnameDistTest.java,"@@ -123,6 +123,18 @@ public void testInvalidRedirectUriWhenAdminNotSet() {         Assert.assertTrue(when().get(""https://mykeycloak.127.0.0.1.nip.io:8443/realms/master/protocol/openid-connect/auth?client_id=security-admin-console&redirect_uri=https://mykeycloakadmin.127.0.0.1.nip.io:8443/admin/master/console&state=02234324-d91e-4bf2-8396-57498e96b12a&response_mode=fragment&response_type=code&scope=openid&nonce=f8f3812e-e349-4bbf-8d15-cbba4927f5e5&code_challenge=7qjD_v11WGkt1ig-ZFHxJdrEvuTlzjFRgRGQ_5ADcko&code_challenge_method=S256"").asString().contains(""Invalid parameter: redirect_uri""));     } +    @Test+    @Launch({ ""start"", ""--proxy=edge"", ""--hostname-url=http://mykeycloak.127.0.0.1.nip.io:1234"" })+    public void testFrontendUrl() {+        assertFrontEndUrl(""https://mykeycloak.127.0.0.1.nip.io:8443"", ""http://mykeycloak.127.0.0.1.nip.io:1234/"");+    }++    @Test+    @Launch({ ""start"", ""--proxy=edge"", ""--hostname=mykeycloak.127.0.0.1.nip.io"", ""--hostname-admin-url=http://mykeycloakadmin.127.0.0.1.nip.io:1234"" })+    public void testAdminUrl() {","Nothing to do around this PR, but this is the sort of stuff where I'm thinking unit testing could be helpful to add more tests without the overhead and complexity of integration tests.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13867,953519274,2022-08-24T08:41:25Z,services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java,"@@ -110,7 +111,18 @@ public boolean isValid(RealmModel realm, UserModel user, CredentialInput credent             return true;         } else if (OTPCredentialModel.TOTP.equals(credentialData.getSubType())) {             TimeBasedOTP validator = new TimeBasedOTP(credentialData.getAlgorithm(), credentialData.getDigits(), credentialData.getPeriod(), policy.getLookAheadWindow());-            return validator.validateTOTP(challengeResponse, secretData.getValue().getBytes(StandardCharsets.UTF_8));++            if (policy.isCodeReusable()) {+                return validator.validateTOTP(challengeResponse, secretData.getValue().getBytes(StandardCharsets.UTF_8));+            } else {+                boolean isValid = validator.validateTOTP(challengeResponse, secretData.getValue().getBytes(StandardCharsets.UTF_8), secretData.getLastValidInterval());+                if (isValid) {","I see one small issue that this does not strictly guarantee that code is used really only once. If there are 2 concurrent callers trying to verify code `123456` it can happen that:- thread1 (EG. valid user) calls this validation and successfully manage to verify `123456`- thread2 (EG. potential attacker, who somehow stole the last code of valid user) calls this validation and successfully manage to verify `123456`- thread1 updates DB. However there was already successful validation of the attacker from thread2 (FAIL)Not sure how realistic this attack is, but just pointing it :-)",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/13681,953561225,2022-08-24T09:21:56Z,docs/guides/src/main/server/configuring-hostname.adoc,"@@ -0,0 +1,180 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""Configuring the hostname""+summary=""Learn how to configure the frontend and backchannel endpoints exposed by Keycloak.""+includedOptions=""hostname-* proxy"">++== Server Endpoints++Keycloak exposes different endpoints to talk with applications as well as to allow accessing the administration console. These endpoints+can be categorized into three main groups:++* Frontend+* Backend+* Administration Console++The base URL for each group has an important impact on how tokens are issued and validated, on how links are created for actions that require the user+to be redirected to Keycloak (for example, when resetting password through email links), and, most importantly, how applications will+discover these endpoints when fetching the OpenID Connect Discovery Document from `realms/{realm-name}/.well-known/openid-configuration`.++=== Frontend++The frontend endpoints are those accessible through a public domain and usually related to authentication/authorization flows that happen+through the front-channel. For instance, when an SPA wants to authenticate their users it redirects them to the `authorization_endpoint` so that users+can authenticate using their browsers through the front-channel.++By default, when the hostname settings are not set, the base URL for these endpoints is based on the incoming request so that the HTTP scheme,+host, port, and path, are the same from the request. The default behavior also has a direct impact on how the server is going to issue tokens given that the issuer is also based on+the URL set to the frontend endpoints. If the hostname settings are not set, the token issuer will also be based on the incoming request and also lack consistency if the client is requesting tokens using different URLs.++When deploying to production you usually want a consistent URL for the frontend endpoints and the token issuer regardless of how the request is constructed.+In order to achieve this consistency, you can set either the `hostname` or the `hostname-url` options.++Most of the time, it should be enough to set the `hostname` option in order to change only the *host* of the frontend URLs:++<@kc.start parameters=""--hostname=<host>""/>++When using the `hostname` option the server is going to resolve the HTTP scheme, port, and path, automatically so that:++* `https` scheme is used unless you set `hostname-strict-https=false`+* Use the standard HTTP ports (e.g.: `80` and `443`) if a `proxy` is set or use the port you set to the `hostname-port` option++However, if you want to set not only the host but also a scheme, port, and path, you can set the `hostname-url` option:++<@kc.start parameters=""--hostname-url=<scheme>://<host>:<port>/<path>""/>++This option gives you more flexibility as you can set the different parts of the URL from a single option. Note that+the `hostname` and `hostname-url` are mutually exclusive.++=== Backend++The backend endpoints are those accessible through a public domain or through a private network. They are used for a direct communication+between the server and clients without any intermediary but plain HTTP requests. For instance, after the user is authenticated an SPA+wants to exchange the `code` sent by the server with a set of tokens by sending a token request to `token_endpoint`.++By default, the URLs for backend endpoints are also based on the incoming request. To override this behavior, set the `hostname-strict-backchannel` configuration option by entering this command:++<@kc.start parameters=""--hostname=<value> --hostname-strict-backchannel=true""/>++By setting the `hostname-strict-backchannel` option, the URLs for the backend endpoints are going to be exactly the same as the frontend endpoints.++When all applications connected to Keycloak communicate through the public URL, set `hostname-strict-backchannel` to `true`.+Otherwise, leave this parameter as `false` to allow client-server communication through a private network.++=== Administration Console++The server exposes the administration console and static resources using a specific URL.++By default, the URLs for the administration console are also based on the incoming request. However, you can set a specific host or base URL if you want+to restrict access to the administration console using a specific URL. Similarly to how you set the frontend URLs, you can use the `hostname-admin` and `hostname-admin-url` options to achieve that.++Most of the time, it should be enough to set the `hostname-admin` option in order to change only the *host* of the administration console URLs:++<@kc.start parameters=""--hostname-admin=<host>""/>++However, if you want to set not only the host but also a scheme, port, and path, you can set the `hostname-admin-url` option:++<@kc.start parameters=""--hostname-admin-url=<scheme>://<host>:<port>/<path>""/>++If you don't set these options and the administration console is accessed using a hostname other than what is set to the frontend URLs, you+might get an error from the server telling you that the redirect URI used by the console is invalid. In this case, you should update the+`security-admin-console` client to add a valid redirect URI based on the hostname you want the administration console to be accessible.++Note that the `hostname-admin` and `hostname-admin-url` are mutually exclusive.++To reduce attack surface, the administration endpoints for Keycloak and the Admin Console should not be publicly accessible.+Therefore, you can secure them by using a reverse proxy.+For more information about which paths to expose using a reverse proxy, see the <@links.server id=""reverseproxy""/> Guide.++== Accessing Keycloak in production mode using HTTP++When a `hostname` is set and the server is running in production mode, all the URLs generated by the server are going to use the `HTTPS` scheme. If you are not setting up TLS you might run into issues because some URLs generated by the server won't work.++Keycloak follows the ""secure by design"" principle, so it is absolutely not recommended to access Keycloak without proper transport encryption, as this opens up multiple attack vectors.++Nevertheless, there are environments where Keycloak is deployed behind a proxy/load balancer that terminates TLS completely and the internal requests are done using the unencrypted HTTP protocol.++To be able to work with Keycloak using HTTP for these environments, there is the hidden configuration option `hostname-strict-https=<true/false>`. This option is set to `true` by default for the production mode, and `false` for the development mode.++When you need to access Keycloak using HTTP in production mode, for example when you use `proxy=edge` and you want to access the administration console internally using HTTP, you have to set `hostname-strict-https=false`, otherwise a blank page will show up.++Keep in mind the recommended approach is to always use HTTPS, and this still is true for external clients.","Not sure about this section, and I don't think ""hostname-strict-https"" is really an option we should ""support"".For request not going through a proxy as long as http is enabled, and https is not, shouldn't we disable strict-https automatically?For request going through a proxy in most cases it'll be https, and it doesn't matter how TLS is terminated as we have the ability to set that in the proxy config. I guess the only issue here is if you have a proxy, but it doesn't have TLS enabled. Perhaps then we could have a ""proxy=insecure"" or something?",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/13677,953950723,2022-08-24T15:28:59Z,model/map/src/main/java/org/keycloak/models/map/singleUseObject/MapSingleUseObjectProvider.java,"@@ -42,7 +40,7 @@ /**  * @author <a href=""mailto:mkanis@redhat.com"">Martin Kanis</a>  */-public class MapSingleUseObjectProvider implements ActionTokenStoreProvider, SingleUseObjectProvider {+public class MapSingleUseObjectProvider implements SingleUseObjectProvider {",Thanks. I addressed these suggestions. I renamed both `ActionTokenValueModel` and `ActionTokenKeyModel` and some related classes and variables. I agree regarding `ObjectKey` that it is weird and should be handled in a separate issue.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/7933,955013554,2022-08-25T14:05:28Z,services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java,"@@ -461,6 +464,15 @@ public LinkedAccountsResource linkedAccounts() {         return new LinkedAccountsResource(session, request, client, auth, event, user);     } +    @Path(""/groups"")+    @GET+    @NoCache+    @Produces(MediaType.APPLICATION_JSON)+    public Stream<GroupRepresentation> groupMemberships(@QueryParam(""briefRepresentation"") @DefaultValue(""true"") boolean briefRepresentation) {+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_GROUPS);","I think this should be view-groups only, as an admin may want to allow folks to manage their accounts, but not be able to view the groups they belong to.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/8369,955351842,2022-08-25T19:36:12Z,services/src/main/java/org/keycloak/services/resources/WelcomeResource.java,"@@ -176,6 +179,7 @@ private Response createWelcomePage(String successMessage, String errorMessage) {              Map<String, Object> map = new HashMap<>(); +            map.put(""adminConsoleEnabled"", ADMIN_CONSOLE_ENABLED);",It should be fine to use `Profile.isFeatureEnabled(Profile.Feature.ADMIN2) || Profile.isFeatureEnabled(Profile.Feature.ADMIN)` directly here.Quarkus applications have a well-defined initialization process and using `Profile` in static init might cause issues as they are executed most of the time when the class is loaded.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/8369,955352006,2022-08-25T19:36:24Z,services/src/main/java/org/keycloak/services/resources/admin/AdminRoot.java,"@@ -97,6 +102,11 @@ public static UriBuilder adminBaseUrl(UriBuilder base) {      */     @GET     public Response masterRealmAdminConsoleRedirect() {++        if (!ADMIN_CONSOLE_ENABLED) {",It should be fine to use `Profile.isFeatureEnabled(Profile.Feature.ADMIN2) || Profile.isFeatureEnabled(Profile.Feature.ADMIN)` directly here.Quarkus applications have a well-defined initialization process and using `Profile` in static init might cause issues as they are executed most of the time when the class is loaded.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/8183,955690448,2022-08-26T06:11:21Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerPassMaxAgeTest.java,"@@ -0,0 +1,99 @@+package org.keycloak.testsuite.broker;++import org.junit.Ignore;+import org.junit.Test;+import org.keycloak.models.IdentityProviderModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.representations.idm.IdentityProviderRepresentation;+import org.keycloak.testsuite.Assert;++import java.util.Map;++import static org.keycloak.testsuite.broker.BrokerTestConstants.IDP_OIDC_ALIAS;+import static org.keycloak.testsuite.broker.BrokerTestConstants.IDP_OIDC_PROVIDER_ID;+import static org.keycloak.testsuite.broker.BrokerTestTools.createIdentityProvider;+import static org.keycloak.testsuite.broker.BrokerTestTools.getConsumerRoot;+import static org.keycloak.testsuite.broker.BrokerTestTools.waitForPage;++/**+ * Tests the propagation of the max_age parameter for brokered logins.+ *+ * see https://issues.redhat.com/browse/KEYCLOAK-18499+ */+public class KcOidcBrokerPassMaxAgeTest extends AbstractBrokerTest {++    @Override+    protected BrokerConfiguration getBrokerConfiguration() {+        return new KcOidcBrokerConfigurationWithPassMaxAge();+    }++    private static class KcOidcBrokerConfigurationWithPassMaxAge extends KcOidcBrokerConfiguration {+        +        @Override+        public IdentityProviderRepresentation setUpIdentityProvider(IdentityProviderSyncMode syncMode) {+            IdentityProviderRepresentation idp = createIdentityProvider(IDP_OIDC_ALIAS, IDP_OIDC_PROVIDER_ID);++            Map<String, String> config = idp.getConfig();+            applyDefaultConfiguration(config, syncMode);+            config.put(IdentityProviderModel.LOGIN_HINT, ""false"");++            config.put(IdentityProviderModel.PASS_MAX_AGE, ""true"");++            return idp;+        }+    }++    @Override+    @Test+    @Ignore+    public void testLogInAsUserInIDP() {+        // super.testLogInAsUserInIDP();+    }++    @Test+    @Override+    public void loginWithExistingUser() {++        // login as brokered user user, perform profile update on first broker login and logout user+        loginUser();+        testSingleLogout();++        driver.navigate().to(getAccountUrl(getConsumerRoot(), bc.consumerRealmName()));+        loginPage.clickSocial(bc.getIDPAlias());+        waitForPage(driver, ""sign in to"", true);+        Assert.assertTrue(""Driver should be on the provider realm page right now"",+                driver.getCurrentUrl().contains(""/auth/realms/"" + bc.providerRealmName() + ""/""));++        loginPage.login(bc.getUserLogin(), bc.getUserPassword());+        accountUpdateProfilePage.assertCurrent();++        try {+            // TODO find a better way to simulate time passing.+            Thread.sleep(1500);","Just set the time offset on the server instead, so you don't have to actually wait. There's a setTimeOffset or something in the abstract test class.",
314690,thomasdarimont,https://api.github.com/repos/keycloak/keycloak/pulls/8369,955880923,2022-08-26T09:59:39Z,services/src/main/java/org/keycloak/services/resources/admin/AdminRoot.java,"@@ -63,6 +63,8 @@ public class AdminRoot {     protected static final Logger logger = Logger.getLogger(AdminRoot.class); +    private static final boolean ADMIN_ENABLED = Profile.isFeatureEnabled(Profile.Feature.ADMIN_API);","@pedroigor suggested not to access the Profile in static fields to avoid problems / dependencies with static initialization in quarkus. I'll refactor this to `private static boolean isAdminApiEnabled()`. I need `isAdminApiEnabled()` as well as `isAdminConsoleEnabled()` in multiple places, where could I put it for sharing?`Profile` seems like a good candidate but might broaden the scope of the class a bit...",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/8369,955928467,2022-08-26T11:02:48Z,services/src/main/java/org/keycloak/services/resources/admin/AdminRoot.java,"@@ -63,6 +63,8 @@ public class AdminRoot {     protected static final Logger logger = Logger.getLogger(AdminRoot.class); +    private static final boolean ADMIN_ENABLED = Profile.isFeatureEnabled(Profile.Feature.ADMIN_API);",Perhaps just make the method `public static` in this class considering it belongs here (`AdminRoot` is the JAX-RS resource for the admin console) and should be invoked by other JAX-RS classes?,x
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/14024,956804747,2022-08-29T00:18:12Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/UserInfoEndpoint.java,"@@ -136,7 +137,9 @@ public Response issueUserInfoPost() {          // Fallback to form parameter         if (accessToken == null) {-            accessToken = request.getDecodedFormParameters().getFirst(""access_token"");+            MultivaluedMap<String, String> formParams = request.getDecodedFormParameters();+            checkParameterDuplicated(formParams);+            accessToken = formParams.getFirst(""access_token"");","The existing UserInfoEndpoint only checks ""access_token"" and igores other unknown parameters.This PR checks duplication of ""access_token"" and other unknows parameters.Another option is to check only duplication of ""access_token"" and ignores unknow parameters.@m-takai Which option do you prefer?If checking duplication of unknown parameters, it should be checked regardless of ""acess_token"" being null or not.",
101552037,m-takai,https://api.github.com/repos/keycloak/keycloak/pulls/14024,956893122,2022-08-29T04:52:26Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/UserInfoEndpoint.java,"@@ -136,7 +137,9 @@ public Response issueUserInfoPost() {          // Fallback to form parameter         if (accessToken == null) {-            accessToken = request.getDecodedFormParameters().getFirst(""access_token"");+            MultivaluedMap<String, String> formParams = request.getDecodedFormParameters();+            checkParameterDuplicated(formParams);+            accessToken = formParams.getFirst(""access_token"");","Thank you for you review and a valuable comment.Although OIDC specification does not specify how treat unknown parameters in UserInfo endpoint, the other endpoints such as authorization endpoint ignore unknown parameters followed by RFC6749. Thus, I fix the PR code to check only duplication of ""access_token"". ",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/14079,957470109,2022-08-29T15:14:08Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -372,6 +372,12 @@             <plugin>                 <artifactId>maven-compiler-plugin</artifactId>                 <version>${maven-compiler-plugin.version}</version>+                <configuration>+                    <!-- #14072 Execute AddUserTest only with auth-server-wildfly -->+                    <testExcludes>+                        <testExclude>org/keycloak/testsuite/adduser/**</testExclude>","Yes, I'm aware of that. However, AFAIK, it's not suitable for this situation. We need to exclude the test in the compile time and not within the runtime. To be more specific, the test uses `org.keycloak.wildfly.adduser.AddUser` class, which is included in the `keycloak-wildfly-adduser` artifact, but the artifact is present only when those tests should be executed with WF.I was thinking about removing the artifact and the test completely from the testsuite, but that test should be present in the testsuite. We should include those test cases in the ""Quarkus"" testsuite as we don't have any similar check for that(AFAIK). I'd like to create some follow-up task for that. ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14087,958108302,2022-08-30T07:33:07Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();",It would be nice if `KeycloakModelUtils.runJobInTransaction` could return a value to avoid a synchronized datatype.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14087,958112065,2022-08-30T07:36:27Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();+        KeycloakModelUtils.runJobInTransaction(session.getKeycloakSessionFactory(), kcSession -> {+            RealmModel realmModel = LockObjectsForModification.lockRealmsForModification(kcSession, () -> kcSession.realms().getRealm(realm.getId()));","Some time ago we reasoned that `JpaComponentEntity` should be a `JpaRootVersionedEntity`, thereby allowing that one component can be modified independently from other components in a realm. We said they are independent (and that's different from mere attributes). Applying that reasoning to this code, one would lock only a single component, not the whole realm.Thinking about running this in its own transaction: Even when locking just the component, running it in its own transaction is probably necessary as validating the access token will read the components from the current realm already with the map store, and after that locking it is just too late.",x
43614225,ioemat,https://api.github.com/repos/keycloak/keycloak/pulls/13921,960519377,2022-09-01T11:09:16Z,server-spi-private/src/main/java/org/keycloak/userprofile/AttributeMetadata.java,"@@ -175,16 +175,12 @@ public AttributeMetadata addValidator(List<AttributeValidatorMetadata> validator             this.validators = new ArrayList<>();         } +        this.validators.removeIf(validators::contains);",When I get this right this effectively clears the validators list. What's the reason to use `removeIf()`instead of `clear()`?,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/8399,960586832,2022-09-01T12:22:25Z,services/src/main/java/org/keycloak/services/x509/AbstractClientCertificateFromHttpHeadersLookupFactory.java,"@@ -55,6 +57,8 @@ public void init(Config.Scope config) {             } else {                 logger.tracev(""{0} was not configured"", HTTP_HEADER_CERT_CHAIN_PREFIX);             }+            trustProxyVerification = config.getBoolean(TRUST_PROXY_VERIFICATION, false);","Yeah, I see your point. But for now, I would keep it only available to nginx and if needed, refactor it later.Sorry for asking this, you have been waiting for a long time already :) But just this one and we are good to go.",
43614225,ioemat,https://api.github.com/repos/keycloak/keycloak/pulls/13921,960768388,2022-09-01T15:03:17Z,server-spi-private/src/main/java/org/keycloak/userprofile/DefaultUserProfile.java,"@@ -115,6 +115,9 @@ private UserModel updateInternal(UserModel user, boolean removeAttributes, Attri                 List<String> updatedValue = attribute.getValue().stream().filter(Objects::nonNull).collect(Collectors.toList());                  if (!CollectionUtil.collectionEquals(currentValue, updatedValue)) {+                    if (!removeAttributes && updatedValue.isEmpty()) {","This means that if the user clears an attribute in the UI or passes an empty list in API, the attribute value is not changed if  `removeAttributes` is  `false`.Not sure whether this is the behavior we want to have here",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/14087,960960095,2022-09-01T18:02:50Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();+        KeycloakModelUtils.runJobInTransaction(session.getKeycloakSessionFactory(), kcSession -> {+            RealmModel realmModel = LockObjectsForModification.lockRealmsForModification(kcSession, () -> kcSession.realms().getRealm(realm.getId()));","> Some time ago we reasoned that `JpaComponentEntity` should be a `JpaRootVersionedEntity`, thereby allowing that one component can be modified independently from other components in a realm. We said they are independent (and that's different from mere attributes).> > Applying that reasoning to this code, one would lock only a single component, not the whole realm.The problem, I think, is that this independence is limited in the sense that components are manipulated through the realm - we don't have a provider/store/transaction for components like we have for e.g. clients, roles, etc, and adding all this structure just to satisfy a concurrent component creation requirement on a specific DB seems completely out of bounds to me.The `RETRY_SERIALIZABLE` happens upon concurrent creation of components and I think this has to do with the fact that they are added to the mapped collection in the realm and somehow concurrently messing with this collection is causing issues on CRDB, so I had to go for the realm locking. Also, how would I lock a component that still doesn't exist in the DB?",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14087,961389939,2022-09-02T07:52:26Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();+        KeycloakModelUtils.runJobInTransaction(session.getKeycloakSessionFactory(), kcSession -> {+            RealmModel realmModel = LockObjectsForModification.lockRealmsForModification(kcSession, () -> kcSession.realms().getRealm(realm.getId()));","Yes, getting the whole list of components first prevents a serializable transaction later when adding an entry. This independence only applies for READ_COMMITTED, and not SERIALIZABLE.Retrieving the full list is triggered in several places: * on the physical layer: the collection we have in JPA that is always loaded in full, even if we would access one component by ID.* on the service layer: when retrieving `DefaultKeyManager.getProviders` it calls `realm.getComponentsStream(realm.getId(), KeyProvider.class.getName())` which will iterate over all providers in the collection again. To make this more efficient, one would need to get rid of the JPA collection and remodel the MapRealmEntity to offer not only getComponents(). Although it looks like an optimization, it is affecting interfaces on all map implementations. I see that we have all necessary columns in the JPA table already, although they are not used AFAIK. A new issue for this (not so small) optimization?",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10785,961623405,2022-09-02T12:26:19Z,model/jpa/src/main/java/org/keycloak/models/jpa/UserAdapter.java,"@@ -392,7 +392,7 @@ public long getGroupsCountByNameContaining(String search) {      @Override     public void joinGroup(GroupModel group) {-        if (isMemberOf(group)) return;+        if (getGroupsStream().anyMatch(g -> group.getId().equals(g.getId()))) return;",This change should also be propagated to https://github.com/keycloak/keycloak/blob/fd5a423b551b9836bda44d47b38d7cd34f8d27c4/model/map/src/main/java/org/keycloak/models/map/user/MapUserAdapter.java#L266-L269,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10785,961632667,2022-09-02T12:38:00Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java,"@@ -2958,4 +2972,69 @@ public void testCreateUserDoNotGrantRole() {             testRealm().roles().get(""realm-role"").remove();         }     }++    /**+     * Test for #9482+     */+    @Test+    public void joinParentGroupAfterSubGroup() {+        String username = ""user-with-sub-and-parent-group"";+        String parentGroupName = ""parent-group"";+        String subGroupName = ""sub-group"";++        GroupRepresentation parentGroup = createGroup(realm, GroupBuilder.create().name(parentGroupName).build());+        GroupRepresentation subGroup = createSubGroup(realm, parentGroup.getId(), GroupBuilder.create().name(subGroupName).build());++        UserRepresentation build = UserBuilder.create()+                .username(username)+                .build();+        String userId = createUser(build);","Could you leverage `Creator.create(RealmResource, GroupRepresentation)` and `Creator.create(RealmResource, UserRepresentation)` instead in both tests to clean after the test completes?Example:https://github.com/keycloak/keycloak/blob/fd5a423b551b9836bda44d47b38d7cd34f8d27c4/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java#L2883-L2894",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12501,961648373,2022-09-02T12:52:45Z,model/jpa/pom.xml,"@@ -127,6 +127,10 @@             <version>${jdbc.mvn.version}</version>             <scope>test</scope>         </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-model-legacy-private</artifactId>+        </dependency>",This seems to be duplicate from line 67,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14087,961788096,2022-09-02T15:15:28Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();+        KeycloakModelUtils.runJobInTransaction(session.getKeycloakSessionFactory(), kcSession -> {+            RealmModel realmModel = LockObjectsForModification.lockRealmsForModification(kcSession, () -> kcSession.realms().getRealm(realm.getId()));","> Some time ago we reasoned that `JpaComponentEntity` should be a `JpaRootVersionedEntity`, thereby allowing that one component can be modified independently from other components in a realm. We said they are independent (and that's different from mere attributes).The component is independent in the sense of where its data is stored (in a separate table). Yet the respective `RealmModel` does change upon a change of a component. In other words, the respective `MapRealmEntity` contents has changed as well upon change of a component within that realm, even if it is not directly a change in the contents of the appropriate `JpaRealmEntity`. This has to be visible to all nodes in the cluster, so that they could update the instantiated component based on the updated definition. Is this satisfied? Cc @vramik",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14087,961799541,2022-09-02T15:28:50Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();","On the other hand, it seems that the exception handling could remain part of the main block and not be performed inside the `runJobInTransaction` / `lockRealmsForModification` since the exceptions thrown are unchecked. That way we could apparently do without the `AtomicReference` completely.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14087,961858371,2022-09-02T16:49:33Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();+        KeycloakModelUtils.runJobInTransaction(session.getKeycloakSessionFactory(), kcSession -> {+            RealmModel realmModel = LockObjectsForModification.lockRealmsForModification(kcSession, () -> kcSession.realms().getRealm(realm.getId()));","The JPA store has the concept of a `JpaChildEntity`, which would trigger a Hibernate version counter increment on the parent JPA entity. In a previous discussion we came to the conclusion that the two would be independent, and therefore `JpaComponentEntity` doesn't implement this. This decision was also documented in the JavaDoc of the class. https://github.com/keycloak/keycloak/blob/c31d37ddf1c3e3529e761800a6842fdbf25ba931/model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/realm/entity/JpaComponentEntity.java#L50-L54If this is not the case, then this needs to be changed. On the other hand, the Hibernate version increments is a concept that is only known to the JPA store, other stores doesn't implement something like this AFAIK.You wrote: > This has to be visible to all nodes in the cluster, so that they could update the instantiated component based on the updated definition.I'm not aware that there is an interface/mechanism on the Map storage interface level to support notifications  components to be re-instantiated. ",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14087,961953288,2022-09-02T19:28:06Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();+        KeycloakModelUtils.runJobInTransaction(session.getKeycloakSessionFactory(), kcSession -> {+            RealmModel realmModel = LockObjectsForModification.lockRealmsForModification(kcSession, () -> kcSession.realms().getRealm(realm.getId()));","> If this is not the case, then this needs to be changed.I don't think the behaviour descibed in Javadoc reflects the expected behaviour.> I'm not aware that there is an interface/mechanism on the Map storage interface level to support notifications components to be re-instantiated.Invalidation in `KeycloakSessionFactory`.For example, in case of detected realm update by JPA provider, JPA provider should invalidate the realm via `session.invalidate(ObjectType.REALM, realmId)` which in turn invalidates the respective components.There is no mechanism similar to `ClusterProvider` from the legacy store neither implemented nor anticipated. Each implementation provides its own way of invalidation detection appropriate for the respective technology; in case of JPA, that might be detecting change in object version of an entity.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14087,962547116,2022-09-05T06:58:33Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -126,19 +129,24 @@ public Stream<ComponentRepresentation> getComponents(@QueryParam(""parent"") Strin     @Consumes(MediaType.APPLICATION_JSON)     public Response create(ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = RepresentationToModel.toModel(session, rep);-            if (model.getParentId() == null) model.setParentId(realm.getId());+        AtomicReference<Response> ref = new AtomicReference<>();+        KeycloakModelUtils.runJobInTransaction(session.getKeycloakSessionFactory(), kcSession -> {+            RealmModel realmModel = LockObjectsForModification.lockRealmsForModification(kcSession, () -> kcSession.realms().getRealm(realm.getId()));","@hmlnarik - looking into `MapRealmAdapter.updateComponent` there is already a call to `ComponentUtil.notifyUpdated` that will via the `AmphibianProviderFactory.onUpdate` will call `session.invalidate(ObjectType.COMPONENT, ...` if I understand this correctly.If such a notification by component is not sufficient, please raise an issue for the invalidation of the realm. If such an invalidation would need to be implemented, it would be great to implement this on the level of `MapRealmAdapter` so that it is independent of the underlying physical store. ",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/13869,962640323,2022-09-05T08:38:54Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakDeploymentTest.java,"@@ -498,4 +534,14 @@ public void testUpgradeRecreatesPods() {         }     } +    private void handleFakeImagePullSecretCreation(Keycloak keycloakCR, String imagePullSecretName,+                                                   boolean shouldMountSecretFromFile, String secretDescriptorFilename) {+        if (shouldMountSecretFromFile) {",I think this `if` is unnecessary as `shouldMountSecretFromFile` is always `true`. The `shouldMountSecretFromFile` parameter can we removed as well.,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/13869,962644607,2022-09-05T08:43:16Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakDeploymentTest.java,"@@ -498,4 +534,14 @@ public void testUpgradeRecreatesPods() {         }     } +    private void handleFakeImagePullSecretCreation(Keycloak keycloakCR, String imagePullSecretName,+                                                   boolean shouldMountSecretFromFile, String secretDescriptorFilename) {+        if (shouldMountSecretFromFile) {+            Secret imagePullSecret = getResourceFromFile(secretDescriptorFilename, Secret.class);+            k8sclient.secrets().inNamespace(namespace).createOrReplace(imagePullSecret);+        }+        LocalObjectReference localObjRefAsSecretTmp = new LocalObjectReferenceBuilder().withName(imagePullSecretName).build();",```suggestion        LocalObjectReference localObjRefAsSecretTmp = new LocalObjectReferenceBuilder().withName(imagePullSecret.getMetadata().getName()).build();```The `imagePullSecretName ` parameter can we removed as well.,
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/13869,962706815,2022-09-05T09:40:11Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/KeycloakSpec.java,"@@ -30,6 +30,8 @@ public class KeycloakSpec {     private int instances = 1;     @JsonPropertyDescription(""Custom Keycloak image to be used."")     private String image;+    @JsonPropertyDescription(""Secret(s) that might be used when pulling an image from a private container image registry or repository."")+    private List<LocalObjectReference> imagePullSecrets;","`LocalObjectReference` only contains, as valid data, a `String`.I would say that is preferable to opt for the simpler approach of mapping it to a plain `String` to make it easier to handle it with a plain `yaml`.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/13869,962759680,2022-09-05T10:38:04Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/KeycloakSpec.java,"@@ -30,6 +30,8 @@ public class KeycloakSpec {     private int instances = 1;     @JsonPropertyDescription(""Custom Keycloak image to be used."")     private String image;+    @JsonPropertyDescription(""Secret(s) that might be used when pulling an image from a private container image registry or repository."")+    private List<LocalObjectReference> imagePullSecrets;","I happen to know why are you asking this. And no, `x-kubernetes-preserve-unknown-fields` is not there and therefore the `additionalProperties` of `LocalObjectReference` don't work. But AFAIK this is ok and actually aligned with K8s behaviour at this moment. Just try creating:```apiVersion: v1kind: Pod...spec:  ...  imagePullSecrets:  - name: secret    someAdditionalField: blahblah```At least I am getting: `error validating data: ValidationError(Pod.spec.imagePullSecrets[0]): unknown field ""someAdditionalField"" in io.k8s.api.core.v1.LocalObjectReference`.",
5792097,andreaTP,https://api.github.com/repos/keycloak/keycloak/pulls/13869,962775786,2022-09-05T10:57:40Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/KeycloakSpec.java,"@@ -30,6 +30,8 @@ public class KeycloakSpec {     private int instances = 1;     @JsonPropertyDescription(""Custom Keycloak image to be used."")     private String image;+    @JsonPropertyDescription(""Secret(s) that might be used when pulling an image from a private container image registry or repository."")+    private List<LocalObjectReference> imagePullSecrets;","Correct, given `JsonIgnore` everything flows, I simply find it redundant to have an object with a single `String` field in the top-level API:https://github.com/keycloak/keycloak-k8s-resources/blob/02a2913e2ad9e3454844bd8f6bb0ebfb03765c0e/kubernetes/keycloaks.k8s.keycloak.org-v1.yml#L860-L866just my 2 cents 🙌 ",x
3833769,sschu,https://api.github.com/repos/keycloak/keycloak/pulls/10785,962805559,2022-09-05T11:33:17Z,model/jpa/src/main/java/org/keycloak/models/jpa/UserAdapter.java,"@@ -392,7 +392,7 @@ public long getGroupsCountByNameContaining(String search) {      @Override     public void joinGroup(GroupModel group) {-        if (isMemberOf(group)) return;+        if (getGroupsStream().anyMatch(g -> group.getId().equals(g.getId()))) return;","Actually, this one is a bit tricky. In `UserAdapter.java` this method was not adapted, it is still checking for transitive group membership. It is only not used anymore when joining a group. Therefore, I would not adapt it either. However, in `MapUserAdapter.java`I can see there is actually no check at all when joining a group: https://github.com/keycloak/keycloak/blob/52488150917c5c7dd68e7eef7eab7c66275f0e49/model/map/src/main/java/org/keycloak/models/map/user/MapUserAdapter.java#L257-L259I am not sure this is really intended.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/13921,962815160,2022-09-05T11:45:10Z,server-spi-private/src/main/java/org/keycloak/userprofile/DefaultUserProfile.java,"@@ -115,6 +115,9 @@ private UserModel updateInternal(UserModel user, boolean removeAttributes, Attri                 List<String> updatedValue = attribute.getValue().stream().filter(Objects::nonNull).collect(Collectors.toList());                  if (!CollectionUtil.collectionEquals(currentValue, updatedValue)) {+                    if (!removeAttributes && updatedValue.isEmpty()) {",The behavior is the same when the declarative user profile is disabled. We don't want to update the value of attributes if the list is not provided.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/13183,962979009,2022-09-05T14:48:06Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/MapFieldPredicates.java,"@@ -306,6 +306,33 @@ private static MapModelCriteriaBuilder<Object, MapGroupEntity, GroupModel> check         return mcb.fieldCompare(Boolean.TRUE::equals, getter);     } +    private static MapModelCriteriaBuilder<Object, MapUserEntity, UserModel> usernameCaseInsensitive(MapModelCriteriaBuilder<Object, MapUserEntity, UserModel> mcb, Operator op, Object[] values) {+        if (values == null || values.length != 1) {+            throw new CriterionNotSupportedException(UserModel.SearchableFields.USERNAME_CASE_INSENSITIVE, op, ""Invalid arguments, expected (username), got: "" + Arrays.toString(values));+        }++        final Object ob = values[0];+        if (!String.class.isAssignableFrom(ob.getClass())) {+            throw new CriterionNotSupportedException(UserModel.SearchableFields.USERNAME_CASE_INSENSITIVE, op, ""Invalid arguments, expected (String), got: "" + Arrays.toString(values));+        }++        String value = (String) ob;+        Function<MapUserEntity, ?> getter;++        switch (op) {","Just out of curiosity, I can't decide whether this good or bad idea. Why do we restrict this SearchableField to `EQ` and `ILIKE` only? I know we don't use other at the moment. However, in future, if we open the MCB to the outside we can save some time if this method will already support all operators. For example,```javaprivate static MapModelCriteriaBuilder<Object, MapUserEntity, UserModel> usernameCaseInsensitive(MapModelCriteriaBuilder<Object, MapUserEntity, UserModel> mcb, Operator op, Object[] values) {    for (int i = 0; i < values.length; i++) {        if (values[i] instanceof String) {            values[i] = KeycloakModelUtils.toLowerCaseSafe((String) values[i]);        }    }    Predicate<Object> valueComparator = CriteriaOperator.predicateFor(op, values);    Function<MapUserEntity, ?> getter = ue -> valueComparator.test(KeycloakModelUtils.toLowerCaseSafe(ue.getUsername()));    return mcb.fieldCompare(Boolean.TRUE::equals, getter);}```btw. this ^ is the same as what is done for the `USERNAME` field but it changes everything it can to lowercase.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/7933,963297381,2022-09-06T06:24:05Z,services/src/main/java/org/keycloak/services/managers/RealmManager.java,"@@ -438,6 +438,8 @@ private void setupAccountManagement(RealmModel realm) {             RoleModel manageConsentRole = accountClient.addRole(AccountRoles.MANAGE_CONSENT);             manageConsentRole.setDescription(""${role_"" + AccountRoles.MANAGE_CONSENT + ""}"");             manageConsentRole.addCompositeRole(viewConsentRole);+            RoleModel viewGroups = accountClient.addRole(AccountRoles.VIEW_GROUPS);+            viewGroups.setDescription(""${role_"" + AccountRoles.VIEW_GROUPS + ""}"");",After L463https://github.com/keycloak/keycloak/blob/f30d12f9c0e3e8c674bc8d823111cbe65751191a/services/src/main/java/org/keycloak/services/managers/RealmManager.java#L462add:`accountConsoleClient.addScopeMapping(accountClient.getRole(AccountRoles.VIEW_GROUPS));`,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14202,963312100,2022-09-06T06:45:17Z,crypto/default/src/main/java/org/keycloak/crypto/def/DefaultCryptoProvider.java,"@@ -22,13 +22,14 @@  */ public class DefaultCryptoProvider implements CryptoProvider { -    private final BouncyCastleProvider bcProvider;+    private final Provider bcProvider;      private Map<String, Object> providers = new ConcurrentHashMap<>();      public DefaultCryptoProvider() {         // Make sure to instantiate this only once due it is expensive. And skip registration if already available in Java security providers (EG. due explicitly configured in java security file)-        BouncyCastleProvider existingBc = (BouncyCastleProvider) Security.getProvider(CryptoConstants.BC_PROVIDER_ID);+        Provider existingBc = Security.getProvider(CryptoConstants.BC_PROVIDER_ID);+        System.out.println(""Updating BC_Provider"");",Minor note: Is it possible to either remove this line with `System.out.println` or replace with `logger.trace` call? See for example class `KeycloakFipsSecurityProvider` (or many other classes of Keycloak project) on how to add jboss logging to some class.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/12501,963344480,2022-09-06T07:22:06Z,model/jpa/pom.xml,"@@ -127,6 +127,10 @@             <version>${jdbc.mvn.version}</version>             <scope>test</scope>         </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-model-legacy-private</artifactId>+        </dependency>",This seems to be duplicate from line 67. Please remove.,x
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/10568,963481262,2022-09-06T09:29:39Z,services/src/main/java/org/keycloak/services/resources/account/AccountConsole.java,"@@ -135,15 +135,39 @@ public Response getMainPage() throws IOException, FreeMarkerException {                          boolean isTotpConfigured = false;             boolean deleteAccountAllowed = false;+            boolean manageAccountAllowed = false;+            boolean manageAccountLinkAllowed = false;+            boolean manageConsentAllowed = false;+            boolean manageAccountBasicAuthAllowed = false;+            boolean manageAccount2faAllowed = false;+            boolean viewApplicationAllowed = false;             if (user != null) {                 isTotpConfigured = session.userCredentialManager().isConfiguredFor(realm, user, realm.getOTPPolicy().getType());                 RoleModel deleteAccountRole = realm.getClientByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).getRole(AccountRoles.DELETE_ACCOUNT);                 deleteAccountAllowed = deleteAccountRole != null && user.hasRole(deleteAccountRole) && realm.getRequiredActionProviderByAlias(DeleteAccount.PROVIDER_ID).isEnabled();+                RoleModel manageAccount = realm.getClientByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).getRole(AccountRoles.MANAGE_ACCOUNT);","Although I agree that this is best solution, I need Keycloak team help.getToken() function exists in 'themes/src/main/resources/theme/keycloak.v2/account/src/app/keycloak-service/keycloak.service.ts' for getting token. How can I use this function or something similar in index.ftl in order to hide some parts of themes/src/main/resources/theme/keycloak.v2/account/resources/content.json? For tsx files, I believe change can be implemented.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/10785,963487310,2022-09-06T09:35:34Z,model/jpa/src/main/java/org/keycloak/models/jpa/UserAdapter.java,"@@ -392,7 +392,7 @@ public long getGroupsCountByNameContaining(String search) {      @Override     public void joinGroup(GroupModel group) {-        if (isMemberOf(group)) return;+        if (getGroupsStream().anyMatch(g -> group.getId().equals(g.getId()))) return;","My bad, apologies. I marked wrong lines in the `MapUserAdapter` and you have correctly spotted that.I meant propagating it to the `MapUserAdapter.joinGroup()` method that you have referenced.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13974,963501113,2022-09-06T09:49:00Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmAdapter.java,"@@ -1478,8 +1478,9 @@ public Stream<GroupModel> getTopLevelGroupsStream(Integer first, Integer max) {     }      @Override+    @Deprecated","For all deprecated methods, Javadoc has to describe what is the to-be-used alternative. Please add respective Javadoc here and in all other relevant places, similarly to https://github.com/keycloak/keycloak/blob/f69497eb28ab6c6595a4a335607d03b0c7ba229d/server-spi/src/main/java/org/keycloak/models/RealmModel.java#L270-L273",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13974,963507924,2022-09-06T09:55:47Z,model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java,"@@ -934,10 +935,19 @@ public Map<String, ClientScopeModel> getClientScopes(RealmModel realm, ClientMod      @Override     public Stream<GroupModel> searchForGroupByNameStream(RealmModel realm, String search, Integer first, Integer max) {-        TypedQuery<String> query = em.createNamedQuery(""getGroupIdsByNameContaining"", String.class)-                .setParameter(""realm"", realm.getId())-                .setParameter(""search"", search);+        return searchForGroupByNameStream(realm, search, false, first, max);+    } +    @Override+    public Stream<GroupModel> searchForGroupByNameStream(RealmModel realm, String search, Boolean exact, Integer first, Integer max) {+        TypedQuery<String> query;+        if (BooleanUtils.isTrue(exact)) {","Please use explicit condition rather than the utility function, so that it is visible what is done when `exact == null`.```suggestion        if (exact == Boolean.TRUE) {```",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13974,963517120,2022-09-06T10:04:59Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/group/GroupTest.java,"@@ -1047,7 +1047,75 @@ public void getGroupsWithFullRepresentation() {         assertFalse(groups.isEmpty());         assertTrue(groups.get(0).getAttributes().containsKey(""attribute1""));     }-    +++    @Test+    public void searchGroupsByNameContaining() {+        RealmResource realm = adminClient.realms().realm(""test"");+        GroupsResource groupsResource = adminClient.realms().realm(""test"").groups();++        GroupRepresentation group1 = new GroupRepresentation();+        group1.setName(""group-name-1"");++        GroupRepresentation group2 = new GroupRepresentation();+        group2.setName(""group-name-2"");+++        Map<String, List<String>> attributes = new HashMap<String, List<String>>();+        group1 = createGroup(realm, group1);+        group2 = createGroup(realm, group2);++        List<GroupRepresentation> groups = groupsResource.groups(""group-name"", false, 0, 20, false);++        assertFalse(groups.isEmpty());+        assertEquals(2,groups.size());","Could you leverage `Creator.create(RealmResource, GroupRepresentation)` instead in the newly added tests to clean up after the test completes?Example:https://github.com/keycloak/keycloak/blob/fd5a423b551b9836bda44d47b38d7cd34f8d27c4/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java#L2883-L2894Also prefer `assertThat` to `assertFalse` / `assertEquals` - upon failure, the output providers information about the details of failed assertion, and it is also shorter:```java        assertThat(groups, Matchers.hasSize(2));```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/13869,963572161,2022-09-06T11:03:38Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDeployment.java,"@@ -152,6 +153,11 @@ public void validatePodTemplate(KeycloakStatusBuilder status) {             overlayTemplate.getSpec().getContainers().get(0).getImage() != null) {             status.addWarningMessage(""The image of the keycloak container cannot be modified using podTemplate"");         }++        if (overlayTemplate.getSpec() != null &&+                CollectionUtil.isNotEmpty(overlayTemplate.getSpec().getImagePullSecrets())) {+            status.addWarningMessage(""The imagePullSecrets of the keycloak container cannot be modified using podTemplate"");+        }","One last thing. :) Since we have now added this warning message, can you also please add a test for it? It should be   similar to this:https://github.com/keycloak/keycloak/blob/006aea300d7892fd60cf756535f25d2c325b3d1c/operator/src/test/java/org/keycloak/operator/testsuite/integration/PodTemplateTest.java#L158-L182",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13833,963600560,2022-09-06T11:36:38Z,server-spi-private/src/main/java/org/keycloak/models/utils/ModelToRepresentation.java,"@@ -1072,4 +1075,100 @@ public static PermissionTicketRepresentation toRepresentation(PermissionTicket t          return representation;     }++    public static ResourceServerRepresentation toRepresentation(KeycloakSession session, ClientModel client) {","Given the `toRepresentation` method name, the combination of the parameters types (client) and result (resource server) is confusing. The name of the method should reflect that it returns representation of the resource server, e.g. `toResourceServerRepresentation`.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13394,963615007,2022-09-06T12:00:38Z,services/src/main/java/org/keycloak/broker/oidc/mappers/AbstractClaimToGroupMapper.java,"@@ -67,22 +73,16 @@ public void updateBrokeredUser(KeycloakSession session, RealmModel realm, UserMo     protected abstract boolean applies(final IdentityProviderMapperModel mapperModel,             final BrokeredIdentityContext context); -    /**-     * Obtains the {@link GroupModel} corresponding the group configured in the specified-     * {@link IdentityProviderMapperModel}.-     * If the group doesn't exist, this method throws an {@link IdentityBrokerException}.-     *-     * @param realm a reference to the realm.-     * @param mapperModel a reference to the {@link IdentityProviderMapperModel} containing the configured group.-     * @return the {@link GroupModel}-     * @throws IdentityBrokerException if the group doesn't exist.-     */     private GroupModel getGroup(final RealmModel realm, final IdentityProviderMapperModel mapperModel) {-        GroupModel group = KeycloakModelUtils.findGroupByPath(realm, mapperModel.getConfig().get(ConfigConstants.GROUP));+        String groupPath = mapperModel.getConfig().get(ConfigConstants.GROUP);+        GroupModel group = KeycloakModelUtils.findGroupByPath(realm, groupPath);          if (group == null) {-            throw new IdentityBrokerException(""Unable to find group: "" + group.getId());+            LOG.warnf(""Unable to find group by path '%s' for mapper '%s' on realm '%s'."", mapperModel.getName(),","IMO it worth to create LOG inside the class `AbstractClaimToGroupMapper` rather then `AbstractClaimMapper` ? The reason is, that admin would see the warning from class `AbstractClaimMapper`, but he won't know which mapper it really is.",x
61104684,ehsantashkhisi,https://api.github.com/repos/keycloak/keycloak/pulls/14147,965802643,2022-09-08T10:46:22Z,services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java,"@@ -956,7 +960,7 @@ public static Response redirectAfterSuccessfulFlow(KeycloakSession session, Real             clientSession.setNote(SSO_AUTH, ""true"");             authSession.removeAuthNote(SSO_AUTH);         } else {-            int authTime = Time.currentTime();+            int authTime = Optional.ofNullable(authSession.getClientNote(AUTH_TIME_BROKER)).map(Integer::parseInt).orElse(Time.currentTime());             userSession.setNote(AUTH_TIME, String.valueOf(authTime));","Here when the `Pass Max Age` is enabled but `max_age` is not passed( this is especially the case when the user logout from Keycloak and log in again) the value for  `auth_time` will be updated, I think it should not happen, let's see how clients do the checks for sensitive action:```public boolean isSensitiveActionAllowed() {  long authTime = Optional.ofNullable(oidcHelper.getAuthTime()).orElse(0);  long now = Time.currentTime();  return now - authTime < sensitiveActionConfig.getSensitiveActionAllowedDuration();}public void sensitiveAction() {  if (isSensitiveActionAllowed())    // Do the sensitive action  else    // redirect the user for reauthentication and then retry this action.}```The literal description of this sample code:> When the user tries to do the sensitive action and the `auth_time` is not present in the token, or it is old, the client redirects the user for re-authentication, otherwise, they let the user do the sensitive action.Now imagine the `auth_time` is old and the user should not be able to do the sensitive action. But Instead of re-authentication, a hacker just logs out from the Keycloak, and logs in again(without going through the natural flow of re-authentication), when they log in again they will have updated `auth_time` and they can do the sensitive action.I understand that this is complex but if the user can do the sensitive action without reauthentication all this effort would be useless.The special case here is when `Pass Max Age` is ON and `max_age` is not passed.Solutions:* Not to pass `auth_time` to the client when the `Pass Max Age` is enabled and Keycloak does not know the authentication time in IDP(since the `max_age` param is not passed to Keycloak) it might not be backward compatible because Keycloak always passed `auth_time` in the token up to now(But protocol said that it is only required when `max_age` is passed)*  Return `0` for `auth_time` when Keycloak does not know authentication time in IDP(When `Pass Max Age` is ON and `max_age` is not passed)* Return the last `auth_time` that Keycloak received from the IDP(it was saved in the session the last time the user was authenticated with the `max_age` param), and when there was no `auth_time` in the session for the IDP, then it would be `0`.",x
3833769,sschu,https://api.github.com/repos/keycloak/keycloak/pulls/12501,965961893,2022-09-08T13:20:00Z,themes/src/main/resources/theme/base/admin/resources/partials/realm-events-config.html,"@@ -91,7 +91,18 @@ <h2>{{:: 'events-config' | translate}}</h2>                         <button class=""btn btn-danger"" type=""submit"" data-ng-click=""clearAdminEvents()"" >{{:: 'clear-admin-events' | translate}}</button>                     </div>                 </div>-                +                <div class=""form-group"" data-ng-show=""eventsConfig.adminEventsEnabled"">+                    <label class=""col-md-2 control-label"" for=""expiration"">{{:: 'expiration' | translate}}</label>+                    <kc-tooltip>{{:: 'events.expiration.tooltip' | translate}}</kc-tooltip>+                    <div class=""col-md-6 time-selector"">+                        <input class=""form-control"" type=""number"" data-ng-model=""realm.attributes.adminEventsExpiration"" id=""adminEventsExpiration"" name=""adminEventsExpiration"" min=""0""/>+                        <select class=""form-control"" name=""adminEventsExpirationUnit"" data-ng-model=""realm.attributes.adminEventsExpirationUnit"">","@edewit What kind of event config do you mean? The expiration config for user events is already a column on the REALM table. The configuration for admin events was implemented similarly, just using a realm attribute in order to not have a schema change.",
61104684,ehsantashkhisi,https://api.github.com/repos/keycloak/keycloak/pulls/14147,965987578,2022-09-08T13:42:21Z,services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java,"@@ -956,7 +960,7 @@ public static Response redirectAfterSuccessfulFlow(KeycloakSession session, Real             clientSession.setNote(SSO_AUTH, ""true"");             authSession.removeAuthNote(SSO_AUTH);         } else {-            int authTime = Time.currentTime();+            int authTime = Optional.ofNullable(authSession.getClientNote(AUTH_TIME_BROKER)).map(Integer::parseInt).orElse(Time.currentTime());             userSession.setNote(AUTH_TIME, String.valueOf(authTime));","First of all thanks for the effort in this PR, I thought about it for a long time and I know how complex it is.> You are assuming here that the account is compromised, right? If so, there are many other things like completely stealing the account.No, in this scenario, the account is not compromised. Just another malicious user uses our user device and does the sensitive action.  The goal of re-authentication is that the user who is doing the action has the `username` and `password` and thereby he is the identified user. if someone else is using the same device and do not have the username and password should not be able to do the sensitive action.Please Consider UserA as the owner of the account, and UserB as a malicious user who finds out that UserA is not at his desk and wants to use UserA device and UserA account to do some malicious action.Here is the scenario for reauthentication that is implemented in this PR.* UserA wants to do sensitive actions.* Client checks the `auth_time` and based on that redirects the user to Keycloak for reauthentication.* User clicks on the IDP button.* Keycloak redirects the user to IDP for reauthentication.* User provides its credential(Maybe username and password). * User will be redirected back to Keycloak * User will be redirected back to the client.* Client checks the `auth_time` and lets the sensitive action.Here is the scenario in which UserB gets at the UserA desk and wants to do some sensitive action, so considering this all the following actions are done with userA device and using userA session with Keycloak and upstream IDP.* UserB wants to do sensitive action.* Client checks the `auth_time` and redirects the user for re-authentication.* At this point, UserB logout from Keycloak(He only logs out from Keycloak, and he is still logged in upstream IDP like Azure AD).*  Then he login again to Keycloak.*  He clicks on IDP button. *  He will be redirected to IDP.* **IDP redirects userB back to Keycloak(Note that this time UserB does not need to provide userA credentials,  and  IDP does not ask for the username and password because the UserA session with upstream IDP is still open and the `max_age` param is not provided).***  Keycloak redirects back the user to the client with updated `auth_time`.*  UserB goes back to the sensitive action and does that action, this time he can do that action because he has updated `auth_time` from the client's perspective.> If it makes sense for you, I would keep the scope of this PR to only include the validation of auth_time and the latest change to propagate the time from the OP. We can then create a follow-up issue and discuss the requirements you are proposing.Yes, I agree that it can be done in another issue, I am also so curious to know others' ideas about this problem, or maybe Keycloak can provide another solution for re-authentication and this kind of requirement.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/14147,966108881,2022-09-08T15:24:10Z,services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java,"@@ -956,7 +960,7 @@ public static Response redirectAfterSuccessfulFlow(KeycloakSession session, Real             clientSession.setNote(SSO_AUTH, ""true"");             authSession.removeAuthNote(SSO_AUTH);         } else {-            int authTime = Time.currentTime();+            int authTime = Optional.ofNullable(authSession.getClientNote(AUTH_TIME_BROKER)).map(Integer::parseInt).orElse(Time.currentTime());             userSession.setNote(AUTH_TIME, String.valueOf(authTime));","Thanks. It is clear now the attack scenario you are considering.I'm not sure how others OPs deal with both `acr` and `amr` claims. This is also somewhat related to step-up. My point is, a `acr==0` might indicate that the authentication was done based on long-lived cookies and as such your client could deny the sensitive operation.I don't think max-age alone will solve this but perhaps a mix of checking `acr`, conditionally forcing `prompt=login`, etc.There is also the possibility to store tokens when doing brokering. We can also think about comparing the stored token with the new token issued by the OP.",
105500542,Redhat-Alice,https://api.github.com/repos/keycloak/keycloak/pulls/13974,966410070,2022-09-08T20:53:11Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java,"@@ -1024,8 +1024,14 @@ public Stream<GroupModel> getTopLevelGroupsStream(RealmModel realm, Integer firs     }      @Override+    @Deprecated     public Stream<GroupModel> searchForGroupByNameStream(RealmModel realm, String search, Integer first, Integer max) {-        return getGroupDelegate().searchForGroupByNameStream(realm, search, first, max);+        return searchForGroupByNameStream(realm, search, false, first, max);","I want to verify a couple of details here. I still need to have an implementation of the new, non-deprecated method which is being changed here. Is the suggestion to provide an implementation of both? I took the suggestions here the first time around and implemented it as the default for `GroupLookupProvider` instead, is this not adequate? ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13833,966673701,2022-09-09T06:36:36Z,services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java,"@@ -1074,8 +1075,22 @@ public RealmRepresentation partialExport(@QueryParam(""exportGroupsAndRoles"") Boo         // this means that if clients is true but groups/roles is false the service account is exported without roles         // the other option is just include service accounts if clientsExported && groupsAndRolesExported         ExportOptions options = new ExportOptions(false, clientsExported, groupsAndRolesExported, clientsExported);-        RealmRepresentation rep = ExportUtils.exportRealm(session, realm, options, false);-        return stripForExport(session, rep);++        ExportProvider exportProvider = session.getProvider(ExportProvider.class);","The latest commit moves adds the functionality to the ExportImportManager. To support the JSON export, the necessary code from ExportUtils has been duplicated in MapExportImportManager, as ExportUtils is not accessible from the map storage.If we don't want to duplicate the code, it could be part of `ModelToRepresentation`.A future MapExportImportManager could allow different map storages with different implementations. ",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/13833,966716012,2022-09-09T07:25:34Z,services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java,"@@ -1074,8 +1075,22 @@ public RealmRepresentation partialExport(@QueryParam(""exportGroupsAndRoles"") Boo         // this means that if clients is true but groups/roles is false the service account is exported without roles         // the other option is just include service accounts if clientsExported && groupsAndRolesExported         ExportOptions options = new ExportOptions(false, clientsExported, groupsAndRolesExported, clientsExported);-        RealmRepresentation rep = ExportUtils.exportRealm(session, realm, options, false);-        return stripForExport(session, rep);++        ExportProvider exportProvider = session.getProvider(ExportProvider.class);","Ok, removed it from the code of MapExportImportManager. Once I tried to move over the interface ExportImportManager to org.keycloak.exportimport, it clashes with a class of the same name in the services module in that package. That class will need to be refactored eventually in relation to the new store, and I then postponed the move until we do that. Now everything should compile, and manual test did run OK for the legacy store, and I'll now look at the tests. ",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/14275,967044050,2022-09-09T12:59:07Z,model/map-jpa/src/main/resources/META-INF/auth-sessions/jpa-auth-sessions-changelog-1.xml,"@@ -67,4 +67,13 @@ limitations under the License.         </ext:createJsonIndex>     </changeSet> +    <changeSet author=""keycloak"" id=""auth-sessions-14161"">",Some of our changelogs (e.g. clients) have a comment that reads `    <!-- format of id of changeSet: clients-${org.keycloak.models.map.storage.jpa.Constants.CURRENT_SCHEMA_VERSION_CLIENT} --> `And this is not exactly following that pattern. Should we remove the comments from the other changelogs and use the issue numbers instead on every new changeset?,x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14147,967069301,2022-09-09T13:25:02Z,services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java,"@@ -956,7 +960,7 @@ public static Response redirectAfterSuccessfulFlow(KeycloakSession session, Real             clientSession.setNote(SSO_AUTH, ""true"");             authSession.removeAuthNote(SSO_AUTH);         } else {-            int authTime = Time.currentTime();+            int authTime = Optional.ofNullable(authSession.getClientNote(AUTH_TIME_BROKER)).map(Integer::parseInt).orElse(Time.currentTime());             userSession.setNote(AUTH_TIME, String.valueOf(authTime));","I agree that it is a complex problem and we can possibly address as a follow-up.In general, it seems non-trivial to decide what should be proper `auth_time` sent to the client. It is quite clear that in case Keycloak shows interactive screens to the user during auth (EG. username/password, TOTP, WebAuthn), the `auth_time` should be updated. But it is not clear if/how it should be set in case of non-interactive authenticators like Kerberos or X509. And for brokering, where Keycloak delegates authentication to IDP, it is also not clear.I wonder that we can possibly have `auth_time` protocol mapper? This will allow to configure if:- The `auth_time` should be set just if interactive authentication was triggered (It is possible to detect interactive authenticators as the authenticators like Password, OTP or WebAuthn implements `CredentialValidator` interface. And the info about authenticators used in finished authentication flow is saved in the authenticationSession)- The `auth_time` should be set by any authenticator (with the exception of SSO Cookie authenticator)- The `auth_time` should be set based on some note from authentication session. So the note can be set by the IDP (like done in this PR) or by some authenticator (or by authentication policy in the future)- Maybe more options (or combinations of the options above).This may allow to set that for example if authentication happened through Kerberos OR if authentication happened through IDP and IDP did not returned `auth_time`, then the `auth_time` should not be sent at all in the ID Token etc.Until we have, I am not sure if we should skip sending `auth_time` to client (or set `auth_time` to 0). So I will likely rather keep as it is in this PR.So +1 to discuss as a follow-up.",x
61745358,lhanusov,https://api.github.com/repos/keycloak/keycloak/pulls/7871,967075049,2022-09-09T13:30:25Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java,"@@ -23,6 +23,7 @@ import org.junit.Test; import org.keycloak.admin.client.resource.ClientResource; import org.keycloak.admin.client.resource.ClientScopeResource;+import org.keycloak.admin.client.resource.GroupResource;","@jurjanpaul please, can you remove this unused import, besides that tests are clearly described and pass without any issue.",x
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/10568,967408709,2022-09-09T19:41:13Z,services/src/main/java/org/keycloak/services/resources/account/AccountConsole.java,"@@ -135,15 +135,39 @@ public Response getMainPage() throws IOException, FreeMarkerException {                          boolean isTotpConfigured = false;             boolean deleteAccountAllowed = false;+            boolean manageAccountAllowed = false;+            boolean manageAccountLinkAllowed = false;+            boolean manageConsentAllowed = false;+            boolean manageAccountBasicAuthAllowed = false;+            boolean manageAccount2faAllowed = false;+            boolean viewApplicationAllowed = false;             if (user != null) {                 isTotpConfigured = session.userCredentialManager().isConfiguredFor(realm, user, realm.getOTPPolicy().getType());                 RoleModel deleteAccountRole = realm.getClientByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).getRole(AccountRoles.DELETE_ACCOUNT);                 deleteAccountAllowed = deleteAccountRole != null && user.hasRole(deleteAccountRole) && realm.getRequiredActionProviderByAlias(DeleteAccount.PROVIDER_ID).isEnabled();+                RoleModel manageAccount = realm.getClientByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).getRole(AccountRoles.MANAGE_ACCOUNT);","@cgeorgilakis As you know, there is a ""hidden"" attribute on each ContentItem in content.json.When the account console starts up, the value of that attribute is evaluated as javascript.  So you should be able to call out to a function that reads the token from there.  As long as your function returns a boolean value `true`, the ContentItem will be hidden.",
105500542,Redhat-Alice,https://api.github.com/repos/keycloak/keycloak/pulls/13974,967452732,2022-09-09T20:41:05Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/group/GroupTest.java,"@@ -1047,7 +1047,75 @@ public void getGroupsWithFullRepresentation() {         assertFalse(groups.isEmpty());         assertTrue(groups.get(0).getAttributes().containsKey(""attribute1""));     }-    +++    @Test+    public void searchGroupsByNameContaining() {+        RealmResource realm = adminClient.realms().realm(""test"");+        GroupsResource groupsResource = adminClient.realms().realm(""test"").groups();++        GroupRepresentation group1 = new GroupRepresentation();+        group1.setName(""group-name-1"");++        GroupRepresentation group2 = new GroupRepresentation();+        group2.setName(""group-name-2"");+++        Map<String, List<String>> attributes = new HashMap<String, List<String>>();+        group1 = createGroup(realm, group1);+        group2 = createGroup(realm, group2);++        List<GroupRepresentation> groups = groupsResource.groups(""group-name"", false, 0, 20, false);++        assertFalse(groups.isEmpty());+        assertEquals(2,groups.size());","I have no problem with moving over to assertThat, though I do want to remark that it is deprecated before doing so ",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13974,967869508,2022-09-11T18:31:24Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/group/GroupTest.java,"@@ -1047,7 +1047,75 @@ public void getGroupsWithFullRepresentation() {         assertFalse(groups.isEmpty());         assertTrue(groups.get(0).getAttributes().containsKey(""attribute1""));     }-    +++    @Test+    public void searchGroupsByNameContaining() {+        RealmResource realm = adminClient.realms().realm(""test"");+        GroupsResource groupsResource = adminClient.realms().realm(""test"").groups();++        GroupRepresentation group1 = new GroupRepresentation();+        group1.setName(""group-name-1"");++        GroupRepresentation group2 = new GroupRepresentation();+        group2.setName(""group-name-2"");+++        Map<String, List<String>> attributes = new HashMap<String, List<String>>();+        group1 = createGroup(realm, group1);+        group2 = createGroup(realm, group2);++        List<GroupRepresentation> groups = groupsResource.groups(""group-name"", false, 0, 20, false);++        assertFalse(groups.isEmpty());+        assertEquals(2,groups.size());",`assertThat` is still the preferred way for assertions.`org.hamcrest.MatcherAssert.assertThat` supersedes `org.junit.Assert.assertThat`. Feel free to keep it as is or fix the import along the way.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13974,967872165,2022-09-11T18:49:36Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java,"@@ -1024,8 +1024,14 @@ public Stream<GroupModel> getTopLevelGroupsStream(RealmModel realm, Integer firs     }      @Override+    @Deprecated     public Stream<GroupModel> searchForGroupByNameStream(RealmModel realm, String search, Integer first, Integer max) {-        return getGroupDelegate().searchForGroupByNameStream(realm, search, first, max);+        return searchForGroupByNameStream(realm, search, false, first, max);","> I took the suggestions here the first time around and implemented it as the default for `GroupLookupProvider` instead, is this not adequate?This is exactly where it belongs. Thanks",
11198630,danielFesenmeyer,https://api.github.com/repos/keycloak/keycloak/pulls/13050,968258270,2022-09-12T10:41:53Z,services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java,"@@ -990,6 +990,14 @@ private void updateFederatedIdentity(BrokeredIdentityContext context, UserModel          if (context.getIdpConfig().getSyncMode() == IdentityProviderSyncMode.FORCE) {             setBasicUserAttributes(context, federatedUser);++            if (!Objects.equals(context.getUsername(), federatedIdentityModel.getUserName())) {","@pedroigor: As I understand, a check for the subject is not necessary here, because it is used to find the federated identity after IDP authentication (context.getId() is equal to subject in case of OIDC): https://github.com/keycloak/keycloak/blob/8d5c11a4a551a5267bac4942da8d21e2867bd98c/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java#L526...https://github.com/keycloak/keycloak/blob/8d5c11a4a551a5267bac4942da8d21e2867bd98c/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java#L534...https://github.com/keycloak/keycloak/blob/f69497eb28ab6c6595a4a335607d03b0c7ba229d/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java#L552So the method IdentityBrokerService#updateFederatedIdentity(...) will not be called in case the subject changed.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/7890,968724153,2022-09-12T17:42:17Z,server-spi-private/src/main/java/org/keycloak/broker/provider/util/SimpleHttp.java,"@@ -129,6 +126,14 @@ public static SimpleHttp doPatch(String url, HttpClient client) {         return new SimpleHttp(url, ""PATCH"", client);     } +    public String method() {","+1I see that you are using methods like `method()`, `url()` and `parameters()` just for the logging. So how about overriding method `toString()` on `SimpleHttp` instead?",
6528869,vilmosnagy,https://api.github.com/repos/keycloak/keycloak/pulls/14174,968830620,2022-09-12T19:09:42Z,services/src/main/java/org/keycloak/forms/login/freemarker/LoginFormsUtil.java,"@@ -63,6 +63,7 @@ public static List<IdentityProviderModel> filterIdentityProviders(Stream<Identit             return providers                     .filter(p -> { // Filter current IDP during first-broker-login flow. Re-authentication with the ""linked"" broker should not be possible                         if (existingIdp == null) return true;+                        if (context.getUser() == null) return true;",">  Are you sure when you get the review profile step the user is not yet created / authenticated ? In this case, how does keycloak knows which user is modifying their profileYeah, I'm pretty sure about that. You can test on a keycloak instance, that no user is created if you press the back button on the review page.No user can be created, 'cause there's a step for that it the First Broker Login flow:![image](https://user-images.githubusercontent.com/6528869/189731845-cd85101a-ca8f-4133-941d-d88a1fd3f586.png)The user is created in the _create user if unique_ authenticator. (See the code here: [IdpCreateUserIfUniqueAuthenticator::75](https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpCreateUserIfUniqueAuthenticator.java#L75)) And no user is created when there's a duplication AND the duplicated users are forbidden in the realm settings.> - making the Review profile step after the user creating/linking => which is the natural order of things> - making the review profile Update profile on first login value to missing instead of on.I think you cannot do that. Consider the following example: given User John Doe with the following accounts: - Facebook, where he uses his childhood's email address: jhonny9310@aol.net - Google, where he has a more formal e-mail address: john.doe@gmail.com - And he has an Apple account, where he has the private relay setting on, so the e-mail address Apple gives to keycloak is a randomly generated string He registered with his Google account months ago, and when he next visits our site he does not remember which IDP he used. He clicks on the Apple login (he opened the site from an iPhone, so Apple login is a convenient one). Keycloak presents him the following info: - this IDP is not yet linked with an account - and he can review the e-mail address he'd like to useSo John has the ability to change the e-mail address to his main one: john.doe@gmail.com And from there Keycloak takes care of merging his Apple ID to the pre-existing account. I'm pretty sure this is the expected behavior from the Keycloak team (see the flow, there are multiple verification options, and stuff). - If I'd change the First broker login flow in my installation (eg: move the review step after the user creation), then I'd be divert from upstream AND lose this merging functionality - If I'd make this change in the upstream keycloak, then the upstream keycloak lose this merging functionality   - Or if we'd take care of the merging, we'd introduce a lot of fake user creation. There'd be created a user for the apple account in the previous example, AND we should merge the two accounts when John changes the email address in one of the accounts... But what should we do if he changes the e-mail address minutes/months after the registration? What should our clients do? Should _all_ Keycloak clients prepare for merged users?Imagine a subscription website which uses Keycloak as the authentication. Should this website merge the users' subscriptions after the users had been merged? Who takes care of the refunds, and so on... Huge mess.I'm pretty sure that we (the Keycloak team and myself) do not want to change how the First Broker login flow works.And I'm pretty sure it's a bug, even if it's a small one, that the IDP button disappears sometimes.I've tested it: this change fixes this bug, the only thing I'm not sure of, whether there are security issues with it or not. I'm not _THAT_ familiar with OAuth & Keycloak yet.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/14372,969716863,2022-09-13T14:38:48Z,services/src/main/java/org/keycloak/theme/DefaultThemeSelectorProvider.java,"@@ -50,9 +48,9 @@ public String getThemeName(Theme.Type type) {          if (name == null || name.isEmpty()) {             name = Config.scope(""theme"").get(""default"", Version.NAME.toLowerCase());-            if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {+            if ((type == Theme.Type.ACCOUNT) && Profile.isFeatureEnabled(Profile.Feature.ACCOUNT2)) {                 name = name.concat("".v2"");-            } else if ((type == Theme.Type.ADMIN) && isAdmin2Enabled) {+            } else if ((type == Theme.Type.ADMIN) && Profile.isFeatureEnabled(Profile.Feature.ADMIN2)) {","This is necessary for Undertow as it shares the same JVM with tests and the static fields previously were not re-instantiated on server restart (or enabling/disabling features).Although updating server code to fix tests is not ideal, I believe this change actually aligns the use of `Profile.isFeatureEnabled()` with other parts of Keycloak – we usually don't store the result in a constant.",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/14243,970662525,2022-09-14T11:06:15Z,.github/workflows/ci.yml,"@@ -90,6 +90,50 @@ jobs:           path: reports-unit-tests.zip           if-no-files-found: ignore +  crypto-tests:+    name: Crypto Tests+    runs-on: ubuntu-latest+    needs: build+    steps:+      - uses: actions/checkout@v3+      - uses: actions/setup-java@v3+        with:+          distribution: 'temurin'+          java-version: ${{ env.DEFAULT_JDK_VERSION }}+          cache: 'maven'+      - name: Update maven settings+        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/+      - name: Cleanup org.keycloak artifacts+        run: rm -rf ~/.m2/repository/org/keycloak >/dev/null || true+      - name: Download built keycloak+        id: download-keycloak+        uses: actions/download-artifact@v3+        with:+          path: ~/.m2/repository/org/keycloak/+          name: keycloak-artifacts.zip+      - name: Run crypto tests (BCFIPS non-approved mode)","@mposolda Great! Just nitpick regards optimization.Is it possible to use the matrix for the approved/non-approved mode in order to execute those tests in parallel? For instance, the base testsuite uses that.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14243,970754866,2022-09-14T12:40:26Z,.github/workflows/ci.yml,"@@ -90,6 +90,50 @@ jobs:           path: reports-unit-tests.zip           if-no-files-found: ignore +  crypto-tests:+    name: Crypto Tests+    runs-on: ubuntu-latest+    needs: build+    steps:+      - uses: actions/checkout@v3+      - uses: actions/setup-java@v3+        with:+          distribution: 'temurin'+          java-version: ${{ env.DEFAULT_JDK_VERSION }}+          cache: 'maven'+      - name: Update maven settings+        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/+      - name: Cleanup org.keycloak artifacts+        run: rm -rf ~/.m2/repository/org/keycloak >/dev/null || true+      - name: Download built keycloak+        id: download-keycloak+        uses: actions/download-artifact@v3+        with:+          path: ~/.m2/repository/org/keycloak/+          name: keycloak-artifacts.zip+      - name: Run crypto tests (BCFIPS non-approved mode)","@mabartos Thanks for the feedback. I am aware of the matrix, but in this case it looked to me like unnecessary overhead as the unit tests itself are very fast to run (usually 10-15 seconds) and hence the matrix will be rather overhead due the pre-steps (like ""Download built Keycloak""), which themselves need to be run for each part of the matrix independently.Maybe we can consider add matrix later if the unit tests grow to the level when they take more significant time to run, however not sure if it happens for the ""crypto"" modules. WDYT?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13068,970935936,2022-09-14T15:00:10Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/ClaimsParameterWithValueIdTokenMapper.java,"@@ -0,0 +1,149 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.protocol.oidc.mappers;++import java.io.IOException;+import java.util.ArrayList;+import java.util.HashMap;+import java.util.List;+import java.util.Map;++import org.keycloak.OAuth2Constants;+import org.keycloak.models.ClientSessionContext;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ProtocolMapperModel;+import org.keycloak.models.UserSessionModel;+import org.keycloak.protocol.oidc.OIDCLoginProtocol;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.representations.IDToken;+import org.keycloak.util.JsonSerialization;+import org.keycloak.util.TokenUtil;++import com.fasterxml.jackson.databind.JsonNode;++/**+ * @author <a href=""mailto:takashi.norimatsu.ws@hitachi.com"">Takashi Norimatsu</a>+ */+public class ClaimsParameterWithValueIdTokenMapper extends AbstractOIDCProtocolMapper implements OIDCIDTokenMapper {++    public static final String PROVIDER_ID = ""oidc-claims-param-value-idtoken-mapper"";++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String CLAIM_VALUE = ""claim.value"";++    static {+        ProviderConfigProperty property = new ProviderConfigProperty();+        property.setName(CLAIM_VALUE);+        property.setLabel(""Claim value"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        property.setHelpText(""Value of the claim you want to set. 'true' and 'false can be used for boolean values."");+        configProperties.add(property);++        OIDCAttributeMapperHelper.addIncludeInTokensConfig(configProperties, ClaimsParameterWithValueIdTokenMapper.class);+    }++    @Override+    public String getDisplayCategory() {+        return TOKEN_MAPPER_CATEGORY;+    }++    @Override+    public String getDisplayType() {+        return ""Claims parameter with value ID Token"";+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String getHelpText() {+        return ""Claims specified by Claims parameter with value are put into an ID token."";+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    protected void setClaim(IDToken token, ProtocolMapperModel mappingModel, UserSessionModel userSession, KeycloakSession keycloakSession, ClientSessionContext clientSessionCtx) {+        String claims = clientSessionCtx.getClientSession().getNote(OIDCLoginProtocol.CLAIMS_PARAM);+        if (claims == null) return;++        if (TokenUtil.TOKEN_TYPE_ID.equals(token.getType())) {+            putClaims(OAuth2Constants.ID_TOKEN, claims, token, mappingModel, userSession);+        }+    }++    private void putClaims(String tokenType, String claims, IDToken token, ProtocolMapperModel mappingModel, UserSessionModel userSession) {+        String attributeValue = mappingModel.getConfig().get(CLAIM_VALUE);+        if (attributeValue == null) return;++        JsonNode requestParams = null;++        try {+            requestParams = JsonSerialization.readValue(claims, JsonNode.class);","We have class `ClaimsRepresentation` . It provides some help for parsing claims parameter. Maybe it can be used to simplify a code below and avoid so much manual ""JSON parsing"" ?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13068,970942669,2022-09-14T15:05:10Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/ClaimsParameterWithValueIdTokenMapper.java,"@@ -0,0 +1,149 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.protocol.oidc.mappers;++import java.io.IOException;+import java.util.ArrayList;+import java.util.HashMap;+import java.util.List;+import java.util.Map;++import org.keycloak.OAuth2Constants;+import org.keycloak.models.ClientSessionContext;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ProtocolMapperModel;+import org.keycloak.models.UserSessionModel;+import org.keycloak.protocol.oidc.OIDCLoginProtocol;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.representations.IDToken;+import org.keycloak.util.JsonSerialization;+import org.keycloak.util.TokenUtil;++import com.fasterxml.jackson.databind.JsonNode;++/**+ * @author <a href=""mailto:takashi.norimatsu.ws@hitachi.com"">Takashi Norimatsu</a>+ */+public class ClaimsParameterWithValueIdTokenMapper extends AbstractOIDCProtocolMapper implements OIDCIDTokenMapper {++    public static final String PROVIDER_ID = ""oidc-claims-param-value-idtoken-mapper"";++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String CLAIM_VALUE = ""claim.value"";++    static {+        ProviderConfigProperty property = new ProviderConfigProperty();+        property.setName(CLAIM_VALUE);+        property.setLabel(""Claim value"");","Is it  really `Claim value`? Is not it rather `Claim name` as the name of the claim, which you are trying to find inside the `claims` parameter in the `id_token` section?The similar applies for the help text as well IMO.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13068,970980337,2022-09-14T15:32:10Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPoliciesTest.java,"@@ -2994,6 +3011,125 @@ public void whenUpdateDynamicClientDuringRemainingExpirationPeriodMustRotateSecr      } +    @Test+    public void testIntentClientBindCheck() throws Exception {+        final String intentName = ""openbanking_intent_id"";++        // register profiles+        String json = (new ClientProfilesBuilder()).addProfile(+                (new ClientProfileBuilder()).createProfile(PROFILE_NAME, ""Het Eerste Profiel"")+                        .addExecutor(IntentClientBindCheckExecutorFactory.PROVIDER_ID,+                                createIntentClientBindCheckExecutorConfig(intentName, TestApplicationResourceUrls.checkIntentClientBoundUri()))+                        .toRepresentation()+        ).toString();+        updateProfiles(json);++        // register policies+        json = (new ClientPoliciesBuilder()).addPolicy(+                (new ClientPolicyBuilder()).createPolicy(POLICY_NAME, ""Het Eerste Beleid"", Boolean.TRUE)+                        .addCondition(ClientScopesConditionFactory.PROVIDER_ID,+                                createClientScopesConditionConfig(ClientScopesConditionFactory.OPTIONAL, Arrays.asList(""microprofile-jwt"")))+                        .addProfile(PROFILE_NAME)+                        .toRepresentation()+        ).toString();+        updatePolicies(json);++        // create a client+        String clientId = generateSuffixedName(CLIENT_NAME);+        String clientSecret = ""secret"";+        createClientByAdmin(clientId, (ClientRepresentation clientRep) -> {+            clientRep.setSecret(clientSecret);+            clientRep.setStandardFlowEnabled(Boolean.TRUE);+            clientRep.setImplicitFlowEnabled(Boolean.TRUE);+        });+        ClientResource app = findClientResourceByClientId(adminClient.realm(""test""), clientId);+        ProtocolMappersResource res = app.getProtocolMappers();+        res.createMapper(ModelToRepresentation.toRepresentation(ClaimsParameterWithValueIdTokenMapper.createMapper(""claimsParameterWithValueIdTokenMapper"", ""openbanking_intent_id"", true))).close();++        // register a binding of an intent with different client+        String intentId = ""123abc456xyz"";+        String differentClientId = ""test-app"";+        Response r = testingClient.testApp().oidcClientEndpoints().bindIntentWithClient(intentId, differentClientId);+        assertEquals(204, r.getStatus());++        // create a request object with claims+        String nonce = ""naodfejawi37d"";+        Map<String, Object> claim = new HashMap<>();","As pointed above, it can be useful for re-use the `ClaimsRepresentation` class. Maybe it is useful to add some util method to the `ClaimsRepresentation` class like `public void setClaimValue(String claimName, Object claimValue, ClaimContext ctx)` or something like that?",
13701445,dteleguin,https://api.github.com/repos/keycloak/keycloak/pulls/14237,972173743,2022-09-15T16:03:53Z,services/src/main/java/org/keycloak/utils/OAuth2Error.java,"@@ -0,0 +1,305 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.utils;++import java.lang.reflect.Constructor;+import java.lang.reflect.InvocationTargetException;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashMap;+import java.util.LinkedHashMap;+import java.util.List;+import java.util.Map;+import java.util.Optional;+import java.util.function.BiConsumer;+import java.util.stream.Collectors;+import javax.ws.rs.BadRequestException;+import javax.ws.rs.ForbiddenException;+import javax.ws.rs.InternalServerErrorException;+import javax.ws.rs.NotAuthorizedException;+import javax.ws.rs.WebApplicationException;+import javax.ws.rs.core.Response;++import org.keycloak.OAuthErrorException;+import org.keycloak.models.RealmModel;+import org.keycloak.representations.idm.OAuth2ErrorRepresentation;+import org.keycloak.services.resources.Cors;++import static javax.ws.rs.core.HttpHeaders.WWW_AUTHENTICATE;++/**+ * @author <a href=""mailto:dmitryt@backbase.com"">Dmitry Telegin</a>+ */+public class OAuth2Error {++    private static final Map<Response.Status, Class<? extends WebApplicationException>> STATUS_MAP = new HashMap<>();++    private RealmModel realm;+    private String error;+    private String errorDescription;+    private Optional<Cors> cors = Optional.empty();++    private Class<? extends WebApplicationException> clazz;+    private Response.Status status;+    private boolean json = true;++    static {+        STATUS_MAP.put(Response.Status.BAD_REQUEST, BadRequestException.class);+        STATUS_MAP.put(Response.Status.UNAUTHORIZED, NotAuthorizedException.class);+        STATUS_MAP.put(Response.Status.FORBIDDEN, ForbiddenException.class);+        STATUS_MAP.put(Response.Status.INTERNAL_SERVER_ERROR, InternalServerErrorException.class);+    }++    public OAuth2Error realm(RealmModel realm) {+        this.realm = realm;+        return this;+    }++    public OAuth2Error error(String error) {++        this.error = error;++        switch (error) {+            case OAuthErrorException.INVALID_GRANT:+            case OAuthErrorException.INVALID_REQUEST:+            case OAuthErrorException.UNAUTHORIZED_CLIENT:","For `TokenEndpoint`, the use of `401 Unauthorized` in combination with `unauthorized_client` is non-standard (please see OAuth 2.0 spec [section 5.2](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2)). The valid combinations defined by the standard are `401 Unauthorized` + `error=""invalid_client""` and `400 Bad Request` + `error=""unauthorized_client""`. I think for the new code we should better stick to the standard behavior. OTOH, even if you want to emulate a legacy behavior with `OAuth2Error`, you can override HTTP code using builder API:```java  throw new OAuth2Error().error(OAuthErrorException.UNAUTHORIZED_CLIENT).status(Response.Status.UNAUTHORIZED).build();```As for `AuthorizationEndpointChecker` and PAR, things get a bit more complicated. The spec [says](https://datatracker.ietf.org/doc/html/rfc9126#section-2.3) that PAR endpoint should use TokenEndpoint semantics (JSON error response) and Authorization endpoint error codes (OAuth2 spec [section 4.1.2.1](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2.1). I assume that the corresponding HTTP code should be taken from the section 5.2 as well (if there is a match), which means it should be `400 Bad Request` here as well, not `401 Unauthorized`. WDYT?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/13068,972780107,2022-09-16T08:47:03Z,services/src/main/java/org/keycloak/services/clientpolicy/executor/IntentClientBindCheckExecutor.java,"@@ -0,0 +1,220 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.clientpolicy.executor;++import java.io.IOException;+import java.io.Serializable;+import java.util.Optional;++import javax.ws.rs.core.HttpHeaders;+import javax.ws.rs.core.MediaType;++import org.jboss.logging.Logger;+import org.keycloak.OAuthErrorException;+import org.keycloak.broker.provider.util.SimpleHttp;+import org.keycloak.models.ClientModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.protocol.oidc.endpoints.request.AuthorizationEndpointRequest;+import org.keycloak.representations.ClaimsRepresentation;+import org.keycloak.representations.idm.ClientPolicyExecutorConfigurationRepresentation;+import org.keycloak.services.clientpolicy.ClientPolicyContext;+import org.keycloak.services.clientpolicy.ClientPolicyException;+import org.keycloak.services.clientpolicy.context.AuthorizationRequestContext;+import org.keycloak.util.JsonSerialization;++import com.fasterxml.jackson.annotation.JsonProperty;++/**+ * @author <a href=""mailto:takashi.norimatsu.ws@hitachi.com"">Takashi Norimatsu</a>+ */+public class IntentClientBindCheckExecutor implements ClientPolicyExecutorProvider<IntentClientBindCheckExecutor.Configuration> {++    private static final Logger logger = Logger.getLogger(IntentClientBindCheckExecutor.class);++    private final KeycloakSession session;+    private Configuration configuration;++    public IntentClientBindCheckExecutor(KeycloakSession session) {+        this.session = session;+    }++    @Override+    public String getProviderId() {+        return IntentClientBindCheckExecutorFactory.PROVIDER_ID;+    }++    @Override+    public void setupConfiguration(IntentClientBindCheckExecutor.Configuration config) {+        this.configuration = Optional.ofNullable(config).orElse(createDefaultConfiguration());+    }++    @Override+    public Class<Configuration> getExecutorConfigurationClass() {+        return Configuration.class;+    }++    public static class Configuration extends ClientPolicyExecutorConfigurationRepresentation {++        @JsonProperty(""intent-client-bind-check-endpoint"")+        protected String intentClientBindCheckEndpoint;++        @JsonProperty(""intent-name"")+        protected String intentName;++        public String getIntentClientBindCheckEndpoint() {+            return intentClientBindCheckEndpoint;+        }++        public void setIntentClientBindCheckEndpoint(String intentClientBindCheckEndpoint) {+            this.intentClientBindCheckEndpoint = intentClientBindCheckEndpoint;+        }++        public String getIntentName() {+            return intentName;+        }++        public void setIntentName(String intentName) {+            this.intentName = intentName;+        }+    }++    @Override+    public void executeOnEvent(ClientPolicyContext context) throws ClientPolicyException {+        switch (context.getEvent()) {+        case AUTHORIZATION_REQUEST:+            checkIntentClientBind((AuthorizationRequestContext)context);+            break;+        default:+            return;+        }+    }++    private Configuration createDefaultConfiguration() {+        Configuration conf = new Configuration();+        return conf;+    }++    private void checkIntentClientBind(AuthorizationRequestContext context) throws ClientPolicyException {+        if (!isValidIntentClientBindCheckEndpoint()) {+            throw new ClientPolicyException(OAuthErrorException.SERVER_ERROR, ""invalid Intent Client Bind Check Endpoint setting"");+        }+        ClientModel client = session.getContext().getClient();+        String clientId = client.getClientId();+        String intentId = retrieveIntentId(context.getAuthorizationEndpointRequest());+        IntentBindCheckRequest request = new IntentBindCheckRequest();+        request.setClientId(clientId);+        request.setIntentId(intentId);+        SimpleHttp simpleHttp = SimpleHttp.doPost(configuration.getIntentClientBindCheckEndpoint(), session)+                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)+                .json(request);+        IntentBindCheckResponse response = null;+        try {+            response = simpleHttp.asJson(IntentBindCheckResponse.class);+        } catch (IOException e) {+            logger.warnv(""HTTP connection failure: {0}"", e.getMessage());","Is it possible to rather log whole stacktrace instead of just message? So also include `e` as second parameter to `warnv`? Again, it can be useful for debugging purposes (Exception message is good, but may not be that sufficient for all cases (especially if the real cause is some nested exception etc).",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/13068,973552225,2022-09-17T07:12:35Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/ClaimsParameterWithValueIdTokenMapper.java,"@@ -0,0 +1,136 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.protocol.oidc.mappers;++import java.io.IOException;+import java.util.ArrayList;+import java.util.HashMap;+import java.util.List;+import java.util.Map;++import org.keycloak.models.ClientSessionContext;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ProtocolMapperModel;+import org.keycloak.models.UserSessionModel;+import org.keycloak.protocol.oidc.OIDCLoginProtocol;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.representations.ClaimsRepresentation;+import org.keycloak.representations.IDToken;+import org.keycloak.util.JsonSerialization;+import org.keycloak.util.TokenUtil;++/**+ * @author <a href=""mailto:takashi.norimatsu.ws@hitachi.com"">Takashi Norimatsu</a>+ */+public class ClaimsParameterWithValueIdTokenMapper extends AbstractOIDCProtocolMapper implements OIDCIDTokenMapper {++    public static final String PROVIDER_ID = ""oidc-claims-param-value-idtoken-mapper"";++    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    public static final String CLAIM_NAME = ""claim.name"";++    static {+        ProviderConfigProperty property = new ProviderConfigProperty();+        property.setName(CLAIM_NAME);+        property.setLabel(""Claim name"");+        property.setType(ProviderConfigProperty.STRING_TYPE);+        property.setHelpText(""Name of the claim you want to set its value. 'true' and 'false can be used for boolean values."");+        configProperties.add(property);++        OIDCAttributeMapperHelper.addIncludeInTokensConfig(configProperties, ClaimsParameterWithValueIdTokenMapper.class);+    }++    @Override+    public String getDisplayCategory() {+        return TOKEN_MAPPER_CATEGORY;+    }++    @Override+    public String getDisplayType() {+        return ""Claims parameter with value ID Token"";+    }++    @Override+    public String getId() {+        return PROVIDER_ID;+    }++    @Override+    public String getHelpText() {+        return ""Claims specified by Claims parameter with value are put into an ID token."";+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    protected void setClaim(IDToken token, ProtocolMapperModel mappingModel, UserSessionModel userSession, KeycloakSession keycloakSession, ClientSessionContext clientSessionCtx) {+        String claims = clientSessionCtx.getClientSession().getNote(OIDCLoginProtocol.CLAIMS_PARAM);+        if (claims == null) return;++        if (TokenUtil.TOKEN_TYPE_ID.equals(token.getType())) {+            putClaims(ClaimsRepresentation.ClaimContext.ID_TOKEN, claims, token, mappingModel, userSession);+        }+    }++    private void putClaims(ClaimsRepresentation.ClaimContext tokenType, String claims, IDToken token, ProtocolMapperModel mappingModel, UserSessionModel userSession) {+        String claimName = mappingModel.getConfig().get(CLAIM_NAME);+        if (claimName == null) return;++        ClaimsRepresentation claimsRep = null;++        try {+            claimsRep = JsonSerialization.readValue(claims, ClaimsRepresentation.class);+        } catch (IOException e) {+            return;","Yes, I will add `LOGGER.warn(""Invalid claims parameter"", e);` when catching `IOException`.",
18038099,david-rh,https://api.github.com/repos/keycloak/keycloak/pulls/14415,974342069,2022-09-19T14:42:29Z,common/src/main/java/org/keycloak/common/crypto/CryptoIntegration.java,"@@ -25,7 +25,7 @@ public static void init(ClassLoader classLoader) {             synchronized (lock) {                 if (cryptoProvider == null) {                     cryptoProvider = detectProvider(classLoader);-                    logger.debugv(""BouncyCastle provider: {0}"", BouncyIntegration.PROVIDER);+                    logger.infov(""BouncyCastle provider: {0}"", BouncyIntegration.PROVIDER);","Agree, I also think that something should be done with the class BouncyIntegration, perhaps rename it or something. But, I'm leaing that for another day.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14415,974436099,2022-09-19T16:11:04Z,pom.xml,"@@ -118,7 +118,7 @@         <sun.xml.ws.version>2.3.1</sun.xml.ws.version>         <sun.activation.version>1.2.2</sun.activation.version>         <org.glassfish.jaxb.xsom.version>2.3.3-b02</org.glassfish.jaxb.xsom.version>-        <undertow.version>2.2.14.Final</undertow.version>+        <undertow.version>2.2.15.Final</undertow.version>","In that case, I suggest if you can please write to keycloak-security ML? See this for the details: https://www.keycloak.org/security.html . Someone from the team, who cares about dependency versions and vulnerabilities etc should take care of handling it and planning the upgrade.",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/14511,975778978,2022-09-20T20:19:25Z,services/src/main/java/org/keycloak/encoding/GzipResourceEncodingProvider.java,"@@ -46,11 +54,27 @@                     if (!parent.isDirectory()) {                         parent.mkdirs();                     }-                    FileOutputStream fos = new FileOutputStream(encodedFile);+                    File tmpEncodedFile = File.createTempFile(+                            encodedFile.getName(),+                            ""tmp"",+                            parent);++                    FileOutputStream fos = new FileOutputStream(tmpEncodedFile);                     GZIPOutputStream gos = new GZIPOutputStream(fos);                     IOUtils.copy(is, gos);                     gos.close();                     is.close();+                    try {+                        Files.move(+                                tmpEncodedFile.toPath(),+                                encodedFile.toPath(),",## Uncontrolled data used in path expression[User-provided value](1) flows to here and is used in a path.[User-provided value](2) flows to here and is used in a path.[User-provided value](3) flows to here and is used in a path.[User-provided value](4) flows to here and is used in a path.[User-provided value](5) flows to here and is used in a path.[User-provided value](6) flows to here and is used in a path.[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/1889),x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14415,979619724,2022-09-26T06:57:31Z,crypto/default/pom.xml,"@@ -52,7 +52,7 @@         <dependency>             <groupId>org.apache.httpcomponents</groupId>             <artifactId>httpclient</artifactId>-            <scope>provided</scope>","Any particular reason for removing `<scope>provided</scope>` from this place? It will be good to revert this change as I am not sure about other side-effects of this (for example in some adapter distributions etc).If there are some tests failing in some other modules due the ClassNotFoundException or something similar, it will be good to add the `httpclient` dependency to those modules directly rather than removing provided scope",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14415,979637003,2022-09-26T07:14:43Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -61,6 +61,20 @@                 </exclusion>             </exclusions>         </dependency>+        <dependency>+            <groupId>org.keycloak</groupId>+            <artifactId>keycloak-core</artifactId>+            <scope>test</scope>+            <type>test-jar</type>+        </dependency>+        <dependency>","When running this:```cd testsuite/integration-arquillian/tests/basemvn dependency:tree```I see that keycloak-core and keycloak.crypto.artifactId are already included as dependencies of this module. So it shouldn't be needed to explicitly include them again this way? Is it possible that you keep just the first dependency (keycloak-core test-jar) in this PR, but remove the other two dependencies `keycloak-core` and `keycloak.crypto.artifactId` from this PR?",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14336,979861519,2022-09-26T10:56:28Z,services/src/main/java/org/keycloak/services/managers/RealmManagerProvider.java,"@@ -0,0 +1,37 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.services.managers;++import org.keycloak.provider.Provider;++/**+ * This provider has been created to listen to {@link org.keycloak.storage.ImportRealmFromRepresentation} events.+ * If that is no longer needed after further steps around the legacy storage migration, it can be removed.+ *+ * @author Alexander Schwartz+ */+public class RealmManagerProvider implements Provider {","@hmlnarik - merged `RealmManagerProvider` into `RealmManagerProviderFactory`, so there is no longer a class named `RealmManagerProvider`. Local test successful, builds are still running. Will re-request a review once the build is complete.",
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/10568,980941708,2022-09-27T08:39:48Z,adapters/oidc/js/src/keycloak.js,"@@ -527,9 +527,32 @@ function Keycloak (config) {         }          var access = kc.resourceAccess[resource || kc.clientId];-        return !!access && access.roles.indexOf(role) >= 0;+        if (!Array.isArray(obj))+           return !!access && access.roles.indexOf(role) >= 0;+        } else if (!!access) {+           return roles.some(function(role) {+               return access.roles.indexOf(role) >= 0;+           });+        } else {+           return false;+        }     } +//     kc.hasAtLeastOneResourceRoles = function(resource, ...roles) {+//            if (!kc.resourceAccess) {+//                return false;+//            }+//+//            var access = kc.resourceAccess[resource || kc.clientId];+//            if (!!access) {+//                return roles.some(function(role) {+//                    return access.roles.indexOf(role) >= 0;+//                });+//            } else {+//               return false;+//            }+//        }+","Sorry, it is temporary. Although Keycloak have been working with this code, some tests related to ui were failing.I try in another way. Finnally, I will remove it.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14589,980989512,2022-09-27T09:18:23Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/OfflineSessionPersistenceTest.java,"@@ -258,6 +258,7 @@ public void testPersistenceMultipleNodesClientSessionsAtRandomNode() throws Inte                     // on-going transaction, so it does not accept new invocations.""                     // also: org.infinispan.commons.CacheException: java.lang.IllegalStateException: Read commands must ignore leavers                     if ((ex.getCause() != null && ex.getCause().getMessage().contains(""ISPN000324"") ||+                            ex.getCause().getMessage().contains(""ISPN000217"") ||","If you would want to keep this check, this might lead to a NPE as the `ex.getCause() != null` doesn't apply to the newly added condition. The current code relies on the `&&` vs. `||` operator precedence. Additional parentheses might make this more clear.There is also an additional pair of parenthesis that is unnecessary.",x
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/14589,981111022,2022-09-27T11:21:45Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/OfflineSessionPersistenceTest.java,"@@ -258,6 +258,7 @@ public void testPersistenceMultipleNodesClientSessionsAtRandomNode() throws Inte                     // on-going transaction, so it does not accept new invocations.""                     // also: org.infinispan.commons.CacheException: java.lang.IllegalStateException: Read commands must ignore leavers                     if ((ex.getCause() != null && ex.getCause().getMessage().contains(""ISPN000324"") ||+                            ex.getCause().getMessage().contains(""ISPN000217"") ||",Good catch. I fixed the condition.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14589,981258424,2022-09-27T13:38:22Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/OfflineSessionPersistenceTest.java,"@@ -257,8 +257,8 @@ public void testPersistenceMultipleNodesClientSessionsAtRandomNode() throws Inte                     // IllegalLifecycleStateException: ISPN000324: Cache 'clientSessions' is in 'STOPPING' state and this is an invocation not belonging to an                     // on-going transaction, so it does not accept new invocations.""                     // also: org.infinispan.commons.CacheException: java.lang.IllegalStateException: Read commands must ignore leavers-                    if ((ex.getCause() != null && ex.getCause().getMessage().contains(""ISPN000324"") ||-                            (ex instanceof CacheException && ex.getMessage().contains(""Read commands must ignore leavers"")))) {+                    if (ex.getCause() != null && (ex.getCause().getMessage().contains(""ISPN000324"") || ex.getCause().getMessage().contains(""ISPN000217"")) ||","After looking at the stack trace (see below), I suspect that the ISPN000217 is not in the cause, but the parent message. This then also requires re-arranging the parentheses again. See below for a suggested change.There is also a null check, as not every exception has a message.```suggestion                    if ((ex.getCause() != null && ex.getCause().getMessage().contains(""ISPN000324"")) || (ex.getMessage() != null && ex.getMessage().contains(""ISPN000217"")) ||``````2022-09-24T00:57:52.4568276Z 00:57:52,387 ERROR [org.keycloak.testsuite.model.KeycloakModelParameters] (Time-limited test) Execution didn't complete2022-09-24T00:57:52.4569944Z java.util.concurrent.ExecutionException: java.lang.RuntimeException: org.infinispan.remoting.RemoteException: ISPN000217: Received exception from node-8(site-id=site-2), see cause for remote stack trace2022-09-24T00:57:52.4570866Z 	at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)2022-09-24T00:57:52.4571307Z 	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:205)2022-09-24T00:57:52.4571869Z 	at org.keycloak.testsuite.model.KeycloakModelTest.inIndependentFactories(KeycloakModelTest.java:395)2022-09-24T00:57:52.4573167Z 	at org.keycloak.testsuite.model.session.OfflineSessionPersistenceTest.testPersistenceMultipleNodesClientSessionsAtRandomNode(OfflineSessionPersistenceTest.java:246)2022-09-24T00:57:52.4574150Z 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)2022-09-24T00:57:52.4574846Z 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)2022-09-24T00:57:52.4575490Z 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)2022-09-24T00:57:52.4576014Z 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)2022-09-24T00:57:52.4576462Z 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)2022-09-24T00:57:52.4576995Z 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)2022-09-24T00:57:52.4577544Z 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)2022-09-24T00:57:52.4578104Z 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)2022-09-24T00:57:52.4578682Z 	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)2022-09-24T00:57:52.4579270Z 	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)2022-09-24T00:57:52.4579770Z 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)2022-09-24T00:57:52.4580140Z 	at java.base/java.lang.Thread.run(Thread.java:829)2022-09-24T00:57:52.4580868Z Caused by: java.lang.RuntimeException: org.infinispan.remoting.RemoteException: ISPN000217: Received exception from node-8(site-id=site-2), see cause for remote stack trace2022-09-24T00:57:52.4581553Z 	at org.keycloak.testsuite.model.KeycloakModelTest.inIndependentFactory(KeycloakModelTest.java:466)2022-09-24T00:57:52.4582204Z 	at org.keycloak.testsuite.model.KeycloakModelTest.lambda$inIndependentFactories$5(KeycloakModelTest.java:366)2022-09-24T00:57:52.4582727Z 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)2022-09-24T00:57:52.4583212Z 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)2022-09-24T00:57:52.4583752Z 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)2022-09-24T00:57:52.4584091Z 	... 1 more2022-09-24T00:57:52.4584668Z Caused by: org.infinispan.remoting.RemoteException: ISPN000217: Received exception from node-8(site-id=site-2), see cause for remote stack trace2022-09-24T00:57:52.4585330Z 	at org.infinispan.remoting.transport.ResponseCollectors.wrapRemoteException(ResponseCollectors.java:25)2022-09-24T00:57:52.4585961Z 	at org.infinispan.commands.write.ExceptionAckCommand.ack(ExceptionAckCommand.java:39)2022-09-24T00:57:52.4586820Z 	at org.infinispan.remoting.inboundhandler.TrianglePerCacheInboundInvocationHandler.handleBackupAckCommand(TrianglePerCacheInboundInvocationHandler.java:183)2022-09-24T00:57:52.4587891Z 	at org.infinispan.remoting.inboundhandler.TrianglePerCacheInboundInvocationHandler.handle(TrianglePerCacheInboundInvocationHandler.java:98)2022-09-24T00:57:52.4588856Z 	at org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler.handleCacheRpcCommand(GlobalInboundInvocationHandler.java:165)2022-09-24T00:57:52.4589794Z 	at org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler.handleFromCluster(GlobalInboundInvocationHandler.java:112)2022-09-24T00:57:52.4590604Z 	at org.infinispan.remoting.transport.jgroups.JGroupsTransport.processRequest(JGroupsTransport.java:1472)2022-09-24T00:57:52.4591410Z 	at org.infinispan.remoting.transport.jgroups.JGroupsTransport.processMessage(JGroupsTransport.java:1395)2022-09-24T00:57:52.4592083Z 	at org.infinispan.remoting.transport.jgroups.JGroupsTransport.access$300(JGroupsTransport.java:146)2022-09-24T00:57:52.4592729Z 	at org.infinispan.remoting.transport.jgroups.JGroupsTransport$ChannelCallbacks.up(JGroupsTransport.java:1586)2022-09-24T00:57:52.4593217Z 	at org.jgroups.JChannel.up(JChannel.java:780)2022-09-24T00:57:52.4593597Z 	at org.jgroups.stack.ProtocolStack.up(ProtocolStack.java:913)2022-09-24T00:57:52.4593960Z 	at org.jgroups.protocols.FRAG3.up(FRAG3.java:165)2022-09-24T00:57:52.4594340Z 	at org.jgroups.protocols.FlowControl.up(FlowControl.java:355)2022-09-24T00:57:52.4594802Z 	at org.jgroups.protocols.FlowControl.up(FlowControl.java:363)2022-09-24T00:57:52.4595198Z 	at org.jgroups.protocols.pbcast.GMS.up(GMS.java:876)2022-09-24T00:57:52.4595596Z 	at org.jgroups.protocols.pbcast.STABLE.up(STABLE.java:254)2022-09-24T00:57:52.4596032Z 	at org.jgroups.protocols.UNICAST3.deliverMessage(UNICAST3.java:1048)2022-09-24T00:57:52.4596470Z 	at org.jgroups.protocols.UNICAST3.addMessage(UNICAST3.java:771)2022-09-24T00:57:52.4596917Z 	at org.jgroups.protocols.UNICAST3.handleDataReceived(UNICAST3.java:752)2022-09-24T00:57:52.4597352Z 	at org.jgroups.protocols.UNICAST3.up(UNICAST3.java:405)2022-09-24T00:57:52.4597731Z 	at org.jgroups.protocols.pbcast.NAKACK2.up(NAKACK2.java:592)2022-09-24T00:57:52.4598139Z 	at org.jgroups.protocols.VERIFY_SUSPECT.up(VERIFY_SUSPECT.java:132)2022-09-24T00:57:52.4598578Z 	at org.jgroups.protocols.FailureDetection.up(FailureDetection.java:186)2022-09-24T00:57:52.4598981Z 	at org.jgroups.protocols.FD_SOCK.up(FD_SOCK.java:254)2022-09-24T00:57:52.4599332Z 	at org.jgroups.protocols.MERGE3.up(MERGE3.java:281)2022-09-24T00:57:52.4599705Z 	at org.jgroups.protocols.Discovery.up(Discovery.java:300)2022-09-24T00:57:52.4600090Z 	at org.jgroups.protocols.TP.passMessageUp(TP.java:1400)2022-09-24T00:57:52.4600563Z 	at org.jgroups.util.SubmitToThreadPool$SingleMessageHandler.run(SubmitToThreadPool.java:98)2022-09-24T00:57:52.4600919Z 	... 3 more2022-09-24T00:57:52.4601238Z 	Suppressed: org.infinispan.commons.util.logging.TraceException2022-09-24T00:57:52.4601804Z 		at org.infinispan.interceptors.impl.SimpleAsyncInvocationStage.get(SimpleAsyncInvocationStage.java:39)2022-09-24T00:57:52.4602492Z 		at org.infinispan.interceptors.impl.AsyncInterceptorChainImpl.invoke(AsyncInterceptorChainImpl.java:249)2022-09-24T00:57:52.4603107Z 		at org.infinispan.cache.impl.InvocationHelper.doInvoke(InvocationHelper.java:297)2022-09-24T00:57:52.4603629Z 		at org.infinispan.cache.impl.InvocationHelper.invoke(InvocationHelper.java:101)2022-09-24T00:57:52.4604287Z 		at org.infinispan.cache.impl.InvocationHelper.invoke(InvocationHelper.java:83)2022-09-24T00:57:52.4604791Z 		at org.infinispan.cache.impl.CacheImpl.putIfAbsent(CacheImpl.java:1333)2022-09-24T00:57:52.4605295Z 		at org.infinispan.cache.impl.DecoratedCache.putIfAbsent(DecoratedCache.java:688)2022-09-24T00:57:52.4605821Z 		at org.infinispan.cache.impl.DecoratedCache.putIfAbsent(DecoratedCache.java:277)2022-09-24T00:57:52.4606403Z 		at org.infinispan.cache.impl.AbstractDelegatingCache.putIfAbsent(AbstractDelegatingCache.java:151)2022-09-24T00:57:52.4606978Z 		at org.infinispan.cache.impl.EncoderCache.putIfAbsent(EncoderCache.java:238)2022-09-24T00:57:52.4607790Z 		at org.keycloak.models.sessions.infinispan.changes.InfinispanChangelogBasedTransaction.runOperationInCluster(InfinispanChangelogBasedTransaction.java:203)2022-09-24T00:57:52.4608859Z 		at org.keycloak.models.sessions.infinispan.changes.InfinispanChangelogBasedTransaction.commitImpl(InfinispanChangelogBasedTransaction.java:172)2022-09-24T00:57:52.4609662Z 		at org.keycloak.models.AbstractKeycloakTransaction.commit(AbstractKeycloakTransaction.java:48)2022-09-24T00:57:52.4610323Z 		at org.keycloak.services.DefaultKeycloakTransactionManager.commit(DefaultKeycloakTransactionManager.java:146)2022-09-24T00:57:52.4611116Z 		at org.keycloak.models.utils.KeycloakModelUtils.runJobInTransaction(KeycloakModelUtils.java:256)2022-09-24T00:57:52.4611768Z 		at org.keycloak.testsuite.model.KeycloakModelTest.inComittedTransaction(KeycloakModelTest.java:543)2022-09-24T00:57:52.4612434Z 		at org.keycloak.testsuite.model.KeycloakModelTest.inComittedTransaction(KeycloakModelTest.java:538)2022-09-24T00:57:52.4613041Z 		at org.keycloak.testsuite.model.KeycloakModelTest.withRealm(KeycloakModelTest.java:566)2022-09-24T00:57:52.4613820Z 		at org.keycloak.testsuite.model.session.OfflineSessionPersistenceTest.createOfflineClientSession(OfflineSessionPersistenceTest.java:360)2022-09-24T00:57:52.4614913Z 		at org.keycloak.testsuite.model.session.OfflineSessionPersistenceTest.lambda$testPersistenceMultipleNodesClientSessionsAtRandomNode$27(OfflineSessionPersistenceTest.java:253)2022-09-24T00:57:52.4615761Z 		at org.keycloak.testsuite.model.KeycloakModelTest.lambda$inIndependentFactories$4(KeycloakModelTest.java:373)2022-09-24T00:57:52.4616410Z 		at org.keycloak.testsuite.model.KeycloakModelTest.inIndependentFactory(KeycloakModelTest.java:464)2022-09-24T00:57:52.4617060Z 		at org.keycloak.testsuite.model.KeycloakModelTest.lambda$inIndependentFactories$5(KeycloakModelTest.java:366)2022-09-24T00:57:52.4617579Z 		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)2022-09-24T00:57:52.4617874Z 		... 3 more2022-09-24T00:57:52.4618307Z Caused by: org.infinispan.commons.IllegalLifecycleStateException: Cannot wire or start components while the registry is not running2022-09-24T00:57:52.4618941Z 	at org.infinispan.marshall.exts.ThrowableExternalizer.readObject(ThrowableExternalizer.java:215)2022-09-24T00:57:52.4619565Z 	at org.infinispan.marshall.exts.ThrowableExternalizer.readObject(ThrowableExternalizer.java:42)2022-09-24T00:57:52.4620194Z 	at org.infinispan.marshall.core.GlobalMarshaller.readWithExternalizer(GlobalMarshaller.java:727)2022-09-24T00:57:52.4620836Z 	at org.infinispan.marshall.core.GlobalMarshaller.readNonNullableObject(GlobalMarshaller.java:708)2022-09-24T00:57:52.4621483Z 	at org.infinispan.marshall.core.GlobalMarshaller.readNullableObject(GlobalMarshaller.java:357)2022-09-24T00:57:52.4622074Z 	at org.infinispan.marshall.core.BytesObjectInput.readObject(BytesObjectInput.java:32)2022-09-24T00:57:52.4622651Z 	at org.infinispan.commands.write.ExceptionAckCommand.readFrom(ExceptionAckCommand.java:58)2022-09-24T00:57:52.4623316Z 	at org.infinispan.marshall.exts.TriangleAckExternalizer.exceptionAckCommand(TriangleAckExternalizer.java:63)2022-09-24T00:57:52.4624006Z 	at org.infinispan.marshall.exts.TriangleAckExternalizer.readObject(TriangleAckExternalizer.java:46)2022-09-24T00:57:52.4624654Z 	at org.infinispan.marshall.exts.TriangleAckExternalizer.readObject(TriangleAckExternalizer.java:24)2022-09-24T00:57:52.4625283Z 	at org.infinispan.marshall.core.GlobalMarshaller.readWithExternalizer(GlobalMarshaller.java:727)2022-09-24T00:57:52.4625927Z 	at org.infinispan.marshall.core.GlobalMarshaller.readNonNullableObject(GlobalMarshaller.java:708)2022-09-24T00:57:52.4626569Z 	at org.infinispan.marshall.core.GlobalMarshaller.readNullableObject(GlobalMarshaller.java:357)2022-09-24T00:57:52.4627204Z 	at org.infinispan.marshall.core.GlobalMarshaller.objectFromObjectInput(GlobalMarshaller.java:191)2022-09-24T00:57:52.4627845Z 	at org.infinispan.marshall.core.GlobalMarshaller.objectFromByteBuffer(GlobalMarshaller.java:220)2022-09-24T00:57:52.4628524Z 	at org.infinispan.remoting.transport.jgroups.JGroupsTransport.processRequest(JGroupsTransport.java:1455)2022-09-24T00:57:52.4628975Z 	... 25 more```",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14612,981631353,2022-09-27T19:24:46Z,model/map/src/main/java/org/keycloak/models/map/datastore/MapExportImportManager.java,"@@ -441,7 +448,107 @@ public RealmModel importRealm(InputStream requestBody) {            the realm name and if the realm is enabled. For that scenario, it would need to create all missing elements,            which is done by firing an event to call the existing implementation in the RealmManager. */ -        return ImportRealmFromRepresentation.fire(session, rep);+        String id = rep.getId();+        if (id == null || id.trim().isEmpty()) {+            id = KeycloakModelUtils.generateId();+        } else {+            ReservedCharValidator.validate(id);+        }++        RealmModel realm = session.realms().createRealm(id, rep.getRealm());+        RealmModel currentRealm = session.getContext().getRealm();++        try {+            session.getContext().setRealm(realm);+            ReservedCharValidator.validate(rep.getRealm());+            realm.setName(rep.getRealm());++            // setup defaults that will be overwritten by the import if present in the import+            setupRealmDefaults(realm);++            /// THIS IS THE REAL IMPORT ///+            RepresentationToModel.importRealm(session, rep, realm, false);","This is actually calling ```javasession.getProvider(DatastoreProvider.class).getExportImportManager().importRealm(rep, newRealm, skipUserDependent);```Should this line be thus replaced with the following?```suggestion            importRealm(rep, newRealm, skipUserDependent);```",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14658,985450466,2022-10-03T07:24:35Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OfflineTokenTest.java,"@@ -743,6 +743,70 @@ public void offlineTokenBrowserFlowIdleTimeExpired() throws Exception {         testOfflineSessionExpiration(IDLE_LIFESPAN, MAX_LIFESPAN, IDLE_LIFESPAN + SessionTimeoutHelper.IDLE_TIMEOUT_WINDOW_SECONDS + 60);     } +    // Issue 13706+    @Test+    public void offlineTokenReauthenticationWhenOfflinClientSessionExpired() throws Exception {+        // expect that offline session expired by idle timeout+        final int MAX_LIFESPAN = 360000;+        final int IDLE_LIFESPAN = 900;+        RealmRepresentation realmRep = adminClient.realm(""test"").toRepresentation();+        int origIdleTimeout = realmRep.getSsoSessionIdleTimeout();+        realmRep.setSsoSessionIdleTimeout(900);+        adminClient.realm(""test"").update(realmRep);++        getTestingClient().testing().setTestingInfinispanTimeService();","I can add that `getTestingClient().testing().setTestingInfinispanTimeService()` is needed to reproduce the buggy scenario from the desciption of this bug, as without that, the infinispan ""timer"" is not integrated with Keycloak TimerProvider (setTimeOffset etc). And for this one particular scenario, it is needed to simulate the scenario when the item is not found in the infinispan cache after timeout.The altertnative to explicit call `getTestingClient().testing().setTestingInfinispanTimeService()` is using the rule `InfinispanTestTimeServiceRule`, which can be declared on the class, but this causes some other tests of `OfflineTokenTest` class to fail. But if you prefer, I can add that rule and fix the other tests according to it. This might be more proper way (as in production, the infinispan timer and Keycloak TimerProvider would be also in sync), but will require more changes on the test class. WDYT?",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/14706,986167910,2022-10-03T19:56:35Z,services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java,"@@ -82,6 +82,7 @@ public class AuthenticationProcessor {     public static final String BROKER_SESSION_ID = ""broker.session.id"";     public static final String BROKER_USER_ID = ""broker.user.id"";     public static final String FORWARDED_PASSIVE_LOGIN = ""forwarded.passive.login"";+    public static final String USER_SESSION_ID = ""user.session.id"";","Not sure this is the best place to put this constant, I thought about adding a Constants class in services module, but dropped the idea at the end.",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/14706,986169157,2022-10-03T19:57:57Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LevelOfAssuranceFlowTest.java,"@@ -635,20 +639,22 @@ public void testBackwardsCompatibilityForLoaConditionConfig() {     @Test     @DisableFeature(value = Profile.Feature.STEP_UP_AUTHENTICATION, skipRestart = true)     public void testDisableStepupFeatureTest() {-        BrowserFlowTest.revertFlows(testRealm(), ""browser -  Level of Authentication FLow"");+        try {+            BrowserFlowTest.revertFlows(testRealm(), ""browser -  Level of Authentication FLow""); -        // Login normal way - should return 1 (backwards compatibility before step-up was introduced)-        loginPage.open();-        authenticateWithUsernamePassword();-        authenticateWithTotp(); // OTP required due the user has it-        assertLoggedInWithAcr(""1"");+            // Login normal way - should return 1 (backwards compatibility before step-up was introduced)+            loginPage.open();+            authenticateWithUsernamePassword();+            authenticateWithTotp(); // OTP required due the user has it+            assertLoggedInWithAcr(""1""); -        // SSO login - should return 0 (backwards compatibility before step-up was introduced)-        oauth.openLoginForm();-        assertLoggedInWithAcr(""0"");--        // Flow is needed due the ""after()"" method-        testingClient.server(TEST_REALM_NAME).run(session -> FlowUtil.inCurrentRealm(session).copyBrowserFlow(""browser -  Level of Authentication FLow""));+            // SSO login - should return 0 (backwards compatibility before step-up was introduced)+            oauth.openLoginForm();+            assertLoggedInWithAcr(""0"");+        } finally {+            // Flow is needed due the ""after()"" method+            testingClient.server(TEST_REALM_NAME).run(session -> FlowUtil.inCurrentRealm(session).copyBrowserFlow(""browser -  Level of Authentication FLow""));+        }     }      @Test","These tests were changed because I found out that upon failure they would leave Keycloak in a bad config state, causing failures in many other tests aftwards. So I've added a try - finally block to ensure this wouldn't happen.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/12551,986639689,2022-10-04T09:25:42Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPoliciesTest.java,"@@ -2732,6 +2736,255 @@ public void testExtendedClientPolicyIntefacesForDeviceTokenRequest() throws Exce         assertEquals(""Exception thrown intentionally"", tokenResponse.getErrorDescription());     } +    @Test+    public void testExtendedClientPolicyIntefacesForDeviceTokenResponse() throws Exception {","Note: Looks that ClientPoliciesTest class is already very big and contains 49 test methods. Will it makes sense to add the new test for ""extended""  methods into separate test class?",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14087,987683841,2022-10-05T08:49:07Z,server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java,"@@ -266,6 +269,80 @@ public static void runJobInTransaction(KeycloakSessionFactory factory, KeycloakS         }     } +    /**+     * Creates a new {@link KeycloakSession} and runs the specified callable in a new transaction. If the transaction fails+     * with a SQL retriable error, the method re-executes the specified callable until it either succeeds or the maximum number+     * of attempts is reached, leaving some increasing random delay milliseconds between the invocations. It uses the exponential+     * backoff + jitter algorithm to compute the delay. More details https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/+     *+     * @param factory a reference to the {@link KeycloakSessionFactory}.+     * @param callable a reference to the {@link KeycloakSessionTaskWithResult} that will be executed in a retriable way.+     * @param attemptsCount the maximum number of attempts to execute the callable.+     * @param retryIntervalMillis the base interval value in millis used to compute the delay.+     * @param <V> the type returned by the callable.+     * @return the value computed by the callable.+     */+    public static <V> V runJobInRetriableTransaction(final KeycloakSessionFactory factory, final KeycloakSessionTaskWithResult<V> callable,+                                                     final int attemptsCount, final int retryIntervalMillis) {+        int retryCount = 0;+        Random rand = new Random();+        V result;+        while (true) {+            KeycloakSession session = factory.create();+            KeycloakTransaction tx = session.getTransactionManager();+            try {+                tx.begin();+                result = callable.run(session);+                if (tx.isActive()) {+                    if (tx.getRollbackOnly()) {+                        tx.rollback();+                    } else {+                        tx.commit();+                    }+                }+                break;+            } catch (RuntimeException re) {+                if (tx.isActive()) {+                    tx.rollback();+                }+                if (isExceptionRetriable(re) && ++retryCount < attemptsCount) {+                    int delay = (int)(Math.pow(2, retryCount) * retryIntervalMillis) + rand.nextInt(retryIntervalMillis);+                    try {+                        Thread.sleep(delay);+                    } catch (InterruptedException ie) {+                        ie.addSuppressed(re);+                        throw new RuntimeException(ie);+                    }+                } else {+                    throw re;+                }+            } finally {+                session.close();+            }+        }+        return result;+    }++    /**+     * Checks if the specified exception is retriable or not. A retriable exception must be an instance of {@code SQLException}+     * and must have a retriable state (for example, ""40001"" on CockroachDB).+     *+     * @param exception the exception to be checked.+     * @return {@code true} if the exception is retriable; {@code false} otherwise.+     */+    public static boolean isExceptionRetriable(final Exception exception) {+        Objects.requireNonNull(exception);+        // first find the root cause and check if it is a SQLException+        Throwable rootCause = exception;+        while (rootCause.getCause() != null && rootCause.getCause() != rootCause) {+            rootCause = rootCause.getCause();+        }+        if (rootCause instanceof SQLException) {+            // check if the exception state is a recoverable one (40001)+            return ""40001"".equals(((SQLException) rootCause).getSQLState());+        }+        return false;+    }","I'd like to see a link to the most relevant CockroachDB documentation page for this, for example: https://www.cockroachlabs.com/docs/v22.1/transactions#client-side-interventionFor now this code is probably OK, still I'd like to see a follow-up issue to be more specific and more extendable here: different ""40001"" exceptions on different databases could mean different things, and server-spi-private shouldn't known about DB details. A follow-up issue could define an interface for a provider where the JPA map store provider could double-check if this exception is really coming from a CockroachDB (if CockroachDB is used at all) in that setup. This would allow extendability for upcoming storages. ",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14087,987706540,2022-10-05T09:14:02Z,server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java,"@@ -266,6 +269,80 @@ public static void runJobInTransaction(KeycloakSessionFactory factory, KeycloakS         }     } +    /**+     * Creates a new {@link KeycloakSession} and runs the specified callable in a new transaction. If the transaction fails+     * with a SQL retriable error, the method re-executes the specified callable until it either succeeds or the maximum number+     * of attempts is reached, leaving some increasing random delay milliseconds between the invocations. It uses the exponential+     * backoff + jitter algorithm to compute the delay. More details https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/+     *+     * @param factory a reference to the {@link KeycloakSessionFactory}.+     * @param callable a reference to the {@link KeycloakSessionTaskWithResult} that will be executed in a retriable way.+     * @param attemptsCount the maximum number of attempts to execute the callable.+     * @param retryIntervalMillis the base interval value in millis used to compute the delay.+     * @param <V> the type returned by the callable.+     * @return the value computed by the callable.+     */+    public static <V> V runJobInRetriableTransaction(final KeycloakSessionFactory factory, final KeycloakSessionTaskWithResult<V> callable,+                                                     final int attemptsCount, final int retryIntervalMillis) {+        int retryCount = 0;+        Random rand = new Random();+        V result;+        while (true) {+            KeycloakSession session = factory.create();+            KeycloakTransaction tx = session.getTransactionManager();+            try {+                tx.begin();+                result = callable.run(session);+                if (tx.isActive()) {+                    if (tx.getRollbackOnly()) {+                        tx.rollback();+                    } else {+                        tx.commit();+                    }+                }+                break;+            } catch (RuntimeException re) {+                if (tx.isActive()) {+                    tx.rollback();+                }+                if (isExceptionRetriable(re) && ++retryCount < attemptsCount) {+                    int delay = (int)(Math.pow(2, retryCount) * retryIntervalMillis) + rand.nextInt(retryIntervalMillis);+                    try {+                        Thread.sleep(delay);+                    } catch (InterruptedException ie) {+                        ie.addSuppressed(re);+                        throw new RuntimeException(ie);+                    }+                } else {+                    throw re;+                }+            } finally {+                session.close();+            }+        }+        return result;+    }++    /**+     * Checks if the specified exception is retriable or not. A retriable exception must be an instance of {@code SQLException}+     * and must have a retriable state (for example, ""40001"" on CockroachDB).+     *+     * @param exception the exception to be checked.+     * @return {@code true} if the exception is retriable; {@code false} otherwise.+     */+    public static boolean isExceptionRetriable(final Exception exception) {+        Objects.requireNonNull(exception);+        // first find the root cause and check if it is a SQLException+        Throwable rootCause = exception;+        while (rootCause.getCause() != null && rootCause.getCause() != rootCause) {+            rootCause = rootCause.getCause();+        }+        if (rootCause instanceof SQLException) {+            // check if the exception state is a recoverable one (40001)+            return ""40001"".equals(((SQLException) rootCause).getSQLState());+        }+        return false;+    }","Adding a note that I agree that we might revisit this code in the future but is ok as is now.Reason is that 40001 is a standard SQL state as defined in SQL standard, and across the implementations its meaning boils down to ""deadlock"" (applies to Postgres, MSSQL, Oracle, MySQL, and others)",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/14087,987843860,2022-10-05T12:04:46Z,services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java,"@@ -160,32 +165,39 @@ public ComponentRepresentation getComponent(@PathParam(""id"") String id) {     @Consumes(MediaType.APPLICATION_JSON)     public Response updateComponent(@PathParam(""id"") String id, ComponentRepresentation rep) {         auth.realm().requireManageRealm();-        try {-            ComponentModel model = realm.getComponent(id);-            if (model == null) {-                throw new NotFoundException(""Could not find component"");+        return KeycloakModelUtils.runJobInRetriableTransaction(session.getKeycloakSessionFactory(), kcSession -> {+            RealmModel realmModel = LockObjectsForModification.lockRealmsForModification(kcSession, () -> kcSession.realms().getRealm(realm.getId()));","It is, in my tests the presence of the lock reduced the number of RETRY TX exceptions significantly... unfortunately it doesn't prevent the errors in totality",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/14740,987987292,2022-10-05T14:25:32Z,operator/src/main/java/org/keycloak/utils/DeploymentStatusUtils.java,"@@ -0,0 +1,49 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.utils;++import org.keycloak.common.util.CollectionUtil;+import org.keycloak.operator.controllers.KeycloakDeployment;+import org.keycloak.operator.crds.v2alpha1.deployment.KeycloakStatusBuilder;++import java.util.List;++/**+ * Util class for managing status of the deployment+ *+ * @author <a href=""mailto:mabartos@redhat.com"">Martin Bartos</a>+ */+public class DeploymentStatusUtils {++    /**+     * Assume the specified first-class citizens are not included in the general server configuration+     *+     * @param keycloakDeployment Keycloak deployment+     * @param status             Status of the deployment+     * @param firstClassCitizens First-class citizens in the CR+     */+    public static void assumeFirstClassCitizens(KeycloakDeployment keycloakDeployment, KeycloakStatusBuilder status, String... firstClassCitizens) {","Not used in this PR, but will be used in the following PRs related to the extension of first-class citizen properties of KC CR. I'd keep it here.",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/14705,988168275,2022-10-05T17:22:45Z,services/src/main/java/org/keycloak/protocol/oidc/utils/OAuth2CodeParser.java,"@@ -78,51 +79,57 @@ public static String persistCode(KeycloakSession session, AuthenticatedClientSes      */     public static ParseResult parseCode(KeycloakSession session, String code, RealmModel realm, EventBuilder event) {         ParseResult result = new ParseResult(code);-         String[] parsed = DOT.split(code, 3);         if (parsed.length < 3) {             logger.warn(""Invalid format of the code"");             return result.illegalCode();         }-+        String codeUUID = parsed[0];         String userSessionId = parsed[1];         String clientUUID = parsed[2];          event.detail(Details.CODE_ID, userSessionId);         event.session(userSessionId); -        // Parse UUID-        String codeUUID;-        try {-            codeUUID = parsed[0];-        } catch (IllegalArgumentException re) {-            logger.warn(""Invalid format of the UUID in the code"");-            return result.illegalCode();-        }+        SingleUseObjectProvider codeStore = session.getProvider(SingleUseObjectProvider.class);+        Map<String, String> codeData = codeStore.remove(codeUUID);","I can try it, but I would need to pass the session as a parameter to codeToToken(), and maybe to some other pieces of the code that are using the session injected into the token endpoint.",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/14706,988222658,2022-10-05T18:29:32Z,services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java,"@@ -154,6 +158,29 @@ public void setAuthSessionCookie(String authSessionId, RealmModel realm) {         log.debugf(""Set AUTH_SESSION_ID cookie with value %s"", encodedAuthSessionId);     } +    /**+     * Sets the authentication session cookie with a value that combines both the user session id and root authentication+     * session id, separated by a {@code '/'} character.","I was thinking - even if we come up a with a way to find the root auth session without changing the cookie - like changing the code that locates the auth session using the cookie to no longer assume the value should match a root session id - we would still be incompatible with KC19 because only KC20 would have smarter auth session location code. Once we've broken the assumption that user session id and root auth session id are the same, the compatibility is gone.",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/12551,988437335,2022-10-05T23:43:25Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPoliciesTest.java,"@@ -2732,6 +2736,255 @@ public void testExtendedClientPolicyIntefacesForDeviceTokenRequest() throws Exce         assertEquals(""Exception thrown intentionally"", tokenResponse.getErrorDescription());     } +    @Test+    public void testExtendedClientPolicyIntefacesForDeviceTokenResponse() throws Exception {","Yes, I also think that `ClientPoliciesTest` became too big. How about creating other PR for refactoring `ClientPoliciesTest`? I am willing to work on this refactoring.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14706,988664584,2022-10-06T07:48:13Z,services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java,"@@ -1114,7 +1117,7 @@ protected Response authenticationComplete() {         if (nextRequiredAction != null) {             return AuthenticationManager.redirectToRequiredActions(session, realm, authenticationSession, uriInfo, nextRequiredAction);         } else {-            event.detail(Details.CODE_ID, authenticationSession.getParentSession().getId());  // todo This should be set elsewhere.  find out why tests fail.  Don't know where this is supposed to be set+            event.detail(Details.CODE_ID, authenticationSession.getAuthNote(USER_SESSION_ID) != null ? authenticationSession.getAuthNote(USER_SESSION_ID) : authenticationSession.getParentSession().getId());  // todo This should be set elsewhere.  find out why tests fail.  Don't know where this is supposed to be set","So now we write sometimes the user session id in the event, sometimes the parent session id. I don't understand in which case one or the other happens by looking at the local code snippets or the whole change. I'd like to see a good definition of what the field in the event should contain and a use case how it should be used. If we decide to break an existing definition, we can put this in the release notes. For example: If we decide it should always contain the user session id, then it should always contain the user session, and null if there is no user session for some reason. Looking at the name of the field `code_id` I'd usually expect something different.A similar pattern that tenary statement exists not only for events, but also in the AuthenticatinoProcessor; again some comment why this is the way would help me and I'd assume future readers of the code as well.```            String userSessionId = authSession.getAuthNote(USER_SESSION_ID);            userSession = lockUserSessionsForModification(session,                    () -> session.sessions().getUserSession(realm, userSessionId != null ? userSessionId : authSession.getParentSession().getId()));```",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14706,988685699,2022-10-06T08:08:43Z,services/src/main/java/org/keycloak/services/managers/AuthenticationSessionManager.java,"@@ -154,6 +158,29 @@ public void setAuthSessionCookie(String authSessionId, RealmModel realm) {         log.debugf(""Set AUTH_SESSION_ID cookie with value %s"", encodedAuthSessionId);     } +    /**+     * Sets the authentication session cookie with a value that combines both the user session id and root authentication+     * session id, separated by a {@code '/'} character.","> That is actually a very good point - @hmlnarik what is your take on this?Cookies are very fragile CVE-wise and browser-support-wise, and have wide impact on many areas including JS adapters. Has this change in cookies been discussed and agreed on with the wider team?I would personally like to discuss it a bit more. To prevent accidental merging, I am marking this PR as ""Changes requested"" in the review.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14751,988810549,2022-10-06T09:32:04Z,server-spi-private/src/main/java/org/keycloak/models/locking/LockingMechanismProvider.java,"@@ -0,0 +1,28 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++import org.keycloak.provider.Provider;++public interface LockingMechanismProvider extends Provider {++    void acquireLock(String lockName);+    void releaseLock(String lockName);","I agree that `acquireLock` should return an `AutoCloseable` instance, say of a type `GlobalLock`? Then `releaseLock` would be made unnecessary and locking safe:```javatry (GlobalLock l = ...acquireLock(INITIAL_REALM_CREATION)) {    // do the job....}```Also I think there should be a time-bound variant:```java    void acquireLock(String lockName, long time, TimeUnit unit);```",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14751,988813798,2022-10-06T09:35:15Z,model/legacy-private/src/main/java/org/keycloak/models/dblock/DBLockLockingMechanismProvider.java,"@@ -0,0 +1,64 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.dblock;++import org.keycloak.models.locking.LockingMechanismProvider;++public class DBLockLockingMechanismProvider implements LockingMechanismProvider {++    private final DBLockProvider dbLockProvider;+    public DBLockLockingMechanismProvider(DBLockProvider dbLockProvider) {+        this.dbLockProvider = dbLockProvider;+    }++    private static DBLockProvider.Namespace stringToNamespace(String lockName) {+        if (""database"".equals(lockName)) {+            return DBLockProvider.Namespace.DATABASE;+        } else if (""keycloak-boot"".equals(lockName)) {+            return DBLockProvider.Namespace.KEYCLOAK_BOOT;+        } else if (""offline-sessions"".equals(lockName)) {+            return DBLockProvider.Namespace.OFFLINE_SESSIONS;+        } else {+            throw new RuntimeException(""Lock with name "" + lockName + "" not supported by DBLockLockingMechanism"");",You can use `case` / `switch` rather than if / else chaining,
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/14713,988919901,2022-10-06T11:33:26Z,quarkus/tests/integration/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java,"@@ -100,7 +103,34 @@ public void beforeEach(ExtensionContext context) throws Exception {             onBeforeStartDistribution(context.getRequiredTestMethod().getAnnotation(BeforeStartDistribution.class));              if (launch != null) {-                result = dist.run(Arrays.asList(launch.value()));+                List<String> argsFromLaunchAnnotation = new ArrayList<>(Arrays.asList(launch.value()));++                WithLegacyStoreOnly withLegacyStoreOnly = context.getRequiredTestMethod().getAnnotation(WithLegacyStoreOnly.class);+                if (withLegacyStoreOnly == null) {+                    withLegacyStoreOnly = context.getTestClass()","Could be good to verify also the inheritance of the test classes. I'm not sure if it's the case in the testsuite ATM, but it'd be good to resolve it now. The annotation presence for classes could be checked in the BeforeAll even with the inheritance and in BeforeEach check only the methods. WDYT? ",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/14713,988935085,2022-10-06T11:50:42Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/BuildCommandDistTest.java,"@@ -48,6 +49,7 @@ void resetConfig(LaunchResult result) {      @Test     @Launch({ ""--profile=dev"", ""build"" })+    @WithLegacyStoreOnly","For `build` it should be working, right? @andre-nascimento-rh Most likely this is the spot when the `--storage` is not found. As you always add the `--storage` at the first index. Needs to be specified after `build`. See [here](https://github.com/keycloak/keycloak/pull/14713/files?diff=unified&w=0#diff-aa081e5f62b9bbde53e18c058aae57608573561e504dedd279b1737badba3f64R120)",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14744,989795088,2022-10-07T07:47:28Z,model/map/src/main/java/org/keycloak/models/map/userSession/MapUserSessionProvider.java,"@@ -80,16 +80,14 @@ private Function<MapUserSessionEntity, UserSessionModel> userEntityToAdapterFunc         // Clone entity before returning back, to avoid giving away a reference to the live object to the caller         return (origEntity) -> {             if (origEntity == null) return null;-            if (isExpired(origEntity, false)) {-                if (TRANSIENT == origEntity.getPersistenceState()) {+            if (TRANSIENT == origEntity.getPersistenceState()) {+                // only check expiry for transient entities, as the physical map store will not return expired entities on any query","Unfortunately, this assumption is not correct. The expiration check for persistent entities has to remain here, see the following javadoc.https://github.com/keycloak/keycloak/blob/148c7695ff5b32f46f05a5f341ca5456da144987/model/map/src/main/java/org/keycloak/models/map/common/ExpirableEntity.java#L24-L27",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/14748,989834536,2022-10-07T08:31:16Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/user/entity/JpaUserEntity.java,"@@ -232,16 +230,19 @@ public void setRealmId(String realmId) {         this.metadata.setRealmId(realmId);     } +    /**+     * @return User's username with respecting letter case.+     */     @Override     public String getUsername() {-        if (this.isMetadataInitialized()) return this.metadata.getUsername();-        return this.username;+        if (this.isMetadataInitialized()) return this.metadata.getUsernameWithCase();",It should work now when the migration of the entity was fixed in the last force-push. Each entity loaded from the database should have the usernameWithCase field filled. Or am I missing something?,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14748,989951897,2022-10-07T10:44:18Z,model/map/src/main/java/org/keycloak/models/map/user/MapUserAdapter.java,"@@ -49,7 +51,8 @@ public String getId() {      @Override     public String getUsername() {-        return entity.getUsername();+        Boolean usernameCaseSensitiveAttribute = realm.getAttribute(REALM_ATTR_USERNAME_CASE_SENSITIVE, REALM_ATTR_USERNAME_CASE_SENSITIVE_DEFAULT);+        return usernameCaseSensitiveAttribute ? entity.getUsername() : entity.getUsername().toLowerCase();",> Do you mean reverting test changes from https://github.com/keycloak/keycloak/pull/13183?Yes - I assume those will fail anyway due to the username being returned in lowercase as long as the setting is false.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/14751,991235480,2022-10-10T12:33:18Z,model/legacy-private/src/main/java/org/keycloak/models/dblock/DBLockLockingMechanismProvider.java,"@@ -0,0 +1,64 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.dblock;++import org.keycloak.models.locking.LockingMechanismProvider;++public class DBLockLockingMechanismProvider implements LockingMechanismProvider {++    private final DBLockProvider dbLockProvider;+    public DBLockLockingMechanismProvider(DBLockProvider dbLockProvider) {+        this.dbLockProvider = dbLockProvider;+    }++    private static DBLockProvider.Namespace stringToNamespace(String lockName) {+        if (""database"".equals(lockName)) {+            return DBLockProvider.Namespace.DATABASE;+        } else if (""keycloak-boot"".equals(lockName)) {+            return DBLockProvider.Namespace.KEYCLOAK_BOOT;+        } else if (""offline-sessions"".equals(lockName)) {",Do we want to have all lock (besides some variable names like Model name) names we use in Keycloak defined in constants? The reason why I used it this way is to make sure it is clear from the interface that it is possible to use any String as the lock name. I didn't want to make any dependency between the old DBLock and new LockingMechanism so I used just Strings.,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/14736,991422067,2022-10-10T15:34:54Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDeployment.java,"@@ -52,9 +47,9 @@ import static io.smallrye.config.common.utils.StringUtil.replaceNonAlphanumericByUnderscores;  public class KeycloakDeployment extends OperatorManagedResource implements StatusUpdater<KeycloakStatusBuilder> {+    protected final Keycloak keycloakCR;      private final Config config;-    private final Keycloak keycloakCR;","Just out of curiosity, why to make this change? We probably don't expect the `KeycloakDeployment` class to ever be extended (we might as well mark it as `final`).",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/14736,991444364,2022-10-10T16:00:32Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDeploymentConfig.java,"@@ -0,0 +1,266 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.EnvVarBuilder;+import io.fabric8.kubernetes.api.model.ExecActionBuilder;+import io.fabric8.kubernetes.api.model.VolumeBuilder;+import io.fabric8.kubernetes.api.model.VolumeMountBuilder;+import io.fabric8.kubernetes.api.model.apps.StatefulSet;+import org.keycloak.common.util.CollectionUtil;+import org.keycloak.operator.Constants;+import org.keycloak.operator.crds.v2alpha1.deployment.KeycloakStatusBuilder;+import org.keycloak.operator.crds.v2alpha1.deployment.ValueOrSecret;++import java.nio.charset.StandardCharsets;+import java.util.ArrayList;+import java.util.Base64;+import java.util.Collection;+import java.util.List;+import java.util.stream.Collectors;++/**+ * Configuration for the KeycloakDeployment+ */+public class KeycloakDeploymentConfig {","I would maybe make this normal ""stateful"" class and get rid of the direct dependency on `KeycloakDeployment` as I believe it doesn't belong here. Instead, I would suggest to create fields (and constructor) for Keycloak CR, StatefulSet and K8s Client.This would allow us to test it better by unit tests (please add some for the Enabled/Disabled Features – just testing the CR values are really mapped to correct env vars) and will get rid of the ugly parameters in each method for passing `KeycloakDeployment`.WDYT?",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/14736,991547075,2022-10-10T18:25:01Z,operator/src/test/java/org/keycloak/operator/testsuite/unit/CRSerializationTest.java,"@@ -36,4 +42,22 @@ public void testDeserialization() {         assertTrue(keycloak.getSpec().isDisableDefaultIngress());     } -}+    @Test+    public void featureSpecificationDeserialization(){","I think it's okay to have it here as it's a really fast test, and we can quickly react to the problem with the serialization of the properties. It'll be useful when the new first-class citizen fields are added. Is it ok to keep it?",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14819,991552811,2022-10-10T18:34:00Z,model/jpa/src/main/java/org/keycloak/events/jpa/JpaEventStoreProvider.java,"@@ -276,17 +276,21 @@ protected void clearExpiredAdminEvents() {         CriteriaBuilder cb = em.getCriteriaBuilder();         CriteriaQuery<RealmAttributeEntity> cr = cb.createQuery(RealmAttributeEntity.class);         Root<RealmAttributeEntity> root = cr.from(RealmAttributeEntity.class);-        cr.select(root).where(cb.and(cb.equal(root.get(""name""),RealmAttributes.ADMIN_EVENTS_EXPIRATION),cb.greaterThan(root.get(""value"").as(Long.class),Long.valueOf(0))));-        Map<Long, List<RealmAttributeEntity>> realms = em.createQuery(cr).getResultStream().collect(Collectors.groupingBy(attribute -> Long.valueOf(attribute.getValue())));+        // unable to cast the CLOB to a BIGINT in the select for H2 2.x, therefore comparing strings only in the DB, and filtering again in the next statement+        cr.select(root).where(cb.and(cb.equal(root.get(""name""),RealmAttributes.ADMIN_EVENTS_EXPIRATION),cb.notEqual(root.get(""value""), ""0"")));+        Map<Long, List<RealmAttributeEntity>> realms = em.createQuery(cr).getResultStream()+                // filtering again on the attribute as paring the CLOB to BIGINT didn't work in H2 2.x+                .filter(attribute -> Long.parseLong(attribute.getValue()) > 0)",`Long.parseLong` might throw a `NumberFormatException`. Could this be replaced by a exception-free safe method that would swallow the exception instead?,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14819,991642901,2022-10-10T21:12:16Z,model/jpa/src/main/java/org/keycloak/events/jpa/JpaEventStoreProvider.java,"@@ -276,17 +276,21 @@ protected void clearExpiredAdminEvents() {         CriteriaBuilder cb = em.getCriteriaBuilder();         CriteriaQuery<RealmAttributeEntity> cr = cb.createQuery(RealmAttributeEntity.class);         Root<RealmAttributeEntity> root = cr.from(RealmAttributeEntity.class);-        cr.select(root).where(cb.and(cb.equal(root.get(""name""),RealmAttributes.ADMIN_EVENTS_EXPIRATION),cb.greaterThan(root.get(""value"").as(Long.class),Long.valueOf(0))));-        Map<Long, List<RealmAttributeEntity>> realms = em.createQuery(cr).getResultStream().collect(Collectors.groupingBy(attribute -> Long.valueOf(attribute.getValue())));+        // unable to cast the CLOB to a BIGINT in the select for H2 2.x, therefore comparing strings only in the DB, and filtering again in the next statement+        cr.select(root).where(cb.and(cb.equal(root.get(""name""),RealmAttributes.ADMIN_EVENTS_EXPIRATION),cb.notEqual(root.get(""value""), ""0"")));+        Map<Long, List<RealmAttributeEntity>> realms = em.createQuery(cr).getResultStream()+                // filtering again on the attribute as paring the CLOB to BIGINT didn't work in H2 2.x+                .filter(attribute -> Long.parseLong(attribute.getValue()) > 0)","Thanks for pointing out the possibility for an exception. I updated the code to catch the exception and log a warning with helpful information so an admin could fix this. Not logging anything would lead to not deleted events, which would be a surprise to the admin and they wouldn't be able to locate the cause.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14819,991643565,2022-10-10T21:13:40Z,model/jpa/src/main/java/org/keycloak/events/jpa/JpaEventStoreProvider.java,"@@ -276,17 +276,21 @@ protected void clearExpiredAdminEvents() {         CriteriaBuilder cb = em.getCriteriaBuilder();         CriteriaQuery<RealmAttributeEntity> cr = cb.createQuery(RealmAttributeEntity.class);         Root<RealmAttributeEntity> root = cr.from(RealmAttributeEntity.class);-        cr.select(root).where(cb.and(cb.equal(root.get(""name""),RealmAttributes.ADMIN_EVENTS_EXPIRATION),cb.greaterThan(root.get(""value"").as(Long.class),Long.valueOf(0))));-        Map<Long, List<RealmAttributeEntity>> realms = em.createQuery(cr).getResultStream().collect(Collectors.groupingBy(attribute -> Long.valueOf(attribute.getValue())));+        // unable to cast the CLOB to a BIGINT in the select for H2 2.x, therefore comparing strings only in the DB, and filtering again in the next statement+        cr.select(root).where(cb.and(cb.equal(root.get(""name""),RealmAttributes.ADMIN_EVENTS_EXPIRATION),cb.notEqual(root.get(""value""), ""0"")));+        Map<Long, List<RealmAttributeEntity>> realms = em.createQuery(cr).getResultStream()+                // filtering again on the attribute as paring the CLOB to BIGINT didn't work in H2 2.x+                .filter(attribute -> Long.parseLong(attribute.getValue()) > 0)","BTW: The changes with regards to `VALUE` are specific to H2, so I didn't run pipelines for any other database. Would you think otherwise?",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/14751,991946523,2022-10-11T08:01:26Z,model/legacy-private/src/main/java/org/keycloak/models/dblock/DBLockLockingMechanismProvider.java,"@@ -0,0 +1,64 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.dblock;++import org.keycloak.models.locking.LockingMechanismProvider;++public class DBLockLockingMechanismProvider implements LockingMechanismProvider {++    private final DBLockProvider dbLockProvider;+    public DBLockLockingMechanismProvider(DBLockProvider dbLockProvider) {+        this.dbLockProvider = dbLockProvider;+    }++    private static DBLockProvider.Namespace stringToNamespace(String lockName) {+        if (""database"".equals(lockName)) {+            return DBLockProvider.Namespace.DATABASE;+        } else if (""keycloak-boot"".equals(lockName)) {+            return DBLockProvider.Namespace.KEYCLOAK_BOOT;+        } else if (""offline-sessions"".equals(lockName)) {+            return DBLockProvider.Namespace.OFFLINE_SESSIONS;+        } else {+            throw new RuntimeException(""Lock with name "" + lockName + "" not supported by DBLockLockingMechanism"");+        }+    }++    @Override+    public void acquireLock(String lockName) {","One question: I didn't replace the usage of `DBLock` in legacy modules. For example, I left it [here](https://github.com/keycloak/keycloak/blob/9c007e3779202b1516d4495c49494e2701369f39/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/initializer/DBLockBasedCacheInitializer.java#L69). Do you think it makes sense to use the new `GlobalLock` in legacy modules? To me, it seems unnecessary as all legacy code will always use only `DBLock` at the end.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/13677,992321386,2022-10-11T13:22:49Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanSingleUseObjectProviderFactory.java,"@@ -86,7 +71,15 @@ public void init(Config.Scope config) {      @Override     public void postInit(KeycloakSessionFactory factory) {-+        // It is necessary to put the cache initialization here, otherwise the cache would be initialized lazily, that+        // means also listeners will start only after first cache initialization - that would be too late+        if (singleUseObjectCache == null) {+            synchronized (this) {+                if (singleUseObjectCache == null) {","This synchronization can be removed since `postInit` is executed only once at the initialization in a single thread, so contrary to lazy init, there is only a single caller.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14751,992388257,2022-10-11T14:16:23Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLockProvider.java,"@@ -0,0 +1,68 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++import org.keycloak.provider.Provider;++import java.time.Duration;+import java.util.concurrent.TimeoutException;++public interface GlobalLockProvider extends Provider {++    String DATABASE = ""database"";+    String KEYCLOAK_BOOT = ""keycloak-boot"";","No constants in an interface please. For example, you can introduce a `GlobalLock.Constants` class for declaring the constants.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14819,993327163,2022-10-12T11:20:18Z,model/jpa/src/main/java/org/keycloak/events/jpa/JpaEventStoreProvider.java,"@@ -276,17 +276,21 @@ protected void clearExpiredAdminEvents() {         CriteriaBuilder cb = em.getCriteriaBuilder();         CriteriaQuery<RealmAttributeEntity> cr = cb.createQuery(RealmAttributeEntity.class);         Root<RealmAttributeEntity> root = cr.from(RealmAttributeEntity.class);-        cr.select(root).where(cb.and(cb.equal(root.get(""name""),RealmAttributes.ADMIN_EVENTS_EXPIRATION),cb.greaterThan(root.get(""value"").as(Long.class),Long.valueOf(0))));-        Map<Long, List<RealmAttributeEntity>> realms = em.createQuery(cr).getResultStream().collect(Collectors.groupingBy(attribute -> Long.valueOf(attribute.getValue())));+        // unable to cast the CLOB to a BIGINT in the select for H2 2.x, therefore comparing strings only in the DB, and filtering again in the next statement+        cr.select(root).where(cb.and(cb.equal(root.get(""name""),RealmAttributes.ADMIN_EVENTS_EXPIRATION),cb.notEqual(root.get(""value""), ""0"")));+        Map<Long, List<RealmAttributeEntity>> realms = em.createQuery(cr).getResultStream()+                // filtering again on the attribute as paring the CLOB to BIGINT didn't work in H2 2.x+                .filter(attribute -> Long.parseLong(attribute.getValue()) > 0)","I think it still makes sense to run those, especially due to the changes in `JpaEventStoreProvider` class.",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/13677,993330253,2022-10-12T11:24:03Z,model/map-jpa/src/main/resources/META-INF/single-use-objects/jpa-single-use-objects-changelog-1.xml,"@@ -47,9 +47,6 @@ limitations under the License.         <createIndex tableName=""kc_single_use_obj"" indexName=""single_use_obj_expiration"">             <column name=""expiration""/>         </createIndex>-        <ext:createJsonIndex tableName=""kc_single_use_obj"" indexName=""kc_single_use_obj_nonce"">-            <ext:column jsonColumn=""metadata"" jsonProperty=""fActionVerificationNonce""/>-        </ext:createJsonIndex>","Thanks. I fixed it. It should work as expected:```keycloak=# \d kc_single_use_obj...Indexes:    ""kc_single_use_obj_pkey"" PRIMARY KEY, btree (id)    ""single_use_obj_entityVersion"" btree (entityversion)    ""single_use_obj_expiration"" btree (expiration)    ""single_use_obj_objectKey"" btree (objectkey)Referenced by:    ...```There is no longer the following index: `""kc_single_use_obj_nonce"" gin ((metadata -> 'fActionVerificationNonce'::text) jsonb_path_ops)`",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/13677,993338311,2022-10-12T11:31:09Z,model/map-jpa/src/main/resources/META-INF/single-use-objects/jpa-single-use-objects-changelog-2.xml,"@@ -0,0 +1,31 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+Copyright 2022 Red Hat, Inc. and/or its affiliates+and other contributors as indicated by the @author tags.++Licensed under the Apache License, Version 2.0 (the ""License"");+you may not use this file except in compliance with the License.+You may obtain a copy of the License at++http://www.apache.org/licenses/LICENSE-2.0++Unless required by applicable law or agreed to in writing, software+distributed under the License is distributed on an ""AS IS"" BASIS,+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+See the License for the specific language governing permissions and+limitations under the License.+-->+++<databaseChangeLog xmlns=""http://www.liquibase.org/xml/ns/dbchangelog"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+                   xmlns:ext=""http://www.liquibase.org/xml/ns/dbchangelog-ext""+                   xsi:schemaLocation=""http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd+                    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"">++    <changeSet author=""keycloak"" id=""single-use-object-2"">++        <dropIndex tableName=""kc_single_use_obj"" indexName=""kc_single_use_obj_nonce""/>",Please move the `changeSet` to `jpa-single-use-objects-changelog-1.xml`. The number (at the end of the name) should correspond to current_schema_version and it remains the same[1]. [1] https://github.com/keycloak/keycloak/blob/main/model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/Constants.java#L36,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/14896,996944568,2022-10-17T11:28:58Z,operator/src/main/java/org/keycloak/operator/Constants.java,"@@ -42,7 +42,8 @@ public final class Constants {     public static final Map<String, String> DEFAULT_DIST_CONFIG = Map.of(         ""health-enabled"",""true"",         ""cache"", ""ispn"",-        ""cache-stack"", ""kubernetes""+        ""cache-stack"", ""kubernetes"",+        ""proxy"", ""passthrough""","I am using `passthrough` as the default for now (it is working fine even without TLS and we have a [test](https://github.com/keycloak/keycloak/blob/037b1743a38ab57d50047c004415b1197d04f19d/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java#L39-L67) for it, so we'd catch if it wasn't).The docs for proxy modes can be found [here](https://www.keycloak.org/server/reverseproxy#_proxy_modes).",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14800,996960644,2022-10-17T11:47:08Z,server-spi/src/main/java/org/keycloak/models/OTPPolicy.java,"@@ -18,6 +18,7 @@ package org.keycloak.models;  import org.jboss.logging.Logger;+import org.keycloak.authentication.otp.OTPApplicationProvider;","Minor: This import is not needed similarly like the import of the other class. Looks like some imports can be even removed from this class when the code related to ""getSupportedApplications"" was removed?",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/14895,996994195,2022-10-17T12:24:32Z,.github/workflows/ci.yml,"@@ -274,6 +274,86 @@ jobs:           path: reports-${{ matrix.server }}-base-tests-${{ matrix.tests }}.zip           if-no-files-found: ignore +  test-fips:+    name: Base testsuite (fips)+    needs: build+    runs-on: ubuntu-latest+    strategy:+      matrix:+        server: ['bcfips-nonapproved-pkcs12']+        tests: ['group1']+      fail-fast: false+    steps:+      - uses: actions/checkout@v3+        with:+          fetch-depth: 2++      - name: Check whether HEAD^ contains crypto related changes+        run: echo ""GIT_CRYPTO_RELEVANT_DIFF=$( git diff --name-only HEAD^ | egrep -ic -e 'crypto' )"" >> $GITHUB_ENV++      - name: Cache Maven packages+        if: ${{ github.event_name != 'pull_request' || env.GIT_CRYPTO_RELEVANT_DIFF != 0 }}","I think I know the reasoning behind the condition. However, given how FIPS changes the runtime and how much the server rely on crypto operations, wouldn't be safer to always run the tests?",
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/14906,997002403,2022-10-17T12:33:03Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakIngress.java,"@@ -119,9 +121,9 @@ protected Ingress fetchExistingIngress() {     }      public void updateStatus(KeycloakStatusBuilder status) {-        if (!keycloak.getSpec().isDisableDefaultIngress() && existingIngress == null) {+        IngressSpec ingressSpec = keycloak.getSpec().getIngressSpec();+        if (ingressSpec != null && ingressSpec.isIngressEnabled() && existingIngress == null) {","@mabartos you're absolutely right, I resolved it by doing the null check earlier and not in the condition directly. Please, check it once again. Thanks!",
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/14906,997020621,2022-10-17T12:51:05Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/IngressSpec.java,"@@ -0,0 +1,19 @@+package org.keycloak.operator.crds.v2alpha1.deployment;++import com.fasterxml.jackson.annotation.JsonProperty;+import io.sundr.builder.annotations.Buildable;++@Buildable(editableEnabled = false, builderPackage = ""io.fabric8.kubernetes.api.builder"")+public class IngressSpec {++    @JsonProperty(""enabled"")+    private boolean ingress;","@mabartos I introduced the new `ingressSpecDefined` parameter, based on which I can easily control, whether the spec is defined or not. Based on that I added two new test-cases. Please, could you check it once more?> we don't have to check the ""nullability"" of the property later.I think that this might not be accurate - I am rather checking the nullability of ingress spec and not its boolean property. So I would say the check is necessary one way or another (as I mentioned earlier - I had it implemented like that, so I kinda experimented with it). But I might be wrong or missing something that you see. Let me know. Thanks!",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/14906,997168068,2022-10-17T14:55:35Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/spec/IngressSpec.java,"@@ -0,0 +1,36 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.operator.crds.v2alpha1.deployment.spec;++import com.fasterxml.jackson.annotation.JsonProperty;+import io.sundr.builder.annotations.Buildable;++@Buildable(editableEnabled = false, builderPackage = ""io.fabric8.kubernetes.api.builder"")+public class IngressSpec {++    @JsonProperty(""enabled"")+    private boolean ingress;",I think we need to explicitly set this to `true`. Let's say somebody will specify the Ingress spec but not `enabled`. Then it'll default to `false` (thanks to how Java [sets](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html) default values for primitive types) which is incorrect.,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14895,997342570,2022-10-17T17:40:52Z,.github/workflows/ci.yml,"@@ -274,6 +274,86 @@ jobs:           path: reports-${{ matrix.server }}-base-tests-${{ matrix.tests }}.zip           if-no-files-found: ignore +  test-fips:+    name: Base testsuite (fips)+    needs: build+    runs-on: ubuntu-latest+    strategy:+      matrix:+        server: ['bcfips-nonapproved-pkcs12']+        tests: ['group1']+      fail-fast: false+    steps:+      - uses: actions/checkout@v3+        with:+          fetch-depth: 2++      - name: Check whether HEAD^ contains crypto related changes+        run: echo ""GIT_CRYPTO_RELEVANT_DIFF=$( git diff --name-only HEAD^ | egrep -ic -e 'crypto' )"" >> $GITHUB_ENV++      - name: Cache Maven packages+        if: ${{ github.event_name != 'pull_request' || env.GIT_CRYPTO_RELEVANT_DIFF != 0 }}","Yes, I was a bit undecided whether to add condition or not and I've added it first. But I've removed it now based on your feedback. We can see if GH action builds are OK and eventually add the condition later if it turns that PR builds are too long...",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/14906,997883129,2022-10-18T08:24:05Z,kubernetes/keycloaks.keycloak.org-v1.yml,"@@ -2674,9 +2674,13 @@ spec:                   A secret containing the TLS configuration for HTTPS. Reference: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets.                   The special value `INSECURE-DISABLE` disables https.                 type: string-              disableDefaultIngress:-                description: Disable the default ingress.-                type: boolean+              ingress:+                description: |-+                  The deployment is, by default, exposed through a basic nginx ingress.",Good point! This comes from the [docs](https://github.com/keycloak/keycloak/blob/main/docs/guides/src/main/operator/basic-deployment.adoc#accessing-the-keycloak-deployment) and obviously is a mistake. We can't assume nginx controller is the default here.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/14861,998074241,2022-10-18T11:21:56Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDistConfigurator.java,"@@ -82,34 +83,32 @@ public void configureDistOptions() {      */     public void validateOptions(KeycloakStatusBuilder status) {         assumeFirstClassCitizens(status);++        validateHostname(status);     }      /* ---------- Configuration of first-class citizen fields ---------- */      public void configureHostname() {-        var kcContainer = deployment.getSpec().getTemplate().getSpec().getContainers().get(0);-        var hostname = keycloakCR.getSpec().getHostname();-        var envVars = kcContainer.getEnv();-        if (keycloakCR.getSpec().isHostnameDisabled()) {-            var disableStrictHostname = List.of(-                    new EnvVarBuilder()-                            .withName(""KC_HOSTNAME_STRICT"")-                            .withValue(""false"")-                            .build(),-                    new EnvVarBuilder()-                            .withName(""KC_HOSTNAME_STRICT_BACKCHANNEL"")-                            .withValue(""false"")-                            .build());+        optionMapper(keycloakCR.getSpec().getHostnameSpec())+                .mapOption(""hostname"", HostnameSpec::getHostname)+                .mapOption(""hostname-url"", HostnameSpec::getUrl)+                .mapOption(""hostname-port"", HostnameSpec::getPort)+                .mapOption(""hostname-admin"", HostnameSpec::getAdmin)+                .mapOption(""hostname-admin-url"", HostnameSpec::getAdminUrl)+                .mapOption(""hostname-strict"", HostnameSpec::isStrict)+                .mapOption(""hostname-strict-backchannel"", HostnameSpec::isStrictBackchannel);+    } -            envVars.addAll(disableStrictHostname);-        } else {-            var enabledStrictHostname = List.of(-                    new EnvVarBuilder()-                            .withName(""KC_HOSTNAME"")-                            .withValue(hostname)-                            .build());+    private void validateHostname(KeycloakStatusBuilder status) {+        var hostnameSpec = keycloakCR.getSpec().getHostnameSpec();+        if (hostnameSpec != null && hostnameSpec.getPort() != null) {+            var specifiedPort = hostnameSpec.getPort(); -            envVars.addAll(enabledStrictHostname);+            if (!specifiedPort.equals(Constants.KEYCLOAK_HTTP_PORT) || !specifiedPort.equals(Constants.KEYCLOAK_HTTPS_PORT)) {+                status.addWarningMessage(""It is not possible to change 'hostname-port' at this moment. "" +",I'm not sure if we can so strict about the `hostname-port` because you might have proxy in front of the cluster. I'm saying that based on past issues where there is a proxy chain (e.g.: https://github.com/keycloak/keycloak/issues/13261) and people exposing the server using a port other than the defaults.For me we should either remove `hostname-port` from the CR or remove this validation.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14891,998250830,2022-10-18T13:43:59Z,model/jpa/src/main/java/org/keycloak/events/jpa/JpaEventStoreProviderFactory.java,"@@ -34,16 +33,18 @@ public class JpaEventStoreProviderFactory implements EventStoreProviderFactory,      public static final String ID = ""jpa"";     private int maxDetailLength;+    private int maxFieldLength;      @Override     public EventStoreProvider create(KeycloakSession session) {         JpaConnectionProvider connection = session.getProvider(JpaConnectionProvider.class);-        return new JpaEventStoreProvider(session, connection.getEntityManager(), maxDetailLength);+        return new JpaEventStoreProvider(session, connection.getEntityManager(), maxDetailLength, maxFieldLength);     }      @Override     public void init(Config.Scope config) {-        maxDetailLength = config.getInt(""max-detail-length"", 0);+        maxDetailLength = config.getInt(""max-detail-length"", -1);+        maxFieldLength = config.getInt(""max-field-length"", -1);",These should be checked to be greater than 3 (otherwise they can lead to an exception later),
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/14861,999185924,2022-10-19T09:28:53Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDistConfigurator.java,"@@ -82,34 +83,32 @@ public void configureDistOptions() {      */     public void validateOptions(KeycloakStatusBuilder status) {         assumeFirstClassCitizens(status);++        validateHostname(status);     }      /* ---------- Configuration of first-class citizen fields ---------- */      public void configureHostname() {-        var kcContainer = deployment.getSpec().getTemplate().getSpec().getContainers().get(0);-        var hostname = keycloakCR.getSpec().getHostname();-        var envVars = kcContainer.getEnv();-        if (keycloakCR.getSpec().isHostnameDisabled()) {-            var disableStrictHostname = List.of(-                    new EnvVarBuilder()-                            .withName(""KC_HOSTNAME_STRICT"")-                            .withValue(""false"")-                            .build(),-                    new EnvVarBuilder()-                            .withName(""KC_HOSTNAME_STRICT_BACKCHANNEL"")-                            .withValue(""false"")-                            .build());+        optionMapper(keycloakCR.getSpec().getHostnameSpec())+                .mapOption(""hostname"", HostnameSpec::getHostname)+                .mapOption(""hostname-url"", HostnameSpec::getUrl)+                .mapOption(""hostname-port"", HostnameSpec::getPort)+                .mapOption(""hostname-admin"", HostnameSpec::getAdmin)+                .mapOption(""hostname-admin-url"", HostnameSpec::getAdminUrl)+                .mapOption(""hostname-strict"", HostnameSpec::isStrict)+                .mapOption(""hostname-strict-backchannel"", HostnameSpec::isStrictBackchannel);+    } -            envVars.addAll(disableStrictHostname);-        } else {-            var enabledStrictHostname = List.of(-                    new EnvVarBuilder()-                            .withName(""KC_HOSTNAME"")-                            .withValue(hostname)-                            .build());+    private void validateHostname(KeycloakStatusBuilder status) {+        var hostnameSpec = keycloakCR.getSpec().getHostnameSpec();+        if (hostnameSpec != null && hostnameSpec.getPort() != null) {+            var specifiedPort = hostnameSpec.getPort(); -            envVars.addAll(enabledStrictHostname);+            if (!specifiedPort.equals(Constants.KEYCLOAK_HTTP_PORT) || !specifiedPort.equals(Constants.KEYCLOAK_HTTPS_PORT)) {+                status.addWarningMessage(""It is not possible to change 'hostname-port' at this moment. "" +","Interesting issue with the proxy chain. Thanks for bringing this up. I'm in to remove `hostname-port` for now, as described below.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/14961,999225637,2022-10-19T10:04:04Z,docs/guides/src/main/server/keycloak-truststore.adoc,"@@ -2,7 +2,7 @@ <#import ""/templates/kc.adoc"" as kc>  <@tmpl.guide-title=""Configuring a Truststore""+title=""Configuring a Truststore for Outgoing TLS connections""","I don't think this is necessary as it's explained in the summary, and would make the title very long/ugly. Maybe it would be better to expand on the summary to mention what type of TLS connections?",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/14995,999324845,2022-10-19T11:39:49Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/services/resources/QuarkusWelcomeResource.java,"@@ -164,6 +158,7 @@ public Response getResource(@PathParam(""path"") String path) {                 return Response.status(Response.Status.NOT_FOUND).build();             }         } catch (IOException e) {+            logger.error(""unable to render welcome page"", e);             throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);","If I don't remember incorrectly you could also pass the original exception to WebApplicationException, and the filter we have on catching exceptions should make sure it is logged, and details not leaked externally.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/14944,999878100,2022-10-19T19:54:16Z,model/map/src/main/java/org/keycloak/models/map/storage/QueryParameters.java,"@@ -69,6 +70,21 @@ public QueryParameters<M> orderBy(SearchableModelField<M> searchableModelField,         return this;     } +    @Override+    public boolean equals(Object o) {+        if (this == o) return true;+        if (o == null || getClass() != o.getClass()) return false;+        QueryParameters<?> that = (QueryParameters<?>) o;+        // there is currently no equals method for the ModelCriteriaBuilder, take its String representation as a substitute.+        return Objects.equals(offset, that.offset) && Objects.equals(limit, that.limit) && Objects.equals(orderBy, that.orderBy) && Objects.equals(mcb.toString(), that.mcb.toString());+    }++    @Override+    public int hashCode() {+        // there is currently no equals method for the ModelCriteriaBuilder, take its String representation as a substitute.",Hi @hmlnarik - I pushed the next commit that doesn't rely on that comparison any more. Instead it first maps it to a JPA criteria query and then extracts the caching key from there. You mention that `ModelCriteriaBuilder` doesn't need to define a `toString`. At the same time `QueryParameters` always uses a `DefaultModelCriteria` which does have a `toString()`. Should the `QueryParameters` constructor be changed to accept a different class?,x
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/15034,999936171,2022-10-19T21:08:49Z,pom.xml,"@@ -84,7 +84,7 @@         <infinispan.version>13.0.10.Final</infinispan.version>         <infinispan.protostream.processor.version>4.4.1.Final</infinispan.protostream.processor.version>         <javax.annotation-api.version>1.3.2</javax.annotation-api.version>-        <jackson.version>2.13.4</jackson.version>+        <jackson.version>2.13.4.20221013</jackson.version>","Now that you mentioned, I will definitely use the script. I have one small question. The reason why I updated jackson to `2.13.4.20221013` was to keep those versions in sync with Quarkus. See:  https://github.com/quarkusio/quarkus/blob/2.13.3.Final/bom/application/pom.xml#L86.Do you think it is ok to update to `2.13.4.2`?",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/14973,1000275512,2022-10-20T08:00:21Z,server-spi/src/main/java/org/keycloak/models/UserSessionProvider.java,"@@ -33,12 +33,6 @@  */ public interface UserSessionProvider extends Provider { -    /**-     * Returns currently used Keycloak session.-     * @return {@link KeycloakSession}-     */-    KeycloakSession getKeycloakSession();","This method was introduced because login failures were extracted to the separate area and we needed to add default implementations to route calls to that area. I removed it because it is no longer necessary for that purpose, however, I just realized I probably can't just remove it as it was part of API. WDYT? Should we revert? If yes, should we deprecate this method as it is no longer necessary? ",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/14989,1000364257,2022-10-20T09:11:41Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/KeycloakSpec.java,"@@ -73,6 +75,10 @@ public class KeycloakSpec {     @JsonPropertyDescription(""In this section you can find all properties related to the settings of transaction behavior."")     private TransactionsSpec transactionsSpec; +    @JsonProperty(""db"")+    @JsonPropertyDescription(""In this section you can find all properties related to connect to a database."")","```suggestion    @JsonPropertyDescription(""In this section you can find all properties related to connecting to a database."")```",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/15068,1000953182,2022-10-20T17:57:50Z,services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java,"@@ -61,8 +62,11 @@      @Override     protected KeyWrapper loadKey(RealmModel realm, ComponentModel model) {-        try (FileInputStream is = new FileInputStream(model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_KEY))) {-            KeyStore keyStore = KeyStore.getInstance(""JKS"");+        String keystorePath = model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_KEY);+        try (FileInputStream is = new FileInputStream(keystorePath)) {",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).This path depends on a [user-provided value](64).This path depends on a [user-provided value](65).This path depends on a [user-provided value](66).This path depends on a [user-provided value](67).This path depends on a [user-provided value](68).This path depends on a [user-provided value](69).This path depends on a [user-provided value](70).This path depends on a [user-provided value](71).This path depends on a [user-provided value](72).This path depends on a [user-provided value](73).This path depends on a [user-provided value](74).This path depends on a [user-provided value](75).This path depends on a [user-provided value](76).This path depends on a [user-provided value](77).This path depends on a [user-provided value](78).This path depends on a [user-provided value](79).This path depends on a [user-provided value](80).This path depends on a [user-provided value](81).This path depends on a [user-provided value](82).This [Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2057),x
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/15082,1001962721,2022-10-21T16:06:55Z,services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java,"@@ -134,6 +134,12 @@ public Response createUser(final UserRepresentation rep) {         if (session.users().getUserByUsername(realm, username) != null) {             return ErrorResponse.exists(""User exists with same username"");         }++        // Check if username is already used as email by other user+        if (session.users().getUserByEmail(realm, username) != null){+            return ErrorResponse.exists(""User name is already associated with an existing user"");+        }+","@Vividious the issue that I see with the changes proposed, is the fact that it opens the door for an adversary to enumerate valid e-mails into the database, only trying to register several e-mails and checking for the error message.Another alternative to mitigate the issue, is to prevent users from registering e-mails as username by default, and allowing them to switch off if they would like to allow it.Others may think different from me, so please take my word with a grain of salt.I will include @stianst @hmlnarik and @douglaspalmer as reviewers to see what they think.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14944,1003022399,2022-10-24T08:21:23Z,model/map/src/main/java/org/keycloak/models/map/storage/QueryParameters.java,"@@ -69,6 +70,21 @@ public QueryParameters<M> orderBy(SearchableModelField<M> searchableModelField,         return this;     } +    @Override+    public boolean equals(Object o) {+        if (this == o) return true;+        if (o == null || getClass() != o.getClass()) return false;+        QueryParameters<?> that = (QueryParameters<?>) o;+        // there is currently no equals method for the ModelCriteriaBuilder, take its String representation as a substitute.+        return Objects.equals(offset, that.offset) && Objects.equals(limit, that.limit) && Objects.equals(orderBy, that.orderBy) && Objects.equals(mcb.toString(), that.mcb.toString());+    }++    @Override+    public int hashCode() {+        // there is currently no equals method for the ModelCriteriaBuilder, take its String representation as a substitute.","Thank you for the changes, please consider this comment resolved from my POV.> Should the QueryParameters constructor be changed to accept a different class?Not now, but it is possible in the future.If `JpaModelCriteriaBuilder` defined `equals` and `hashCode`, perhaps we could leverage those instead of converting criteria to a `String`. On the other hand I see it as a potential next-step optimization, and would like to see the code in the current shape to be merged, as I believe it should already have visible impact.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/14925,1003354899,2022-10-24T14:02:59Z,model/infinispan/src/main/resources/default-configs/default-keycloak-jgroups-udp.xml,"@@ -44,18 +43,17 @@              xmit_table_msgs_per_row=""1024""              xmit_table_max_compaction_time=""30000""    />-   <pbcast.STABLE stability_delay=""500""-                  desired_avg_gossip=""5000""+   <pbcast.STABLE desired_avg_gossip=""5000""                   max_bytes=""1M""    />    <pbcast.GMS print_local_addr=""false""-               join_timeout=""${jgroups.join_timeout:500}""+               join_timeout=""${jgroups.join_timeout:2000}""",@hmlnarik Do you know why default `jgroups.join_timeout` was set to 500 and default in Infinispan [default config was 2000](https://github.com/infinispan/infinispan/blob/11.0.9.Final/core/src/main/resources/default-configs/default-jgroups-udp.xml#L52)? Was it no purpose or we want to use default ISPN value?,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15082,1003623602,2022-10-24T18:26:03Z,services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java,"@@ -134,6 +134,12 @@ public Response createUser(final UserRepresentation rep) {         if (session.users().getUserByUsername(realm, username) != null) {             return ErrorResponse.exists(""User exists with same username"");         }++        // Check if username is already used as email by other user+        if (session.users().getUserByEmail(realm, username) != null){+            return ErrorResponse.exists(""User name is already associated with an existing user"");+        }+",As long as self-service registration is open this makes no difference from an enumeration perspective.,
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/15122,1004174060,2022-10-25T08:36:29Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/realm/HotRodRealmEntity.java,"@@ -271,6 +271,9 @@ public interface HotRodRealmEntitySchema extends GeneratedSchema {     @ProtoField(number = 77)     public Set<String> supportedLocales; +    @ProtoField(number = 78)+    public Boolean emailFormatAsUsernameAllowed;","@mabartos Good question! I discussed it briefly with @mhajas and we incline towards adding new fields to attributes whenever possible. Also for `map-jpa`, it maybe belongs to attributes but I would let @vramik to verify it.This approach however creates inconsistency mainly in `HotRodRealmEntity` where legacy fields are directly defined in entity while new fields will be added to attributes. @hmlnarik Is this OK or do we want to have a wider discussion about this in the storage team?",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/15204,1007964136,2022-10-28T11:32:09Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/kerberos/AbstractKerberosSingleRealmTest.java,"@@ -131,35 +132,19 @@ public void usernamePasswordLoginTest() throws Exception {         // Change editMode to READ_ONLY         updateProviderEditMode(UserStorageProvider.EditMode.READ_ONLY); -        // Login with username/password from kerberos-        changePasswordPage.open();-        loginPage.assertCurrent();-        loginPage.login(""jduke"", ""theduke"");-        changePasswordPage.assertCurrent();","As this test case is included in the abstract test and is used for various additional test classes, IMHO, the login should be verified here via the LoginPage. Also, the test case is named `usernamePasswordLoginTest`, and one could say if I execute this successfully, I'm really confident the login works as expected.We're not sure the login with password `""theduke""` worked before, as it's tested in the following steps.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1008005717,2022-10-28T12:23:38Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/TransactionalResponseFilter.java,"@@ -0,0 +1,55 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.quarkus.runtime.integration.jaxrs;++import java.io.IOException;+import java.util.stream.Stream;+import javax.annotation.Priority;+import javax.ws.rs.container.ContainerRequestContext;+import javax.ws.rs.container.ContainerResponseContext;+import javax.ws.rs.container.ContainerResponseFilter;+import javax.ws.rs.container.PreMatching;+import javax.ws.rs.core.StreamingOutput;+import javax.ws.rs.ext.Provider;+import org.keycloak.common.util.Resteasy;+import org.keycloak.models.KeycloakSession;+import org.keycloak.quarkus.runtime.transaction.TransactionalSessionHandler;++@Provider+@PreMatching+@Priority(1)+public class TransactionalResponseFilter implements ContainerResponseFilter, TransactionalSessionHandler {++    @Override+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)+            throws IOException {+        Object entity = responseContext.getEntity();++        if (shouldDelaySessionClose(entity)) {+            return;+        }",I agree that streaming is the most common scenario when the session should be kept open. Still I could see other options when JSON serialization would pull some data from lazily loaded properties and would need to access the database. Therefore I wonder: could we always delay this to be consistent and safe?,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1008007024,2022-10-28T12:25:14Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/web/QuarkusRequestFilter.java,"@@ -68,89 +67,43 @@ public void handle(RoutingContext context) {         }         // our code should always be run as blocking until we don't provide a better support for running non-blocking code         // in the event loop-        context.vertx().executeBlocking(createBlockingHandler(context), false, EMPTY_RESULT);+        executor.execute(createBlockingHandler(context));","I see that this now changes to the executor thread pool. What were the reasons for that, and how would I configure the thread pool boundaries? If the execution throws an exception, where would it be logged? The old code just swallowed it, what would make analysis of problems difficult.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1008007705,2022-10-28T12:26:05Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/web/QuarkusRequestFilter.java,"@@ -68,89 +67,43 @@ public void handle(RoutingContext context) {         }         // our code should always be run as blocking until we don't provide a better support for running non-blocking code         // in the event loop-        context.vertx().executeBlocking(createBlockingHandler(context), false, EMPTY_RESULT);+        executor.execute(createBlockingHandler(context));     }      private boolean ignoreContext(RoutingContext context) {         return contextFilter != null && contextFilter.test(context);     } -    private Handler<Promise<Object>> createBlockingHandler(RoutingContext context) {-        return promise -> {-            KeycloakSessionFactory sessionFactory = getSessionFactory();-            KeycloakSession session = sessionFactory.create();--            configureContextualData(context, createClientConnection(context.request()), session);-            configureEndHandler(context, session);--            KeycloakTransactionManager tx = session.getTransactionManager();+    private Runnable createBlockingHandler(RoutingContext context) {+        return () -> {+            KeycloakSession session = configureContextualData(context);              try {-                tx.begin();                 context.next();-                promise.tryComplete();             } catch (Throwable cause) {-                promise.fail(cause);","When I debugged the old code, there was a similar catch block in the caller, so it would be ok to remove the catch here.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1008023574,2022-10-28T12:43:38Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/web/QuarkusRequestFilter.java,"@@ -68,89 +67,43 @@ public void handle(RoutingContext context) {         }         // our code should always be run as blocking until we don't provide a better support for running non-blocking code         // in the event loop-        context.vertx().executeBlocking(createBlockingHandler(context), false, EMPTY_RESULT);+        executor.execute(createBlockingHandler(context));","The executor is the same. We are basically using it directly instead of dispatching using `RoutingContext`. This is basically a cosmetic change as it makes the code much simpler, with the possibility of managing the request lifecycle a lot better as we can deal with completable|futures to add very nice non-functional aspects. For instance, better exception handling.I'm not doing it now as I want to just rely on the Vert.X/Quarkus/Resteasy error handing for now.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1008024270,2022-10-28T12:44:27Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/web/QuarkusRequestFilter.java,"@@ -68,89 +67,43 @@ public void handle(RoutingContext context) {         }         // our code should always be run as blocking until we don't provide a better support for running non-blocking code         // in the event loop-        context.vertx().executeBlocking(createBlockingHandler(context), false, EMPTY_RESULT);+        executor.execute(createBlockingHandler(context));     }      private boolean ignoreContext(RoutingContext context) {         return contextFilter != null && contextFilter.test(context);     } -    private Handler<Promise<Object>> createBlockingHandler(RoutingContext context) {-        return promise -> {-            KeycloakSessionFactory sessionFactory = getSessionFactory();-            KeycloakSession session = sessionFactory.create();--            configureContextualData(context, createClientConnection(context.request()), session);-            configureEndHandler(context, session);--            KeycloakTransactionManager tx = session.getTransactionManager();+    private Runnable createBlockingHandler(RoutingContext context) {+        return () -> {+            KeycloakSession session = configureContextualData(context);              try {-                tx.begin();                 context.next();-                promise.tryComplete();             } catch (Throwable cause) {-                promise.fail(cause);",I would rather keep it as now we have the possibility to better handle exceptions from dispatched threads.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1008210993,2022-10-28T15:46:17Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/web/QuarkusRequestFilter.java,"@@ -68,89 +67,43 @@ public void handle(RoutingContext context) {         }         // our code should always be run as blocking until we don't provide a better support for running non-blocking code         // in the event loop-        context.vertx().executeBlocking(createBlockingHandler(context), false, EMPTY_RESULT);+        executor.execute(createBlockingHandler(context));",I'd be happy if you could verify with a manual test how those exceptions in the future are handled in the Vert.X/Quarkus/Resteasy error handing. I'd hope they would be logged.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009229111,2022-10-31T09:57:27Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/web/QuarkusRequestFilter.java,"@@ -68,89 +67,43 @@ public void handle(RoutingContext context) {         }         // our code should always be run as blocking until we don't provide a better support for running non-blocking code         // in the event loop-        context.vertx().executeBlocking(createBlockingHandler(context), false, EMPTY_RESULT);+        executor.execute(createBlockingHandler(context));","I've tested what happens when an exception would happen after `context.next()`. I now see that the executor pool logs that information: ```2022-10-31 10:54:58,128 ERROR [org.jboss.threads.errors] (executor-thread-1) Thread Thread[executor-thread-1,5,main] threw an uncaught exception: java.lang.RuntimeException: java.lang.RuntimeException: oops	at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:88)	at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)	at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)	at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)	at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)	at java.base/java.lang.Thread.run(Thread.java:829)Caused by: java.lang.RuntimeException: oops	at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:84)	... 7 more```So this is resolved for me.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009266792,2022-10-31T10:36:55Z,server-spi/src/main/java/org/keycloak/models/KeycloakSession.java,"@@ -202,6 +202,8 @@ default <T> T getAttributeOrDefault(String attribute, T defaultValue) {      void close(); +    boolean isClosed();","I am not keen on extending the `KeycloakSession` with this method.Prevention of throwing an exception is the sole reason for this method. The use of this method exposes `KeycloakSession` internal state. If `KeycloakSession.close` was idempotent and for active transactions handled the transaction commit / rollback itself, this could be completely omitted, and `KeycloakSession`.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009271385,2022-10-31T10:42:20Z,server-spi/src/main/java/org/keycloak/models/KeycloakSession.java,"@@ -202,6 +202,8 @@ default <T> T getAttributeOrDefault(String attribute, T defaultValue) {      void close(); +    boolean isClosed();","Sorry, but I'm not following what you mean by exposing the state. Why exposing if the session is closed so bad?We are really missing this as well as proper checks to enable a safer usage of the session.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009314995,2022-10-31T11:36:23Z,server-spi/src/main/java/org/keycloak/models/KeycloakSession.java,"@@ -202,6 +202,8 @@ default <T> T getAttributeOrDefault(String attribute, T defaultValue) {      void close(); +    boolean isClosed();","The code which handles the transaction is this and is found at many places across the codebase:```java        KeycloakTransactionManager tx = session.getTransactionManager();        try {            if (tx.isActive()) {                if (tx.getRollbackOnly()) {                    tx.rollback();                } else {                    tx.commit();                }            }        } finally {            session.close();        }```There is no place in codebase which closes the session and does not have the transaction commit handling code before itself in try-finally block.This follows from the fact that closing session without committing the to-be-committed transaction is illegal: The changes in session would be lost, so the session should not exist in the first place.Hence this code could and should be enclosed in `KeycloakSession.close()` instead of repeating it at many times differently, e.g. [here](https://github.com/keycloak/keycloak/blob/17117820cc14f87f5990ddce80ef38a0e2e7f314/server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java#L255-L277) or [here](https://github.com/keycloak/keycloak/blob/17117820cc14f87f5990ddce80ef38a0e2e7f314/services/src/main/java/org/keycloak/services/filters/AbstractRequestFilter.java#L59-L68). This enclosing also makes `isClosed` method redundant. One of the consequences is that e.g. rollback-only transactions are not handled at all e.g. in [ScheduledTaskRunner](https://github.com/keycloak/keycloak/blob/main/server-spi-private/src/main/java/org/keycloak/services/scheduled/ScheduledTaskRunner.java)",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009353895,2022-10-31T12:24:26Z,server-spi/src/main/java/org/keycloak/models/KeycloakSession.java,"@@ -202,6 +202,8 @@ default <T> T getAttributeOrDefault(String attribute, T defaultValue) {      void close(); +    boolean isClosed();","I agree with @hmlnarik here. It would be much nicer if DefaultKeycloakSession#close handles the closing of the tx itself, so this boilerplate code isn't needed elsewhere.DefaultKeycloakSession#close could just be a no-op if the session is already closed, or maybe it would be better to throw an exception? Strictly speaking a session that is closed should throw an exception if someone tries to use it.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009366784,2022-10-31T12:39:19Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/transaction/TransactionalSessionHandler.java,"@@ -0,0 +1,70 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.quarkus.runtime.transaction;++import static org.keycloak.services.resources.KeycloakApplication.getSessionFactory;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.KeycloakTransactionManager;++/**+ * <p>A {@link TransactionalSessionHandler} is responsible for managing transaction sessions and its lifecycle. Its subtypes+ * are usually related to components available from the underlying stack that runs on top of the request processing chain+ * as well as at the end in order to create transaction sessions and close them accordingly, respectively.+ */+public interface TransactionalSessionHandler {++    /**+     * Creates a transactional {@link KeycloakSession}.+     *+     * @return a transactional keycloak session+     */+    default KeycloakSession create() {+        KeycloakSessionFactory sessionFactory = getSessionFactory();+        KeycloakSession session = sessionFactory.create();+        KeycloakTransactionManager tx = session.getTransactionManager();+        tx.begin();+        return session;+    }++    /**+     * Closes a transactional {@link KeycloakSession}.+     *+     * @param session a transactional session+     */+    default void close(KeycloakSession session) {+        if (session.isClosed()) {+            return;+        }","Under some circumstances, yes. One of them is when using RESTEasy async responses. In Quarkus we dispatch requests differently so we need to make sure the session is always closed after running RESTeasy. I know it looks redundant, but it is much safer.As mentioned by @ahus1, I did test some changes to throw exceptions when trying to use a closed session. But to properly implement it we need a bit more investigation to make sure we are covering all cases.IMO, exposing `isClosed` is just natural because it is a state that should be exposed. Not really different than what you see from other frameworks like Hibernate or even requests/responses from Vert.X. As mentioned before, this should be done as a follow-up as per https://github.com/keycloak/keycloak/issues/15224.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009479588,2022-10-31T14:23:40Z,server-spi/src/main/java/org/keycloak/models/KeycloakSession.java,"@@ -202,6 +202,8 @@ default <T> T getAttributeOrDefault(String attribute, T defaultValue) {      void close(); +    boolean isClosed();","I think throwing an exception makes more sense. I tried this approach and I like it because it gives a more defensive approach when managing the session lifecycle and quickly react when using it wrongly.Regarding encapsulating the close/commit, that is the reason why I've added the `TransactionalSessionHandler` to remove boilerplate code between components related to creating/closing *transactional* sessions within the distribution codebase, without introducing more changes to the core codebase.Still, I think we should expose whether or not a session is closed. We do have places where a session is only created to obtain providers without any transaction.  For instance, setting up background tasks.IMO, closing a session is purely about releasing providers/resources and not necessarily ending transactions. Keeping these two concepts separate is far more flexible than assuming a session is always transactional.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009560594,2022-10-31T15:33:01Z,server-spi/src/main/java/org/keycloak/models/KeycloakSession.java,"@@ -202,6 +202,8 @@ default <T> T getAttributeOrDefault(String attribute, T defaultValue) {      void close(); +    boolean isClosed();","Calling a session `close` twice is illegal operation, so an exception perhaps makes more sense.> Regarding encapsulating the close/commit, that is the reason why I've added the `TransactionalSessionHandler` to remove boilerplate code between components related to creating/closing _transactional_ sessions within the distribution codebase, without introducing more changes to the core codebase.I like the way of its separation from the rest of code, so +1 for this.> Still, I think we should expose whether or not a session is closed. We do have places where a session is only created to obtain providers without any transaction. For instance, setting up background tasks.Controlling the ""any transactions"" part by the code is not possible as there is always transaction manager instantiated in a session which is never cleared: https://github.com/keycloak/keycloak/blob/17117820cc14f87f5990ddce80ef38a0e2e7f314/services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java#L94Furthermore the code which uses the session has no access to actual transactions registered inside TM, so the `commit` / `rollback` operation is performed on TM and never on individual transactions directly, as shown e.g. here: https://github.com/keycloak/keycloak/blob/17117820cc14f87f5990ddce80ef38a0e2e7f314/services/src/main/java/org/keycloak/services/filters/AbstractRequestFilter.java#L64> IMO, closing a session is purely about releasing providers/resources and not necessarily ending transactions. Keeping these two concepts separate is far more flexible than assuming a session is always transactional.Should a provider be retrieved on an already closed session, it cannot read or write any data since the data transaction is committed, and - as also proposed in this PR - commit is never performed on an already closed session. Already closed session also contains potentially dirty transaction manager instance since that is never cleared (rightfully so). Thus I don't think that assumption of _closing a session is purely about releasing providers/resources_ is correct. Supporting concept of reusing keycloak session as declared in the current codebase would thus be prone to errors.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15193,1009719931,2022-10-31T18:11:08Z,server-spi/src/main/java/org/keycloak/models/KeycloakSession.java,"@@ -202,6 +202,8 @@ default <T> T getAttributeOrDefault(String attribute, T defaultValue) {      void close(); +    boolean isClosed();","I see.I'm not talking about reusing closed sessions, that is what we are discussing avoiding, right? My point is more about not assuming all usages of sessions are transactional. And we have this type of usage too.I would prefer an API with semantics similar to what JPA and other frameworks do.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15249,1010305137,2022-11-01T10:48:48Z,quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java,"@@ -272,7 +273,18 @@ private void configureDefaultPersistenceUnitProperties(ParsedPersistenceXmlDescr         Properties unitProperties = descriptor.getProperties();          unitProperties.setProperty(AvailableSettings.DIALECT, config.defaultPersistenceUnit.dialect.dialect.orElse(null));-        unitProperties.setProperty(AvailableSettings.JPA_TRANSACTION_TYPE, PersistenceUnitTransactionType.JTA.name());+        String storage = Configuration.getRawValue(",We can use this option to choose between `JTA` and `RESOURCE_LOCAL`. See https://github.com/keycloak/keycloak/blob/a76b597b35a4d9ce9015016db6f02793e4d03ea5/quarkus/config-api/src/main/java/org/keycloak/config/TransactionOptions.java#L12.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15249,1010308811,2022-11-01T10:54:25Z,quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java,"@@ -272,7 +273,18 @@ private void configureDefaultPersistenceUnitProperties(ParsedPersistenceXmlDescr         Properties unitProperties = descriptor.getProperties();          unitProperties.setProperty(AvailableSettings.DIALECT, config.defaultPersistenceUnit.dialect.dialect.orElse(null));-        unitProperties.setProperty(AvailableSettings.JPA_TRANSACTION_TYPE, PersistenceUnitTransactionType.JTA.name());+        String storage = Configuration.getRawValue(+                MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX.concat(StorageOptions.STORAGE.getKey()));+        if (storage == null) {+            // legacy store+            unitProperties.setProperty(AvailableSettings.JPA_TRANSACTION_TYPE, PersistenceUnitTransactionType.JTA.name());+        } else {+            // JPA map store; avoid JTA and use a direct (resource local) approach+            unitProperties.setProperty(AvailableSettings.JPA_TRANSACTION_TYPE, PersistenceUnitTransactionType.RESOURCE_LOCAL.name());+            // needed to change the connection handling to avoid Hibernate returning the connection too early,+            // which then interfered with the auto-commit reset that's done at the end of the transaction and PgConnection throwing a ""Cannot commit when autoCommit is enabled.""+            unitProperties.setProperty(AvailableSettings.CONNECTION_HANDLING, PhysicalConnectionHandlingMode.DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION.name());","See https://github.com/quarkusio/quarkus/blob/main/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootMetadataBuilder.java#L287.In the past, we had some discussions with Quarkus team about it. We can involve them again to see the implications of doing this. At that time, the discussions were around JTA, perhaps using resource local it can work well.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/9018,1011319021,2022-11-02T07:42:23Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/AuthorizationEndpoint.java,"@@ -127,6 +128,12 @@ private Response process(MultivaluedMap<String, String> params) {          checkSsl();         checkRealm();++        try {+            session.clientPolicy().triggerOnEvent(new PreAuthorizationRequestContext(clientId, params));+        } catch (ClientPolicyException cpe) {+            return redirectErrorToClient(parsedResponseMode, cpe.getError(), cpe.getErrorDetail());","Good catch!It seems that `redirectUri` is also not yet verified at this stage (it is being verified on line 150), so redirecting to the client to unverified redirect uri should not happen at this stage. It seems to me the possibilities are:- Change error handling to display Keycloak error page to the user instead of redirect to the client (similarly like done on L153 for invalid redirect URI)- Postpone trigger ""PreAuthorization"" event after successful verification of redirect URI, response type and response mode (Probably somewhere after line 171)Feel free to use any of these options according to your requirements for Solid OIDC.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/14437,1012546533,2022-11-03T06:50:42Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/PasswordHashingTest.java,"@@ -224,6 +225,18 @@ public void testPbkdf2Sha512() throws Exception {         assertEncoded(credential, ""password"", credential.getPasswordSecretData().getSalt(), ""PBKDF2WithHmacSHA512"", 30000);     } +    @Test+    public void testPbkdf2Sha256BackwardsCompatibility() throws Exception {+        setPasswordPolicy(""hashAlgorithm("" + Pbkdf2Sha256PasswordHashProviderFactory.ID + "")"");+        String username = ""testPbkdf2Sha2562"";+        createUser(username);++        PasswordCredentialModel credential = PasswordCredentialModel.createFromCredentialModel(fetchCredentials(username));++        // Encoded without padding still works and should give same results as originally padded password+        assertEncoded(credential, ""password"", credential.getPasswordSecretData().getSalt(), ""PBKDF2WithHmacSHA256"", 27500);+    }+",This is just a duplicate of `https://github.com/keycloak/keycloak/blob/4a1382c1006f02d7626f625ea7ad4c0909992896/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/PasswordHashingTest.java#L209`What's the intent of this method?,x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/14437,1012559204,2022-11-03T07:15:09Z,server-spi-private/src/main/java/org/keycloak/credential/hash/Pbkdf2PasswordHashProvider.java,"@@ -132,4 +136,14 @@ private SecretKeyFactory getSecretKeyFactory() {             throw new RuntimeException(""PBKDF2 algorithm not found"", e);         }     }++    private String pbkdf2PasswordPadding(String rawPassword) {+        if (rawPassword.length() < maxPaddingLength) {+            int nPad = maxPaddingLength - rawPassword.length();+            String result = rawPassword;+            for (int i = 0 ; i < nPad; i++) result += ""\0"";+            return result;+        } else+            return rawPassword;+    }","Would have liked to see something testing this padding stuff. What about making it a static method, extracting into a separate class, and adding a unit test?",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/15299,1012662332,2022-11-03T09:25:29Z,services/src/main/java/org/keycloak/truststore/SSLSocketFactory.java,"@@ -58,7 +65,17 @@ private SSLSocketFactory() {             sf = (javax.net.ssl.SSLSocketFactory) javax.net.ssl.SSLSocketFactory.getDefault();         } -        sslsf = sf;+        Supplier<String> hostnameProvider = () -> {+            KeycloakSession session = Resteasy.getProvider().getContextData(KeycloakSession.class);+            if (session == null) {+                log.tracef(""Not found keycloakSession in the resteasy context when trying to retrieve hostname attribute from it"");+                return null;+            }+            String hostname = session.getAttribute(Constants.SSL_SERVER_HOST_ATTR, String.class);+            log.tracef(""Found hostname '%s' to be used by SSLSocketFactory"", hostname);+            return hostname;+        };","The reason is, that this code uses stuff from `keycloak-services`, but `keycloak-crypto-fips1402` doesn't have dependency on `keycloak-services`.However I think it should work to add dependency on `keycloak-services` into `keycloak-crypto-fips1402` - especially since we have only quarkus distribution and don't need to deal with WF modules etc. So I can change it that way.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/14437,1012686823,2022-11-03T09:49:59Z,server-spi-private/src/main/java/org/keycloak/credential/hash/Pbkdf2PasswordHashProvider.java,"@@ -132,4 +136,14 @@ private SecretKeyFactory getSecretKeyFactory() {             throw new RuntimeException(""PBKDF2 algorithm not found"", e);         }     }++    private String pbkdf2PasswordPadding(String rawPassword) {+        if (rawPassword.length() < maxPaddingLength) {+            int nPad = maxPaddingLength - rawPassword.length();+            String result = rawPassword;+            for (int i = 0 ; i < nPad; i++) result += ""\0"";+            return result;+        } else+            return rawPassword;+    }","There is unit test `FIPS1402Pbkdf2PasswordPaddingTest` in this PR. It tests various scenarios like backwards compatibility (password without padding is possible to verify with padding) and also check that it works to switch between non-approved and approved mode for password verifications etc.It doesn't need static method as it relies on the fact, that our providers can be configured with system properties by default (class `org.keycloak.Config.SystemPropertiesScope`) and hence it directly works with Pbkdf2Sha256PasswordHashProviderFactory itself.It is in the `crypto/fips1402` module, and hence only in the FIPS specific module, however I considered this OK due the fact:- Padding will be most likely used especially by guys in the FIPS mode, if they cannot rely just on password policies (for example due the backwards compatibility and requirement of verification of old passwords)- These tests fare executed during our regular GH actions build, which runs the unit tests on the `crypto/fips1402` module.Isn't it sufficient?",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15131,1012712636,2022-11-03T10:15:36Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java,"@@ -201,7 +203,28 @@ public Response processGrantRequest() {          switch (action) {             case AUTHORIZATION_CODE:-                return codeToToken();+                // Code to token needs to be run in a retriable transaction as concurrent execution of this action can lead+                // to exceptions on DBs with SERIALIZABLE isolation level. See ConcurrentLoginTest#concurrentCodeReuseShouldFail.+                // If other actions lead to the same issue we might broaden the scope of the retriable block and do it for all actions.+                Object result = KeycloakModelUtils.runJobInRetriableTransaction(this.session.getKeycloakSessionFactory(), kcSession -> {+                    try {+                        RealmModel realmModel = kcSession.realms().getRealm(realm.getId());+                        ClientModel clientModel = realmModel.getClientByClientId(client.getClientId());+                        kcSession.getContext().setRealm(realmModel);+                        kcSession.getContext().setClient(clientModel);+                        return codeToToken(kcSession, realmModel, clientModel);+                    } catch (WebApplicationException we) {+                        // WebApplicationException needs to be returned and treated (rethrown) by the calling code because the new transaction+                        // still needs to be committed when this exception is thrown. It captures final business states that won't change when+                        // being retried, like an invalid code.+                        return we;+                    }","Given the separation proposed in this PR, could the whole code-to-token logic be moved to a private _static_ class within `TokenEndpoint`?As of now, it is possible to accidentally use `TokenEndpoint.session` field in any method needed in that flow since `codeToToken` method is member method of this class. This is error-prone especially if there would be any change needed in the future. Should any method be shared across `codeToToken` and any other method in this class, it could be declared `static`.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/14437,1012724716,2022-11-03T10:28:06Z,server-spi-private/src/main/java/org/keycloak/credential/hash/Pbkdf2PasswordHashProvider.java,"@@ -132,4 +136,14 @@ private SecretKeyFactory getSecretKeyFactory() {             throw new RuntimeException(""PBKDF2 algorithm not found"", e);         }     }++    private String pbkdf2PasswordPadding(String rawPassword) {+        if (rawPassword.length() < maxPaddingLength) {+            int nPad = maxPaddingLength - rawPassword.length();+            String result = rawPassword;+            for (int i = 0 ; i < nPad; i++) result += ""\0"";+            return result;+        } else+            return rawPassword;+    }","The tests now as I understand it checks that the password is compatible with padding on/off, and that it passes for the BC provider.However, it would be nice to see a simple unit test (or something) that just verifies the padding of the string works as expected before the hashing is performed. Could for instance be that it actually pads it to a few characters longer than it should, etc.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15341,1013689086,2022-11-04T07:14:55Z,quarkus/tests/integration/src/test/java/org/keycloak/it/storage/map/HotRodStoreDistTest.java,"@@ -32,7 +32,7 @@ public class HotRodStoreDistTest {     @Launch({ ""start"", ""--optimized"", ""--http-enabled=true"", ""--hostname-strict=false"" })     void testSuccessful(LaunchResult result) {         CLIResult cliResult = (CLIResult) result;-        cliResult.assertMessage(""Experimental feature enabled: map_storage"");+//        cliResult.assertMessage(""Experimental feature enabled: map_storage"");","There's no longer CLI output at startup to warn for preview/experimental features, so not sure how to test this.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15341,1013689260,2022-11-04T07:15:13Z,quarkus/tests/integration/src/test/java/org/keycloak/it/storage/map/JPAStoreDistTest.java,"@@ -33,7 +33,7 @@ public class JPAStoreDistTest {     @Launch({ ""start"", ""--optimized"", ""--http-enabled=true"", ""--hostname-strict=false"" })     void testSuccessful(LaunchResult result) {         CLIResult cliResult = (CLIResult) result;-        cliResult.assertMessage(""Experimental feature enabled: map_storage"");+//        cliResult.assertMessage(""Experimental feature enabled: map_storage"");","There's no longer CLI output at startup to warn for preview/experimental features, so not sure how to test this.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15341,1013693547,2022-11-04T07:22:52Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java,"@@ -290,6 +293,13 @@ public static KeycloakSessionFactory createKeycloakSessionFactory() {         LOG.debugf(""Creating factory %d in %s using the following configuration:\n    %s"", factoryIndex, threadName, CONFIG);          DefaultKeycloakSessionFactory res = new DefaultKeycloakSessionFactory() {++            @Override+            public void init() {","Need to initialize Profile for model tests as it is no longer initialized by default, which is to prevent mistakes not using the correctly configured Profile for a given runtime.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15341,1013894547,2022-11-04T11:20:32Z,quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java,"@@ -207,6 +209,26 @@ FeatureBuildItem getFeature() {         return new FeatureBuildItem(""keycloak"");     } +    @Record(ExecutionTime.STATIC_INIT)+    @BuildStep+    ConfigBuildItem initConfig(KeycloakRecorder recorder) {+        Config.init(new MicroProfileConfigProvider());+        recorder.initConfig();+        return new ConfigBuildItem();+    }++    @Record(ExecutionTime.STATIC_INIT)+    @BuildStep+    @Consume(ConfigBuildItem.class)+    ProfileBuildItem configureProfile(KeycloakRecorder recorder) {+        Profile profile = Profile.configure(+                new QuarkusProfileConfigResolver(),+                new PropertiesFileProfileConfigResolver()); // Need profile.properties for now as testsuite relies on it",We can do a follow-up but it should be possible to avoid installing the `PropertiesFileProfileConfigResolver` to the distribution but only during tests.This can be done using a conditional build step like here https://github.com/keycloak/keycloak/blob/1b7ae48dcb915d1cff39d530d2b1466f32604d20/quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java#L426.,
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/15351,1015285968,2022-11-07T11:01:25Z,operator/src/main/java/org/keycloak/operator/controllers/WatchedSecretsStore.java,"@@ -111,13 +111,12 @@ public void addLabelsToWatchedSecrets() {                  Log.infof(""Adding label to Secret \""%s\"""", secret.getMetadata().getName()); -                secret = new SecretBuilder(secret)-                        .editMetadata()-                        .addToLabels(Constants.KEYCLOAK_COMPONENT_LABEL, WATCHED_SECRETS_LABEL_VALUE)-                        .endMetadata()-                        .build();--                client.secrets().inNamespace(secret.getMetadata().getNamespace()).withName(secret.getMetadata().getName()).patch(secret);+                client.secrets().inNamespace(secret.getMetadata().getNamespace()).withName(secret.getMetadata().getName())","I'm afraid the `secret.getMetadata().getNamespace()` can throw NPE. As the code is executed even when the metadata are null for the secret. I'm not sure if it's possible that there are some secrets without metadata, but this method should be more ""defensive"" for this particular case.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/15351,1015294788,2022-11-07T11:11:05Z,operator/src/main/java/org/keycloak/operator/controllers/WatchedSecretsStore.java,"@@ -111,13 +111,12 @@ public void addLabelsToWatchedSecrets() {                  Log.infof(""Adding label to Secret \""%s\"""", secret.getMetadata().getName()); -                secret = new SecretBuilder(secret)-                        .editMetadata()-                        .addToLabels(Constants.KEYCLOAK_COMPONENT_LABEL, WATCHED_SECRETS_LABEL_VALUE)-                        .endMetadata()-                        .build();--                client.secrets().inNamespace(secret.getMetadata().getNamespace()).withName(secret.getMetadata().getName()).patch(secret);+                client.secrets().inNamespace(secret.getMetadata().getNamespace()).withName(secret.getMetadata().getName())","Thanks for the review!I think an NPE at this place in general (not just `secret.getMetadata().getNamespace()`) might be what we actually want as it would indicate something is really wrong (e.g. the Secret got deleted during the reconciliation loop). An in this case we want to retrigger the reconciliation which is exactly what we want. The point is, `secret.getMetadata()` should never be `null` as it should at the very least contain a name, right?",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/15351,1015328357,2022-11-07T11:48:57Z,operator/src/main/java/org/keycloak/operator/controllers/WatchedSecretsStore.java,"@@ -111,13 +111,12 @@ public void addLabelsToWatchedSecrets() {                  Log.infof(""Adding label to Secret \""%s\"""", secret.getMetadata().getName()); -                secret = new SecretBuilder(secret)-                        .editMetadata()-                        .addToLabels(Constants.KEYCLOAK_COMPONENT_LABEL, WATCHED_SECRETS_LABEL_VALUE)-                        .endMetadata()-                        .build();--                client.secrets().inNamespace(secret.getMetadata().getNamespace()).withName(secret.getMetadata().getName()).patch(secret);+                client.secrets().inNamespace(secret.getMetadata().getNamespace()).withName(secret.getMetadata().getName())","Yep, you're right. I've been thinking about it in a more fault-tolerant way as after some invalid secret creation in a cluster, the whole process could be canceled. I was thinking about some warning dump and ignoring the secret, but it's probably better not to continue and solve the issue with that. Moreover, without a name, the secret wouldn't even be fetched, so the metadata are always there.IMHO, the PR is ready to go. Thanks!",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/15131,1016873772,2022-11-08T16:40:36Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java,"@@ -201,7 +203,28 @@ public Response processGrantRequest() {          switch (action) {             case AUTHORIZATION_CODE:-                return codeToToken();+                // Code to token needs to be run in a retriable transaction as concurrent execution of this action can lead+                // to exceptions on DBs with SERIALIZABLE isolation level. See ConcurrentLoginTest#concurrentCodeReuseShouldFail.+                // If other actions lead to the same issue we might broaden the scope of the retriable block and do it for all actions.+                Object result = KeycloakModelUtils.runJobInRetriableTransaction(this.session.getKeycloakSessionFactory(), kcSession -> {+                    try {+                        RealmModel realmModel = kcSession.realms().getRealm(realm.getId());+                        ClientModel clientModel = realmModel.getClientByClientId(client.getClientId());+                        kcSession.getContext().setRealm(realmModel);+                        kcSession.getContext().setClient(clientModel);+                        return codeToToken(kcSession, realmModel, clientModel);+                    } catch (WebApplicationException we) {+                        // WebApplicationException needs to be returned and treated (rethrown) by the calling code because the new transaction+                        // still needs to be committed when this exception is thrown. It captures final business states that won't change when+                        // being retried, like an invalid code.+                        return we;+                    }","Extracting code to token into its own static class was a lot more messy than I thought. Many methods had to be made static and this required passing many new parameters everywhere, and each method turned static required that more methods were turned static too, and at end pretty much the whole endpoint was using static methods with tons of parameters.I decided to go for an alternative approach and I've put the whole `processGrantRequest` in a retriable block that uses its own instance of the endpoint. This isolates each attempt as they use their own instance of the endpoint and the final result is a lot more readable.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15131,1017623342,2022-11-09T08:40:19Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java,"@@ -172,14 +175,40 @@ public TokenEndpoint(TokenManager tokenManager, RealmModel realm, EventBuilder e     @Consumes(MediaType.APPLICATION_FORM_URLENCODED)     @POST     public Response processGrantRequest() {+        // grant request needs to be run in a retriable transaction as concurrent execution of this action can lead to+        // exceptions on DBs with SERIALIZABLE isolation level.+        Object result = KeycloakModelUtils.runJobInRetriableTransaction(this.session.getKeycloakSessionFactory(), kcSession -> {+            try {+                RealmModel realmModel = kcSession.realms().getRealm(realm.getId());+                kcSession.getContext().setRealm(realmModel);+                // create another instance of the endpoint that will be run within the new session.+                Resteasy.pushContext(KeycloakSession.class, kcSession);+                TokenEndpoint other = new TokenEndpoint(new TokenManager(), realmModel, new EventBuilder(realmModel, kcSession, clientConnection));+                ResteasyProviderFactory.getInstance().injectProperties(other);+                return other.processGrantRequestInternal();","I like the idea of creating a new instance. I wonder if the context should be restored afterwards? See below for a (untested) suggestion.```suggestion                KeycloakSession oldSession = Resteasy.getContextData(KeycloakSession.class);                try {                    Resteasy.pushContext(KeycloakSession.class, kcSession);                    TokenEndpoint other = new TokenEndpoint(new TokenManager(), realmModel, new EventBuilder(realmModel, kcSession, clientConnection));                    ResteasyProviderFactory.getInstance().injectProperties(other);                    return other.processGrantRequestInternal();                } finally {                    Resteasy.pushContext(KeycloakSession.class, oldSession);                }```",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/14751,1019235889,2022-11-10T14:52:20Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLock.java,"@@ -0,0 +1,35 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++/**+ * An object of this type represents a successfully acquired global lock provided by {@link GlobalLockProvider}+ */+public interface GlobalLock extends AutoCloseable {++    /**+     * Releases the lock represented by this+     */+    @Override+    void close();++    public static class Constants {+        public static final String DATABASE = ""database"";","What are the types of server-wide locks we have? I can think about a lock during boot (`keycloak-boot`). Any other?The reference to `database` there reads a bit weird as it is more an implementation detail on how the lock is implemented, right?",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/14751,1019306488,2022-11-10T15:45:00Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLock.java,"@@ -0,0 +1,35 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++/**+ * An object of this type represents a successfully acquired global lock provided by {@link GlobalLockProvider}+ */+public interface GlobalLock extends AutoCloseable {++    /**+     * Releases the lock represented by this+     */+    @Override+    void close();++    public static class Constants {+        public static final String DATABASE = ""database"";","> What are the types of server-wide locks we have? I can think about a lock during boot (keycloak-boot). Any other?For example, we need to lock specific area when initializing new map storage jpa, see: https://github.com/keycloak/keycloak/blob/main/model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java#L436Another example is locking HotRod storage when the proto schema is registered with the Infinispan server. Having more granular locks allows us to leave part of Keycloak operational while some other part is initialized.> The reference to database there reads a bit weird as it is more an implementation detail on how the lock is implemented, right?The constant `database` in this case doesn't mean the locks are provided by the database. The constant serves for marking all blocks of the code that should not be visited by more threads/nodes at the same time.So for example, if Liquibase update is running we will acquire lock with name `database`, this means that all other threads/nodes know someone else is doing Liquibase update so they wait until the lock is released.  ",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/14751,1019491522,2022-11-10T18:40:02Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLock.java,"@@ -0,0 +1,35 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++/**+ * An object of this type represents a successfully acquired global lock provided by {@link GlobalLockProvider}+ */+public interface GlobalLock extends AutoCloseable {++    /**+     * Releases the lock represented by this+     */+    @Override+    void close();++    public static class Constants {+        public static final String DATABASE = ""database"";","> For example, we need to lock specific area when initializing new map storage jpa, see: https://github.com/keycloak/keycloak/blob/main/model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java#L436> > Another example is locking HotRod storage when the proto schema is registered with the Infinispan server. Having more granular locks allows us to leave part of Keycloak operational while some other part is initialized.>If both locks you mentioned are related to migration/schema operations, looks like we have a specific type of lock similarly to what you did to `keycloak-boot`. Perhaps `keycloak-init`or something. Or even different ones specific for `keycloak-migration` and `keycloak-init`. > > The reference to database there reads a bit weird as it is more an implementation detail on how the lock is implemented, right?> > The constant `database` in this case doesn't mean the locks are provided by the database. The constant serves for marking all blocks of the code that should not be visited by more threads/nodes at the same time.> But `database` implies it is somehow related to a database. The whole purpose of having a ""global"" lock is do to what you mentioned so it is still not clear why we need `database`. Sorry, if I'm missing something.> So for example, if Liquibase update is running we will acquire lock with name `database`, this means that all other threads/nodes know someone else is doing Liquibase update so they wait until the lock is released.I think a more generic approach and also more aligned with the different usages of locks is to not use `database`. In this example, you are talking about Liquibase and we could just have a constant similarly to `keycloak-boot` but specific for schema init/migration, as mentioned before.If you are using database or hot rod locks, it does not matter. But that we are using a locking mechanism for boot, init, or migration.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/14751,1020021270,2022-11-11T09:08:04Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLock.java,"@@ -0,0 +1,35 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++/**+ * An object of this type represents a successfully acquired global lock provided by {@link GlobalLockProvider}+ */+public interface GlobalLock extends AutoCloseable {++    /**+     * Releases the lock represented by this+     */+    @Override+    void close();++    public static class Constants {+        public static final String DATABASE = ""database"";","> If both locks you mentioned are related to migration/schema operations, looks like we have a specific type of lock similarly to what you did to keycloak-boot. Perhaps keycloak-initor something. Or even different ones specific for keycloak-migration and keycloak-init.The locks I mentioned are not one specific lock, it can be lock per storage area. You can lock only realms or only users. You don't need to lock the whole database when initializing, for example, authz services, other areas can continue working.> But database implies it is somehow related to a database. The whole purpose of having a ""global"" lock is do to what you mentioned so it is still not clear why we need database. Sorry, if I'm missing something.Maybe I am missing something as well, what is your suggestion here? > I think a more generic approach and also more aligned with the different usages of locks is to not use database. In this example, you are talking about Liquibase and we could just have a constant similarly to keycloak-boot but specific for schema init/migration, as mentioned before.> If you are using database or hot rod locks, it does not matter. But that we are using a locking mechanism for boot, init, or migration.This is exactly what is this PR about, we changed the locks to not provide only three specific locks as it was before. Now it is possible to create a lock with any String identifier, so you can create, for example, lock for only one user, or for only one storage area, or whatever you currently need to synchronize across your deployment. These constants here are not meant to somehow restrict what lock names can be used, it is there just to make sure we use the same String in all places we want to use this specific lock and also to easily find all places that are synchronized for this String.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15455,1020021373,2022-11-11T09:08:11Z,docs/guides/src/main/server/db.adoc,"@@ -90,7 +90,9 @@ For details on these properties and any performance implications, see the Oracle  === Unicode support for a Microsoft SQL Server database -Unicode characters are supported only for the special fields for a Microsoft SQL Server database. The JDBC driver and database require no special settings.+Unicode characters are supported only for the special fields for a Microsoft SQL Server database. The database requires no special settings,+but the `sendStringParametersAsUnicode` property needs to be set to `false` in the JDBC driver. This is needed to prevent deadlocks that can+happen during data type conversion.","```suggestionUnicode characters are supported only for the special fields for a Microsoft SQL Server database. The database requires no special settings.The `sendStringParametersAsUnicode` property of JDBC driver should be set to `false` to significantlyimprove performance. Without this parameter, the Microsoft SQL Server might be unable to use indexes.```",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/14751,1020201378,2022-11-11T13:03:38Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLock.java,"@@ -0,0 +1,35 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++/**+ * An object of this type represents a successfully acquired global lock provided by {@link GlobalLockProvider}+ */+public interface GlobalLock extends AutoCloseable {++    /**+     * Releases the lock represented by this+     */+    @Override+    void close();++    public static class Constants {+        public static final String DATABASE = ""database"";","> > But database implies it is somehow related to a database. The whole purpose of having a ""global"" lock is do to what you mentioned so it is still not clear why we need database. Sorry, if I'm missing something.> > Maybe I am missing something as well, what is your suggestion here?I'm proposing removing those constants. Mainly `database` as it is not aligned with what you are saying. For instance, `database` is an implementation detail, and having it on an interface does not make much sense.Have specific methods on the provider interface to return a specific type of lock such as a boot, init migration, user, etc, lock. For me, it makes sense to make explicit what types of locks you can use.Something like:```LockProvider provider = // get providerLock lock1 = provider.getServerBootLock();Lock lock2 = provider.getInitLock();Lock lock3 = provider.getMigrationLock();StorageLock storageLock = provider.getStorageLock();Lock userLock = storageLock.getUserLock(id);```No reference to impl details (like database) but making the possible types of locks more explicit in the provider contract.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1020206113,2022-11-11T13:10:29Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/transaction/TransactionalSessionHandler.java,"@@ -49,22 +49,20 @@ default KeycloakSession create() {      *      * @param session a transactional session      */-    default void close(KeycloakSession session) {-        if (DefaultKeycloakSession.class.cast(session).isClosed()) {-            return;-        }+    default void close() {+        RoutingContext context = ResteasyContext.getContextData(RoutingContext.class);",Can we just get the session as an argument? I don't think we need to resolve contextual data if the expected instance can be easily passed to the method.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/14751,1020218176,2022-11-11T13:26:25Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLock.java,"@@ -0,0 +1,35 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++/**+ * An object of this type represents a successfully acquired global lock provided by {@link GlobalLockProvider}+ */+public interface GlobalLock extends AutoCloseable {++    /**+     * Releases the lock represented by this+     */+    @Override+    void close();++    public static class Constants {+        public static final String DATABASE = ""database"";","I believe the `DATABASE` lock can be moved fully into legacy-private, correct?Then the only lock string which should remain is the `KEYCLOAK_BOOT` lock.As for individual methods per lock type, these go against the purpose of this PR. Various storages need various locks (e.g. `DATABASE` and `MIGRATION` are only relevant for legacy store; there are also additional upgrading lock types anticipated in map storage), and they both cannot be listed in advance and cannot be limited by API. This is the main reason for having the lock ID as a free `String` parameter.The same applies to future background tasks which will also need locks for their ability to operate, and we do not know the their full list as they will be created upon demand.For both reasons, the API should not be fixed by method names.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1020219732,2022-11-11T13:28:25Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/transaction/TransactionalSessionHandler.java,"@@ -49,22 +49,20 @@ default KeycloakSession create() {      *      * @param session a transactional session      */-    default void close(KeycloakSession session) {-        if (DefaultKeycloakSession.class.cast(session).isClosed()) {-            return;-        }+    default void close() {+        RoutingContext context = ResteasyContext.getContextData(RoutingContext.class);","Sadly, no: the session could be attempted to be closed twice that way. This led to duplicate closing of the same session.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1020233284,2022-11-11T13:46:43Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/transaction/TransactionalSessionHandler.java,"@@ -49,22 +49,20 @@ default KeycloakSession create() {      *      * @param session a transactional session      */-    default void close(KeycloakSession session) {-        if (DefaultKeycloakSession.class.cast(session).isClosed()) {-            return;-        }+    default void close() {+        RoutingContext context = ResteasyContext.getContextData(RoutingContext.class);",I see.I do not think we should be adding more method calls if we can just avoid it by checking if the session is closed. As I've proposed before. Looks like a nitpick but I'm really trying to avoid unnecessary logic when processing the request lifecycle.I know we have some divergences about adding the  `isClosed` method. So I would leave it to others to comment here.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/14751,1020245314,2022-11-11T14:01:40Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLock.java,"@@ -0,0 +1,35 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.locking;++/**+ * An object of this type represents a successfully acquired global lock provided by {@link GlobalLockProvider}+ */+public interface GlobalLock extends AutoCloseable {++    /**+     * Releases the lock represented by this+     */+    @Override+    void close();++    public static class Constants {+        public static final String DATABASE = ""database"";","@hmlnarik It seems `DATABASE` constant can be moved to the legacy module. But we would need to change the code here: https://github.com/keycloak/keycloak/blob/main/model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java#L438however, it is probably the correct thing to do in this PR anyway. (replace `DATABASE` with `modelType`)",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15451,1023894331,2022-11-16T11:49:35Z,services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java,"@@ -54,10 +53,7 @@  public class AccountCredentialResource { -    private static final Logger logger = Logger.getLogger(AccountCredentialResource.class);-     public static final String TYPE = ""type"";-    public static final String ENABLED_ONLY = ""enabled-only"";","Yeah, it is. I took the opportunity here to remove those unused fields. Mainly logger as it has some impact at runtime.",x
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/15552,1027852533,2022-11-21T10:45:56Z,pom.xml,"@@ -83,6 +83,7 @@         <hibernate.c3p0.version>5.6.10.Final</hibernate.c3p0.version>         <infinispan.version>14.0.2.Final</infinispan.version>         <infinispan.protostream.processor.version>4.5.0.Final</infinispan.protostream.processor.version>+        <javax.annotation-api.version>1.3.2</javax.annotation-api.version>",@vmuzikar this is the unused property which I mentioned to you.,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15609,1029310984,2022-11-22T13:13:03Z,services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java,"@@ -822,6 +823,9 @@ public Response handleBrowserException(Exception failure) {                 return ErrorPage.error(session, authenticationSession, Response.Status.BAD_REQUEST, Messages.INVALID_USER);             } +        } else if (KeycloakModelUtils.isExceptionRetriable(failure)) {+            // let calling code decide if whole action should be retried.+            throw (RuntimeException) failure;","IMHO one can't be sure that `failure` is a `RuntimeException`, although the current implementation suggests this. If it is not, there would be a class cast exception here. I'd suggest something like that here: ```suggestion        } else if (KeycloakModelUtils.isExceptionRetriable(failure)) {            // let calling code decide if whole action should be retried.            if (failure instanceof RuntimeException) {                throw (RuntimeException) failure;            } else {                throw new RuntimeException(failure);            }```",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/15609,1029319258,2022-11-22T13:21:04Z,services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java,"@@ -822,6 +823,9 @@ public Response handleBrowserException(Exception failure) {                 return ErrorPage.error(session, authenticationSession, Response.Status.BAD_REQUEST, Messages.INVALID_USER);             } +        } else if (KeycloakModelUtils.isExceptionRetriable(failure)) {+            // let calling code decide if whole action should be retried.+            throw (RuntimeException) failure;","> IMHO one can't be sure that `failure` is a `RuntimeException`, although the current implementation suggests this.Well, currently a retriable exception must be a SQLException whose state is 40001, and that is a RuntimeException. So if `isExceptionRetriable()` returns true we know the exception is a runtime one.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15609,1029321984,2022-11-22T13:23:34Z,services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java,"@@ -822,6 +823,9 @@ public Response handleBrowserException(Exception failure) {                 return ErrorPage.error(session, authenticationSession, Response.Status.BAD_REQUEST, Messages.INVALID_USER);             } +        } else if (KeycloakModelUtils.isExceptionRetriable(failure)) {+            // let calling code decide if whole action should be retried.+            throw (RuntimeException) failure;","Hm, it is actually testing that the root exception is a `SQLException`. The wrapping exception can be anything, although its wrappers will most likely be a runtime exception as well. ",
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/14713,1030349216,2022-11-23T11:51:18Z,quarkus/tests/integration/src/main/java/org/keycloak/it/junit5/extension/CLITestExtension.java,"@@ -100,7 +103,34 @@ public void beforeEach(ExtensionContext context) throws Exception {             onBeforeStartDistribution(context.getRequiredTestMethod().getAnnotation(BeforeStartDistribution.class));              if (launch != null) {-                result = dist.run(Arrays.asList(launch.value()));+                List<String> argsFromLaunchAnnotation = new ArrayList<>(Arrays.asList(launch.value()));++                WithLegacyStoreOnly withLegacyStoreOnly = context.getRequiredTestMethod().getAnnotation(WithLegacyStoreOnly.class);+                if (withLegacyStoreOnly == null) {+                    withLegacyStoreOnly = context.getTestClass()","@mabartos ,I verified the possibility to implement what you suggested (I mean: verify the test classes inheritance and separate the handling between `beforeAll()` and `beforeEach()` methods) and I believe that would bring more complexity to this implementation ATM.And my idea was to obey the precedence of `@WithLegacyStoreOnly` annotation over a method instead of having it over a class. Therefore, I believe keeping the handling in `beforeEach()` makes sense. We can discuss this question later, If you have distinct thoughts.Thanks.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15648,1030512456,2022-11-23T14:28:21Z,server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java,"@@ -276,6 +276,35 @@ public static void runJobInTransaction(KeycloakSessionFactory factory, KeycloakS         }     } +    /**+     * Wrap a given callable job into a KeycloakTransaction.+     */+    public static <V> V runJobInTransactionWithResult(KeycloakSessionFactory factory, final KeycloakSessionTaskWithResult<V> callable) {",Could `runJobInTransaction` be now rewritten in terms of `runJobInTransactionWithResult` to avoid code duplication?,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15648,1030518631,2022-11-23T14:33:39Z,server-spi-private/src/main/java/org/keycloak/storage/ExportImportManager.java,"@@ -34,6 +35,8 @@ public interface ExportImportManager {     void importRealm(RealmRepresentation rep, RealmModel newRealm, boolean skipUserDependent); +    PartialImportResults partialImportRealm(InputStream requestBody, RealmModel realm);",`RealmModel` should be first parameter,x
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/14411,1031262782,2022-11-24T09:26:31Z,server-spi-private/src/main/java/org/keycloak/policy/BlacklistPasswordPolicyProviderFactory.java,"@@ -39,28 +39,33 @@ /**  * Creates {@link BlacklistPasswordPolicyProvider} instances.  * <p>- * Password blacklists are simple text files where every line is a blacklisted password delimited by {@code \n}.- * Blacklist files are discovered and registered at startup.+ * Password blacklists are simple text files where every line is a blacklisted password delimited by a newline character {@code \n}.  * <p>Blacklists can be configured via the <em>Authentication: Password Policy</em> section in the admin-console.  * A blacklist-file is referred to by its name in the policy configuration.+ *+ * <h1>Blacklist location</h1>  * <p>Users can provide custom blacklists by adding a blacklist password file to the configured blacklist folder.  * <p>  * <p>The location of the password-blacklists folder is derived as follows</p>  * <ol>  * <li>the value of the System property {@code keycloak.password.blacklists.path} if configured - fails if folder is missing</li>  * <li>the value of the SPI config property: {@code blacklistsPath} when explicitly configured - fails if folder is missing</li>- * <li>otherwise {@code ${jboss.server.data.dir}/password-blacklists/} if nothing else is configured - the folder is created automatically if not present</li>+ * <li>otherwise {@code $KC_HOME/data/password-blacklists/} if nothing else is configured</li>  * </ol>- * <p>Note that the preferred way for configuration is to copy the password file to the {@code ${jboss.server.data.dir}/password-blacklists/} folder</p>- * <p>To configure a password blacklist via the SPI configuration, run the following jboss-cli script:</p>- * <pre>{@code- * /subsystem=keycloak-server/spi=password-policy:add()- * /subsystem=keycloak-server/spi=password-policy/provider=passwordBlacklist:add(enabled=true)- * /subsystem=keycloak-server/spi=password-policy/provider=passwordBlacklist:write-attribute(name=properties.blacklistsPath, value=/data/keycloak/blacklists/)- * }</pre>- * <p>A password blacklist with the filename {@code 10_million_password_list_top_1000000-password-blacklist.txt}- * that is located beneath {@code /data/keycloak/blacklists/} can be referred to- * as {@code 10_million_password_list_top_1000000-password-blacklist.txt} in the <em>Authentication: Password Policy</em> configuration.+ *+ * To configure the blacklist folder via CLI use {@code --spi-password-policy-password-blacklist-blacklists-path=/path/to/blacklistsFolder}+ *+ * <p>Note that the preferred way for configuration is to copy the password file to the {@code $KC_HOME/data/password-blacklists/} folder</p>+ * <p>A password blacklist with the filename {@code 10_million_passwords.txt}+ * that is located beneath {@code $KC_HOME/data/keycloak/blacklists/} can be referred to as {@code 10_million_passwords.txt} in the <em>Authentication: Password Policy</em> configuration.+ *+ * <h1>False positives</h1>+ * <p>+ * The current implementation uses a probabilistic data-structure called {@link BloomFilter} which allows for fast and memory efficient containment checks, e.g. whether a given password is contained in a blacklist,+ * with the possibility for false positives. By default a false positive probability {@link #DEFAULT_FALSE_POSITIVE_PROBABILITY} is used.+ *+ * To change the false positive probability via CLI configuration use {@code --spi-password-policy-password-blacklist-false-positive-probability=0.00001}+ * </p>",What about adding this as new bullets to the documentation of the [Password blacklist policy](https://github.com/keycloak/keycloak-documentation/blob/main/server_admin/topics/authentication/password-policies.adoc)?,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15618,1032432684,2022-11-25T12:59:27Z,model/map/src/main/java/org/keycloak/models/map/storage/criteria/ModelCriteriaNode.java,"@@ -105,17 +163,56 @@ public static enum ExtOperator {          public abstract <M, C extends ModelCriteriaBuilder<M, C>> C apply(C mcbCreator, ModelCriteriaNode<M> node);         public abstract String toString(ModelCriteriaNode<?> node);+        public abstract <M> ModelCriteriaNode<M> evaluate(ModelCriteriaNode<M> node, AtomicFormulaInstantiator<M> atomicFormulaInstantiator);     } -    private final ExtOperator nodeOperator;+    protected final ExtOperator nodeOperator; -    private final Operator simpleOperator;+    protected final Operator simpleOperator; -    private final SearchableModelField<? super M> field;+    protected final SearchableModelField<? super M> field; -    private final Object[] simpleOperatorArguments;+    protected final Object[] simpleOperatorArguments;++    public static <M> ModelCriteriaNode<M> atomicFormula(SearchableModelField<? super M> field, Operator simpleOperator, Object[] simpleOperatorArguments) {+        return new ModelCriteriaNode<>(field, simpleOperator, simpleOperatorArguments);+    }++    public static <M> ModelCriteriaNode<M> atomicFormula(ModelCriteriaNode<M> node) {+        return new ModelCriteriaNode<>(node.field, node.simpleOperator, node.simpleOperatorArguments);+    }++    @SuppressWarnings(""unchecked"")+    public static <M> ModelCriteriaNode<M> trueNode() {+        return (ModelCriteriaNode<M>) new ModelCriteriaNode<>(ExtOperator.__TRUE__);+    }++    @SuppressWarnings(""unchecked"")+    public static <M> ModelCriteriaNode<M> falseNode() {+        return (ModelCriteriaNode<M>) new ModelCriteriaNode<>(ExtOperator.__FALSE__);+    }++    public static <M> ModelCriteriaNode<M> andNode() {+        return new ModelCriteriaNode<>(ExtOperator.AND);+    } -    public ModelCriteriaNode(SearchableModelField<? super M> field, Operator simpleOperator, Object[] simpleOperatorArguments) {+    public static <M> ModelCriteriaNode<M> orNode() {+        return new ModelCriteriaNode<>(ExtOperator.OR);+    }++    public static <M> ModelCriteriaNode<M> notNode() {+        return new ModelCriteriaNode<>(ExtOperator.NOT);+    }++    public ModelCriteriaNode<M> cloneNode() {+        if (this.nodeOperator == ExtOperator.ATOMIC_FORMULA) {+            return atomicFormula(this);","Here, we expect to get a clone of the original formula, however, `ModelCriteriaNode` constructor is not making a deep copy of `simpleOperatorArguments`. Should we make sure that immutable arguments are cloned too? For example, collections? Not sure if this can be fixed by what I am suggesting, but currently this test:```java@Testpublic void clonerTest() {    DefaultModelCriteria<ClientModel> v = criteria();    List<String> l = new LinkedList<>();    l.add(""1"");    DefaultModelCriteria<ClientModel> c1 = v.compare(CLIENT_ID, Operator.IN, l);    l.clear();    l.add(""2"");    DefaultModelCriteria<ClientModel> c2 = v.compare(CLIENT_ID, Operator.IN, l);    System.out.println(v.or(c1, c2));}```results in:```(clientId IN [[2]] || clientId IN [[2]])```",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15618,1032437587,2022-11-25T13:05:47Z,model/map/src/main/java/org/keycloak/models/map/storage/criteria/ModelCriteriaNode.java,"@@ -105,17 +163,56 @@ public static enum ExtOperator {          public abstract <M, C extends ModelCriteriaBuilder<M, C>> C apply(C mcbCreator, ModelCriteriaNode<M> node);         public abstract String toString(ModelCriteriaNode<?> node);+        public abstract <M> ModelCriteriaNode<M> evaluate(ModelCriteriaNode<M> node, AtomicFormulaInstantiator<M> atomicFormulaInstantiator);     } -    private final ExtOperator nodeOperator;+    protected final ExtOperator nodeOperator; -    private final Operator simpleOperator;+    protected final Operator simpleOperator; -    private final SearchableModelField<? super M> field;+    protected final SearchableModelField<? super M> field; -    private final Object[] simpleOperatorArguments;+    protected final Object[] simpleOperatorArguments;++    public static <M> ModelCriteriaNode<M> atomicFormula(SearchableModelField<? super M> field, Operator simpleOperator, Object[] simpleOperatorArguments) {+        return new ModelCriteriaNode<>(field, simpleOperator, simpleOperatorArguments);+    }++    public static <M> ModelCriteriaNode<M> atomicFormula(ModelCriteriaNode<M> node) {+        return new ModelCriteriaNode<>(node.field, node.simpleOperator, node.simpleOperatorArguments);+    }++    @SuppressWarnings(""unchecked"")+    public static <M> ModelCriteriaNode<M> trueNode() {+        return (ModelCriteriaNode<M>) new ModelCriteriaNode<>(ExtOperator.__TRUE__);+    }++    @SuppressWarnings(""unchecked"")+    public static <M> ModelCriteriaNode<M> falseNode() {+        return (ModelCriteriaNode<M>) new ModelCriteriaNode<>(ExtOperator.__FALSE__);+    }++    public static <M> ModelCriteriaNode<M> andNode() {+        return new ModelCriteriaNode<>(ExtOperator.AND);+    } -    public ModelCriteriaNode(SearchableModelField<? super M> field, Operator simpleOperator, Object[] simpleOperatorArguments) {+    public static <M> ModelCriteriaNode<M> orNode() {+        return new ModelCriteriaNode<>(ExtOperator.OR);+    }++    public static <M> ModelCriteriaNode<M> notNode() {+        return new ModelCriteriaNode<>(ExtOperator.NOT);+    }++    public ModelCriteriaNode<M> cloneNode() {",unused method,x
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/15758,1035758983,2022-11-30T09:56:04Z,pom.xml,"@@ -1978,7 +1978,7 @@                         <groupId>org.apache.maven.plugins</groupId>                         <artifactId>maven-javadoc-plugin</artifactId>                         <configuration>-                            <additionalparam>-Xdoclint:none</additionalparam>+                            <doclint>none</doclint>",Is this out of the task scope? I noticed that the `additionalparam` is no longer valid (at least my IDE was complaining about it). We should use `doclint` instead[1].[1] https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#doclint,x
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/15758,1035772183,2022-11-30T10:08:07Z,quarkus/runtime/pom.xml,"@@ -91,7 +91,6 @@         <dependency>             <groupId>org.wildfly.security</groupId>             <artifactId>wildfly-elytron</artifactId>-            <version>${wildfly-elytron.version}</version>","I assume that at least when it comes to Quarkus module we don't need version elements specified here at all, right? Since a dependency is part of the `<dependencyManagement>` in the parent pom, we can omit it in its children.",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1036830887,2022-12-01T08:42:04Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/connections/DefaultHotRodConnectionProviderFactory.java,"@@ -111,32 +118,53 @@ public void lazyInit() {          remoteBuilder.addContextInitializer(CommonPrimitivesProtoSchemaInitializer.INSTANCE);         ENTITY_DESCRIPTOR_MAP.values().stream().map(HotRodEntityDescriptor::getProtoSchema).forEach(remoteBuilder::addContextInitializer);-        remoteCacheManager = new RemoteCacheManager(remoteBuilder.build()); -        Set<String> remoteCaches = ENTITY_DESCRIPTOR_MAP.values().stream()-                .map(HotRodEntityDescriptor::getCacheName).collect(Collectors.toSet());+        // Configure settings necessary for locking+        configureLocking(remoteBuilder); -        LOG.debugf(""Uploading proto schema to Infinispan server."");-        registerSchemata();+        remoteCacheManager = new RemoteCacheManager(remoteBuilder.build()); -        String reindexCaches = config.get(""reindexCaches"", null);-        RemoteCacheManagerAdmin administration = remoteCacheManager.administration();-        if (reindexCaches != null && reindexCaches.equals(""all"")) {-            LOG.infof(""Reindexing all caches. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."");-            remoteCaches.stream()-                    .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist-                    .forEach(administration::reindexCache);-        } else if (reindexCaches != null && !reindexCaches.isEmpty()){-            Arrays.stream(reindexCaches.split("",""))-                .map(String::trim)-                    .filter(e -> !e.isEmpty())-                    .filter(remoteCaches::contains)-                    .peek(cacheName -> LOG.infof(""Reindexing %s cache. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."", cacheName))-                    .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist-                    .forEach(administration::reindexCache);+        // Acquire initial phase lock to avoid concurrent schema update+        RemoteCache<String, String> locksCache = remoteCacheManager.getCache(HOT_ROD_LOCKS_CACHE_NAME);+        try {","Can't we just use ```GlobalLockProvider provider = s.getProvider(GlobalLockProvider.class);GlobalLock globalLock = provider.acquireLock(HOT_ROD_INIT_LOCK_NAME, Duration.ofSeconds(1));```instead of exposing actual Hot Rod lock implementation here?",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1036856218,2022-12-01T09:08:17Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodLocksUtils.java,"@@ -0,0 +1,89 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.Flag;+import org.infinispan.client.hotrod.RemoteCache;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.net.InetAddress;+import java.net.UnknownHostException;++public class HotRodLocksUtils {++    public static final String HOT_ROD_LOCKS_CACHE_NAME = ""locks"";++    /**+     * Repeatedly attempts to put an entry with the key {@code lockName}+     * to the {@code cache}. Succeeds only if there is no entry with the same+     * key already.+     * <p />+     * Execution of this method is time bounded, if this method does not+     * succeed within {@code timeoutMilliseconds} it gives up and returns+     * false.+     * <p />+     * There is a pause after each unsuccessful attempt equal to+     * {@code repeatInterval} milliseconds+     *+     * @param cache Cache that will be used for putting the value+     * @param lockName Name of the entry+     * @param timeoutMilliseconds time boundaries in milliseconds+     * @param repeatInterval Number of milliseconds to wait after each+     *                       unsuccessful attempt+     *+     * @return true when the key {@code lockName} was put into the {@code cache}+     *         within time boundaries and previous value was {@code null},+     *         false otherwise+     */+    public static boolean repeatPutIfAbsent(RemoteCache<String, String> cache, String lockName, long timeoutMilliseconds, int repeatInterval) throws LockAcquiringTimeoutException {+        String currentOwner;++        while((currentOwner = cache.withFlags(Flag.FORCE_RETURN_VALUE)+                .putIfAbsent(lockName, getKeycloakInstanceIdentifier(), 900000, java.util.concurrent.TimeUnit.DAYS)) != null+                && timeoutMilliseconds > 0) {+            try {+                Thread.sleep(repeatInterval);+            } catch (InterruptedException e) {+                throw new RuntimeException(e);+            }+            timeoutMilliseconds -= repeatInterval;+        }++        return currentOwner == null;+    }++    private static String getKeycloakInstanceIdentifier() {+        try {+            return InetAddress.getLocalHost().getHostName();","Do I understand this correctly, that in model tests where each node name is the same (in my case ""localhost.localdomain"") one node might accidentally unlock other's node lock if it knows the lock name and has access to the lock's reference. Probably not big deal anyway.",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1036861226,2022-12-01T09:13:06Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodLocksUtils.java,"@@ -0,0 +1,89 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.Flag;+import org.infinispan.client.hotrod.RemoteCache;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.net.InetAddress;+import java.net.UnknownHostException;++public class HotRodLocksUtils {++    public static final String HOT_ROD_LOCKS_CACHE_NAME = ""locks"";++    /**+     * Repeatedly attempts to put an entry with the key {@code lockName}+     * to the {@code cache}. Succeeds only if there is no entry with the same+     * key already.+     * <p />+     * Execution of this method is time bounded, if this method does not+     * succeed within {@code timeoutMilliseconds} it gives up and returns+     * false.+     * <p />+     * There is a pause after each unsuccessful attempt equal to+     * {@code repeatInterval} milliseconds+     *+     * @param cache Cache that will be used for putting the value+     * @param lockName Name of the entry+     * @param timeoutMilliseconds time boundaries in milliseconds+     * @param repeatInterval Number of milliseconds to wait after each+     *                       unsuccessful attempt+     *+     * @return true when the key {@code lockName} was put into the {@code cache}+     *         within time boundaries and previous value was {@code null},+     *         false otherwise+     */+    public static boolean repeatPutIfAbsent(RemoteCache<String, String> cache, String lockName, long timeoutMilliseconds, int repeatInterval) throws LockAcquiringTimeoutException {+        String currentOwner;++        while((currentOwner = cache.withFlags(Flag.FORCE_RETURN_VALUE)+                .putIfAbsent(lockName, getKeycloakInstanceIdentifier(), 900000, java.util.concurrent.TimeUnit.DAYS)) != null",Can't we just use `putIfAbsent` without lifespan parameter instead of arbitrary big number?,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/14713,1037070947,2022-12-01T12:50:30Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/StartCommandTest.java,"@@ -39,13 +40,15 @@ void failNoTls(LaunchResult result) {      @Test     @Launch({ ""--profile=dev"", ""start"" })+    @WithLegacyStoreOnly     void failUsingDevProfile(LaunchResult result) {         assertTrue(result.getErrorOutput().contains(""ERROR: You can not 'start' the server in development mode. Please re-build the server first, using 'kc.sh build' for the default production mode.""),                 () -> ""The Output:\n"" + result.getErrorOutput() + ""doesn't contains the expected string."");     }      @Test     @Launch({ ""-v"", ""start"", ""--http-enabled=true"", ""--hostname-strict=false"" })+    @WithLegacyStoreOnly",Why we can't make it simpler and just annotate the class instead of individual methods?,x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15676,1037134902,2022-12-01T13:53:02Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/IckleQueryOperators.java,"@@ -97,7 +97,7 @@ private static String notExists(String modelFieldName, Object[] values, Map<Stri     private static String iLike(String modelFieldName, Object[] values, Map<String, Object> parameters) {         String sanitizedValue = (String) IckleQueryMapModelCriteriaBuilder.sanitizeNonAnalyzed(values[0]);         return singleValueOperator(ModelCriteriaBuilder.Operator.ILIKE)-                .combine(modelFieldName + ""Lowercase"", new String[] {sanitizedValue.toLowerCase()}, parameters);+                .combine(modelFieldName, new String[] {sanitizedValue.toLowerCase()}, parameters);","I think we should somehow make sure this method is not called for any non-normalized field and vice-versa for `LIKE`. Currently, this can lead to some inconsistent results if the index is not correctly set.We need some list of all normalized fields and then check the list for each like/ilike call. This list could be created using generators.Also, I think we don't need to call `.toLowerCase` anymore.WDYT?",x
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1037914389,2022-12-02T08:53:28Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/connections/DefaultHotRodConnectionProviderFactory.java,"@@ -111,32 +118,53 @@ public void lazyInit() {          remoteBuilder.addContextInitializer(CommonPrimitivesProtoSchemaInitializer.INSTANCE);         ENTITY_DESCRIPTOR_MAP.values().stream().map(HotRodEntityDescriptor::getProtoSchema).forEach(remoteBuilder::addContextInitializer);-        remoteCacheManager = new RemoteCacheManager(remoteBuilder.build()); -        Set<String> remoteCaches = ENTITY_DESCRIPTOR_MAP.values().stream()-                .map(HotRodEntityDescriptor::getCacheName).collect(Collectors.toSet());+        // Configure settings necessary for locking+        configureLocking(remoteBuilder); -        LOG.debugf(""Uploading proto schema to Infinispan server."");-        registerSchemata();+        remoteCacheManager = new RemoteCacheManager(remoteBuilder.build()); -        String reindexCaches = config.get(""reindexCaches"", null);-        RemoteCacheManagerAdmin administration = remoteCacheManager.administration();-        if (reindexCaches != null && reindexCaches.equals(""all"")) {-            LOG.infof(""Reindexing all caches. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."");-            remoteCaches.stream()-                    .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist-                    .forEach(administration::reindexCache);-        } else if (reindexCaches != null && !reindexCaches.isEmpty()){-            Arrays.stream(reindexCaches.split("",""))-                .map(String::trim)-                    .filter(e -> !e.isEmpty())-                    .filter(remoteCaches::contains)-                    .peek(cacheName -> LOG.infof(""Reindexing %s cache. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."", cacheName))-                    .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist-                    .forEach(administration::reindexCache);+        // Acquire initial phase lock to avoid concurrent schema update+        RemoteCache<String, String> locksCache = remoteCacheManager.getCache(HOT_ROD_LOCKS_CACHE_NAME);+        try {",Thank you for pointing me to the fact that there's a cyclical dependency between those two provider. In my case it worked because `HotRodLockProvider` was requested after initialization of `remoteCacheManager` which means `lazyInit()` from `DefaultHotRodConnectionProviderFactory` isn't executed for the second time.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1038001842,2022-12-02T10:30:39Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/connections/DefaultHotRodConnectionProviderFactory.java,"@@ -111,32 +118,53 @@ public void lazyInit() {          remoteBuilder.addContextInitializer(CommonPrimitivesProtoSchemaInitializer.INSTANCE);         ENTITY_DESCRIPTOR_MAP.values().stream().map(HotRodEntityDescriptor::getProtoSchema).forEach(remoteBuilder::addContextInitializer);-        remoteCacheManager = new RemoteCacheManager(remoteBuilder.build()); -        Set<String> remoteCaches = ENTITY_DESCRIPTOR_MAP.values().stream()-                .map(HotRodEntityDescriptor::getCacheName).collect(Collectors.toSet());+        // Configure settings necessary for locking+        configureLocking(remoteBuilder); -        LOG.debugf(""Uploading proto schema to Infinispan server."");-        registerSchemata();+        remoteCacheManager = new RemoteCacheManager(remoteBuilder.build()); -        String reindexCaches = config.get(""reindexCaches"", null);-        RemoteCacheManagerAdmin administration = remoteCacheManager.administration();-        if (reindexCaches != null && reindexCaches.equals(""all"")) {-            LOG.infof(""Reindexing all caches. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."");-            remoteCaches.stream()-                    .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist-                    .forEach(administration::reindexCache);-        } else if (reindexCaches != null && !reindexCaches.isEmpty()){-            Arrays.stream(reindexCaches.split("",""))-                .map(String::trim)-                    .filter(e -> !e.isEmpty())-                    .filter(remoteCaches::contains)-                    .peek(cacheName -> LOG.infof(""Reindexing %s cache. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."", cacheName))-                    .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist-                    .forEach(administration::reindexCache);+        // Acquire initial phase lock to avoid concurrent schema update+        RemoteCache<String, String> locksCache = remoteCacheManager.getCache(HOT_ROD_LOCKS_CACHE_NAME);+        try {","Well, this is a `chicken-and-egg` problem. I see that at the point of the locking, the `remoteCacheManager` is already initialized, so the `HotRodGlobalLockProvider` theoretically should work when requesting only `locks` cache. Other caches would not work as schemata are not yet initialized. However, I would prefer not to call the `DefaultHotRodConnectionProvider.create` method until the factory does not fully finish the `lazyInit` method. WDYT? ",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/15797,1038172596,2022-12-02T14:01:11Z,.github/workflows/ci.yml,"@@ -474,7 +474,7 @@ jobs:        - name: Run Quarkus Tests in Docker         run: |-          ./mvnw clean install -nsu -B -f quarkus/tests/pom.xml -Dkc.quarkus.tests.dist=docker | misc/log/trimmer.sh+          ./mvnw clean install -nsu -B -f quarkus/tests/pom.xml -Dkc.quarkus.tests.dist=docker -Dtest=StartCommandDistTest | misc/log/trimmer.sh","+1 for running just a smoke test with DockerHowever, thinking about this more, I have one concern. Right now, we manage which tests cannot be ran with Docker using the `@RawDistOnly` annotation. If we add this filter to the CI, this annotation will no longer make too much sense and we risk that we'll lose track of the list of tests that can be ran with Docker (as it'll be hidden by the `-Dtest=...` filter).I'd prefer not to filter tests on the CI level. Maybe we can add some Maven profile (`docker-smoke-tests`?) as the single source of truth?WDYT?",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/15797,1038176839,2022-12-02T14:06:07Z,quarkus/tests/integration/src/main/java/org/keycloak/it/junit5/extension/ServerOptions.java,"@@ -0,0 +1,90 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.it.junit5.extension;++import static org.keycloak.quarkus.runtime.cli.command.AbstractStartCommand.OPTIMIZED_BUILD_OPTION_LONG;++import java.util.ArrayList;+import java.util.HashMap;+import java.util.List;+import java.util.Map;+import java.util.function.Predicate;+import org.junit.jupiter.api.extension.ExtensionContext;+import org.keycloak.quarkus.runtime.cli.command.Export;+import org.keycloak.quarkus.runtime.cli.command.Import;+import org.keycloak.quarkus.runtime.cli.command.ShowConfig;++final class ServerOptions extends ArrayList {",Just an (optional) nitpick to avoid warnings.```suggestionfinal class ServerOptions extends ArrayList<String> {```,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/15797,1038237005,2022-12-02T15:07:45Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/BuildAndStartDistTest.java,"@@ -17,69 +17,48 @@  package org.keycloak.it.cli.dist; -import java.util.function.Consumer; import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;-import org.junit.jupiter.api.Order; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.TestMethodOrder;-import org.keycloak.it.junit5.extension.BeforeStartDistribution; import org.keycloak.it.junit5.extension.CLIResult; import org.keycloak.it.junit5.extension.DistributionTest; import org.keycloak.it.junit5.extension.RawDistOnly; import org.keycloak.it.utils.KeycloakDistribution; -import io.quarkus.test.junit.main.Launch;-import io.quarkus.test.junit.main.LaunchResult;- import static org.keycloak.quarkus.runtime.cli.command.AbstractStartCommand.OPTIMIZED_BUILD_OPTION_LONG; -@DistributionTest(reInstall = DistributionTest.ReInstall.NEVER)+@DistributionTest @RawDistOnly(reason = ""Containers are immutable"") @TestMethodOrder(OrderAnnotation.class) public class BuildAndStartDistTest {      @Test-    @Launch({ ""build"", ""--cache=local"" })-    @Order(1)-    void testBuildWithCliArgs(LaunchResult result) {-        CLIResult cliResult = (CLIResult) result;+    void testBuildAndStart(KeycloakDistribution dist) {+        // start using based on the build options set via CLI+        CLIResult cliResult = dist.run(""build"", ""--storage=chm"");",Do we need to be hardcoding `--storage=chm`? Can't we somehow leverage the default options coming from `ServerOptions` class?This applies to other test classes changed in this PR as well.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15797,1038621903,2022-12-02T23:25:15Z,quarkus/tests/integration/src/main/java/org/keycloak/it/junit5/extension/ServerOptions.java,"@@ -0,0 +1,90 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.it.junit5.extension;++import static org.keycloak.quarkus.runtime.cli.command.AbstractStartCommand.OPTIMIZED_BUILD_OPTION_LONG;++import java.util.ArrayList;+import java.util.HashMap;+import java.util.List;+import java.util.Map;+import java.util.function.Predicate;+import org.junit.jupiter.api.extension.ExtensionContext;+import org.keycloak.quarkus.runtime.cli.command.Export;+import org.keycloak.quarkus.runtime.cli.command.Import;+import org.keycloak.quarkus.runtime.cli.command.ShowConfig;++final class ServerOptions extends ArrayList {++    private static final Predicate<String> IGNORED_ARGUMENTS = ((Predicate<String>) s -> false)+            .or(OPTIMIZED_BUILD_OPTION_LONG::equals)+            .or(Export.NAME::equals)+            .or(Import.NAME::equals)+            .or(""--help""::equals)+            .or(""--help-all""::equals)+            .or(""-h""::equals)+            .or(ShowConfig.NAME::equals);++    ServerOptions(ExtensionContext context, List<String> rawOptions) {+        if (rawOptions.isEmpty()) {+            return;+        }++        LegacyStore legacyStoreConfig = context.getTestClass().orElse(Object.class)+                .getDeclaredAnnotation(LegacyStore.class);++        for (Map.Entry<String, Predicate<String>> entry : getDefaultOptions(legacyStoreConfig).entrySet()) {+            if (contains(entry.getKey())) {+                continue;+            }+            if (!rawOptions.stream().anyMatch(entry.getValue())) {+                add(entry.getKey());+            }+        }++        addAll(0, rawOptions);+    }++    private Map<String, Predicate<String>> getDefaultOptions(LegacyStore legacyStoreConfig) {+        Map<String, Predicate<String>> defaultOptions = new HashMap<>();++        defaultOptions.put(""--storage=chm"", enableStorageChm(legacyStoreConfig));+        defaultOptions.put(""--cache=local"", enableCacheLocal(legacyStoreConfig));++        return defaultOptions;+    }++    private Predicate<String> enableCacheLocal(LegacyStore legacyStoreConfig) {+        return new Predicate<String>() {+            @Override+            public boolean test(String arg) {+                return arg.contains(""--cache"") || legacyStoreConfig == null || !legacyStoreConfig.defaultLocalCache();+            }+        }.or(IGNORED_ARGUMENTS);+    }++    private Predicate<String> enableStorageChm(LegacyStore legacyStoreConfig) {+        return new Predicate<String>() {+            @Override+            public boolean test(String arg) {+                return arg.contains(""--storage"") || legacyStoreConfig != null;+            }+        }.or(IGNORED_ARGUMENTS);+    }",Not sure if the comments help much but I'm glad to hear from you about how we can improve it.There is a single negation where if any of the conditions evaluates to `true` the default option is not added.,
45632394,douph1,https://api.github.com/repos/keycloak/keycloak/pulls/15736,1039368787,2022-12-05T09:48:54Z,server-spi-private/src/main/java/org/keycloak/broker/provider/util/IdentityBrokerState.java,"@@ -51,8 +51,8 @@ public static IdentityBrokerState decoded(String state, String clientId, String                 bb.putLong(clientDbUuid.getMostSignificantBits());                 bb.putLong(clientDbUuid.getLeastSignificantBits());                 byte[] clientUuidBytes = bb.array();-                clientIdEncoded = Base64.getEncoder().encodeToString(clientUuidBytes).replace(""="", """");-            } catch (IllegalArgumentException e) {+                clientIdEncoded = Base64Url.encode(clientUuidBytes);","true, standard java doesn't, but since we know the boundaries from the base64, we don't need to keep the `=` for paddingJava 17 always use padding by default :![padding](https://user-images.githubusercontent.com/45632394/205605626-22c260d7-53e7-4717-94e5-024e74d60bad.png)but provide a way to disable it ![java_no_padding](https://user-images.githubusercontent.com/45632394/205606223-7e8b82fe-f08d-436c-a133-1b27f04dc37e.png)",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1039505879,2022-12-05T12:01:55Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodLocksUtils.java,"@@ -0,0 +1,89 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.Flag;+import org.infinispan.client.hotrod.RemoteCache;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.net.InetAddress;+import java.net.UnknownHostException;++public class HotRodLocksUtils {++    public static final String HOT_ROD_LOCKS_CACHE_NAME = ""locks"";++    /**+     * Repeatedly attempts to put an entry with the key {@code lockName}+     * to the {@code cache}. Succeeds only if there is no entry with the same+     * key already.+     * <p />+     * Execution of this method is time bounded, if this method does not+     * succeed within {@code timeoutMilliseconds} it gives up and returns+     * false.+     * <p />+     * There is a pause after each unsuccessful attempt equal to+     * {@code repeatInterval} milliseconds+     *+     * @param cache Cache that will be used for putting the value+     * @param lockName Name of the entry+     * @param timeoutMilliseconds time boundaries in milliseconds+     * @param repeatInterval Number of milliseconds to wait after each+     *                       unsuccessful attempt+     *+     * @return true when the key {@code lockName} was put into the {@code cache}+     *         within time boundaries and previous value was {@code null},+     *         false otherwise+     */+    public static boolean repeatPutIfAbsent(RemoteCache<String, String> cache, String lockName, long timeoutMilliseconds, int repeatInterval) throws LockAcquiringTimeoutException {+        String currentOwner;++        while((currentOwner = cache.withFlags(Flag.FORCE_RETURN_VALUE)+                .putIfAbsent(lockName, getKeycloakInstanceIdentifier(), 900000, java.util.concurrent.TimeUnit.DAYS)) != null","I asked ISPN team about this, and they said it is expected `getCreated` returns -1 if lifespan is not set. They also suggested we should try another approach to this. Currently we add lifespan, which is basically never reached and adds some additional work for ISPN to process etc. It should much simpler for us to just store the timestamp inside the entry to avoid this. However, we will need to change how the removal works as we will not be able to use remove with checking the original value.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1039657311,2022-12-05T14:17:22Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodGlobalLockProvider.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.MetadataValue;+import org.infinispan.client.hotrod.RemoteCache;+import org.jboss.logging.Logger;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.locking.GlobalLock;+import org.keycloak.models.locking.GlobalLockProvider;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.time.Duration;+import java.time.Instant;+import java.util.LinkedList;+import java.util.List;+++public class HotRodGlobalLockProvider implements GlobalLockProvider {++    private static final Logger LOG = Logger.getLogger(HotRodGlobalLockProvider.class);+    private final RemoteCache<String, String> locksCache;+    private final long defaultTimeoutMilliseconds;+    private final List<GlobalLock> providedGlobalLocks = new LinkedList<>();++    public HotRodGlobalLockProvider(KeycloakSession session, RemoteCache<String, String> locksCache, long defaultTimeoutMilliseconds) {+        this.locksCache = locksCache;+        this.defaultTimeoutMilliseconds = defaultTimeoutMilliseconds;++        // Enlist this provider for closing so all provided locks are closed if not closed by AutoClosable after commit+        session.enlistForClose(this);+    }++    @Override+    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) throws LockAcquiringTimeoutException {+        if (timeToWaitForLock == null) {+            // Set default timeout if null provided+            timeToWaitForLock = Duration.ofMillis(defaultTimeoutMilliseconds);+        }++        LOG.debugf(""Acquiring lock [%s]."", lockName);+        if (!HotRodLocksUtils.repeatPutIfAbsent(locksCache, lockName, timeToWaitForLock.toMillis(), 50)) {+            MetadataValue<String> withMetadata = locksCache.getWithMetadata(lockName);+            throw new LockAcquiringTimeoutException(lockName, withMetadata.getValue(), Instant.ofEpochMilli(withMetadata.getCreated()));+        }+        LOG.debugf(""Lock acquired [%s]."", lockName);+        GlobalLock lock = new HotRodGlobalLock(() -> {+            LOG.debugf(""Releasing lock [%s]."", lockName);+            boolean result = HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, lockName);+            LOG.debugf(""Lock [%s] release resulted with %s"", lockName, result);++            if (!result) {+                LOG.errorf(""Unlocking the lock [%s] was unsuccessful. Current lock value: [%s]"", lockName, locksCache.get(lockName));+                throw new IllegalStateException(""Unlocking the lock was unsuccessful. See log for more details."");+            }","There is a concept of ""log or throw"", with ""log and throw"" being an antipattern. Not sure if it is consistently applied within Keycloak. In this case, the parameters could be part of message of exception being thrown.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1039666399,2022-12-05T14:24:58Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodLocksUtils.java,"@@ -0,0 +1,96 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.Flag;+import org.infinispan.client.hotrod.RemoteCache;+import org.keycloak.common.util.Time;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.net.InetAddress;+import java.net.UnknownHostException;++public class HotRodLocksUtils {++    public static final String HOT_ROD_LOCKS_CACHE_NAME = ""locks"";++    /**+     * Repeatedly attempts to put an entry with the key {@code lockName}+     * to the {@code cache}. Succeeds only if there is no entry with the same+     * key already.+     * <p />+     * Execution of this method is time bounded, if this method does not+     * succeed within {@code timeoutMilliseconds} it gives up and returns+     * false.+     * <p />+     * There is a pause after each unsuccessful attempt equal to+     * {@code repeatInterval} milliseconds+     *+     * @param cache Cache that will be used for putting the value+     * @param lockName Name of the entry+     * @param timeoutMilliseconds time boundaries in milliseconds+     * @param repeatInterval Number of milliseconds to wait after each+     *                       unsuccessful attempt+     *+     * @return true when the key {@code lockName} was put into the {@code cache}+     *         within time boundaries and previous value was {@code null},+     *         false otherwise+     */+    public static boolean repeatPutIfAbsent(RemoteCache<String, String> cache, String lockName, long timeoutMilliseconds, int repeatInterval) throws LockAcquiringTimeoutException {+        String currentOwner;++        while((currentOwner = cache.withFlags(Flag.FORCE_RETURN_VALUE)+                .putIfAbsent(lockName, Time.currentTimeMillis() + "";"" + getKeycloakInstanceIdentifier())) != null+                && timeoutMilliseconds > 0) {+            try {+                Thread.sleep(repeatInterval);+            } catch (InterruptedException e) {+                throw new RuntimeException(e);+            }+            timeoutMilliseconds -= repeatInterval;+        }++        return currentOwner == null;+    }++    private static String getKeycloakInstanceIdentifier() {+        try {+            return InetAddress.getLocalHost().getHostName();+        } catch (UnknownHostException e) {+            return ""unknown-host"";+        }+    }",I assume bad things(tm) would happen if the local hostname would change while Keycloak is running. See the next method as it compares the name to previous locks. Therefore I'd suggest to make this a static variable that is lazily initialized only once.,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1039677808,2022-12-05T14:34:38Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodGlobalLockProvider.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.MetadataValue;+import org.infinispan.client.hotrod.RemoteCache;+import org.jboss.logging.Logger;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.locking.GlobalLock;+import org.keycloak.models.locking.GlobalLockProvider;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.time.Duration;+import java.time.Instant;+import java.util.LinkedList;+import java.util.List;+++public class HotRodGlobalLockProvider implements GlobalLockProvider {++    private static final Logger LOG = Logger.getLogger(HotRodGlobalLockProvider.class);+    private final RemoteCache<String, String> locksCache;+    private final long defaultTimeoutMilliseconds;+    private final List<GlobalLock> providedGlobalLocks = new LinkedList<>();++    public HotRodGlobalLockProvider(KeycloakSession session, RemoteCache<String, String> locksCache, long defaultTimeoutMilliseconds) {+        this.locksCache = locksCache;+        this.defaultTimeoutMilliseconds = defaultTimeoutMilliseconds;++        // Enlist this provider for closing so all provided locks are closed if not closed by AutoClosable after commit+        session.enlistForClose(this);+    }++    @Override+    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) throws LockAcquiringTimeoutException {+        if (timeToWaitForLock == null) {+            // Set default timeout if null provided+            timeToWaitForLock = Duration.ofMillis(defaultTimeoutMilliseconds);+        }++        LOG.debugf(""Acquiring lock [%s]."", lockName);+        if (!HotRodLocksUtils.repeatPutIfAbsent(locksCache, lockName, timeToWaitForLock.toMillis(), 50)) {+            MetadataValue<String> withMetadata = locksCache.getWithMetadata(lockName);+            throw new LockAcquiringTimeoutException(lockName, withMetadata.getValue(), Instant.ofEpochMilli(withMetadata.getCreated()));+        }+        LOG.debugf(""Lock acquired [%s]."", lockName);+        GlobalLock lock = new HotRodGlobalLock(() -> {+            LOG.debugf(""Releasing lock [%s]."", lockName);+            boolean result = HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, lockName);+            LOG.debugf(""Lock [%s] release resulted with %s"", lockName, result);++            if (!result) {+                LOG.errorf(""Unlocking the lock [%s] was unsuccessful. Current lock value: [%s]"", lockName, locksCache.get(lockName));+                throw new IllegalStateException(""Unlocking the lock was unsuccessful. See log for more details."");+            }+        });++        // Keep reference to acquired lock, so it can be closed by on session close+        providedGlobalLocks.add(lock);","When a lock is being released, and the lambda above is being called, I don't see this being removed from the `providedGlobalLocks`. If this is has been done on purpose, I'd expect to see some comments in the code. If it wasn't on purpose, please extend the lambda to remove the lock from the list upon closing.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/15814,1039863368,2022-12-05T17:09:51Z,services/src/main/java/org/keycloak/services/resources/admin/AdminRoot.java,"@@ -223,6 +224,12 @@ public Object getRealmsAdmin() {         return new RealmsAdminResource(session, auth, tokenManager);     } +    @Path(""{any:.*}"")+    @OPTIONS+    public Object preFlight() {+        return getRealmsAdmin();+    }","Maybe to make it more readable and straightforward? Even though the result is the same, I think we should not be returning `/realms` for `{any:.*}`.```suggestion    @Path(""{any:.*}"")    @OPTIONS    public Object preFlight() {        return new AdminCorsPreflightService(request);    }```Also, I think we can remove these two:https://github.com/keycloak/keycloak/blob/b65b1fddf3ea8f09251161b0573519cd9205a494/services/src/main/java/org/keycloak/services/resources/admin/AdminRoot.java#L210-L212https://github.com/keycloak/keycloak/blob/b65b1fddf3ea8f09251161b0573519cd9205a494/services/src/main/java/org/keycloak/services/resources/admin/AdminRoot.java#L248-L250",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15847,1040854688,2022-12-06T11:32:53Z,model/build-processor/src/main/java/org/keycloak/models/map/processor/GenerateEntityImplementationsProcessor.java,"@@ -99,6 +103,10 @@ protected void afterAnnotationProcessing() {         }     } +    protected void generatedAnnotation(final PrintWriter pw) {",Should we use this method also in [HotRod processor](https://github.com/keycloak/keycloak/blob/main/model/build-processor/src/main/java/org/keycloak/models/map/processor/GenerateHotRodEntityImplementationsProcessor.java)?,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15847,1040865275,2022-12-06T11:43:11Z,model/build-processor/src/main/java/org/keycloak/models/map/processor/GenerateEntityImplementationsProcessor.java,"@@ -74,20 +74,24 @@ public class GenerateEntityImplementationsProcessor extends AbstractGenerateEnti     protected void afterAnnotationProcessing() {         if (! autogenerated.isEmpty()) {             try {-                JavaFileObject file = processingEnv.getFiler().createSourceFile(""org.keycloak.models.map.common.AutogeneratedCloners"");+                JavaFileObject file = processingEnv.getFiler().createSourceFile(""org.keycloak.models.map.common.AutogeneratedClasses"");","This class is getting messy with 200 lines of `put` calls. I was thinking about whether it would be nicer to use the approach we use in HotRod to have a descriptor for each Model instead of `HasMap`s - `class -> something` we could have an implementation of something like [this](https://github.com/keycloak/keycloak/blob/main/model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/common/HotRodEntityDescriptor.java) generated.Maybe we could then also refactor `DeepCloner` to not have all the maps, but it needs a little more thinking as we need to be able to rewrite defaults using the builder.This is not a strong requirement, just wanted to ask what you think about this.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/15758,1041040351,2022-12-06T14:23:13Z,pom.xml,"@@ -79,8 +79,8 @@         <dom4j.version>2.1.3</dom4j.version>         <h2.version>2.1.214</h2.version>         <jakarta.persistence.version>2.2.3</jakarta.persistence.version>-        <hibernate.core.version>5.6.10.Final</hibernate.core.version>-        <hibernate.c3p0.version>5.6.10.Final</hibernate.c3p0.version>+        <hibernate-core.version>5.6.14.Final</hibernate-core.version>",Should we rename it even more to [align with Quarkus](https://github.com/quarkusio/quarkus/blob/2.13.5.Final/bom/application/pom.xml#L91)?```suggestion        <hibernate-orm.version>5.6.14.Final</hibernate-core.version>```,
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/15758,1041904345,2022-12-07T08:31:56Z,pom.xml,"@@ -142,9 +142,9 @@          <!-- Databases -->         <mysql.version>8.0.23</mysql.version>-        <mysql.driver.version>8.0.28</mysql.driver.version>+        <mysql-jdbc.version>8.0.30</mysql-jdbc.version>         <postgresql.version>13.2</postgresql.version>-        <postgresql.driver.version>42.3.3</postgresql.driver.version>+        <postgresql-jdbc.version>42.5.0</postgresql-jdbc.version>         <mariadb.version>10.3.27</mariadb.version>         <mariadb.driver.version>2.7.2</mariadb.driver.version>         <mssql.version>2019-CU10-ubuntu-20.04</mssql.version>","Thanks, I aligned the rest of the jdbc properties in a34d0f7. I didn't bump their versions though, since they don't have an direct affect in Quarkus module. @pedroigor the versions are indeed used in the internal pipeline[1], so it will require an followup.[1] https://internal-gitlab-dummyurl.com/keycloak/keycloak-pipeline/-/blob/main/test-pipeline-universal/scripts/db_tests_common.sh#L27-L30",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1042155679,2022-12-07T12:40:23Z,testsuite/integration-arquillian/tests/base/testsuites/jdk-suite,"@@ -0,0 +1,17 @@+AccountRestServiceTest",@mposolda can you take a look at this list and see if it's an okay list to test JDKs?,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1042156195,2022-12-07T12:41:01Z,testsuite/integration-arquillian/tests/base/testsuites/database-suite,"@@ -0,0 +1,17 @@+AccountRestServiceTest","@mposolda @pedroigor @hmlnarik I need some help in reviewing this list and checking if it's sufficient, at least initially",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1042157110,2022-12-07T12:42:01Z,testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/theme/TestThemeResourceProvider.java,"@@ -1,11 +1,22 @@ package org.keycloak.testsuite.theme; +import org.keycloak.platform.Platform;+import org.keycloak.provider.EnvironmentDependentProviderFactory; import org.keycloak.theme.ClasspathThemeResourceProviderFactory; -public class TestThemeResourceProvider extends ClasspathThemeResourceProviderFactory {+public class TestThemeResourceProvider extends ClasspathThemeResourceProviderFactory implements EnvironmentDependentProviderFactory {      public TestThemeResourceProvider() {         super(""test-resources"", TestThemeResourceProvider.class.getClassLoader());     } +    /**+     * Quarkus detects theme resources automatically, so this provider should only be enabled on Undertow+     *+     * @return true if platform is Undertow+     */+    @Override+    public boolean isSupported() {",@pedroigor instead of having to re-build the testsuite-providers to exclude the class with a profile I'm just disabling it if the environment is not Undertow,x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1042157725,2022-12-07T12:42:40Z,testsuite/integration-arquillian/tests/base/testsuites/base-suite,"@@ -0,0 +1,47 @@+account,4","This is just an initial stab at distributing the tests, we can tune this more later.Also, we can consider naming the groups something more sensible than 1,2,3,4,5,6.We'll probably want to do a little bit more organization of the tests, as there's quite a few ""small packages"" at the top-level that could be organized better. Did that recently by moving par, etc into oauth.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15867,1042363844,2022-12-07T15:38:11Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -260,7 +271,7 @@ public MapStorageProvider create(KeycloakSession session) {         // check the session for a cached provider before creating a new one.         JpaMapStorageProvider provider = session.getAttribute(this.sessionProviderKey, JpaMapStorageProvider.class);         if (provider == null) {-            provider = new JpaMapStorageProvider(this, session, getEntityManager(), this.sessionTxKey);+            provider = new JpaMapStorageProvider(this, session, PersistenceExceptionConverter.create(session, getEntityManager()), this.sessionTxKey, this.jtaEnabled);","I was thinking to skip the instrumentation of the entity manager altogether and wrap only each method in the JPA transaction class, which should (?) have the same effect. For the scope of this issue, I'd keep it as is.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1042374236,2022-12-07T15:45:41Z,testsuite/integration-arquillian/tests/base/testsuites/database-suite,"@@ -0,0 +1,17 @@+AccountRestServiceTest+RequiredActionUpdateProfileTest+org.keycloak.testsuite.admin.*","Does this run also subpackages? For example tests like `org.keycloak.testsuite.admin.client.CredentialsTest`? As AFAIK for maven-surefire-plugin it is needed to use something like `org.keycloak.testsuite.admin.**` to run also sub-packages.One thing is, that there are some classes, which does not test only admin REST API, but also the functionality itself. For example `org.keycloak.testsuite.admin.client.authorization.PolicyEnforcerTest`",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1042995321,2022-12-08T07:03:01Z,testsuite/integration-arquillian/tests/base/testsuites/jdk-suite,"@@ -0,0 +1,17 @@+AccountRestServiceTest","Updated this one quite a bit, as it too much copy/paste from the database-suite. Could you take another look?",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1043087426,2022-12-08T08:59:09Z,testsuite/integration-arquillian/tests/base/testsuites/suite.sh,"@@ -0,0 +1,16 @@+#!/bin/bash -e++GROUP=$1+if [ ""$GROUP"" == """" ]; then+  echo ""Usage: suite.sh database|fips""+  exit+fi++DIR=`readlink -f $0 | xargs dirname`+cd $DIR++TESTSUITE_FILE=""$GROUP-suite""++TESTS=`cat $TESTSUITE_FILE`++echo $TESTS | sed 's/ /,/g'","Missing quotes, and overall should be simplified:```suggestionGROUP=""${1:?Usage: suite.sh database|fips}""DIR=`readlink -f ""$0"" | xargs dirname`sed 's/ /,/g' ""$DIR/$GROUP-suite""```",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1043253187,2022-12-08T11:32:38Z,testsuite/integration-arquillian/tests/base/testsuites/database-suite,"@@ -0,0 +1,26 @@+AccountRestServiceTest","How do we prevent this list from becoming obsolete, e.g. when a test is renamed / deleted etc?",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15862,1043257284,2022-12-08T11:37:52Z,testsuite/integration-arquillian/tests/base/testsuites/database-suite,"@@ -0,0 +1,26 @@+AccountRestServiceTest+AuthorizationCodeTest+AuthorizationTest+ClientRegistrationTest+EventStoreProviderTest+ExportImportTest+GeneratedRsaKeyProviderTest+KcOidcBrokerTest+LDAPUserLoginTest+LoginTest+PasswordPolicyTest+RequiredActionUpdateProfileTest+SSOTest+SamlClientTest+TransactionsTest+UserProfileTest+org.keycloak.testsuite.admin.*+org.keycloak.testsuite.admin.authentication.*+org.keycloak.testsuite.admin.client.*+org.keycloak.testsuite.admin.concurrency.*+org.keycloak.testsuite.admin.event.*+org.keycloak.testsuite.admin.group.*+org.keycloak.testsuite.admin.partialexport.*+org.keycloak.testsuite.admin.partialimport.*+org.keycloak.testsuite.admin.realm.*+org.keycloak.testsuite.admin.userprofile.*","Should `org.keycloak.testsuite.admin` contain all CRUD operations for admin REST API, I'd very much prefer `org.keycloak.testsuite.admin.**` rather than this list, just like suggested previously by @mposolda ",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1043563105,2022-12-08T16:36:00Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodGlobalLockProvider.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.MetadataValue;+import org.infinispan.client.hotrod.RemoteCache;+import org.jboss.logging.Logger;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.locking.GlobalLock;+import org.keycloak.models.locking.GlobalLockProvider;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.time.Duration;+import java.time.Instant;+import java.util.LinkedList;+import java.util.List;+++public class HotRodGlobalLockProvider implements GlobalLockProvider {++    private static final Logger LOG = Logger.getLogger(HotRodGlobalLockProvider.class);+    private final RemoteCache<String, String> locksCache;+    private final long defaultTimeoutMilliseconds;+    private final List<GlobalLock> providedGlobalLocks = new LinkedList<>();++    public HotRodGlobalLockProvider(KeycloakSession session, RemoteCache<String, String> locksCache, long defaultTimeoutMilliseconds) {+        this.locksCache = locksCache;+        this.defaultTimeoutMilliseconds = defaultTimeoutMilliseconds;++        // Enlist this provider for closing so all provided locks are closed if not closed by AutoClosable after commit+        session.enlistForClose(this);+    }++    @Override+    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) throws LockAcquiringTimeoutException {+        if (timeToWaitForLock == null) {+            // Set default timeout if null provided+            timeToWaitForLock = Duration.ofMillis(defaultTimeoutMilliseconds);+        }++        LOG.debugf(""Acquiring lock [%s]."", lockName);+        if (!HotRodLocksUtils.repeatPutIfAbsent(locksCache, lockName, timeToWaitForLock.toMillis(), 50)) {+            MetadataValue<String> withMetadata = locksCache.getWithMetadata(lockName);+            throw new LockAcquiringTimeoutException(lockName, withMetadata.getValue(), Instant.ofEpochMilli(withMetadata.getCreated()));+        }+        LOG.debugf(""Lock acquired [%s]."", lockName);+        GlobalLock lock = new HotRodGlobalLock(() -> {+            LOG.debugf(""Releasing lock [%s]."", lockName);+            boolean result = HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, lockName);+            LOG.debugf(""Lock [%s] release resulted with %s"", lockName, result);++            if (!result) {+                LOG.errorf(""Unlocking the lock [%s] was unsuccessful. Current lock value: [%s]"", lockName, locksCache.get(lockName));+                throw new IllegalStateException(""Unlocking the lock was unsuccessful. See log for more details."");+            }+        });++        // Keep reference to acquired lock, so it can be closed by on session close+        providedGlobalLocks.add(lock);","In the current state, removing the `lock` from the `providedGlobalLocks` would cause `ConcurrentModificationException` on line 83 where the list is traversed. Also, we can't use `this` in the lambda.However, we can change this code to not use lambda and then make a snapshot of the list before traversing it. But what would be the advantage of it? Locks are currently checking whether they were already unlocked and do nothing if yes.",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1043581667,2022-12-08T16:53:01Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodGlobalLockProvider.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.MetadataValue;+import org.infinispan.client.hotrod.RemoteCache;+import org.jboss.logging.Logger;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.locking.GlobalLock;+import org.keycloak.models.locking.GlobalLockProvider;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.time.Duration;+import java.time.Instant;+import java.util.LinkedList;+import java.util.List;+++public class HotRodGlobalLockProvider implements GlobalLockProvider {++    private static final Logger LOG = Logger.getLogger(HotRodGlobalLockProvider.class);+    private final RemoteCache<String, String> locksCache;+    private final long defaultTimeoutMilliseconds;+    private final List<GlobalLock> providedGlobalLocks = new LinkedList<>();++    public HotRodGlobalLockProvider(KeycloakSession session, RemoteCache<String, String> locksCache, long defaultTimeoutMilliseconds) {+        this.locksCache = locksCache;+        this.defaultTimeoutMilliseconds = defaultTimeoutMilliseconds;++        // Enlist this provider for closing so all provided locks are closed if not closed by AutoClosable after commit+        session.enlistForClose(this);+    }++    @Override+    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) throws LockAcquiringTimeoutException {+        if (timeToWaitForLock == null) {+            // Set default timeout if null provided+            timeToWaitForLock = Duration.ofMillis(defaultTimeoutMilliseconds);+        }++        LOG.debugf(""Acquiring lock [%s]."", lockName);+        if (!HotRodLocksUtils.repeatPutIfAbsent(locksCache, lockName, timeToWaitForLock.toMillis(), 50)) {+            MetadataValue<String> withMetadata = locksCache.getWithMetadata(lockName);+            throw new LockAcquiringTimeoutException(lockName, withMetadata.getValue(), Instant.ofEpochMilli(withMetadata.getCreated()));+        }+        LOG.debugf(""Lock acquired [%s]."", lockName);+        GlobalLock lock = new HotRodGlobalLock(() -> {+            LOG.debugf(""Releasing lock [%s]."", lockName);+            boolean result = HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, lockName);+            LOG.debugf(""Lock [%s] release resulted with %s"", lockName, result);++            if (!result) {+                LOG.errorf(""Unlocking the lock [%s] was unsuccessful. Current lock value: [%s]"", lockName, locksCache.get(lockName));+                throw new IllegalStateException(""Unlocking the lock was unsuccessful. See log for more details."");+            }+        });++        // Keep reference to acquired lock, so it can be closed by on session close+        providedGlobalLocks.add(lock);+        return lock;+    }++    @Override+    public void forceReleaseAllLocks() {+        locksCache.clear();+    }++    @Override+    public void close() {+        providedGlobalLocks.forEach(GlobalLock::close);+    }+}","Good point @ahus1! I think it makes sense to do the cleanup as is now, at the session cleanup because we sometimes `enlistAfterCompletion` the map storage transaction and it makes sense to clean locks only after it commits. On the other hand, having it part of the main transaction reads better. WDYT?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1045551452,2022-12-12T08:57:52Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodGlobalLockProvider.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.MetadataValue;+import org.infinispan.client.hotrod.RemoteCache;+import org.jboss.logging.Logger;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.locking.GlobalLock;+import org.keycloak.models.locking.GlobalLockProvider;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.time.Duration;+import java.time.Instant;+import java.util.LinkedList;+import java.util.List;+++public class HotRodGlobalLockProvider implements GlobalLockProvider {++    private static final Logger LOG = Logger.getLogger(HotRodGlobalLockProvider.class);+    private final RemoteCache<String, String> locksCache;+    private final long defaultTimeoutMilliseconds;+    private final List<GlobalLock> providedGlobalLocks = new LinkedList<>();++    public HotRodGlobalLockProvider(KeycloakSession session, RemoteCache<String, String> locksCache, long defaultTimeoutMilliseconds) {+        this.locksCache = locksCache;+        this.defaultTimeoutMilliseconds = defaultTimeoutMilliseconds;++        // Enlist this provider for closing so all provided locks are closed if not closed by AutoClosable after commit+        session.enlistForClose(this);+    }++    @Override+    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) throws LockAcquiringTimeoutException {+        if (timeToWaitForLock == null) {+            // Set default timeout if null provided+            timeToWaitForLock = Duration.ofMillis(defaultTimeoutMilliseconds);+        }++        LOG.debugf(""Acquiring lock [%s]."", lockName);+        if (!HotRodLocksUtils.repeatPutIfAbsent(locksCache, lockName, timeToWaitForLock.toMillis(), 50)) {+            MetadataValue<String> withMetadata = locksCache.getWithMetadata(lockName);+            throw new LockAcquiringTimeoutException(lockName, withMetadata.getValue(), Instant.ofEpochMilli(withMetadata.getCreated()));+        }+        LOG.debugf(""Lock acquired [%s]."", lockName);+        GlobalLock lock = new HotRodGlobalLock(() -> {+            LOG.debugf(""Releasing lock [%s]."", lockName);+            boolean result = HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, lockName);+            LOG.debugf(""Lock [%s] release resulted with %s"", lockName, result);++            if (!result) {+                LOG.errorf(""Unlocking the lock [%s] was unsuccessful. Current lock value: [%s]"", lockName, locksCache.get(lockName));+                throw new IllegalStateException(""Unlocking the lock was unsuccessful. See log for more details."");+            }+        });++        // Keep reference to acquired lock, so it can be closed by on session close+        providedGlobalLocks.add(lock);","The idea behind my comment was: I'd like the code to be symmetric - adding it when the lock is created, and removing it once it is released. When doing so, the `close()` method could log a warning when there are remaining entries in the list, as it indicates and API wasn't used correctly.The `close()` might even throw an exception, so to force the developer to fix this.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1045558588,2022-12-12T09:05:13Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodGlobalLockProvider.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.hotRod.locking;++import org.infinispan.client.hotrod.MetadataValue;+import org.infinispan.client.hotrod.RemoteCache;+import org.jboss.logging.Logger;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.locking.GlobalLock;+import org.keycloak.models.locking.GlobalLockProvider;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.time.Duration;+import java.time.Instant;+import java.util.LinkedList;+import java.util.List;+++public class HotRodGlobalLockProvider implements GlobalLockProvider {++    private static final Logger LOG = Logger.getLogger(HotRodGlobalLockProvider.class);+    private final RemoteCache<String, String> locksCache;+    private final long defaultTimeoutMilliseconds;+    private final List<GlobalLock> providedGlobalLocks = new LinkedList<>();++    public HotRodGlobalLockProvider(KeycloakSession session, RemoteCache<String, String> locksCache, long defaultTimeoutMilliseconds) {+        this.locksCache = locksCache;+        this.defaultTimeoutMilliseconds = defaultTimeoutMilliseconds;++        // Enlist this provider for closing so all provided locks are closed if not closed by AutoClosable after commit+        session.enlistForClose(this);+    }++    @Override+    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) throws LockAcquiringTimeoutException {+        if (timeToWaitForLock == null) {+            // Set default timeout if null provided+            timeToWaitForLock = Duration.ofMillis(defaultTimeoutMilliseconds);+        }++        LOG.debugf(""Acquiring lock [%s]."", lockName);+        if (!HotRodLocksUtils.repeatPutIfAbsent(locksCache, lockName, timeToWaitForLock.toMillis(), 50)) {+            MetadataValue<String> withMetadata = locksCache.getWithMetadata(lockName);+            throw new LockAcquiringTimeoutException(lockName, withMetadata.getValue(), Instant.ofEpochMilli(withMetadata.getCreated()));+        }+        LOG.debugf(""Lock acquired [%s]."", lockName);+        GlobalLock lock = new HotRodGlobalLock(() -> {+            LOG.debugf(""Releasing lock [%s]."", lockName);+            boolean result = HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, lockName);+            LOG.debugf(""Lock [%s] release resulted with %s"", lockName, result);++            if (!result) {+                LOG.errorf(""Unlocking the lock [%s] was unsuccessful. Current lock value: [%s]"", lockName, locksCache.get(lockName));+                throw new IllegalStateException(""Unlocking the lock was unsuccessful. See log for more details."");+            }+        });++        // Keep reference to acquired lock, so it can be closed by on session close+        providedGlobalLocks.add(lock);+        return lock;+    }++    @Override+    public void forceReleaseAllLocks() {+        locksCache.clear();+    }++    @Override+    public void close() {+        providedGlobalLocks.forEach(GlobalLock::close);+    }+}","> WDYTAs you know, I wasn't happy about the sentence ""Some implementations ..."" as it makes the API more complex to use than it IMHO needs to be, and leaves some questions with the reader. Until now, we haven't seen an implementation needing it, and we could have added it only when we needed it for an implementation. For the Infinispan implementation, I'd argue to throw an exception if the lock wouldn't have been closed correctly (probably after unlocking it, or maybe not?). If you choose to stick with the current implementation, it needs to be aligned with the JavaDoc so it is about the session, and not the transaction. Or you choose to update your implementation to be aligned with the transaction.",
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/15967,1047165454,2022-12-13T13:36:53Z,services/src/main/java/org/keycloak/services/resources/admin/UserProfileResource.java,"@@ -49,7 +49,7 @@ public UserProfileResource(KeycloakSession session, AdminPermissionEvaluator aut     @GET     @Produces(MediaType.APPLICATION_JSON)     public String getConfiguration() {-        auth.realm().requireViewRealm();","I'm not sure.  Would someone ever have rights to see the realm configuration without having rights to query users?Also, we will need a similar endpoint for the account console.  For that one, the UI will need to get the profile config without any admin rights at all.So to me it made sense to allow the least restrictive permissions.  But I'm happy to change it if you disagree.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15967,1047586723,2022-12-13T18:39:03Z,services/src/main/java/org/keycloak/services/resources/admin/UserProfileResource.java,"@@ -49,7 +49,7 @@ public UserProfileResource(KeycloakSession session, AdminPermissionEvaluator aut     @GET     @Produces(MediaType.APPLICATION_JSON)     public String getConfiguration() {-        auth.realm().requireViewRealm();","My bad, forget about this comment. I was considering the changes we are about to expose the metadata for a user.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15968,1048079591,2022-12-14T06:55:02Z,services/src/main/java/org/keycloak/authentication/AbstractFormAuthenticator.java,"@@ -22,6 +22,7 @@  *  * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>  * @version $Revision: 1 $+ * HELLO WORLD","Nopes, used it to test the CodeQL conditional jobs and forgot to remove it. Removed now.",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1048757407,2022-12-14T17:24:34Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -16,20 +16,171 @@  */ package org.keycloak.models.map.storage.file; +import org.keycloak.models.ClientModel; import org.keycloak.models.KeycloakSession; import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.UpdatableEntity; import org.keycloak.models.map.storage.MapKeycloakTransaction; import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapCrudOperations;+import org.keycloak.models.map.storage.file.yaml.parser.YamlContextAwareParser;+import org.keycloak.models.map.storage.file.yaml.parser.map.MapEntityYamlContext;+import java.io.IOException;+import java.nio.file.DirectoryStream;+import java.nio.file.Files;+import java.nio.file.Path;+import java.util.List;+import java.util.Spliterator;+import java.util.Spliterators;+import java.util.function.Function;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import java.util.stream.StreamSupport;+import org.jboss.logging.Logger;  /**  * A file-based {@link MapStorage}.  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-public class FileMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class FileMapStorage<V extends AbstractEntity & UpdatableEntity, M> implements MapStorage<V, M> {++    private static final Logger LOG = Logger.getLogger(FileMapStorage.class);++    // any REALM_ID field would do, they share the same name+    private static final String SEARCHABLE_FIELD_REALM_ID_FIELD_NAME = ClientModel.SearchableFields.REALM_ID.getName();+    private static final String FILE_SUFFIX = "".yaml"";++    private final Class<V> entityClass;+    private final Crud crud = new Crud();+    private final Function<String, Path> dataDirectoryFunc;++    // TODO: Add auxiliary directory for indices etc.+    // private final String auxiliaryFilesDirectory;++    public FileMapStorage(Class<V> entityClass, Function<String, Path> dataDirectoryFunc) {+        this.entityClass = entityClass;+        this.dataDirectoryFunc = dataDirectoryFunc;+    }      @Override     public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-        return new FileKeycloakTransaction();+        @SuppressWarnings(""unchecked"")+        MapKeycloakTransaction<V, M> sessionTransaction = session.getAttribute(""file-map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (sessionTransaction == null) {+            sessionTransaction = createTransactionInternal(session);+            session.setAttribute(""file-map-transaction-"" + hashCode(), sessionTransaction);+        }+        return sessionTransaction;+    }++    public MapKeycloakTransaction<V, M> createTransactionInternal(KeycloakSession session) {+        return new FileMapKeycloakTransaction<>(entityClass, crud);+    }++    public Path getDataDirectoryRoot(String realmId) {+        return dataDirectoryFunc.apply(realmId);+    }++    private class Crud implements ConcurrentHashMapCrudOperations<V, M>, HasRealmId {++        private String defaultRealmId;++        protected V parse(Path fileName) {+            try {+                final V parsedObject = YamlContextAwareParser.parse(Files.newInputStream(fileName), new MapEntityYamlContext<>(entityClass));+                final String fileNameStr = fileName.getFileName().toString();++                parsedObject.setId(fileNameStr.substring(0, fileNameStr.length() - FILE_SUFFIX.length()));+                parsedObject.clearUpdatedFlag();++                return parsedObject;+            } catch (IOException ex) {+                LOG.warnf(ex, ""Error reading %s"", fileName);+                return null;+            }+        }++        @Override+        public V create(V value) {+            throw new UnsupportedOperationException(""Not supported yet."");+        }++        @Override+        public V read(String key) {+            Path fileName = getDataDirectory().resolve(key + FILE_SUFFIX);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2296),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1048757411,2022-12-14T17:24:34Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorageProviderFactory.java,"@@ -55,6 +70,35 @@     @Override     public void init(Config.Scope config) {         this.config = config;+        final String dir = config.get(""dir"");+        rootRealmsDirectory = dir == null ? null : Path.of(dir);+        getModelNames().stream()+          .filter(n -> ! Objects.equals(n, getModelName(RealmModel.class)))+          .forEach(n -> rootAreaDirectories.put(n, getRootDir(rootRealmsDirectory, n, config.get(""dir."" + n))));++        if (rootAreaDirectories != null) {+            rootAreaDirectories.put(getModelName(RealmModel.class), realmId -> rootRealmsDirectory);+        }+    }++    private static Function<String, Path> getRootDir(Path rootRealmsDirectory, String areaName, String configurationPropertyValue) {+        if (configurationPropertyValue == null) {+            return p -> { throw new IllegalStateException(""Directory for "" + areaName + "" area not configured.""); };+        }++        if (rootRealmsDirectory == null) {+            Path p = Path.of(configurationPropertyValue);+            return realmId -> p;+        } else {+            return realmId -> {+              if (realmId == null) {+                  throw new IllegalArgumentException(""Realm needed for constructing the path to "" + areaName + "" but not known"");+              }+              return rootRealmsDirectory+                .resolve(realmId)+                .resolve(configurationPropertyValue == null ? areaName : configurationPropertyValue);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2297),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1048757416,2022-12-14T17:24:34Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorageProviderFactory.java,"@@ -55,6 +70,35 @@     @Override     public void init(Config.Scope config) {         this.config = config;+        final String dir = config.get(""dir"");+        rootRealmsDirectory = dir == null ? null : Path.of(dir);+        getModelNames().stream()+          .filter(n -> ! Objects.equals(n, getModelName(RealmModel.class)))+          .forEach(n -> rootAreaDirectories.put(n, getRootDir(rootRealmsDirectory, n, config.get(""dir."" + n))));++        if (rootAreaDirectories != null) {+            rootAreaDirectories.put(getModelName(RealmModel.class), realmId -> rootRealmsDirectory);+        }+    }++    private static Function<String, Path> getRootDir(Path rootRealmsDirectory, String areaName, String configurationPropertyValue) {+        if (configurationPropertyValue == null) {+            return p -> { throw new IllegalStateException(""Directory for "" + areaName + "" area not configured.""); };+        }++        if (rootRealmsDirectory == null) {+            Path p = Path.of(configurationPropertyValue);+            return realmId -> p;+        } else {+            return realmId -> {+              if (realmId == null) {+                  throw new IllegalArgumentException(""Realm needed for constructing the path to "" + areaName + "" but not known"");+              }+              return rootRealmsDirectory+                .resolve(realmId)",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2298),x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1049306033,2022-12-15T07:42:54Z,server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java,"@@ -131,6 +132,25 @@ public static void createProviders(RealmModel realm, String privateKeyPem, Strin             realm.addComponentModel(rsa);         } +        if (!hasProvider(realm, ""rsa-enc"")) {+            ComponentModel rsaEnc = new ComponentModel();+            rsaEnc.setName(""rsa-enc"");+            rsaEnc.setParentId(realm.getId());+            rsaEnc.setProviderId(""rsa-enc"");+            rsaEnc.setProviderType(KeyProvider.class.getName());++            MultivaluedHashMap<String, String> configEnc = new MultivaluedHashMap<>();+            configEnc.putSingle(""keyUse"", KeyUse.ENC.getSpecName());+            configEnc.putSingle(""priority"", ""100"");+            configEnc.putSingle(""privateKey"", privateKeyPem);+            if (certificatePem != null) {+                configEnc.putSingle(""certificate"", certificatePem);+            }+            rsaEnc.setConfig(configEnc);++            realm.addComponentModel(rsaEnc);+        }+","I'm thinking we shouldn't do this, as it puts the server into an non-recommended setup where the same keys are used for signing and encryption.In the backwards compatibility mode we just use the signature keys as previously, and we should just document how folks can create the proper encryption keys required using the component model in the realm representation, or through the UI.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1049308936,2022-12-15T07:46:49Z,services/src/main/java/org/keycloak/broker/saml/SAMLEndpoint.java,"@@ -404,6 +412,17 @@ private String getEntityId(UriInfo uriInfo, RealmModel realm) {                 return configEntityId;         } +        private List<KeyWrapper> getEncryptionKeys() {+            if (Boolean.getBoolean(""keycloak.saml.backward.compatible.encryption"")) {+                KeyManager.ActiveRsaKey keys = session.keys().getActiveRsaKey(realm);+            }+            return session.keys()+                    .getKeysStream(realm, KeyUse.ENC, JWEConstants.RSA_OAEP)+                    // Sort keys so the active key is the first one+                    .sorted(SamlService::compareKeys)",If for some reason multiple keys are marked as active we use priority to pick the best one. Is this considered here?Is this method only used to decrypt assertions? If this is also used to encrypt assertions this would result in passive keys potentially being used to encrypt assertions.I would suggest renaming this to getDecryptionKeys perhaps?,x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1049318251,2022-12-15T07:59:16Z,server-spi-private/src/main/java/org/keycloak/models/utils/DefaultKeyProviders.java,"@@ -131,6 +132,25 @@ public static void createProviders(RealmModel realm, String privateKeyPem, Strin             realm.addComponentModel(rsa);         } +        if (!hasProvider(realm, ""rsa-enc"")) {+            ComponentModel rsaEnc = new ComponentModel();+            rsaEnc.setName(""rsa-enc"");+            rsaEnc.setParentId(realm.getId());+            rsaEnc.setProviderId(""rsa-enc"");+            rsaEnc.setProviderType(KeyProvider.class.getName());++            MultivaluedHashMap<String, String> configEnc = new MultivaluedHashMap<>();+            configEnc.putSingle(""keyUse"", KeyUse.ENC.getSpecName());+            configEnc.putSingle(""priority"", ""100"");+            configEnc.putSingle(""privateKey"", privateKeyPem);+            if (certificatePem != null) {+                configEnc.putSingle(""certificate"", certificatePem);+            }+            rsaEnc.setConfig(configEnc);++            realm.addComponentModel(rsaEnc);+        }+",This code is used only with the deprecated [RealmRepresentation fields](https://github.com/keycloak/keycloak/blob/main/core/src/main/java/org/keycloak/representations/idm/RealmRepresentation.java#L101-L106). Removing this would mean we need to migrate all testsuite representations to use the new way of defining keys (using ComponentModel) or somehow hack the importing to double the keys before. I would probably prefer to leave this as is. Maybe we can mark this code as deprecated to make sure we remove it as part of the future issue I plan to create for removing the fields I mentioned above.,x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1049321307,2022-12-15T08:03:38Z,services/src/main/java/org/keycloak/broker/saml/SAMLEndpoint.java,"@@ -404,6 +412,17 @@ private String getEntityId(UriInfo uriInfo, RealmModel realm) {                 return configEntityId;         } +        private List<KeyWrapper> getEncryptionKeys() {+            if (Boolean.getBoolean(""keycloak.saml.backward.compatible.encryption"")) {+                KeyManager.ActiveRsaKey keys = session.keys().getActiveRsaKey(realm);+            }+            return session.keys()+                    .getKeysStream(realm, KeyUse.ENC, JWEConstants.RSA_OAEP)+                    // Sort keys so the active key is the first one+                    .sorted(SamlService::compareKeys)","> If for some reason multiple keys are marked as active we use priority to pick the best one. Is this considered here?Yes we compare it like this:https://github.com/keycloak/keycloak/blob/c1b0f2a6ab2243ba248394b28c0a0ebd0229ac20/services/src/main/java/org/keycloak/protocol/saml/SamlService.java#L872-L876> Is this method only used to decrypt assertions? If this is also used to encrypt assertions this would result in passive keys potentially being used to encrypt assertions.For SAML we never encrypt using realm keys. We encrypt by a key provided by the client/SP.> I would suggest renaming this to getDecryptionKeys perhaps?Makes sense to me, I will change it",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/15257,1049911398,2022-12-15T16:57:27Z,core/src/main/java/org/keycloak/representations/account/UserProfileMetadata.java,"@@ -42,4 +45,13 @@ public void setAttributes(List<UserProfileAttributeMetadata> attributes) {         this.attributes = attributes;     } +    public UserProfileAttributeMetadata getAttributeMetadata(String attributeName) {+        return Optional.ofNullable(getAttributes()).orElse(Collections.emptyList()).stream().filter(+                new Predicate<UserProfileAttributeMetadata>() {+                    @Override+                    public boolean test(UserProfileAttributeMetadata metadata) {+                        return metadata.getName().equals(attributeName);+                    }+                }).findAny().orElse(null);+    }","I'm not sure if this belongs to a Representation (a DTO object), moreover if it's used just by tests. But not blocking for me.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/15257,1049925961,2022-12-15T17:08:03Z,core/src/main/java/org/keycloak/representations/account/UserProfileMetadata.java,"@@ -42,4 +45,13 @@ public void setAttributes(List<UserProfileAttributeMetadata> attributes) {         this.attributes = attributes;     } +    public UserProfileAttributeMetadata getAttributeMetadata(String attributeName) {+        return Optional.ofNullable(getAttributes()).orElse(Collections.emptyList()).stream().filter(+                new Predicate<UserProfileAttributeMetadata>() {+                    @Override+                    public boolean test(UserProfileAttributeMetadata metadata) {+                        return metadata.getName().equals(attributeName);+                    }+                }).findAny().orElse(null);+    }","See this also brings me to a question. Do we really need for the attributes metadata to be a list? Even from the API perspective (that will be consumed by the UI) it would IMHO made more sense for it to be a map with attribute names as the keys. Anyway, not blocking for me.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15257,1049984850,2022-12-15T18:05:30Z,core/src/main/java/org/keycloak/representations/account/UserProfileMetadata.java,"@@ -42,4 +45,13 @@ public void setAttributes(List<UserProfileAttributeMetadata> attributes) {         this.attributes = attributes;     } +    public UserProfileAttributeMetadata getAttributeMetadata(String attributeName) {+        return Optional.ofNullable(getAttributes()).orElse(Collections.emptyList()).stream().filter(+                new Predicate<UserProfileAttributeMetadata>() {+                    @Override+                    public boolean test(UserProfileAttributeMetadata metadata) {+                        return metadata.getName().equals(attributeName);+                    }+                }).findAny().orElse(null);+    }",Attributes are ordered and a list fits better when returning from over REST.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16034,1050560920,2022-12-16T09:55:42Z,.github/workflows/ci.yml,"@@ -87,6 +88,10 @@ jobs:           api-key: ${{ secrets.FORESIGHT_API_KEY }}           surefire-reports-path: 'testsuite/integration-arquillian/tests/base/target/surefire-reports/*.xml' +      - uses: ./.github/actions/upload-flaky-tests+        env:+          GH_TOKEN: ${{ github.token }}",Do you want to be explicit about the permission of this token? Some conditions might apply to PRs.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16034,1050563902,2022-12-16T09:58:48Z,.github/actions/upload-flaky-tests/action.yml,"@@ -0,0 +1,44 @@+name: Report flaky test+description: Finds flaky tests and creates issues++runs:+  using: composite+  steps:+    - id: flaky-tests+      name: Find flaky tests+      if: github.repository == 'stianst/keycloak'+      shell: bash+      run: |+        REPO=""${{ github.repository }}""+        ISSUES_LINK=""https://github.com/${{ github.repository }}/issues/""+        PR=""${{ github.event.pull_request.number }}""+        RUN=""https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}""+        for dir in $(find -type d -name surefire-reports); do+          for i in $(ls $dir/*.txt); do+            if ( grep '<<< FAILURE!' $i &>/dev/null ); then+              TEST=""$(echo $i | sed 's/.txt//g' | sed 's/.*\.//g')""+              LOG=""$(cat $i)""+              +              TITLE=""Flaky test: $TEST""+              BODY=""$RUN""$'\n''```'$'\n'""$LOG""$'\n''```'+              ISSUE=""$(gh issue list --search ""$TITLE in:title"" --json number --jq .[].number)""",`gh issue list` only returns open issues. I've tested this and it does indeed create a new issue if there's a closed issue with the same title.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1050812939,2022-12-16T14:26:03Z,model/legacy-private/src/main/java/org/keycloak/models/dblock/DBLockGlobalLockProvider.java,"@@ -47,14 +50,19 @@ private static DBLockProvider.Namespace stringToNamespace(String lockName) {     }      @Override-    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) {+    public <V> V withLock(String lockName, Duration timeToWaitForLock, KeycloakSessionTaskWithResult<V> task) {         Objects.requireNonNull(lockName, ""lockName cannot be null"");          if (timeToWaitForLock != null) {             LOG.debug(""DBLockGlobalLockProvider does not support setting timeToWaitForLock per lock."");         }-        dbLockProvider.waitForLock(stringToNamespace(lockName));-        return () -> releaseLock(lockName);++        try {+            dbLockProvider.waitForLock(stringToNamespace(lockName));+            return task.run(session);+        } finally {+            releaseLock(lockName);+        }","This doesn't use the semantics described in the JavaDoc: * lock is not acquired in a separate transaction* task is not run in a separate transaction* lock is not released in a separate transactionIf this is not possible differently for the legacy store, this would at least require a comment.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1050814407,2022-12-16T14:27:20Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLockProvider.java,"@@ -17,57 +17,73 @@  package org.keycloak.models.locking; +import org.keycloak.models.KeycloakSessionFactory;",unused import,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1050818529,2022-12-16T14:30:56Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLockProvider.java,"@@ -17,57 +17,73 @@  package org.keycloak.models.locking; +import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.KeycloakSessionTaskWithResult; import org.keycloak.provider.Provider;  import java.time.Duration;  public interface GlobalLockProvider extends Provider { +    class Constants {+        public static final String KEYCLOAK_BOOT = ""keycloak-boot"";+    }+     /**-     * Effectively the same as {@code acquire(lockName, null)}-     * <p />-     * This method is intended to be used in a {@code try}-with-resources block.+     * Effectively the same as {@code withLock(lockName, null, task)}      *      * @param lockName Identifier used for acquiring lock. Can be any non-null string.-     * @return Instance of {@link GlobalLock} representing successfully acquired global lock.+     * @param task The task that will be executed under the acquired lock+     * @param <V> Type of object returned by the {@code task}+     * @return Value returned by the {@code task}      * @throws LockAcquiringTimeoutException When acquiring the global lock times out-     *                          (see Javadoc of {@link #acquire(String, Duration)} for more details on how the time-     *                          duration is determined)-     * @throws NullPointerException When lockName is {@code null}.+     *                                       (see Javadoc of {@link #withLock(String, Duration, KeycloakSessionTaskWithResult)} for more details on how the time+     *                                       duration is determined)+     * @throws NullPointerException          When lockName is {@code null}.      */-    default GlobalLock acquireLock(String lockName) throws LockAcquiringTimeoutException {-        return acquire(lockName, null);+    default <V> V withLock(String lockName, KeycloakSessionTaskWithResult<V> task) throws LockAcquiringTimeoutException {+        return withLock(lockName, null, task);     }      /**-     * Acquires a new global lock that is visible to all Keycloak nodes. The lock is non-reentrant.-     * <p />-     * The lock is guaranteed to be kept until the returned {@link GlobalLock} is closed-     * using the {@link GlobalLock#close} method.-     * <p />-     * Some implementations may benefit from locks that are released at the end of transaction.-     * For this purpose, the lifespan of the returned lock is limited by the transaction lifespan-     * of the session which acquired this lock.-     * <p />-     * This method is intended to be used in a {@code try}-with-resources block.-     * <p />+     * Acquires a new non-reentrant global lock that is visible to all Keycloak nodes. If the lock was successfully+     * acquired the method runs the {@code task} in a new transaction using method+     * {@link org.keycloak.models.utils.KeycloakModelUtils#runJobInTransactionWithResult(KeycloakSessionFactory, KeycloakSessionTaskWithResult)}.","Avoid going into the implementation details, summarize the behavior.```suggestion     * Acquires a new non-reentrant global lock that is visible to all Keycloak nodes. If the lock was successfully     * acquired the method runs the {@code task} in a new transaction to ensure all data modified in is committed to the stores     * before releasing the lock and returning to the caller.```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1050819906,2022-12-16T14:32:20Z,server-spi-private/src/main/java/org/keycloak/models/locking/GlobalLockProvider.java,"@@ -17,57 +17,73 @@  package org.keycloak.models.locking; +import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.KeycloakSessionTaskWithResult; import org.keycloak.provider.Provider;  import java.time.Duration;  public interface GlobalLockProvider extends Provider { +    class Constants {+        public static final String KEYCLOAK_BOOT = ""keycloak-boot"";+    }+     /**-     * Effectively the same as {@code acquire(lockName, null)}-     * <p />-     * This method is intended to be used in a {@code try}-with-resources block.+     * Effectively the same as {@code withLock(lockName, null, task)}      *      * @param lockName Identifier used for acquiring lock. Can be any non-null string.-     * @return Instance of {@link GlobalLock} representing successfully acquired global lock.+     * @param task The task that will be executed under the acquired lock+     * @param <V> Type of object returned by the {@code task}+     * @return Value returned by the {@code task}      * @throws LockAcquiringTimeoutException When acquiring the global lock times out-     *                          (see Javadoc of {@link #acquire(String, Duration)} for more details on how the time-     *                          duration is determined)-     * @throws NullPointerException When lockName is {@code null}.+     *                                       (see Javadoc of {@link #withLock(String, Duration, KeycloakSessionTaskWithResult)} for more details on how the time+     *                                       duration is determined)+     * @throws NullPointerException          When lockName is {@code null}.      */-    default GlobalLock acquireLock(String lockName) throws LockAcquiringTimeoutException {-        return acquire(lockName, null);+    default <V> V withLock(String lockName, KeycloakSessionTaskWithResult<V> task) throws LockAcquiringTimeoutException {+        return withLock(lockName, null, task);     }      /**-     * Acquires a new global lock that is visible to all Keycloak nodes. The lock is non-reentrant.-     * <p />-     * The lock is guaranteed to be kept until the returned {@link GlobalLock} is closed-     * using the {@link GlobalLock#close} method.-     * <p />-     * Some implementations may benefit from locks that are released at the end of transaction.-     * For this purpose, the lifespan of the returned lock is limited by the transaction lifespan-     * of the session which acquired this lock.-     * <p />-     * This method is intended to be used in a {@code try}-with-resources block.-     * <p />+     * Acquires a new non-reentrant global lock that is visible to all Keycloak nodes. If the lock was successfully+     * acquired the method runs the {@code task} in a new transaction using method+     * {@link org.keycloak.models.utils.KeycloakModelUtils#runJobInTransactionWithResult(KeycloakSessionFactory, KeycloakSessionTaskWithResult)}.+     * <p/>      * If there is another global lock with the same identifier ({@code lockName}) already acquired, this method waits      * until the lock is released, however, not more than {@code timeToWaitForLock} duration. If the lock is not-     * acquired after {@code timeToWaitForLock} duration, the method throws {@link LockAcquiringTimeoutException}-     * <p />-     * Releasing of the lock is done using instance of {@link GlobalLock} returned by this method.+     * acquired after {@code timeToWaitForLock} duration, the method throws {@link LockAcquiringTimeoutException}.+     * <p/>+     * When the execution of the {@code task} finishes, the acquired lock must be released regardless of the result.+     * <p/>+     * To make sure acquiring/releasing the lock is visible to all Keycloak nodes it may be needed to run the code that+     * acquires/releases the lock in a separate transactions. This means together the method can use 3 separate+     * transactions, for example:+     * <pre>+     *     try {+     *         KeycloakModelUtils.runJobInTransaction(factory,+     *                                innerSession -> /* run code that acquires the lock *\/)+     *+     *         KeycloakModelUtils.runJobInTransactionWithResult(factory, task)+     *     } finally {+     *         KeycloakModelUtils.runJobInTransaction(factory,+     *                                innerSession -> /* run code that releases the lock *\/)+     *     }+     * </pre>","The JavaDoc switches the addresses personal from a caller to an implementor. As the usual personal is that of a caller, switching the persona to an implementator should be stated clearly.```suggestion     * When the execution of the {@code task} finishes, it releases the acquired lock regardless of the result or if an exception has been thrown.     * <p/>     * <b>A note to implementors of the interface:</b>     * <p/>     * To make sure acquiring/releasing the lock is visible to all Keycloak nodes it may be needed to run the code that     * acquires/releases the lock in separate transactions. This means together the method can use 3 separate     * transactions, for example:     * <pre>     *     try {     *         KeycloakModelUtils.runJobInTransaction(factory,     *                                innerSession -> /* run code that acquires the lock *\/);     *     *         KeycloakModelUtils.runJobInTransactionWithResult(factory, task);     *     } finally {     *         KeycloakModelUtils.runJobInTransaction(factory,     *                                innerSession -> /* run code that releases the lock *\/);     *     }     * </pre>```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1050826984,2022-12-16T14:39:09Z,model/map/src/main/java/org/keycloak/models/map/common/locking/ConcurrentMapLocksUtils.java,"@@ -0,0 +1,100 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.common.locking;","I wonder why this class in in the module model-map, as it is used only from HotRod. What is the reason for this?",x
1251974,miquelsi,https://api.github.com/repos/keycloak/keycloak/pulls/16045,1050869515,2022-12-16T15:20:54Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -360,7 +360,7 @@                                         <wait>                                             <!-- Do not use waiting for port since that is unreliable, sometimes port is listening before DB is ready to serve -->                                             <log>${docker.database.wait-for-log-regex}</log>-                                            <time>300000</time>+                                            <time>900000</time>",I had to increase the timeout because Oracle DB takes longer to start up.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1050927154,2022-12-16T16:16:57Z,model/map/src/main/java/org/keycloak/models/map/common/locking/ConcurrentMapLocksUtils.java,"@@ -0,0 +1,100 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.common.locking;++import org.keycloak.common.util.Time;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.net.InetAddress;+import java.net.UnknownHostException;+import java.time.Instant;+import java.util.concurrent.ConcurrentMap;+ import java.util.function.Supplier;++public class ConcurrentMapLocksUtils {",Does this belong to `map` module or rather into `map-hot-rod`?,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15724,1052002108,2022-12-19T09:49:38Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/group/JpaGroupModelCriteriaBuilder.java,"@@ -81,6 +81,7 @@ public JpaGroupModelCriteriaBuilder compare(SearchableModelField<? super GroupMo                         Join<JpaGroupEntity, JpaGroupAttributeEntity> join = root.join(""attributes"", JoinType.LEFT);                         return cb.and(                             cb.equal(join.get(""name""), value[0]),+                            cb.equal(join.get(""value_hash""), sha256((String) value[1])),","> Question: is it needed to include the value in the comparison? A different value would lead to a different hash, wouldn't it? So it should be enough to compare the name and hash. WDYT?The value should be kept in the query condition as a security measure. If there was a collision attack against SHA256 in the future, this could stop the attacker.",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1052316362,2022-12-19T15:05:06Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorageProviderFactory.java,"@@ -54,7 +70,40 @@      @Override     public void init(Config.Scope config) {-        this.config = config;+        final String dir = config.get(""dir"");+        rootRealmsDirectory = dir == null ? null : Path.of(dir);+        getModelNames().stream()+          .filter(n -> ! Objects.equals(n, getModelName(RealmModel.class)))+          .forEach(n -> rootAreaDirectories.put(n, getRootDir(rootRealmsDirectory, n, config.get(""dir."" + n))));++        if (rootAreaDirectories != null) {+            rootAreaDirectories.put(getModelName(RealmModel.class), realmId -> rootRealmsDirectory);+        }+    }++    private static final Pattern FORBIDDEN_CHARACTERS = Pattern.compile(""[\\.\\"" + File.separator + ""]"");++    private static Function<String, Path> getRootDir(Path rootRealmsDirectory, String areaName, String dirFromConfig) {+        if (dirFromConfig != null) {+            if (rootRealmsDirectory == null) {+                return p -> { throw new IllegalStateException(""Directory for "" + areaName + "" area not configured.""); };+            }++            Path p = Path.of(dirFromConfig);+            return realmId -> p;+        } else {+            return realmId -> {+              if (realmId == null || FORBIDDEN_CHARACTERS.matcher(realmId).find()) {+                  throw new IllegalArgumentException(""Realm needed for constructing the path to "" + areaName + "" but not known"");+              }++              final Path path = rootRealmsDirectory+                .resolve(realmId)+                .resolve(areaName);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2307),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1052316365,2022-12-19T15:05:06Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorageProviderFactory.java,"@@ -54,7 +70,40 @@      @Override     public void init(Config.Scope config) {-        this.config = config;+        final String dir = config.get(""dir"");+        rootRealmsDirectory = dir == null ? null : Path.of(dir);+        getModelNames().stream()+          .filter(n -> ! Objects.equals(n, getModelName(RealmModel.class)))+          .forEach(n -> rootAreaDirectories.put(n, getRootDir(rootRealmsDirectory, n, config.get(""dir."" + n))));++        if (rootAreaDirectories != null) {+            rootAreaDirectories.put(getModelName(RealmModel.class), realmId -> rootRealmsDirectory);+        }+    }++    private static final Pattern FORBIDDEN_CHARACTERS = Pattern.compile(""[\\.\\"" + File.separator + ""]"");++    private static Function<String, Path> getRootDir(Path rootRealmsDirectory, String areaName, String dirFromConfig) {+        if (dirFromConfig != null) {+            if (rootRealmsDirectory == null) {+                return p -> { throw new IllegalStateException(""Directory for "" + areaName + "" area not configured.""); };+            }++            Path p = Path.of(dirFromConfig);+            return realmId -> p;+        } else {+            return realmId -> {+              if (realmId == null || FORBIDDEN_CHARACTERS.matcher(realmId).find()) {+                  throw new IllegalArgumentException(""Realm needed for constructing the path to "" + areaName + "" but not known"");+              }++              final Path path = rootRealmsDirectory+                .resolve(realmId)",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2308),x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1052362645,2022-12-19T15:47:10Z,model/legacy-private/src/main/java/org/keycloak/models/dblock/DBLockGlobalLockProvider.java,"@@ -47,14 +50,19 @@ private static DBLockProvider.Namespace stringToNamespace(String lockName) {     }      @Override-    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) {+    public <V> V withLock(String lockName, Duration timeToWaitForLock, KeycloakSessionTaskWithResult<V> task) {         Objects.requireNonNull(lockName, ""lockName cannot be null"");          if (timeToWaitForLock != null) {             LOG.debug(""DBLockGlobalLockProvider does not support setting timeToWaitForLock per lock."");         }-        dbLockProvider.waitForLock(stringToNamespace(lockName));-        return () -> releaseLock(lockName);++        try {+            dbLockProvider.waitForLock(stringToNamespace(lockName));+            return task.run(session);+        } finally {+            releaseLock(lockName);+        }","Good point, I think the locking and unlocking will be impossible to do in separate tx based on how `DBLockProvider` works, so I would prefer to add just a comment. However, the task probably should run in a separate tx. I tried to add it and I get the following exception. Any idea what can be causing it? Can the same happen when we will have some db update for the new store?``` java.lang.RuntimeException: Failed to update database	at org.keycloak.quarkus.runtime.storage.legacy.liquibase.QuarkusJpaUpdaterProvider.update(QuarkusJpaUpdaterProvider.java:122)	at org.keycloak.quarkus.runtime.storage.legacy.liquibase.QuarkusJpaUpdaterProvider.update(QuarkusJpaUpdaterProvider.java:85)	at org.keycloak.quarkus.runtime.storage.legacy.database.LegacyJpaConnectionProviderFactory.lambda$update$1(LegacyJpaConnectionProviderFactory.java:298)	at org.keycloak.models.utils.KeycloakModelUtils.runJobInTransactionWithResult(KeycloakModelUtils.java:268)	at org.keycloak.models.dblock.DBLockGlobalLockProvider.withLock(DBLockGlobalLockProvider.java:67)	at org.keycloak.models.locking.GlobalLockProvider.withLock(GlobalLockProvider.java:45)	at org.keycloak.quarkus.runtime.storage.legacy.database.LegacyJpaConnectionProviderFactory.update(LegacyJpaConnectionProviderFactory.java:297)	at org.keycloak.quarkus.runtime.storage.legacy.database.LegacyJpaConnectionProviderFactory.createOrUpdateSchema(LegacyJpaConnectionProviderFactory.java:265)	at org.keycloak.quarkus.runtime.storage.legacy.database.LegacyJpaConnectionProviderFactory.postInit(LegacyJpaConnectionProviderFactory.java:131)	at org.keycloak.quarkus.runtime.integration.QuarkusKeycloakSessionFactory.init(QuarkusKeycloakSessionFactory.java:104)	at org.keycloak.quarkus.runtime.integration.jaxrs.QuarkusKeycloakApplication.startup(QuarkusKeycloakApplication.java:42)	at org.keycloak.quarkus.runtime.integration.QuarkusLifecycleObserver.onStartupEvent(QuarkusLifecycleObserver.java:37)	at org.keycloak.quarkus.runtime.integration.QuarkusLifecycleObserver_Observer_onStartupEvent_b0e82415b143738dc1f986a5fa4668e83d0a5dea.notify(Unknown Source)	at io.quarkus.arc.impl.EventImpl$Notifier.notifyObservers(EventImpl.java:326)	at io.quarkus.arc.impl.EventImpl$Notifier.notify(EventImpl.java:308)	at io.quarkus.arc.impl.EventImpl.fire(EventImpl.java:76)	at io.quarkus.arc.runtime.ArcRecorder.fireLifecycleEvent(ArcRecorder.java:131)	at io.quarkus.arc.runtime.ArcRecorder.handleLifecycleEvents(ArcRecorder.java:100)	at io.quarkus.deployment.steps.LifecycleEventsBuildStep$startupEvent1144526294.deploy_0(Unknown Source)	at io.quarkus.deployment.steps.LifecycleEventsBuildStep$startupEvent1144526294.deploy(Unknown Source)	at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)	at io.quarkus.runtime.Application.start(Application.java:101)	at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:110)	at io.quarkus.runtime.Quarkus.run(Quarkus.java:70)	at org.keycloak.quarkus.runtime.KeycloakMain.start(KeycloakMain.java:103)	at org.keycloak.quarkus.runtime.cli.command.AbstractStartCommand.run(AbstractStartCommand.java:37)	at picocli.CommandLine.executeUserObject(CommandLine.java:1939)	at picocli.CommandLine.access$1300(CommandLine.java:145)	at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2358)	at picocli.CommandLine$RunLast.handle(CommandLine.java:2352)	at picocli.CommandLine$RunLast.handle(CommandLine.java:2314)	at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2179)	at picocli.CommandLine$RunLast.execute(CommandLine.java:2316)	at picocli.CommandLine.execute(CommandLine.java:2078)	at org.keycloak.quarkus.runtime.cli.Picocli.parseAndRun(Picocli.java:93)	at org.keycloak.quarkus.runtime.KeycloakMain.main(KeycloakMain.java:89)	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.base/java.lang.reflect.Method.invoke(Method.java:568)	at io.quarkus.bootstrap.runner.QuarkusEntryPoint.doRun(QuarkusEntryPoint.java:61)	at io.quarkus.bootstrap.runner.QuarkusEntryPoint.main(QuarkusEntryPoint.java:32)Caused by: liquibase.exception.DatabaseException: java.sql.SQLException: Deferred enlistment not supported	at liquibase.database.jvm.JdbcConnection.getDatabaseProductName(JdbcConnection.java:111)	at liquibase.database.core.H2Database.isCorrectDatabaseImplementation(H2Database.java:204)	at liquibase.database.DatabaseFactory.findCorrectDatabaseImplementation(DatabaseFactory.java:101)	at org.keycloak.quarkus.runtime.storage.legacy.liquibase.QuarkusLiquibaseConnectionProvider.getLiquibase(QuarkusLiquibaseConnectionProvider.java:124)	at org.keycloak.quarkus.runtime.storage.legacy.liquibase.QuarkusJpaUpdaterProvider.getLiquibaseForKeycloakUpdate(QuarkusJpaUpdaterProvider.java:306)	at org.keycloak.quarkus.runtime.storage.legacy.liquibase.QuarkusJpaUpdaterProvider.update(QuarkusJpaUpdaterProvider.java:103)	... 41 moreCaused by: java.sql.SQLException: Deferred enlistment not supported	at io.agroal.pool.ConnectionHandler.verifyEnlistment(ConnectionHandler.java:391)	at io.agroal.pool.wrapper.ConnectionWrapper.getMetaData(ConnectionWrapper.java:452)	at liquibase.database.jvm.JdbcConnection.getDatabaseProductName(JdbcConnection.java:109)	... 46 more```",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1052372632,2022-12-19T15:56:25Z,model/map/src/main/java/org/keycloak/models/map/common/locking/ConcurrentMapLocksUtils.java,"@@ -0,0 +1,100 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.common.locking;","I generalized the util class to be usable with other stores that implement `ConcurrentMap`. This may also be used with CHM, or file store.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1052392261,2022-12-19T16:15:44Z,model/legacy-private/src/main/java/org/keycloak/models/dblock/DBLockGlobalLockProvider.java,"@@ -47,14 +50,19 @@ private static DBLockProvider.Namespace stringToNamespace(String lockName) {     }      @Override-    public GlobalLock acquire(String lockName, Duration timeToWaitForLock) {+    public <V> V withLock(String lockName, Duration timeToWaitForLock, KeycloakSessionTaskWithResult<V> task) {         Objects.requireNonNull(lockName, ""lockName cannot be null"");          if (timeToWaitForLock != null) {             LOG.debug(""DBLockGlobalLockProvider does not support setting timeToWaitForLock per lock."");         }-        dbLockProvider.waitForLock(stringToNamespace(lockName));-        return () -> releaseLock(lockName);++        try {+            dbLockProvider.waitForLock(stringToNamespace(lockName));+            return task.run(session);+        } finally {+            releaseLock(lockName);+        }",> Any idea what can be causing it?  Looking at the message `Deferred enlistment not supported` it seems to me that the call was trying to use the original database connection from an outer transaction and not a new connection from the newly created transaction. > Can the same happen when we will have some db update for the new store?Probably yes - I hope it will be simpler to start new transactions with the new store when we don't need to call the old code.,x
1251974,miquelsi,https://api.github.com/repos/keycloak/keycloak/pulls/16097,1053195179,2022-12-20T11:07:22Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -365,7 +365,7 @@                                         <wait>                                             <!-- Do not use waiting for port since that is unreliable, sometimes port is listening before DB is ready to serve -->                                             <log>${docker.database.wait-for-log-regex}</log>-                                            <time>300000</time>+                                            <time>900000</time>",I had to increase the timeout because Oracle DB takes longer to start up.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1053233661,2022-12-20T11:53:39Z,model/map/src/main/java/org/keycloak/models/map/common/locking/ConcurrentMapLocksUtils.java,"@@ -0,0 +1,100 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.common.locking;++import org.keycloak.common.util.Time;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.net.InetAddress;+import java.net.UnknownHostException;+import java.time.Instant;+import java.util.concurrent.ConcurrentMap;+ import java.util.function.Supplier;++public class ConcurrentMapLocksUtils {++    public static final String SEPARATOR = "";"";+    private static final String INSTANCE_IDENTIFIER = getKeycloakInstanceIdentifier();++    /**+     * Repeatedly attempts to put an entry with the key {@code lockName}+     * to the {@code map}. Succeeds only if there is no entry with the same+     * key already.+     * <p />+     * Execution of this method is time bounded, if this method does not+     * succeed within {@code timeoutMilliseconds} it gives up and returns+     * false.+     * <p />+     * There is a pause after each unsuccessful attempt equal to+     * {@code repeatInterval} milliseconds+     *+     * @param map Map that will be used for putting the value+     * @param lockName Name of the entry+     * @param timeoutMilliseconds time boundaries in milliseconds+     * @param repeatInterval Number of milliseconds to wait after each+     *                       unsuccessful attempt+     *+     * @throws LockAcquiringTimeoutException the key {@code lockName} was NOT put into the {@code map}+     *         within time boundaries+     */+    public static void repeatPutIfAbsent(Supplier<ConcurrentMap<String, String>> map, String lockName, long timeoutMilliseconds, int repeatInterval) throws LockAcquiringTimeoutException {","I tried to generalize the locks util class to support all CHM implementations. The reason for the supplier is we need to always call `locksCache.withFlags(Flag.FORCE_RETURN_VALUE)` (we need to call it for each execution, so we can't just call it once when passing the cache to the `repeatPutIfAbsent` method) for HotRod to make `putIfAbsent` work the way we need.We can remove the supplier only if we move this util class back to the hotrod module and it won't be usable for other stores. Should I move it back?",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1053235824,2022-12-20T11:56:22Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/connections/DefaultHotRodConnectionProviderFactory.java,"@@ -111,32 +119,52 @@ public void lazyInit() {          remoteBuilder.addContextInitializer(CommonPrimitivesProtoSchemaInitializer.INSTANCE);         ENTITY_DESCRIPTOR_MAP.values().stream().map(HotRodEntityDescriptor::getProtoSchema).forEach(remoteBuilder::addContextInitializer);-        remoteCacheManager = new RemoteCacheManager(remoteBuilder.build()); -        Set<String> remoteCaches = ENTITY_DESCRIPTOR_MAP.values().stream()-                .map(HotRodEntityDescriptor::getCacheName).collect(Collectors.toSet());+        // Configure settings necessary for locking+        configureLocking(remoteBuilder); -        LOG.debugf(""Uploading proto schema to Infinispan server."");-        registerSchemata();+        remoteCacheManager = new RemoteCacheManager(remoteBuilder.build()); -        String reindexCaches = config.get(""reindexCaches"", null);-        RemoteCacheManagerAdmin administration = remoteCacheManager.administration();-        if (reindexCaches != null && reindexCaches.equals(""all"")) {-            LOG.infof(""Reindexing all caches. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."");-            remoteCaches.stream()-                    .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist-                    .forEach(administration::reindexCache);-        } else if (reindexCaches != null && !reindexCaches.isEmpty()){-            Arrays.stream(reindexCaches.split("",""))-                .map(String::trim)-                    .filter(e -> !e.isEmpty())-                    .filter(remoteCaches::contains)-                    .peek(cacheName -> LOG.infof(""Reindexing %s cache. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."", cacheName))-                    .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist-                    .forEach(administration::reindexCache);+        // Acquire initial phase lock to avoid concurrent schema update+        RemoteCache<String, String> locksCache = remoteCacheManager.getCache(HOT_ROD_LOCKS_CACHE_NAME);+        try {+            ConcurrentMapLocksUtils.repeatPutIfAbsent(() -> locksCache.withFlags(Flag.FORCE_RETURN_VALUE), HOT_ROD_INIT_LOCK_NAME, 900, 50);++            Set<String> remoteCaches = ENTITY_DESCRIPTOR_MAP.values().stream()+                    .map(HotRodEntityDescriptor::getCacheName).collect(Collectors.toSet());++            LOG.debugf(""Uploading proto schema to Infinispan server."");+            registerSchemata();++            String reindexCaches = config.get(""reindexCaches"", null);+            RemoteCacheManagerAdmin administration = remoteCacheManager.administration();+            if (reindexCaches != null && reindexCaches.equals(""all"")) {+                LOG.infof(""Reindexing all caches. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."");+                remoteCaches.stream()+                        .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist+                        .forEach(administration::reindexCache);+            } else if (reindexCaches != null && !reindexCaches.isEmpty()) {+                Arrays.stream(reindexCaches.split("",""))+                        .map(String::trim)+                        .filter(e -> !e.isEmpty())+                        .filter(remoteCaches::contains)+                        .peek(cacheName -> LOG.infof(""Reindexing %s cache. This can take a long time to complete. While the rebuild operation is in progress, queries might return fewer results."", cacheName))+                        .peek(remoteCacheManager::getCache) // access the caches to force their creation, otherwise reindexing fails if cache doesn't exist+                        .forEach(administration::reindexCache);+            }++            if (!ConcurrentMapLocksUtils.removeWithInstanceIdentifier(locksCache, HOT_ROD_INIT_LOCK_NAME)) {+                throw new RuntimeException(""Cannot release HotRod init lock"");+            }+            LOG.infof(""HotRod client configuration was successful."");",HotRod initialization is not successful if this line is skipped due to an exception. Why do you think this should be in `finally`?,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16096,1053244618,2022-12-20T12:07:28Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java,"@@ -550,7 +550,7 @@ protected <R> R inComittedTransaction(Function<KeycloakSession, R> what) {      protected <T, R> R inComittedTransaction(T parameter, BiFunction<KeycloakSession, T, R> what, BiConsumer<KeycloakSession, T> onCommit, BiConsumer<KeycloakSession, T> onRollback) {         AtomicReference<R> res = new AtomicReference<>();-        KeycloakModelUtils.runJobInTransaction(getFactory(), session -> {+        KeycloakModelUtils.runJobInRetriableTransaction(getFactory(), session -> {","Could you please make this behaviour configurable via a system property?This should not be applied across all transactions for all databases like it is done here.This can be done for likes of CRDB but has to be configurable, and by default use the `runJobInTransaction`.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15708,1053261513,2022-12-20T12:27:41Z,model/map/src/main/java/org/keycloak/models/map/common/locking/ConcurrentMapLocksUtils.java,"@@ -0,0 +1,100 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.common.locking;++import org.keycloak.common.util.Time;+import org.keycloak.models.locking.LockAcquiringTimeoutException;++import java.net.InetAddress;+import java.net.UnknownHostException;+import java.time.Instant;+import java.util.concurrent.ConcurrentMap;+ import java.util.function.Supplier;++public class ConcurrentMapLocksUtils {++    public static final String SEPARATOR = "";"";+    private static final String INSTANCE_IDENTIFIER = getKeycloakInstanceIdentifier();++    /**+     * Repeatedly attempts to put an entry with the key {@code lockName}+     * to the {@code map}. Succeeds only if there is no entry with the same+     * key already.+     * <p />+     * Execution of this method is time bounded, if this method does not+     * succeed within {@code timeoutMilliseconds} it gives up and returns+     * false.+     * <p />+     * There is a pause after each unsuccessful attempt equal to+     * {@code repeatInterval} milliseconds+     *+     * @param map Map that will be used for putting the value+     * @param lockName Name of the entry+     * @param timeoutMilliseconds time boundaries in milliseconds+     * @param repeatInterval Number of milliseconds to wait after each+     *                       unsuccessful attempt+     *+     * @throws LockAcquiringTimeoutException the key {@code lockName} was NOT put into the {@code map}+     *         within time boundaries+     */+    public static void repeatPutIfAbsent(Supplier<ConcurrentMap<String, String>> map, String lockName, long timeoutMilliseconds, int repeatInterval) throws LockAcquiringTimeoutException {",Discussed face-to-face and decided to move this class back to hotrod module.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/14087,1053410877,2022-12-20T14:58:00Z,server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java,"@@ -266,6 +269,80 @@ public static void runJobInTransaction(KeycloakSessionFactory factory, KeycloakS         }     } +    /**+     * Creates a new {@link KeycloakSession} and runs the specified callable in a new transaction. If the transaction fails+     * with a SQL retriable error, the method re-executes the specified callable until it either succeeds or the maximum number+     * of attempts is reached, leaving some increasing random delay milliseconds between the invocations. It uses the exponential+     * backoff + jitter algorithm to compute the delay. More details https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/+     *+     * @param factory a reference to the {@link KeycloakSessionFactory}.+     * @param callable a reference to the {@link KeycloakSessionTaskWithResult} that will be executed in a retriable way.+     * @param attemptsCount the maximum number of attempts to execute the callable.+     * @param retryIntervalMillis the base interval value in millis used to compute the delay.+     * @param <V> the type returned by the callable.+     * @return the value computed by the callable.+     */+    public static <V> V runJobInRetriableTransaction(final KeycloakSessionFactory factory, final KeycloakSessionTaskWithResult<V> callable,+                                                     final int attemptsCount, final int retryIntervalMillis) {+        int retryCount = 0;+        Random rand = new Random();+        V result;+        while (true) {+            KeycloakSession session = factory.create();+            KeycloakTransaction tx = session.getTransactionManager();+            try {+                tx.begin();+                result = callable.run(session);+                if (tx.isActive()) {+                    if (tx.getRollbackOnly()) {+                        tx.rollback();+                    } else {+                        tx.commit();+                    }+                }+                break;+            } catch (RuntimeException re) {+                if (tx.isActive()) {+                    tx.rollback();+                }+                if (isExceptionRetriable(re) && ++retryCount < attemptsCount) {+                    int delay = (int)(Math.pow(2, retryCount) * retryIntervalMillis) + rand.nextInt(retryIntervalMillis);","@sguilhen @hmlnarik @ahus1 Sorry to bring up this old conversation but I have seen we compute the delay differently in [Retry](https://github.com/keycloak/keycloak/blob/main/common/src/main/java/org/keycloak/common/util/Retry.java#L116) and here which should be based on the same algorithm. In `KeycloakModelUtils` we compute the delay for the current iteration and then add a random number from 0 to `retryIntervalMillis`. However, based on the [algorithm](https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/) we should generate a random number between 0 and `Math.min(retryIntervalMillis * attemptsCount, (1 << retryCount)`. Is this on purpose or should I report an issue for this? ",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/16082,1053495033,2022-12-20T16:11:01Z,crypto/fips1402/src/main/java/org/keycloak/crypto/fips/FIPS1402Provider.java,"@@ -262,4 +259,34 @@ private SNIHostName getSNIHostName(String host) {          };     }++    // BCFIPS require ""SecureRandom.getInstanceStrong"" to be available. But it may not be available on RHEL 8 on OpenJDK 17 due the https://bugzilla.redhat.com/show_bug.cgi?id=2155060+    private void checkSecureRandom(Runnable insertBcFipsProvider) {+        try {+            SecureRandom sr = SecureRandom.getInstanceStrong();+            log.debugf(""Strong secure random available. Algorithm: %s, Provider: %s"", sr.getAlgorithm(), sr.getProvider());+            insertBcFipsProvider.run();+        } catch (NoSuchAlgorithmException nsae) {++            // Fallback to regular SecureRandom+            SecureRandom secRandom = new SecureRandom();+            String origStrongAlgs = Security.getProperty(""securerandom.strongAlgorithms"");","There is also another possibility how the `NoSuchAlgorithmException` can be thrown from the `getInstanceStrong` - when property `securerandom.strongAlgorithms` is specified, but it's pointing to the algorithms, which are not available or disabled. That is the case here.This property is set by default in `java.security` on all the environments I saw so far. And it is typically set in OpenJDK by default to `NativePRNGBlocking:SUN,DRBG:SUN` (applies for both my Ubuntu as well as for RHEL with or without FIPS enabled, and for both OpenJDK11 and OpenJDK17). The problem is that none of the specified algorithms `NativePRNGBlocking:SUN,DRBG:SUN` is available on the OpenJDK 17 on the FIPS enabled RHEL. That's also clear fro m the exception message (For example see here how the exception looks like: https://bugzilla.redhat.com/show_bug.cgi?id=2155060)I think that it is a bug as `getInstanceStrong` should be available per javadoc of this method. The `SecureRandom.getInstanceStrong()` is used by BCFIPS and BCFIPS fails to bootstrap when this method is not available. Also I talked about this with the guy from BouncyCastle team and he confirmed that `getInstanceStrong` unavailable looks like a bug (and suggested to use exactly the workaround like this).You can check https://bugzilla.redhat.com/show_bug.cgi?id=2155060 for the details (I don't yet have response from the OpenJDK team here).",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/14087,1053594526,2022-12-20T17:55:52Z,server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java,"@@ -266,6 +269,80 @@ public static void runJobInTransaction(KeycloakSessionFactory factory, KeycloakS         }     } +    /**+     * Creates a new {@link KeycloakSession} and runs the specified callable in a new transaction. If the transaction fails+     * with a SQL retriable error, the method re-executes the specified callable until it either succeeds or the maximum number+     * of attempts is reached, leaving some increasing random delay milliseconds between the invocations. It uses the exponential+     * backoff + jitter algorithm to compute the delay. More details https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/+     *+     * @param factory a reference to the {@link KeycloakSessionFactory}.+     * @param callable a reference to the {@link KeycloakSessionTaskWithResult} that will be executed in a retriable way.+     * @param attemptsCount the maximum number of attempts to execute the callable.+     * @param retryIntervalMillis the base interval value in millis used to compute the delay.+     * @param <V> the type returned by the callable.+     * @return the value computed by the callable.+     */+    public static <V> V runJobInRetriableTransaction(final KeycloakSessionFactory factory, final KeycloakSessionTaskWithResult<V> callable,+                                                     final int attemptsCount, final int retryIntervalMillis) {+        int retryCount = 0;+        Random rand = new Random();+        V result;+        while (true) {+            KeycloakSession session = factory.create();+            KeycloakTransaction tx = session.getTransactionManager();+            try {+                tx.begin();+                result = callable.run(session);+                if (tx.isActive()) {+                    if (tx.getRollbackOnly()) {+                        tx.rollback();+                    } else {+                        tx.commit();+                    }+                }+                break;+            } catch (RuntimeException re) {+                if (tx.isActive()) {+                    tx.rollback();+                }+                if (isExceptionRetriable(re) && ++retryCount < attemptsCount) {+                    int delay = (int)(Math.pow(2, retryCount) * retryIntervalMillis) + rand.nextInt(retryIntervalMillis);",Agree with @hmlnarik that we need to have the same algorithm in all places. I would open an issue to revisit the backoff + jitter algorithm and make it consistent in the different classes.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054240663,2022-12-21T10:42:16Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java,"@@ -159,24 +159,20 @@ private void createAdminUser() {         }          KeycloakSessionFactory sessionFactory = KeycloakApplication.getSessionFactory();-        KeycloakSession session = sessionFactory.create();-        KeycloakTransactionManager transaction = session.getTransactionManager(); -        try {+        try (KeycloakSession session = sessionFactory.create()) {+            KeycloakTransactionManager transaction = session.getTransactionManager();             transaction.begin();--            new ApplianceBootstrap(session).createMasterRealmUser(adminUserName, adminPassword);-            ServicesLogger.LOGGER.addUserSuccess(adminUserName, Config.getAdminRealm());--            transaction.commit();-        } catch (IllegalStateException e) {-            session.getTransactionManager().rollback();-            ServicesLogger.LOGGER.addUserFailedUserExists(adminUserName, Config.getAdminRealm());-        } catch (Throwable t) {-            session.getTransactionManager().rollback();-            ServicesLogger.LOGGER.addUserFailed(t, adminUserName, Config.getAdminRealm());-        } finally {-            session.close();+            try {+                new ApplianceBootstrap(session).createMasterRealmUser(adminUserName, adminPassword);+                ServicesLogger.LOGGER.addUserSuccess(adminUserName, Config.getAdminRealm());+            } catch (IllegalStateException e) {+                session.getTransactionManager().setRollbackOnly();+                ServicesLogger.LOGGER.addUserFailedUserExists(adminUserName, Config.getAdminRealm());",Since the transaction is not closed until after this is executed I don't see how it will get the exception if the user already exists.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054245487,2022-12-21T10:45:50Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/transaction/TransactionalSessionHandler.java,"@@ -49,22 +49,20 @@ default KeycloakSession create() {      *      * @param session a transactional session      */-    default void close(KeycloakSession session) {-        if (DefaultKeycloakSession.class.cast(session).isClosed()) {-            return;-        }+    default void close() {+        RoutingContext context = ResteasyContext.getContextData(RoutingContext.class);","I don't like relying on the context-data to be cleared as a way to ""check if the session has been closed"". I think what @pedroigor is suggesting would be nicer, and having a `isClosed` method on the session makes sense to me.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054277667,2022-12-21T11:22:13Z,services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java,"@@ -452,28 +454,68 @@ public ClientPolicyManager clientPolicy() {         return clientPolicyManager;     } +    private static final Logger LOG = Logger.getLogger(DefaultKeycloakSession.class);+     @Override     public void close() {+        if (LOG.isDebugEnabled()) {+            LOG.debugf(""Closing %s%s%s"", this,+              getTransactionManager().isActive() ? "" (transaction active"" + (getTransactionManager().getRollbackOnly() ? "", ROLLBACK-ONLY"" : """") + "")"" : """",+              StackUtil.getShortStackTrace());+        }+         if (closed) {-            throw new IllegalStateException(""Illegal call to #close() on already closed KeycloakSession"");+            throw new IllegalStateException(""Illegal call to #close() on already closed "" + this);+        }++        RuntimeException re = closeTransactionManager();","First the transaction manager was closed, then session was closed, see https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/filters/AbstractRequestFilter.java#L58-L69",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054282031,2022-12-21T11:27:13Z,services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java,"@@ -452,28 +454,68 @@ public ClientPolicyManager clientPolicy() {         return clientPolicyManager;     } +    private static final Logger LOG = Logger.getLogger(DefaultKeycloakSession.class);+     @Override     public void close() {+        if (LOG.isDebugEnabled()) {+            LOG.debugf(""Closing %s%s%s"", this,+              getTransactionManager().isActive() ? "" (transaction active"" + (getTransactionManager().getRollbackOnly() ? "", ROLLBACK-ONLY"" : """") + "")"" : """",+              StackUtil.getShortStackTrace());+        }+         if (closed) {-            throw new IllegalStateException(""Illegal call to #close() on already closed KeycloakSession"");+            throw new IllegalStateException(""Illegal call to #close() on already closed "" + this);+        }++        RuntimeException re = closeTransactionManager();++        try {+            Consumer<? super Provider> safeClose = p -> {+                try {+                    p.close();+                } catch (Exception e) {+                    // Ignore exception+                }+            };+            providers.values().forEach(safeClose);+            closable.forEach(safeClose);+            for (Entry<InvalidableObjectType, Set<Object>> me : invalidationMap.entrySet()) {+                factory.invalidate(this, me.getKey(), me.getValue().toArray());+            }+        } finally {+            this.closed = true;+        }++        if (re != null) {+            throw re;+        }+    }++    protected RuntimeException closeTransactionManager() {+        if (! this.transactionManager.isActive()) {+            return null;         }-        Consumer<? super Provider> safeClose = p -> {-            try {-                p.close();-            } catch (Exception e) {-                // Ignore exception++        try {+            if (this.transactionManager.getRollbackOnly()) {+                this.transactionManager.rollback();+            } else {+                this.transactionManager.commit();+            }+        } catch (RuntimeException re) {+            if (this.transactionManager.isActive()) {+                this.transactionManager.rollback();","Upon rollback, TM will turn into inactive mode. Thus this line will not be reached. But you are right that this applies to commit too, so this condition is redundant and will be removed.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054285874,2022-12-21T11:32:11Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java,"@@ -258,6 +258,9 @@ private ProcessBuilder getProcessBuilder() {         }          addStorageOptions(storeProvider, commands);+        if (System.getProperty(""auth.server.quarkus.log-level"") != null) {+            commands.add(""--log-level="" + System.getProperty(""auth.server.quarkus.log-level""));+        }","To have this support available in integration auth-server-quarkus. Without this addition, it is not possible to pass in the logging parameter into the tested server.",x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054427620,2022-12-21T14:05:52Z,services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java,"@@ -346,37 +344,34 @@ public void importAddUser() {                  for (RealmRepresentation realmRep : realms) {                     for (UserRepresentation userRep : realmRep.getUsers()) {-                        KeycloakSession session = sessionFactory.create();--                        try {+                        try (KeycloakSession session = sessionFactory.create()) {                             session.getTransactionManager().begin();                             RealmModel realm = session.realms().getRealmByName(realmRep.getRealm());                              if (realm == null) {                                 ServicesLogger.LOGGER.addUserFailedRealmNotFound(userRep.getUsername(), realmRep.getRealm());                             } -                            UserProvider users = session.users();--                            if (users.getUserByUsername(realm, userRep.getUsername()) != null) {-                                ServicesLogger.LOGGER.notCreatingExistingUser(userRep.getUsername());-                            } else {-                                UserModel user = users.addUser(realm, userRep.getUsername());-                                user.setEnabled(userRep.isEnabled());-                                RepresentationToModel.createCredentials(userRep, session, realm, user, false);-                                RepresentationToModel.createRoleMappings(userRep, user, realm);-                                ServicesLogger.LOGGER.addUserSuccess(userRep.getUsername(), realmRep.getRealm());+                            try {+                                UserProvider users = session.users();++                                if (users.getUserByUsername(realm, userRep.getUsername()) != null) {+                                    ServicesLogger.LOGGER.notCreatingExistingUser(userRep.getUsername());+                                } else {+                                    UserModel user = users.addUser(realm, userRep.getUsername());+                                    user.setEnabled(userRep.isEnabled());+                                    RepresentationToModel.createCredentials(userRep, session, realm, user, false);+                                    RepresentationToModel.createRoleMappings(userRep, user, realm);+                                    ServicesLogger.LOGGER.addUserSuccess(userRep.getUsername(), realmRep.getRealm());+                                }+                            } catch (Exception e) {+                                session.getTransactionManager().setRollbackOnly();+                                throw e;                             }--                            session.getTransactionManager().commit();                         } catch (ModelDuplicateException e) {-                            session.getTransactionManager().rollback();                             ServicesLogger.LOGGER.addUserFailedUserExists(userRep.getUsername(), realmRep.getRealm());",Relying on KeycloakModelUtils (which is beyond messy and an anti pattern IMO) is not great here. I'd honestly rather then have some method on the session factory or something that does this.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054468379,2022-12-21T14:44:46Z,server-spi-private/src/main/java/org/keycloak/services/scheduled/ScheduledTaskRunner.java,"@@ -46,32 +46,23 @@ public ScheduledTaskRunner(KeycloakSessionFactory sessionFactory, ScheduledTask      @Override     public void run() {-        KeycloakSession session = sessionFactory.create();-        try {+        try (KeycloakSession session = sessionFactory.create()) {+            session.getTransactionManager().begin();             if (transactionLimit != 0) {                 KeycloakModelUtils.setTransactionLimit(sessionFactory, transactionLimit);             }             runTask(session);         } catch (Throwable t) {             logger.errorf(t, ""Failed to run scheduled task %s"", task.getClass().getSimpleName());--            session.getTransactionManager().rollback();","You are right, rollback is applied only when an exception occurs in `tx.commit`. I'll update the code to account for the exception outside commit.FTR: If there is an exception during commit, the transaction is rolled back: in the `DefaultKeycloakSession.closeTransactionManager`, commit is attempted. This is propagated to `DefaultKeycloakTransactionManager.commit` which may throw an exception, in which case the whole transaction is rolled back in the following part of `DefaultKeycloakTransactionManager`:https://github.com/keycloak/keycloak/blob/f17f41e1bba374d3a2276271f6f7342947ec2b52/services/src/main/java/org/keycloak/services/DefaultKeycloakTransactionManager.java#L130-L133",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054476117,2022-12-21T14:51:51Z,services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java,"@@ -346,37 +344,34 @@ public void importAddUser() {                  for (RealmRepresentation realmRep : realms) {                     for (UserRepresentation userRep : realmRep.getUsers()) {-                        KeycloakSession session = sessionFactory.create();--                        try {+                        try (KeycloakSession session = sessionFactory.create()) {                             session.getTransactionManager().begin();                             RealmModel realm = session.realms().getRealmByName(realmRep.getRealm());                              if (realm == null) {                                 ServicesLogger.LOGGER.addUserFailedRealmNotFound(userRep.getUsername(), realmRep.getRealm());                             } -                            UserProvider users = session.users();--                            if (users.getUserByUsername(realm, userRep.getUsername()) != null) {-                                ServicesLogger.LOGGER.notCreatingExistingUser(userRep.getUsername());-                            } else {-                                UserModel user = users.addUser(realm, userRep.getUsername());-                                user.setEnabled(userRep.isEnabled());-                                RepresentationToModel.createCredentials(userRep, session, realm, user, false);-                                RepresentationToModel.createRoleMappings(userRep, user, realm);-                                ServicesLogger.LOGGER.addUserSuccess(userRep.getUsername(), realmRep.getRealm());+                            try {+                                UserProvider users = session.users();++                                if (users.getUserByUsername(realm, userRep.getUsername()) != null) {+                                    ServicesLogger.LOGGER.notCreatingExistingUser(userRep.getUsername());+                                } else {+                                    UserModel user = users.addUser(realm, userRep.getUsername());+                                    user.setEnabled(userRep.isEnabled());+                                    RepresentationToModel.createCredentials(userRep, session, realm, user, false);+                                    RepresentationToModel.createRoleMappings(userRep, user, realm);+                                    ServicesLogger.LOGGER.addUserSuccess(userRep.getUsername(), realmRep.getRealm());+                                }+                            } catch (Exception e) {+                                session.getTransactionManager().setRollbackOnly();+                                throw e;                             }--                            session.getTransactionManager().commit();                         } catch (ModelDuplicateException e) {-                            session.getTransactionManager().rollback();                             ServicesLogger.LOGGER.addUserFailedUserExists(userRep.getUsername(), realmRep.getRealm());","I agree, this would be better. I'd prefer a separate PR for introducing such a method in the session factory though, since it is an independent change and by checking the number of calls of `KeycloakModelUtils.runJobInTransaction`, it would affect many places that are unrelated to closing session as proposed in this PR.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1054486536,2022-12-21T15:01:08Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/transaction/TransactionalSessionHandler.java,"@@ -49,22 +49,20 @@ default KeycloakSession create() {      *      * @param session a transactional session      */-    default void close(KeycloakSession session) {-        if (DefaultKeycloakSession.class.cast(session).isClosed()) {-            return;-        }+    default void close() {+        RoutingContext context = ResteasyContext.getContextData(RoutingContext.class);","The session is created by the filter/interceptor/handler chain and should be closed in there.Thus it is the handler chain which owns the session, an it maintains its state in the context data.The session itself is not aware of when it should be closed.Hence it seems to me that it should be the handler chain which should hold the state of the session, and to precisely define when it should be closed, and call `close` accordingly.Relying on the active/closed state in the session to determine whether it should be closed object seems like violation of the encapsulation to me.If this should be changed to a `isClosed` method regardless, I can do that. Let me know your thoughts.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/12746,1054704161,2022-12-21T18:32:47Z,adapters/oidc/js/src/keycloak.js,"@@ -1299,13 +1299,20 @@ function Keycloak (config) {      function check3pCookiesSupported() {         var promise = createPromise();+       +        // If init() has been called once+        if(loginIframe.iframe3p){+            promise.setSuccess();","It would be better to throw an exception if `init()` is called more than once. It should only be called only once.Also, let's use a separate boolean property such as `initCalled` to keep track of this rather than hijacking `iframe3p`.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/15583,1060052004,2023-01-02T14:04:10Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/actions/AbstractRequiredActionUpdateEmailTest.java,"@@ -72,9 +73,16 @@ public void beforeTest() { 				.requiredAction(UserModel.RequiredAction.UPDATE_EMAIL.name()).build(); 		prepareUser(user); 		ApiUtil.createUserAndResetPasswordWithAdminClient(testRealm(), user, ""password"");+		setRegistrationEmailAsUsername(testRealm(), false);",Nitpick: Is it possible to move this to the end of new test method instead? See similar comment for `AbstractAppInitiatedActionUpdateEmailTest`.,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/15724,1060192119,2023-01-02T21:24:15Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/user/JpaUserModelCriteriaBuilder.java,"@@ -167,6 +167,7 @@ public JpaUserModelCriteriaBuilder compare(SearchableModelField<? super UserMode                         Join<JpaUserEntity, JpaUserAttributeEntity> join = root.join(""attributes"", JoinType.LEFT);                         return cb.and(                                 cb.equal(join.get(""name""), value[0]),+                                cb.equal(join.get(""value_hash""), sha256((String) value[1])),","+1there is now `cb.equal(join.get(""value_hash""), cb.function(""sha256"", Object.class, cb.literal(((String)value[1]).getBytes())))` used instead",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/15724,1060192515,2023-01-02T21:26:22Z,model/map-jpa/src/main/resources/META-INF/users/jpa-users-changelog-2.xml,"@@ -39,4 +39,36 @@ limitations under the License.         <addUniqueConstraint tableName=""kc_user"" columnNames=""realmid, emailconstraint""/>     </changeSet> +    <changeSet author=""keycloak"" id=""users-15699-drop-index"">+        <preConditions onSqlOutput=""TEST"" onFail=""MARK_RAN"">+            <changeSetExecuted author=""keycloak"" id=""users-1"" changeLogFile=""META-INF/users/jpa-users-changelog-1.xml"" />+        </preConditions>+        <dropIndex tableName=""kc_user_attribute"" indexName=""user_attr_name_value"" />+    </changeSet>++    <changeSet author=""keycloak"" id=""users-15699-drop-constraint"" dbms=""postgresql"">+        <preConditions onSqlOutput=""TEST"" onFail=""MARK_RAN"">+            <changeSetExecuted author=""keycloak"" id=""users-2"" changeLogFile=""META-INF/users/jpa-users-resource-changelog-1.xml"" />+        </preConditions>+        <dropUniqueConstraint tableName=""kc_user_attribute"" constraintName=""kc_user_attribute_fk_root_name_value_key"" />+    </changeSet>++    <changeSet author=""keycloak"" id=""users-15699-add-hash-column-index"">+        <ext:addGeneratedColumn tableName=""kc_user_attribute"">+            <ext:column name=""value_hash"" type=""kc_hash"" function=""kc_hash_function""/>","Thank you. I've explored the two suggestions deriving the column name from `kc_hash` type seems to me like not valid option, afaict the type does't have any information about the column it's using. Different xml tag would require yet another liquibase extension, we wouldn't be able to use the current one an it seems to me it'd bring unnecessary complexity. I've added a column identification into a `function` section. It is now in format of `function=""kc_hash_function(value)""`. Please let me know what think.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16225,1060633915,2023-01-03T14:23:57Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java,"@@ -705,7 +729,7 @@ public Stream<UserConsentModel> getConsentsStream(RealmModel realm, String userI         if (cached == null) {             Long loaded = cache.getCurrentRevision(cacheKey);             List<UserConsentModel> consents = getDelegate().getConsentsStream(realm, userId).collect(Collectors.toList());-            cached = new CachedUserConsents(loaded, cacheKey, realm, consents);+            cached = new CachedUserConsents(loaded, cacheKey, realm, consents.stream().map(CachedUserConsent::new).collect(Collectors.toList()));","I believe that this `getConsentsStream` cannot rely on cached value anymore since that is filled gradually, and thus should always defer to delegate.This should not represent a performance issue since there are not many places where all consents are listed.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16225,1060634018,2023-01-03T14:24:01Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java,"@@ -681,13 +683,35 @@ public UserConsentModel getConsentByClient(RealmModel realm, String userId, Stri         CachedUserConsents cached = cache.get(cacheKey, CachedUserConsents.class);          if (cached == null) {+            UserConsentModel consent = getDelegate().getConsentByClient(realm, userId, clientId);+            List<CachedUserConsent> consents;++            if (consent == null) {+                consents = Collections.singletonList(new CachedUserConsent(clientId));",Should this be a `Collections.emptyList` instead? (same below)Empty list means that no consents exist for a particular client,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/16225,1060720678,2023-01-03T15:56:25Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java,"@@ -705,7 +729,7 @@ public Stream<UserConsentModel> getConsentsStream(RealmModel realm, String userI         if (cached == null) {             Long loaded = cache.getCurrentRevision(cacheKey);             List<UserConsentModel> consents = getDelegate().getConsentsStream(realm, userId).collect(Collectors.toList());-            cached = new CachedUserConsents(loaded, cacheKey, realm, consents);+            cached = new CachedUserConsents(loaded, cacheKey, realm, consents.stream().map(CachedUserConsent::new).collect(Collectors.toList()));","@hmlnarik Instead of returning the delegate I'm keeping the cache for all user consent. For that, the cached entry is invalidated if it was previously partially cached (e.g.: calling getConsentByClient).The behavior should be:* If all user consents are cached, the cache is hot, and both `getConsentsStream` and `getConsentByClient` operate on the cached data.* If user consent is cached via `getConsentByClient`, whenever you try to fetch all user consents the cached entry is invalidated and replaced with all user consents.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16121,1062263631,2023-01-05T09:22:41Z,testsuite/integration-arquillian/pom.xml,"@@ -565,7 +565,7 @@                 <keycloak.connectionsJpa.database>keycloak</keycloak.connectionsJpa.database>                 <keycloak.connectionsJpa.user>sa</keycloak.connectionsJpa.user>                 <keycloak.connectionsJpa.password>vEry5tron9Pwd</keycloak.connectionsJpa.password>-                <keycloak.connectionsJpa.url>jdbc:sqlserver://${auth.server.db.host}:${docker.database.port};databaseName=${keycloak.connectionsJpa.database}</keycloak.connectionsJpa.url>+                <keycloak.connectionsJpa.url>jdbc:sqlserver://${auth.server.db.host}:${docker.database.port};databaseName=${keycloak.connectionsJpa.database};integratedSecurity=false;encrypt=false;trustServerCertificate=true;</keycloak.connectionsJpa.url>",```suggestion                <keycloak.connectionsJpa.url>jdbc:sqlserver://${auth.server.db.host}:${docker.database.port};databaseName=${keycloak.connectionsJpa.database};integratedSecurity=false;encrypt=false;trustServerCertificate=true;sendStringParametersAsUnicode=false;</keycloak.connectionsJpa.url>```,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/15243,1062277534,2023-01-05T09:37:48Z,server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java,"@@ -263,27 +262,17 @@ public static void runJobInTransaction(KeycloakSessionFactory factory, KeycloakS      * Wrap a given callable job into a KeycloakTransaction.      */     public static <V> V runJobInTransactionWithResult(KeycloakSessionFactory factory, final KeycloakSessionTaskWithResult<V> callable) {-        KeycloakSession session = factory.create();-        KeycloakTransaction tx = session.getTransactionManager();         V result;-        try {-            tx.begin();-            result = callable.run(session);--            if (tx.isActive()) {-                if (tx.getRollbackOnly()) {-                    tx.rollback();-                } else {-                    tx.commit();-                }-            }-        } catch (RuntimeException re) {-            if (tx.isActive()) {-                tx.rollback();+        try (KeycloakSession session = factory.create()) {+            session.getTransactionManager().begin();+            try {+                result = callable.run(session);+            } catch (Throwable t) {+                session.getTransactionManager().setRollbackOnly();+                throw t;             }-            throw re;-        } finally {-            session.close();+        } catch (RuntimeException e) {+            throw e;",Catching/re-throwing the same exception isn't needed is it? So this catch block can be removed?,
4104715,jfdenise,https://api.github.com/repos/keycloak/keycloak/pulls/15964,1062665332,2023-01-05T16:30:39Z,distribution/galleon-feature-packs/saml-adapter-galleon-pack/wildfly-feature-pack-build.xml,"@@ -0,0 +1,47 @@+<!--+  ~ Copyright 2022 Red Hat, Inc.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~   http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<build xmlns=""urn:wildfly:feature-pack-build:3.1"" producer=""org.keycloak:keycloak-saml-adapter-galleon-pack"">+    <transitive>+        <dependency group-id=""org.wildfly"" artifact-id=""wildfly-ee-galleon-pack"">+            <name>org.wildfly:wildfly-ee-galleon-pack</name>+            <packages inherit=""false"">+                <exclude name=""product.conf""/>+            </packages>+            <default-configs inherit=""false""/>+        </dependency>+    </transitive>+    <dependencies>+        <dependency group-id=""org.wildfly"" artifact-id=""wildfly-galleon-pack"">","@fjuma , do you have a need for a dependency on wildfly-galleon-pack? Could it depend only on wildfly-ee-galleon-pack?",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/16282,1063353615,2023-01-06T11:19:48Z,model/legacy-services/src/main/java/org/keycloak/exportimport/AbstractFileBasedImportProvider.java,"@@ -0,0 +1,50 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.exportimport;++import static org.keycloak.common.util.StringPropertyReplacer.replaceProperties;++import java.io.ByteArrayInputStream;+import java.io.File;+import java.io.FileInputStream;+import java.io.IOException;+import java.io.InputStream;+import java.nio.file.Files;+import java.util.Optional;+import org.keycloak.common.util.StringPropertyReplacer;++public abstract class AbstractFileBasedImportProvider implements ImportProvider {++    private static final StringPropertyReplacer.PropertyResolver ENV_VAR_PROPERTY_RESOLVER = new StringPropertyReplacer.PropertyResolver() {+        @Override+        public String resolve(String property) {+            return Optional.ofNullable(System.getenv(property)).orElse(null);","When the parameter `property` is null, the `System.getenv` will throw NPE, as the Optional is not able to catch that and handle it. I'd suggest this: ```suggestion            return Optional.ofNullable(property)                        .map(System::getenv)                        .orElse(null);```It'd be also better to return an empty string if the property is null, but AFAIK, the StringPropertyReplacer class is more based on null-checks instead of ""emptiness"" checks for strings. Thus, keep the null here.",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/16282,1063403330,2023-01-06T12:36:49Z,model/legacy-services/src/main/java/org/keycloak/exportimport/AbstractFileBasedImportProvider.java,"@@ -0,0 +1,50 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.exportimport;++import static org.keycloak.common.util.StringPropertyReplacer.replaceProperties;++import java.io.ByteArrayInputStream;+import java.io.File;+import java.io.FileInputStream;+import java.io.IOException;+import java.io.InputStream;+import java.nio.file.Files;+import java.util.Optional;+import org.keycloak.common.util.StringPropertyReplacer;++public abstract class AbstractFileBasedImportProvider implements ImportProvider {++    private static final StringPropertyReplacer.PropertyResolver ENV_VAR_PROPERTY_RESOLVER = new StringPropertyReplacer.PropertyResolver() {+        @Override+        public String resolve(String property) {+            return Optional.ofNullable(System.getenv(property)).orElse(null);+        }+    };++    protected InputStream parseFile(File importFile) throws IOException {+        if (ExportImportConfig.isReplacePlaceholders()) {+            String raw = new String(Files.readAllBytes(importFile.toPath()), ""UTF-8"");+            String parsed = replaceProperties(raw, ENV_VAR_PROPERTY_RESOLVER);+            return new ByteArrayInputStream(parsed.getBytes());","In this case, we assume the `importFile` and then `parsed` var is not null. If there's a case when it's NULL, we should ""implicitly"" throw an NPE and fail-fast with the import. Is it correct?It's probably better than doing null-checks and returning an empty stream or whatever, right?However, it'd be probably better to throw some custom exception that the file doesn't exist. All over the code, only the IOException is handled, but not NPE. WDYT?",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/16282,1063430919,2023-01-06T13:22:53Z,services/src/main/java/org/keycloak/exportimport/ExportImportManager.java,"@@ -95,6 +108,57 @@ public void runImport() {         }     } +    public void runImportAtStartup(String dir, Strategy strategy) throws IOException {+        ExportImportConfig.setReplacePlaceholders(true);+        ExportImportConfig.setAction(""import"");++        Stream<ProviderFactory> factories = sessionFactory.getProviderFactoriesStream(ImportProvider.class);++        for (ProviderFactory factory : factories.collect(Collectors.toList())) {+            String providerId = factory.getId();++            if (""dir"".equals(providerId)) {+                ExportImportConfig.setDir(dir);+                ImportProvider importProvider = session.getProvider(ImportProvider.class, providerId);+                importProvider.importModel(sessionFactory, strategy);+            } else if (""singleFile"".equals(providerId)) {","Yeah, we are running all available import providers. Right now we have two: `dir` and `singleFile`.We need to run both in order to be able to keep the same experience when exporting using a single file or to a directory. Note, however, that even though we iterate over both we filter out the files that should be imported by the `singleFile` provider in order to avoid processing files twice. That means:* Files using `-realm.json` prefix and containing `-users-` (e.g.: when exporting users in a separate file) are processed only by the `dir` provider.* Any other file is processed by the `singleFile` providerI would like to refactor the import providers a bit to make them less dependent on system properties and remove some code from here like those calling methods on `ExportImportConfig`, but I wanted to focus on the core issue.If we want, we could also allow people to add their own import providers and change how import is done at startup time. But I don't have a good use case for it now.",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/16282,1063436629,2023-01-06T13:31:10Z,services/src/main/java/org/keycloak/exportimport/ExportImportManager.java,"@@ -95,6 +108,57 @@ public void runImport() {         }     } +    public void runImportAtStartup(String dir, Strategy strategy) throws IOException {+        ExportImportConfig.setReplacePlaceholders(true);+        ExportImportConfig.setAction(""import"");++        Stream<ProviderFactory> factories = sessionFactory.getProviderFactoriesStream(ImportProvider.class);++        for (ProviderFactory factory : factories.collect(Collectors.toList())) {+            String providerId = factory.getId();++            if (""dir"".equals(providerId)) {+                ExportImportConfig.setDir(dir);+                ImportProvider importProvider = session.getProvider(ImportProvider.class, providerId);+                importProvider.importModel(sessionFactory, strategy);+            } else if (""singleFile"".equals(providerId)) {","Thanks for the comment! It's more clear to me now.> I would like to refactor the import providers a bit to make them less dependent on system properties and remove some code from here like those calling methods on ExportImportConfig, but I wanted to focus on the core issue.Yep, it'd be great. The ExportImportConfig class is not very good :)) > If we want, we could also allow people to add their own import providers and change how import is done at startup time. But I don't have a good use case for it now.IMHO, it could be a good improvement to allow add their import providers. And wouldn't be so time-consuming to implement it. Maybe it could also slightly polish the code.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16318,1064552395,2023-01-09T11:45:59Z,model/map/src/main/java/org/keycloak/models/map/common/EntityField.java,"@@ -48,12 +51,22 @@      * @param e Entity      * @param value Value to be added to the collection      * @throws ClassCastException If this field is not a collection.+     * @throws UnsupportedOperationException If this collection type is not yet known.      */     default <T> void collectionAdd(E e, T value) {         @SuppressWarnings(""unchecked"")         Collection<T> c = (Collection<T>) get(e);         if (c != null) {             c.add(value);+        } else {+            if (getFieldClass().equals(List.class)) {+                c = Collections.singletonList(value);+            } else if (getFieldClass().equals(Set.class)) {+                c = Collections.singleton(value);+            } else {+                throw new UnsupportedOperationException(""Unsupported collection type.""); // in case we add e.g. java.util.Queue in future+            }",this can be simplified to ```javac = getFieldClass().equals(List.class) ? Collections.singletonList(value) : Collections.singleton(value);```in case we know we'll stick with `Set` and `List` only.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16312,1065714044,2023-01-10T12:15:12Z,.mvn/maven-build-cache-config.xml,"@@ -0,0 +1,65 @@+<?xml version=""1.0"" encoding=""UTF-8"" ?>+<!--+  ~ Copyright 2022 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<cache xmlns=""http://maven.apache.org/BUILD-CACHE-CONFIG/1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+       xsi:schemaLocation=""http://maven.apache.org/BUILD-CACHE-CONFIG/1.0.0 https://maven.apache.org/xsd/build-cache-config-1.0.0.xsd"">+    <configuration>+        <enabled>true</enabled>+        <hashAlgorithm>XX</hashAlgorithm>+    </configuration>+    <input>+        <global>+            <!-- matching all files, as there is no good file pattern to match files in META-INF/services by their file name -->+            <glob>{*}</glob>+        </global>+    </input>+    <executionControl>+        <runAlways>+            <plugins>+                <plugin artifactId=""maven-failsafe-plugin""/>+            </plugins>+            <executions>+                <execution artifactId=""maven-dependency-plugin"">+                    <execIds>+                        <execId>unpack-autoupdate</execId>+                    </execIds>+                </execution>+            </executions>+            <goalsLists>+                <goalsList artifactId=""maven-install-plugin"">+                    <goals>+                        <goal>install</goal>+                    </goals>+                </goalsList>+            </goalsLists>+        </runAlways>+        <reconcile>+            <plugins>+                <plugin artifactId=""maven-surefire-plugin"" goal=""test"">+                    <reconciles>+                        <!-- might reconsider later: if not putting them here, it might be simpler to run local tests incrementally -->+                        <reconcile propertyName=""skip"" skipValue=""true""/>+                        <reconcile propertyName=""skipExec"" skipValue=""true""/>+                        <reconcile propertyName=""skipTests"" skipValue=""true""/>+                        <reconcile propertyName=""testFailureIgnore"" skipValue=""true""/>+                    </reconciles>+                </plugin>","The cache checksum includes all properties passed to a plugin. This leads to a different checksum ID and cache artifact when running the build with and without tests. If you want to re-used the cached artifact independent of some properties you set, than you need to specify them - like I did here.",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/16262,1067006744,2023-01-11T13:42:30Z,adapters/spi/undertow-adapter-spi/src/main/java/org/keycloak/adapters/undertow/UndertowHttpFacade.java,"@@ -196,18 +196,7 @@ public InputStream getInputStream(boolean buffered) {                  inputStream = new BufferedInputStream(exchange.getInputStream());                 -                context.setServletRequest(new HttpServletRequestWrapper((HttpServletRequest) servletRequest) {-                    @Override-                    public ServletInputStream getInputStream() {-                        inputStream.mark(0);-                        return new ServletInputStream() {-                            @Override-                            public int read() throws IOException {-                                return inputStream.read();-                            }-                        };-                    }-                });+                context.setServletRequest(UndertowHttpServletRequest.setupServletInputStream(servletRequest, inputStream));","@pedroigor Thanks!The static method in the class `UndertowHttpServletRequest` is only a wrapper of the old behavior, so IMHO, the logic behind it didn't change. Or did it?The purpose of this change is to be able to override the class in the testsuite for Undertow Jakarta EE as it requires some other props for the servlet request.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16410,1071125495,2023-01-16T11:18:21Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapKeycloakTransaction.java,"@@ -171,13 +175,29 @@ public Stream<E> read(QueryParameters<M> queryParameters) {         }         if (predicateFunc != null) query.where(predicateFunc.apply(cb, query::subquery, root)); +        // Add aliases for each root to avoid generating IDs with random object IDs in Hibernate 6.+        // Those random object IDs would prevent creating a stable HQL string which is the key for caching.+        // Use a HashMap to create increasing suffix numbers for each entity type.+        Map<String, Integer> aliases = new HashMap<>();+        for (Root<?> queryRoot : query.getRoots()) {+            if (queryRoot.getAlias() == null) {+                String name = queryRoot.getModel().getName();+                Integer count = aliases.get(name);+                if (count == null) {+                    count = 0;+                }+                queryRoot.alias(name + count);+                count ++;+                aliases.put(name, count);+            }+        }","@vramik - I'm not aware of a secondary root being used at the moment. The closes I found was in JpaRoleModelCriteriaBuilder the subquery that's being created. I tried to trigger this code by calling a delete on  a role, but this this failed earlier as the ""->"" JSON functions weren't working (that's possibly another issue that we're about to soon for the H6 upgrade).So to summarize: At the moment it is used only for one root, and I am not sure what it would do on the subquery. If the code would not set an alias for whatever reason, it would lead to a query that can't be cached, which might turn up in a performance test eventually.  This whole caching code is currently used to cache the realm when working via the admin UI (and REST endpoints). It is also used to cache a client if a recall correctly during refresh of a token. I verified that those caching works as expected.It still has its justification IMHO, at the same time we might skip it if we see it adds to much complexity. ",x
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/16156,1071278951,2023-01-16T14:00:30Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuth2DeviceAuthorizationGrantTest.java,"@@ -75,6 +75,7 @@ public class OAuth2DeviceAuthorizationGrantTest extends AbstractKeycloakTest {     public static final String DEVICE_APP = ""test-device"";     public static final String DEVICE_APP_PUBLIC = ""test-device-public"";     public static final String DEVICE_APP_PUBLIC_CUSTOM_CONSENT = ""test-device-public-custom-consent"";+    private static final String shortDeficeFlowUrl = ""https://keycloak.org/device"";",Why make public a variable that is only used in this class?,x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/16156,1071476092,2023-01-16T17:45:24Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OAuth2DeviceAuthorizationGrantTest.java,"@@ -75,6 +75,7 @@ public class OAuth2DeviceAuthorizationGrantTest extends AbstractKeycloakTest {     public static final String DEVICE_APP = ""test-device"";     public static final String DEVICE_APP_PUBLIC = ""test-device-public"";     public static final String DEVICE_APP_PUBLIC_CUSTOM_CONSENT = ""test-device-public-custom-consent"";+    private static final String shortDeficeFlowUrl = ""https://keycloak.org/device"";","Yes, you're right. I was just wondering about making it consistent with other constants.So when you're on this, could you leave it private, but possibly also make other variables in this class private (DEVICE_APP and others) as they are also used just in this test?Will be good to fix typo (defice) and use the notation for constants like SHORT_DEVICE_FLOW_URL.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1072011637,2023-01-17T10:07:43Z,services/src/main/java/org/keycloak/protocol/saml/SamlProtocolUtils.java,"@@ -132,22 +132,6 @@ public static PublicKey getEncryptionKey(ClientModel client) throws Verification         return getPublicKey(client, SamlConfigAttributes.SAML_ENCRYPTION_CERTIFICATE_ATTRIBUTE);     } -    /**-     * Returns private key used to decrypt SAML assertions encrypted by 3rd party SAML IDP","Minor: Probably some java ""imports"" can be removed from this class once this method is removed?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1072015275,2023-01-17T10:11:02Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/admin/ApiUtil.java,"@@ -270,22 +276,49 @@ public static AuthorizationResource findAuthorizationSettings(RealmResource real     }      public static KeysMetadataRepresentation.KeyMetadataRepresentation findActiveSigningKey(RealmResource realm) {-        KeysMetadataRepresentation keyMetadata = realm.keys().getKeyMetadata();-        for (KeysMetadataRepresentation.KeyMetadataRepresentation rep : keyMetadata.getKeys()) {-            if (rep.getPublicKey() != null && KeyStatus.valueOf(rep.getStatus()).isActive() && KeyUse.SIG.equals(rep.getUse())) {-                return rep;-            }-        }-        return null;+        return findRealmKeys(realm, rep -> rep.getPublicKey() != null && KeyStatus.valueOf(rep.getStatus()).isActive() && KeyUse.SIG.equals(rep.getUse()))+                .findFirst()+                .orElse(null);     }      public static KeysMetadataRepresentation.KeyMetadataRepresentation findActiveSigningKey(RealmResource realm, String alg) {-        KeysMetadataRepresentation keyMetadata = realm.keys().getKeyMetadata();-        for (KeysMetadataRepresentation.KeyMetadataRepresentation rep : keyMetadata.getKeys()) {-            if (rep.getPublicKey() != null && KeyStatus.valueOf(rep.getStatus()).isActive() && KeyUse.SIG.equals(rep.getUse()) && alg.equals(rep.getAlgorithm())) {-                return rep;-            }-        }-        return null;+        return findRealmKeys(realm, rep -> rep.getPublicKey() != null && KeyStatus.valueOf(rep.getStatus()).isActive() && KeyUse.SIG.equals(rep.getUse()) && alg.equals(rep.getAlgorithm()))+                .findFirst()+                .orElse(null);+    }++    public static KeysMetadataRepresentation.KeyMetadataRepresentation findActiveEncryptingKey(RealmResource realm) {","It seems there is exactly same method already present in the testsuite class `org.keycloak.testsuite.util.KeyUtils`. Same applies for method `findActiveSigningKey`. How about to remove one or the other and make the utilities to be present just on the single place?My vote would be to remove all the ""keys"" related stuff from ApiUtil and keep in KeyUtils.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16491,1072075586,2023-01-17T11:10:22Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/group/entity/JpaGroupEntity.java,"@@ -62,7 +61,8 @@ public class JpaGroupEntity extends AbstractGroupEntity implements JpaRootVersio     @Column     private int version; -    @Type(value = UserTypeLegacyBridge.class, parameters = @Parameter(name = UserTypeLegacyBridge.TYPE_NAME_PARAM_KEY, value = ""jsonb""))+//    @Type(value = UserTypeLegacyBridge.class, parameters = @Parameter(name = UserTypeLegacyBridge.TYPE_NAME_PARAM_KEY, value = ""jsonb""))+    @Type(value = JsonbType.class)",Here's a commented out line that could be removed. The annotation can be written shorter without the `value=` as `@Type(JsonbType.class)` as the value is the default parameter.,x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16316,1072250602,2023-01-17T14:06:03Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java,"@@ -805,6 +805,9 @@ public void loginAfterExpiredTimeout() throws Exception {              events.expectLogin().user(userId).assertEvent();         }+        finally {+            setTimeOffset(0);",This should not be necessary. It should be done automatically here: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java#L233,
314690,thomasdarimont,https://api.github.com/repos/keycloak/keycloak/pulls/16497,1072269525,2023-01-17T14:20:41Z,server-spi-private/pom.xml,"@@ -80,6 +80,17 @@             <artifactId>hamcrest</artifactId>             <scope>test</scope>         </dependency>+        <dependency>+            <groupId>org.jboss.spec.javax.servlet</groupId>+            <artifactId>jboss-servlet-api_4.0_spec</artifactId>+            <scope>provided</scope>+        </dependency>+        <dependency>+            <groupId>io.netty</groupId>+            <artifactId>netty-handler</artifactId>+            <version>4.1.74.Final</version>",Keycloak seems to already contain a netty-handler version. It is provided via the `quarkus-vertx` managed dependency.```~/dev/playground/keycloak/keycloak-20.0.3 $ ll lib/lib/main | grep netty-handler-rw-r--r-- 1 tom tom  526K 12. Jan 17:12 io.netty.netty-handler-4.1.82.Final.jar-rw-r--r-- 1 tom tom   24K 12. Jan 17:12 io.netty.netty-handler-proxy-4.1.82.Final.jar```I suggest to replace the explict netty dependency with the managed `quarkus-vertx` dependency.,
314690,thomasdarimont,https://api.github.com/repos/keycloak/keycloak/pulls/16497,1072278826,2023-01-17T14:28:23Z,server-spi-private/src/main/java/org/keycloak/requestfilter/IpAccessFilterProvider.java,"@@ -0,0 +1,8 @@+package org.keycloak.requestfilter;++public class IpAccessFilterProvider implements RequestFilterProvider {",Do you need this empty class or can you just return `null` in `IpAccessFilterProviderFactory#create()`?Alternatively you could create a singleton instance of this provider in `IpAccessFilterProviderFactory`  and return that in `IpAccessFilterProviderFactory#create()`.,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16410,1072381697,2023-01-17T15:49:52Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapKeycloakTransaction.java,"@@ -348,28 +345,19 @@ private Predicate notExpired(final CriteriaBuilder cb, final JpaSubqueryProvider      private static class QueryCacheKey {         private final String queryString;-        private final Integer queryMaxResults;-        private final Integer queryFirstResult;-        private final HashMap<String, Object> queryParameters;+        private final Integer queryLimit;+        private final Integer queryOffset;         private final Class<?> modelType;+        private final List<? extends QueryParameters.OrderBy<?>> queryOrderBy; -        public QueryCacheKey(TypedQuery<?> emQuery, Class<?> modelType) {+        public QueryCacheKey(QueryParameters<?> query, Class<?> modelType) {             // copy over all fields from the query that relevant for caching-            QueryImplementor<?> query = emQuery.unwrap(QueryImplementor.class);-            this.queryString = query.getQueryString();-            this.queryParameters = new HashMap<>();-            for (Parameter<?> parameter : query.getParameters()) {-                // HACK TO GET KC TO START WITH NEW STORE - HAS TO BE FIXED AS SOME SEARCHES USE A DIFFERENT EXPRESSIBLE IMPL-                JpaCriteriaParameter criteriaParameter = (JpaCriteriaParameter) parameter;-                SqmBasicValuedSimplePath expressible = (SqmBasicValuedSimplePath) criteriaParameter.getExpressible();-                String parameterName  = expressible.getNavigablePath().getLocalName();-                if (parameterName == null) {-                    throw new ModelException(""Can't prepare query for caching as parameter doesn't have a name"");-                }-                this.queryParameters.put(parameterName, ((JpaCriteriaParameter<?>) parameter).getValue());-            }-            this.queryMaxResults = emQuery.getMaxResults();-            this.queryFirstResult = emQuery.getFirstResult();+            DefaultModelCriteria dmc = query.getModelCriteriaBuilder()","Nit^2: The Query parameters always return a `DefaultModelCriteria<M>` - so there is no need to cast no clone anyway. So I'll use it as is (no check, no clone)",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16498,1073704045,2023-01-18T15:38:57Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/hibernate/contributor/JpaMapFunctionContributor.java,"@@ -0,0 +1,67 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.hibernate.contributor;++import org.hibernate.boot.model.FunctionContributions;+import org.hibernate.boot.model.FunctionContributor;+import org.hibernate.dialect.CockroachDialect;+import org.hibernate.dialect.Dialect;+import org.hibernate.dialect.PostgreSQLDialect;+import org.hibernate.type.BasicType;+import org.hibernate.type.BasicTypeReference;+import org.hibernate.type.SqlTypes;+import org.hibernate.type.StandardBasicTypes;+import org.keycloak.models.map.storage.jpa.hibernate.jsonb.JsonbType;++/**+ * A {@link FunctionContributor} to register custom functions.+ */+public class JpaMapFunctionContributor implements FunctionContributor {+    @Override+    public void contributeFunctions(FunctionContributions fc) {++        fc.getFunctionRegistry().registerPattern(""->>"", ""?1->>?2"", getBasicType(fc, StandardBasicTypes.STRING));+        fc.getFunctionRegistry().registerPattern(""->"", ""?1->?2"", getJsonbBasicType(fc));+        fc.getFunctionRegistry().registerPattern(""@>"", ""?1@>?2::jsonb"", getBasicType(fc, StandardBasicTypes.BOOLEAN));++        contributeDbSpecificFunctions(fc);+    }++    private BasicType getJsonbBasicType(FunctionContributions fc) {+        return fc.getTypeConfiguration().getBasicTypeRegistry().resolve(JsonbType.class, SqlTypes.JSON);+    }++    private BasicType getBasicType(FunctionContributions fc, BasicTypeReference<?> btr) {+        return fc.getTypeConfiguration().getBasicTypeRegistry().resolve(btr);+    }++    // Since Hibernate 6.2.0 dialect should be accessible via FunctionContributions.getDialect(): https://github.com/hibernate/hibernate-orm/pull/5964/+    private Dialect getDialect(FunctionContributions fc) {+        return fc.getTypeConfiguration().getMetadataBuildingContext().getMetadataCollector().getDatabase().getDialect();+    }++    private void contributeDbSpecificFunctions(FunctionContributions fc) {+        Dialect dialect = getDialect(fc);+        if (dialect instanceof PostgreSQLDialect) {+            fc.getFunctionRegistry().registerPattern(""kc_hash"", ""sha256(?1::bytea)"", getBasicType(fc, StandardBasicTypes.BINARY));+        } else if (dialect instanceof CockroachDialect) {+            fc.getFunctionRegistry().registerPattern(""kc_hash"", ""sha256(?1)"", getBasicType(fc, StandardBasicTypes.STRING));+        } else {+            throw new UnsupportedOperationException(""not supported"");","This should log a warning that a dialect is not recognized instead. If an exception is thrown, it will not be possible to extend this functionality for other databases using extensions which would register their `FunctionContributor` implementations.",x
250942,mocleiri,https://api.github.com/repos/keycloak/keycloak/pulls/14893,1080578296,2023-01-18T21:32:58Z,services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java,"@@ -407,10 +411,13 @@ public Integer getUsersCount(@QueryParam(""search"") String search,             if (enabled != null) {                 parameters.put(UserModel.ENABLED, enabled.toString());             }+            parameters.putAll(searchAttributes);+            Stream<UserModel> users = session.users().searchForUserStream(realm, parameters, -1, -1);","@gilvansfilho thanks for this patch it solves a problem for us which is to paginate based on searching by users attributes and search fields at the same time.I tried to see if I could put the code back to use session.users().getUsersCount(realm, params) but the problem is that there are multiple implementations of UserQueryProvider.I think the best way is to look at how the UsersResource.getUsers call was enhanced to allow both the q parameter and other parameters to be used at the same time.[5b0986e490090433658e9a1e607c0e248f4cc756](https://github.com/keycloak/keycloak/commit/5b0986e490090433658e9a1e607c0e248f4cc756)You can see that the JpaUserProvider and MapUserProvider where enhanced so that they process the q search parameter.So the problem within using the existing methods is that both of these providers need to be enhanced in a similar way to process the q search parameter for the getUsersCount(realm, params) method.",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1080996644,2023-01-19T09:21:50Z,services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java,"@@ -363,23 +365,46 @@ public Response export(UriInfo uriInfo, RealmModel realm, String format) {             String nameIDPolicyFormat = getConfig().getNameIDPolicyFormat();  -            List<Element> signingKeys = streamForExport(session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256), false)+            List<KeyDescriptorType> signingKeys = session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)+                    .filter(key -> key.getCertificate() != null)","I see what you mean now. Enabled and active are not the same thing.We do not filter enabled for signing keys because method `Stream<KeyWrapper> getKeysStream(RealmModel realm, KeyUse use, String algorithm)` [does](https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/keys/DefaultKeyManager.java#L144) this already, while method `Stream<KeyWrapper> getKeysStream(RealmModel realm)` [does not](https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/keys/DefaultKeyManager.java#L149). This is something that could be fixed, however, it would require going through all usages and making it consistent which I think should not be part of this PR as it is already quite big.On the other hand, exporting only active keys could also make sense, but I am not sure what problems it can cause as at the moment we export both active and passive. @mposolda @stianst Should we export also passive keys as part of SP metadata or there should be only active ones?",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081035612,2023-01-19T09:57:25Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/StorageTransactionTest.java,"@@ -0,0 +1,185 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction;++import org.junit.Test;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RealmProvider;+import org.keycloak.models.map.storage.MapStorageProvider;+import org.keycloak.models.map.storage.MapStorageSpi;+import org.keycloak.models.map.storage.jpa.JpaMapStorageProviderFactory;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;+import org.keycloak.testsuite.model.transaction.util.TransactionController;+import org.keycloak.utils.LockObjectsForModification;++import static org.hamcrest.CoreMatchers.equalTo;+import static org.hamcrest.MatcherAssert.assertThat;+import static org.junit.Assume.assumeTrue;++@RequireProvider(RealmProvider.class)+public class StorageTransactionTest extends KeycloakModelTest {++    private String realmId;++    @Override+    protected void createEnvironment(KeycloakSession s) {+        RealmModel r = s.realms().createRealm(""1"");+        r.setDefaultRole(s.roles().addRealmRole(r, Constants.DEFAULT_ROLES_ROLE_PREFIX + ""-"" + r.getName()));+        r.setAttribute(""k1"", ""v1"");+        realmId = r.getId();+    }++    @Override+    protected void cleanEnvironment(KeycloakSession s) {+        s.realms().removeRealm(realmId);+    }++    @Override+    protected boolean isUseSameKeycloakSessionFactoryForAllThreads() {+        return true;+    }++    @Test+    public void testTwoTransactionsSequentially() {+        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());++        tx1.begin();+        assertThat(+            tx1.runStep(session -> {+                session.realms().getRealm(realmId).setAttribute(""k2"", ""v1"");+                return session.realms().getRealm(realmId).getAttribute(""k2"");+            }), equalTo(""v1""));+        tx1.commit();++        tx2.begin();+        assertThat(+                tx2.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k2"")),+                equalTo(""v1""));+        tx2.commit();+    }++    @Test+    public void testRepeatableRead() {+        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());+        TransactionController tx3 = new TransactionController(getFactory());++        tx1.begin();+        tx2.begin();+        tx3.begin();++        // Read original value in tx1+        assertThat(+                tx1.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v1""));++        // change value to new in tx2+        tx2.runStep(session -> {+            session.realms().getRealm(realmId).setAttribute(""k1"", ""v2"");+            return null;+        });+        tx2.commit();++        // tx1 should still return the value that already read+        assertThat(+                tx1.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v1""));++        // tx3 should return the new value+        assertThat(+                tx3.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v2""));+        tx1.commit();+        tx3.commit();++    }++    @Test+    // LockObjectForModification is currently used only in map-jpa+    @RequireProvider(value = MapStorageProvider.class, only = JpaMapStorageProviderFactory.PROVIDER_ID)+    public void testLockObjectForModification() {+        CONFIG.spi(MapStorageSpi.NAME)+                .provider(JpaMapStorageProviderFactory.PROVIDER_ID)+                .config(""lockTimeout"", ""1000"");++        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());+        TransactionController tx3 = new TransactionController(getFactory());++        tx1.begin();+        tx2.begin();++        // tx1 acquires lock+        tx1.runStep(session -> LockObjectsForModification.lockRealmsForModification(session, () -> session.realms().getRealm(realmId)));+        try {+            // tx2 should fail as tx1 is holding the lock+            tx2.runStep(session -> LockObjectsForModification.lockRealmsForModification(session, () -> session.realms().getRealm(realmId)));+            throw new AssertionError(""Should not succeed as tx1 locked the realm"");+        } catch (RuntimeException ex) {+            // correct+        }","Testing for exception can be better handled with AssertJ, which is already in use in the operator. So I suggest we add it as a test dependency to the model tests. The new code then looks like the following:```         // tx2 should fail as tx1 is holding the lock        Throwable thrown = Assertions.catchThrowable(() -> {            tx2.runStep(session -> LockObjectsForModification.lockRealmsForModification(session, () -> session.realms().getRealm(realmId)));        });        Assertions.assertThat(thrown).withFailMessage(""expecting a pessimistic lock exception"")                .isInstanceOf(ModelException.class)                .hasCauseInstanceOf(PessimisticLockException.class);``` Dependency in pom.xml```        <dependency>            <groupId>org.assertj</groupId>            <artifactId>assertj-core</artifactId>            <version>${assertj-core.version}</version>            <scope>test</scope>        </dependency>``` ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081039053,2023-01-19T10:00:12Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -278,7 +280,19 @@ public MapStorageProvider create(KeycloakSession session) {     }      protected EntityManager getEntityManager() {-        return emf.createEntityManager();+        EntityManager em = emf.createEntityManager();++        if (""postgresql"".equals(databaseShortName) || ""cockroachdb"".equals(databaseShortName)) {","Instead of asking Liquibase, there is existing code in other places (for example for the DB specific named queries), where we ask the DB connection about the product name. So there would be no need to use the information from Liquibase, and to expose it in the API/store it in attributes. See JpaMapUtils:```            String dbProductName = em.unwrap(Session.class).doReturningWork(connection -> connection.getMetaData().getDatabaseProductName());            String dbKind = getDatabaseType(dbProductName);``` I suggest to use only one way to determine the type of the database. ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081052707,2023-01-19T10:12:16Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/util/TransactionController.java,"@@ -0,0 +1,101 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction.util;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.KeycloakTransactionManager;++import java.util.Objects;+import java.util.concurrent.CountDownLatch;+import java.util.concurrent.Executor;+import java.util.concurrent.Executors;+import java.util.concurrent.atomic.AtomicReference;+import java.util.function.Function;++public class TransactionController {","I had a look at this new class and don't understand why it creates an Executor and runs everything in its own thread - the Keycloak session is not bound to a thread. The tests seems to complete with this simpler version as well:```public class TransactionController {    private final KeycloakSession session;    public TransactionController(KeycloakSessionFactory sessionFactory) {        session = sessionFactory.create();    }    public void begin() {        getTransactionManager().begin();    }    public void commit() {        getTransactionManager().commit();    }    public void rollback() {        getTransactionManager().rollback();    }    public <R> R runStep(Function<KeycloakSession, R> task) {        return task.apply(session);    }    private KeycloakTransactionManager getTransactionManager() {        return session.getTransactionManager();    }}``` ",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081053770,2023-01-19T10:13:21Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/StorageTransactionTest.java,"@@ -0,0 +1,185 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction;++import org.junit.Test;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RealmProvider;+import org.keycloak.models.map.storage.MapStorageProvider;+import org.keycloak.models.map.storage.MapStorageSpi;+import org.keycloak.models.map.storage.jpa.JpaMapStorageProviderFactory;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;+import org.keycloak.testsuite.model.transaction.util.TransactionController;+import org.keycloak.utils.LockObjectsForModification;++import static org.hamcrest.CoreMatchers.equalTo;+import static org.hamcrest.MatcherAssert.assertThat;+import static org.junit.Assume.assumeTrue;++@RequireProvider(RealmProvider.class)+public class StorageTransactionTest extends KeycloakModelTest {++    private String realmId;++    @Override+    protected void createEnvironment(KeycloakSession s) {+        RealmModel r = s.realms().createRealm(""1"");+        r.setDefaultRole(s.roles().addRealmRole(r, Constants.DEFAULT_ROLES_ROLE_PREFIX + ""-"" + r.getName()));+        r.setAttribute(""k1"", ""v1"");+        realmId = r.getId();+    }++    @Override+    protected void cleanEnvironment(KeycloakSession s) {+        s.realms().removeRealm(realmId);+    }++    @Override+    protected boolean isUseSameKeycloakSessionFactoryForAllThreads() {+        return true;+    }++    @Test+    public void testTwoTransactionsSequentially() {+        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());++        tx1.begin();+        assertThat(+            tx1.runStep(session -> {+                session.realms().getRealm(realmId).setAttribute(""k2"", ""v1"");+                return session.realms().getRealm(realmId).getAttribute(""k2"");+            }), equalTo(""v1""));+        tx1.commit();++        tx2.begin();+        assertThat(+                tx2.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k2"")),+                equalTo(""v1""));+        tx2.commit();+    }++    @Test+    public void testRepeatableRead() {+        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());+        TransactionController tx3 = new TransactionController(getFactory());++        tx1.begin();+        tx2.begin();+        tx3.begin();++        // Read original value in tx1+        assertThat(+                tx1.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v1""));++        // change value to new in tx2+        tx2.runStep(session -> {+            session.realms().getRealm(realmId).setAttribute(""k1"", ""v2"");+            return null;+        });+        tx2.commit();++        // tx1 should still return the value that already read+        assertThat(+                tx1.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v1""));++        // tx3 should return the new value+        assertThat(+                tx3.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v2""));+        tx1.commit();+        tx3.commit();++    }++    @Test+    // LockObjectForModification is currently used only in map-jpa+    @RequireProvider(value = MapStorageProvider.class, only = JpaMapStorageProviderFactory.PROVIDER_ID)+    public void testLockObjectForModification() {+        CONFIG.spi(MapStorageSpi.NAME)+                .provider(JpaMapStorageProviderFactory.PROVIDER_ID)+                .config(""lockTimeout"", ""1000"");++        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());+        TransactionController tx3 = new TransactionController(getFactory());++        tx1.begin();+        tx2.begin();++        // tx1 acquires lock+        tx1.runStep(session -> LockObjectsForModification.lockRealmsForModification(session, () -> session.realms().getRealm(realmId)));+        try {+            // tx2 should fail as tx1 is holding the lock+            tx2.runStep(session -> LockObjectsForModification.lockRealmsForModification(session, () -> session.realms().getRealm(realmId)));+            throw new AssertionError(""Should not succeed as tx1 locked the realm"");+        } catch (RuntimeException ex) {+            // correct+        }+        // end both transactions+        tx2.rollback();+        tx1.commit();++        // start new transaction and read again, it should be successful+        tx3.begin();+        tx3.runStep(session -> LockObjectsForModification.lockRealmsForModification(session, () -> session.realms().getRealm(realmId)));+        tx3.commit();+    }++    @Test+    public void testOptimisticLockingException() {+        // This test doesn't work with hotrod, map-ldap and map-chm+        String realmMapStorageProvider = CONFIG.getConfig().get(""realm.map.storage.provider"");+        assumeTrue(""Optimistic locking works only with the legacy store and map-jpa"",+                realmMapStorageProvider == null || ""jpa"".equals(realmMapStorageProvider));",The tests fail for the profile `map` which has the ConcurrentHashMap. I assume this condition needs a refinement.,x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081079683,2023-01-19T10:36:25Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/util/TransactionController.java,"@@ -0,0 +1,101 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction.util;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.KeycloakTransactionManager;++import java.util.Objects;+import java.util.concurrent.CountDownLatch;+import java.util.concurrent.Executor;+import java.util.concurrent.Executors;+import java.util.concurrent.atomic.AtomicReference;+import java.util.function.Function;++public class TransactionController {","Using different threads for each transaction should resemble a real scenario where each request is processed in a different thread.Also, not sure about JPA but I believe this is necessary for HotRod as it refuses to start more transactions from the same thread.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1081089703,2023-01-19T10:45:33Z,services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java,"@@ -363,23 +365,46 @@ public Response export(UriInfo uriInfo, RealmModel realm, String format) {             String nameIDPolicyFormat = getConfig().getNameIDPolicyFormat();  -            List<Element> signingKeys = streamForExport(session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256), false)+            List<KeyDescriptorType> signingKeys = session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)+                    .filter(key -> key.getCertificate() != null)","@mhajas @cgeorgilakis Good question. I think it is correct that export for ""sig"" returns also passive keys, but for ""enc"" it returns just active keys.Few more details:it works in a way that Keycloak always has 1 active key per algorithm. So for example in OIDC, there can be this scenario related to key rotation:1) Keycloak signs token with active key `abc` and send to javascript client ""foo""2) Keycloak administrator rotates keys and sets the new key `def` for algorithm `RS256` as new active. The key `abc` is still kept as ""passive"" key3) At some point (EG. after 10 seconds), javascript client sends the token from step1 to REST service to access some data4) The REST service wants to verify token, which was signed in step 1 by key `abc`. It want to download realm keys to be able to verify signature. The key `abc` needs to be still present even if it is not ""active"" as the token was signed with that beforeI guess that for SAML IDP, this is likely not so important as Keycloak signs just SAMLRequest sent to the SAML IDP, (or SAMLResponse for some rare cases like logout) AFAIK? Still if we return only ""active"" keys, I can imagine something like this:1) Keycloak sends SAMLRequest to IDP signed by key `abc`2) In the meantime, key is rotated in Keycloak and active key is NOT `abc`3) SAML IDP wants to verify signature and hence it downloads the keys from SP metadata endpoint. It won't see key key with `abc` and hence it won't be able to verify signature on SAMLRequest and hence it will throw an error -> KO.So it is likely more proper approach to return also ""passive"" keys for signing, so the key `abc` is returned from SP metadata and SAML IDP is able to verify signature.Regarding encryption/decryption, we should likely return only ""active"" keys as this is what SAML IDP needs to use for ""encrypt"" SAML assertion. But during verification, we should use also ""passive"" keys due the rotation. For example scenario like:1) Key `abc` is exported in SP metadata2) Based on that, SAML Identity provider will encrypt the assertion with key `abc`3) In the meantime, keys are rotated in Keycloak and `abc` becomes ""passive"" key4) Keycloak won't be able to decrypt the assertion with key `abc` because it is not active -> KOCould the last scenario happen? It seems to me that not as SAMLDecryptionKeysLocator introduced in this PR considers also ""passive"" keys for SAML assertion decryption, which is correct.So we should be good with the changes in this PR.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081117159,2023-01-19T11:09:10Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -278,7 +280,19 @@ public MapStorageProvider create(KeycloakSession session) {     }      protected EntityManager getEntityManager() {-        return emf.createEntityManager();+        EntityManager em = emf.createEntityManager();++        if (""postgresql"".equals(databaseShortName) || ""cockroachdb"".equals(databaseShortName)) {","Last time I checked getting the name of the database from the JDBC driver was a local operation not involving the database (at least for the PostgreSQL and Oracle driver). So it might even return ""PostgreSQL"" for the CockroachDB.I just noticed it, please proceed as you see fit.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/15985,1081128203,2023-01-19T11:21:25Z,services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java,"@@ -363,23 +365,46 @@ public Response export(UriInfo uriInfo, RealmModel realm, String format) {             String nameIDPolicyFormat = getConfig().getNameIDPolicyFormat();  -            List<Element> signingKeys = streamForExport(session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256), false)+            List<KeyDescriptorType> signingKeys = session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)+                    .filter(key -> key.getCertificate() != null)",Thanks for the detailed response @mposolda. Based on your response I believe we should change this PR as currently we include also passive encryption keys in SP metadata and I agree with you that it makes sense to include only active ones. I will update the PR.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081140558,2023-01-19T11:35:11Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/util/TransactionController.java,"@@ -0,0 +1,101 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction.util;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.KeycloakTransactionManager;++import java.util.Objects;+import java.util.concurrent.CountDownLatch;+import java.util.concurrent.Executor;+import java.util.concurrent.Executors;+import java.util.concurrent.atomic.AtomicReference;+import java.util.function.Function;++public class TransactionController {",I will test your suggestion with ISPN and update the class accordingly.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081253764,2023-01-19T13:23:54Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -278,7 +280,19 @@ public MapStorageProvider create(KeycloakSession session) {     }      protected EntityManager getEntityManager() {-        return emf.createEntityManager();+        EntityManager em = emf.createEntityManager();++        if (""postgresql"".equals(databaseShortName) || ""cockroachdb"".equals(databaseShortName)) {","Liquibase distinguishes CRDB from PgSQL. Putting a breakpoint here https://github.com/keycloak/keycloak/blob/8d05895adb06d8b44f9447e057e26e265cb1efda/model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/liquibase/connection/DefaultLiquibaseConnectionProvider.java#L74and calling `database.getShortName()` results in `""cockroachdb""` in case of CRDB and `""postgresql""` in case of PgSQL.Thus we can rely on Liquibase, and should not rely on JDBC metadata for the very arguments as posted by @ahus1.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081290337,2023-01-19T13:52:53Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -278,7 +280,19 @@ public MapStorageProvider create(KeycloakSession session) {     }      protected EntityManager getEntityManager() {-        return emf.createEntityManager();+        EntityManager em = emf.createEntityManager();++        if (""postgresql"".equals(databaseShortName) || ""cockroachdb"".equals(databaseShortName)) {",Should we create an issue to replace the code @ahus1 posted in JpaMapUtils with using databaseShortName? Or should I do it as part of this PR?,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1081476112,2023-01-19T15:55:49Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/util/TransactionController.java,"@@ -0,0 +1,101 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction.util;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.KeycloakTransactionManager;++import java.util.Objects;+import java.util.concurrent.CountDownLatch;+import java.util.concurrent.Executor;+import java.util.concurrent.Executors;+import java.util.concurrent.atomic.AtomicReference;+import java.util.function.Function;++public class TransactionController {","So I tested it with the HotRod transaction and it works as you suggested. I was probably doing something differently when ISPN refused to create more transactions for one thread.On the other hand, I quite like the idea of the steps running in different threads as I think it is closer to a real scenario. What is your opinion on this? ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1082208006,2023-01-20T08:08:36Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/util/TransactionController.java,"@@ -0,0 +1,101 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction.util;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.models.KeycloakTransactionManager;++import java.util.Objects;+import java.util.concurrent.CountDownLatch;+import java.util.concurrent.Executor;+import java.util.concurrent.Executors;+import java.util.concurrent.atomic.AtomicReference;+import java.util.function.Function;++public class TransactionController {","I'd like to start as simple as possible ([YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)), and add the complexity when there is the need for it. In this case, I'd vote for removing the thread pool. ",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/16549,1085178949,2023-01-24T11:45:54Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -324,6 +326,15 @@ public String getProvider() {             .hidden()             .build(); +    public static final Option<String> STORAGE_JPA_DB = new OptionBuilder<>(""storage-jpa-db"", String.class)+            .category(OptionCategory.STORAGE)+            .defaultValue(Database.Vendor.POSTGRES.toString())+            .expectedValues(Database::getAvailableMapStoreAliases)+            .description(""The database vendor for jpa map storage."")+//            .hidden() // todo ??","The decision to mark it as a `hidden` option depends on how you expect users to switch databases. If you are not sure about making it fully supported, marking it as `hidden` makes sense.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16316,1086448855,2023-01-25T10:18:52Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java,"@@ -637,4 +639,25 @@ protected static RealmModel createRealm(KeycloakSession s, String name) {         return realm;     } +    /**+     * Moves time on the Keycloak server as well as on the remote Infinispan server if the Infinispan is used.+     * The caller of the method is responsible to reset time offset (by calling setTimeOffset(0)) after a test run.",The time should be reset automatically [after](https://github.com/keycloak/keycloak/blob/29888dbf1ac6ce6d541b3633a45dc9a8f7ba34ed/testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java#L537) and [before](https://github.com/keycloak/keycloak/blob/main/testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java#L530) each method.,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1086581095,2023-01-25T12:31:07Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/util/ExpectedException.java,"@@ -0,0 +1,55 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.util;++import org.hamcrest.Matcher;++import static org.hamcrest.CoreMatchers.allOf;+import static org.hamcrest.CoreMatchers.notNullValue;+import static org.hamcrest.MatcherAssert.assertThat;++public class ExpectedException {","`ExpectedException` is a well-known JUnit class and could be confused (when not strictly looking at imports) with this class. Could this have a different name, e.g. `KeycloakAssertions`?",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1086596597,2023-01-25T12:47:43Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/StorageTransactionTest.java,"@@ -0,0 +1,203 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction;++import org.junit.Test;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ModelException;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RealmProvider;+import org.keycloak.models.map.storage.MapStorageProvider;+import org.keycloak.models.map.storage.MapStorageSpi;+import org.keycloak.models.map.storage.jpa.JpaMapStorageProviderFactory;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;+import org.keycloak.testsuite.model.util.TransactionController;+import org.keycloak.utils.LockObjectsForModification;++import javax.persistence.OptimisticLockException;+import javax.persistence.PessimisticLockException;++import static org.hamcrest.CoreMatchers.allOf;+import static org.hamcrest.CoreMatchers.equalTo;+import static org.hamcrest.CoreMatchers.instanceOf;+import static org.hamcrest.MatcherAssert.assertThat;+import static org.junit.internal.matchers.ThrowableCauseMatcher.hasCause;+import static org.keycloak.testsuite.model.util.ExpectedException.expectException;++@RequireProvider(RealmProvider.class)+public class StorageTransactionTest extends KeycloakModelTest {++    private String realmId;++    @Override+    protected void createEnvironment(KeycloakSession s) {+        RealmModel oldRealm = s.realms().getRealmByName(""1"");+        if (oldRealm != null) {+            s.realms().removeRealm(oldRealm.getId());+        }++        RealmModel r = s.realms().createRealm(""1"");+        r.setDefaultRole(s.roles().addRealmRole(r, Constants.DEFAULT_ROLES_ROLE_PREFIX + ""-"" + r.getName()));+        r.setAttribute(""k1"", ""v1"");+        realmId = r.getId();+    }++    @Override+    protected void cleanEnvironment(KeycloakSession s) {+        s.realms().removeRealm(realmId);+    }++    @Override+    protected boolean isUseSameKeycloakSessionFactoryForAllThreads() {+        return true;+    }++    @Test+    public void testTwoTransactionsSequentially() throws Exception {+        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());++        tx1.begin();+        assertThat(+                tx1.runStep(session -> {+                    session.realms().getRealm(realmId).setAttribute(""k2"", ""v1"");+                    return session.realms().getRealm(realmId).getAttribute(""k2"");+                }), equalTo(""v1""));+        tx1.commit();++        tx2.begin();+        assertThat(+                tx2.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k2"")),+                equalTo(""v1""));+        tx2.commit();++    }++    @Test+    public void testRepeatableRead() {+        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());+        TransactionController tx3 = new TransactionController(getFactory());++        tx1.begin();+        tx2.begin();+        tx3.begin();++        // Read original value in tx1+        assertThat(+                tx1.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v1""));++        // change value to new in tx2+        tx2.runStep(session -> {+            session.realms().getRealm(realmId).setAttribute(""k1"", ""v2"");+            return null;+        });+        tx2.commit();++        // tx1 should still return the value that already read+        assertThat(+                tx1.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v1""));++        // tx3 should return the new value+        assertThat(+                tx3.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v2""));+        tx1.commit();+        tx3.commit();+    }++    @Test+    // LockObjectForModification is currently used only in map-jpa+    @RequireProvider(value = MapStorageProvider.class, only = JpaMapStorageProviderFactory.PROVIDER_ID)+    public void testLockObjectForModification() {+        try {+            CONFIG.spi(MapStorageSpi.NAME)",This can / should be a no-op since `CONFIG` is generally parsed only upon factory initialization which could happen long before this test.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16524,1086644844,2023-01-25T13:32:18Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/transaction/StorageTransactionTest.java,"@@ -0,0 +1,203 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.testsuite.model.transaction;++import org.junit.Test;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ModelException;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RealmProvider;+import org.keycloak.models.map.storage.MapStorageProvider;+import org.keycloak.models.map.storage.MapStorageSpi;+import org.keycloak.models.map.storage.jpa.JpaMapStorageProviderFactory;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;+import org.keycloak.testsuite.model.util.TransactionController;+import org.keycloak.utils.LockObjectsForModification;++import javax.persistence.OptimisticLockException;+import javax.persistence.PessimisticLockException;++import static org.hamcrest.CoreMatchers.allOf;+import static org.hamcrest.CoreMatchers.equalTo;+import static org.hamcrest.CoreMatchers.instanceOf;+import static org.hamcrest.MatcherAssert.assertThat;+import static org.junit.internal.matchers.ThrowableCauseMatcher.hasCause;+import static org.keycloak.testsuite.model.util.ExpectedException.expectException;++@RequireProvider(RealmProvider.class)+public class StorageTransactionTest extends KeycloakModelTest {++    private String realmId;++    @Override+    protected void createEnvironment(KeycloakSession s) {+        RealmModel oldRealm = s.realms().getRealmByName(""1"");+        if (oldRealm != null) {+            s.realms().removeRealm(oldRealm.getId());+        }++        RealmModel r = s.realms().createRealm(""1"");+        r.setDefaultRole(s.roles().addRealmRole(r, Constants.DEFAULT_ROLES_ROLE_PREFIX + ""-"" + r.getName()));+        r.setAttribute(""k1"", ""v1"");+        realmId = r.getId();+    }++    @Override+    protected void cleanEnvironment(KeycloakSession s) {+        s.realms().removeRealm(realmId);+    }++    @Override+    protected boolean isUseSameKeycloakSessionFactoryForAllThreads() {+        return true;+    }++    @Test+    public void testTwoTransactionsSequentially() throws Exception {+        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());++        tx1.begin();+        assertThat(+                tx1.runStep(session -> {+                    session.realms().getRealm(realmId).setAttribute(""k2"", ""v1"");+                    return session.realms().getRealm(realmId).getAttribute(""k2"");+                }), equalTo(""v1""));+        tx1.commit();++        tx2.begin();+        assertThat(+                tx2.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k2"")),+                equalTo(""v1""));+        tx2.commit();++    }++    @Test+    public void testRepeatableRead() {+        TransactionController tx1 = new TransactionController(getFactory());+        TransactionController tx2 = new TransactionController(getFactory());+        TransactionController tx3 = new TransactionController(getFactory());++        tx1.begin();+        tx2.begin();+        tx3.begin();++        // Read original value in tx1+        assertThat(+                tx1.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v1""));++        // change value to new in tx2+        tx2.runStep(session -> {+            session.realms().getRealm(realmId).setAttribute(""k1"", ""v2"");+            return null;+        });+        tx2.commit();++        // tx1 should still return the value that already read+        assertThat(+                tx1.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v1""));++        // tx3 should return the new value+        assertThat(+                tx3.runStep(session -> session.realms().getRealm(realmId).getAttribute(""k1"")),+                equalTo(""v2""));+        tx1.commit();+        tx3.commit();+    }++    @Test+    // LockObjectForModification is currently used only in map-jpa+    @RequireProvider(value = MapStorageProvider.class, only = JpaMapStorageProviderFactory.PROVIDER_ID)+    public void testLockObjectForModification() {+        try {+            CONFIG.spi(MapStorageSpi.NAME)","Thanks for this, this was a very bad way to set the config. As discussed we will sort this out later (to unblock other work mainly in HotRod that depends on this) as part of this issue: [#16616](https://github.com/keycloak/keycloak/issues/16616). Until then we set `lockTimeout` to 1000 for all model tests.",x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1087116078,2023-01-25T20:04:38Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -16,20 +16,289 @@  */ package org.keycloak.models.map.storage.file; +import org.keycloak.models.ClientModel; import org.keycloak.models.KeycloakSession; import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.EntityField;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity; import org.keycloak.models.map.storage.MapKeycloakTransaction; import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapCrudOperations;+import org.keycloak.models.map.storage.file.yaml.YamlContextAwareParser;+import org.keycloak.models.map.storage.file.common.MapEntityYamlContext;+import org.keycloak.models.map.storage.file.yaml.writer.PathWriter;+import org.keycloak.models.map.storage.file.yaml.writer.YamlWritingMechanism;+import java.io.IOException;+import java.nio.file.DirectoryStream;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.util.List;+import java.util.Objects;+import java.util.Optional;+import java.util.Spliterator;+import java.util.Spliterators;+import java.util.function.Function;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import java.util.stream.StreamSupport;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.DumpSettings;+import org.snakeyaml.engine.v2.emitter.Emitter;  /**  * A file-based {@link MapStorage}.  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-public class FileMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class FileMapStorage<V extends AbstractEntity & UpdatableEntity, M> implements MapStorage<V, M> {++    private static final Logger LOG = Logger.getLogger(FileMapStorage.class);++    // any REALM_ID field would do, they share the same name+    private static final String SEARCHABLE_FIELD_REALM_ID_FIELD_NAME = ClientModel.SearchableFields.REALM_ID.getName();+    private static final String FILE_SUFFIX = "".yaml"";++    private final static DumpSettings DUMP_SETTINGS = DumpSettings.builder()+      .setIndent(4)+      .setIndicatorIndent(2)+      .setIndentWithIndicator(false)+      .build();++    private final Class<V> entityClass;+    private final Crud crud = new Crud();+    private final Function<String, Path> dataDirectoryFunc;+    private final EntityField<V> uniqueHumanReadableField;++    // TODO: Add auxiliary directory for indices, locks etc.+    // private final String auxiliaryFilesDirectory;++    public FileMapStorage(Class<V> entityClass, EntityField<V> uniqueHumanReadableField, Function<String, Path> dataDirectoryFunc) {+        this.entityClass = entityClass;+        this.dataDirectoryFunc = dataDirectoryFunc;+        this.uniqueHumanReadableField = uniqueHumanReadableField == null ? ModelEntityUtil.getIdField(entityClass) : uniqueHumanReadableField;+    }      @Override     public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-        return new FileKeycloakTransaction();+        @SuppressWarnings(""unchecked"")+        MapKeycloakTransaction<V, M> sessionTransaction = session.getAttribute(""file-map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (sessionTransaction == null) {+            sessionTransaction = createTransactionInternal(session);+            session.setAttribute(""file-map-transaction-"" + hashCode(), sessionTransaction);+        }+        return sessionTransaction;+    }++    public MapKeycloakTransaction<V, M> createTransactionInternal(KeycloakSession session) {+        return new FileMapKeycloakTransaction<>(entityClass, crud);     }++    private class Crud implements ConcurrentHashMapCrudOperations<V, M>, HasRealmId {++        private String defaultRealmId;++        protected Path getPathForSanitizedId(String sanitizedId) {+            final Path dataDirectory = getDataDirectory();++            if (sanitizedId == null) {+                throw new IllegalStateException(""Invalid ID to sanitize in the following directory: "" + dataDirectory);+            }++            if (! Files.isDirectory(dataDirectory)) {+                try {+                    Files.createDirectories(dataDirectory);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2362),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1087116080,2023-01-25T20:04:38Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -16,20 +16,289 @@  */ package org.keycloak.models.map.storage.file; +import org.keycloak.models.ClientModel; import org.keycloak.models.KeycloakSession; import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.EntityField;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity; import org.keycloak.models.map.storage.MapKeycloakTransaction; import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapCrudOperations;+import org.keycloak.models.map.storage.file.yaml.YamlContextAwareParser;+import org.keycloak.models.map.storage.file.common.MapEntityYamlContext;+import org.keycloak.models.map.storage.file.yaml.writer.PathWriter;+import org.keycloak.models.map.storage.file.yaml.writer.YamlWritingMechanism;+import java.io.IOException;+import java.nio.file.DirectoryStream;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.util.List;+import java.util.Objects;+import java.util.Optional;+import java.util.Spliterator;+import java.util.Spliterators;+import java.util.function.Function;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import java.util.stream.StreamSupport;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.DumpSettings;+import org.snakeyaml.engine.v2.emitter.Emitter;  /**  * A file-based {@link MapStorage}.  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-public class FileMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class FileMapStorage<V extends AbstractEntity & UpdatableEntity, M> implements MapStorage<V, M> {++    private static final Logger LOG = Logger.getLogger(FileMapStorage.class);++    // any REALM_ID field would do, they share the same name+    private static final String SEARCHABLE_FIELD_REALM_ID_FIELD_NAME = ClientModel.SearchableFields.REALM_ID.getName();+    private static final String FILE_SUFFIX = "".yaml"";++    private final static DumpSettings DUMP_SETTINGS = DumpSettings.builder()+      .setIndent(4)+      .setIndicatorIndent(2)+      .setIndentWithIndicator(false)+      .build();++    private final Class<V> entityClass;+    private final Crud crud = new Crud();+    private final Function<String, Path> dataDirectoryFunc;+    private final EntityField<V> uniqueHumanReadableField;++    // TODO: Add auxiliary directory for indices, locks etc.+    // private final String auxiliaryFilesDirectory;++    public FileMapStorage(Class<V> entityClass, EntityField<V> uniqueHumanReadableField, Function<String, Path> dataDirectoryFunc) {+        this.entityClass = entityClass;+        this.dataDirectoryFunc = dataDirectoryFunc;+        this.uniqueHumanReadableField = uniqueHumanReadableField == null ? ModelEntityUtil.getIdField(entityClass) : uniqueHumanReadableField;+    }      @Override     public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-        return new FileKeycloakTransaction();+        @SuppressWarnings(""unchecked"")+        MapKeycloakTransaction<V, M> sessionTransaction = session.getAttribute(""file-map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (sessionTransaction == null) {+            sessionTransaction = createTransactionInternal(session);+            session.setAttribute(""file-map-transaction-"" + hashCode(), sessionTransaction);+        }+        return sessionTransaction;+    }++    public MapKeycloakTransaction<V, M> createTransactionInternal(KeycloakSession session) {+        return new FileMapKeycloakTransaction<>(entityClass, crud);     }++    private class Crud implements ConcurrentHashMapCrudOperations<V, M>, HasRealmId {++        private String defaultRealmId;++        protected Path getPathForSanitizedId(String sanitizedId) {+            final Path dataDirectory = getDataDirectory();++            if (sanitizedId == null) {+                throw new IllegalStateException(""Invalid ID to sanitize in the following directory: "" + dataDirectory);+            }++            if (! Files.isDirectory(dataDirectory)) {+                try {+                    Files.createDirectories(dataDirectory);+                } catch (IOException ex) {+                    throw new IllegalStateException(""Directory does not exist and cannot be created: "" + dataDirectory, ex);+                }+            }+            return dataDirectory.resolve(sanitizedId + FILE_SUFFIX);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2363),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1087116082,2023-01-25T20:04:39Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -16,20 +16,289 @@  */ package org.keycloak.models.map.storage.file; +import org.keycloak.models.ClientModel; import org.keycloak.models.KeycloakSession; import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.EntityField;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity; import org.keycloak.models.map.storage.MapKeycloakTransaction; import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapCrudOperations;+import org.keycloak.models.map.storage.file.yaml.YamlContextAwareParser;+import org.keycloak.models.map.storage.file.common.MapEntityYamlContext;+import org.keycloak.models.map.storage.file.yaml.writer.PathWriter;+import org.keycloak.models.map.storage.file.yaml.writer.YamlWritingMechanism;+import java.io.IOException;+import java.nio.file.DirectoryStream;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.util.List;+import java.util.Objects;+import java.util.Optional;+import java.util.Spliterator;+import java.util.Spliterators;+import java.util.function.Function;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import java.util.stream.StreamSupport;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.DumpSettings;+import org.snakeyaml.engine.v2.emitter.Emitter;  /**  * A file-based {@link MapStorage}.  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-public class FileMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class FileMapStorage<V extends AbstractEntity & UpdatableEntity, M> implements MapStorage<V, M> {++    private static final Logger LOG = Logger.getLogger(FileMapStorage.class);++    // any REALM_ID field would do, they share the same name+    private static final String SEARCHABLE_FIELD_REALM_ID_FIELD_NAME = ClientModel.SearchableFields.REALM_ID.getName();+    private static final String FILE_SUFFIX = "".yaml"";++    private final static DumpSettings DUMP_SETTINGS = DumpSettings.builder()+      .setIndent(4)+      .setIndicatorIndent(2)+      .setIndentWithIndicator(false)+      .build();++    private final Class<V> entityClass;+    private final Crud crud = new Crud();+    private final Function<String, Path> dataDirectoryFunc;+    private final EntityField<V> uniqueHumanReadableField;++    // TODO: Add auxiliary directory for indices, locks etc.+    // private final String auxiliaryFilesDirectory;++    public FileMapStorage(Class<V> entityClass, EntityField<V> uniqueHumanReadableField, Function<String, Path> dataDirectoryFunc) {+        this.entityClass = entityClass;+        this.dataDirectoryFunc = dataDirectoryFunc;+        this.uniqueHumanReadableField = uniqueHumanReadableField == null ? ModelEntityUtil.getIdField(entityClass) : uniqueHumanReadableField;+    }      @Override     public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-        return new FileKeycloakTransaction();+        @SuppressWarnings(""unchecked"")+        MapKeycloakTransaction<V, M> sessionTransaction = session.getAttribute(""file-map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (sessionTransaction == null) {+            sessionTransaction = createTransactionInternal(session);+            session.setAttribute(""file-map-transaction-"" + hashCode(), sessionTransaction);+        }+        return sessionTransaction;+    }++    public MapKeycloakTransaction<V, M> createTransactionInternal(KeycloakSession session) {+        return new FileMapKeycloakTransaction<>(entityClass, crud);     }++    private class Crud implements ConcurrentHashMapCrudOperations<V, M>, HasRealmId {++        private String defaultRealmId;++        protected Path getPathForSanitizedId(String sanitizedId) {+            final Path dataDirectory = getDataDirectory();++            if (sanitizedId == null) {+                throw new IllegalStateException(""Invalid ID to sanitize in the following directory: "" + dataDirectory);+            }++            if (! Files.isDirectory(dataDirectory)) {+                try {+                    Files.createDirectories(dataDirectory);+                } catch (IOException ex) {+                    throw new IllegalStateException(""Directory does not exist and cannot be created: "" + dataDirectory, ex);+                }+            }+            return dataDirectory.resolve(sanitizedId + FILE_SUFFIX);+        }++        protected String sanitizeId(String id) {+            Objects.requireNonNull(id, ""ID must be non-null"");++            id = id.replaceAll(""="", ""=e"").replaceAll("":"", ""=c"").replaceAll(""/"", ""=s"").replaceAll(""\\\\"", ""=b"");+            final Path pId = Path.of(id);++            // Do not allow absolute paths+            if (pId.isAbsolute()) {+                throw new IllegalStateException(""Illegal ID requested: "" + id);+            }++            return id;+        }++        protected String desanitizeId(String sanitizedId) {+            if (sanitizedId == null) {+                return null;+            }++            return sanitizedId.replaceAll(""=c"", "":"").replaceAll(""=s"", ""/"").replaceAll(""=b"", ""\\\\"").replaceAll(""=e"", ""="");++        }++        protected V parse(Path fileName) {+            try {+                final V parsedObject = YamlContextAwareParser.parse(Files.newInputStream(fileName), new MapEntityYamlContext<>(entityClass));+                final String fileNameStr = fileName.getFileName().toString();++                parsedObject.setId(desanitizeId(fileNameStr.substring(0, fileNameStr.length() - FILE_SUFFIX.length())));+                parsedObject.clearUpdatedFlag();++                return parsedObject;+            } catch (IOException ex) {+                LOG.warnf(ex, ""Error reading %s"", fileName);+                return null;+            }+        }++        @Override+        public V create(V value) {+            // TODO: Lock realm directory for changes (e.g. on realm deletion)+            String sanitizedId = sanitizeId(value.getId());++            writeYamlContents(getPathForSanitizedId(sanitizedId), value);++            return value;+        }++        @Override+        public String determineKeyFromValue(V value) {+            String proposedId = (String) uniqueHumanReadableField.get(value);+            if (proposedId == null) {+                proposedId = value.getId();+            }+            String baseProposedId = proposedId;+            if (proposedId == null) {+                proposedId = StringKey.INSTANCE.yieldNewUniqueKey();+            }++            String sanitizedId = sanitizeId(proposedId);+            if (sanitizedId == null) {+                proposedId = StringKey.INSTANCE.yieldNewUniqueKey();+                sanitizedId = proposedId;   // no need for sanitizing+            }++            Path sp = getPathForSanitizedId(sanitizedId);+            for (int counter = 0; counter < 100; counter++) {+                LOG.tracef(""Attempting to create file %s"", sp);+                try {+                    // touch. TODO: Garbage collection upon rollback+                    Files.createFile(sp);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2364),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1087116084,2023-01-25T20:04:39Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorageProviderFactory.java,"@@ -54,7 +94,40 @@      @Override     public void init(Config.Scope config) {-        this.config = config;+        final String dir = config.get(""dir"");+        rootRealmsDirectory = dir == null ? null : Path.of(dir);+        getModelNames().stream()+          .filter(n -> ! Objects.equals(n, getModelName(RealmModel.class)))+          .forEach(n -> rootAreaDirectories.put(n, getRootDir(rootRealmsDirectory, n, config.get(""dir."" + n))));++        if (rootAreaDirectories != null) {+            rootAreaDirectories.put(getModelName(RealmModel.class), realmId -> realmId == null ? rootRealmsDirectory : rootRealmsDirectory.resolve(realmId) );",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2365),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1087116086,2023-01-25T20:04:39Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/yaml/writer/PathWriter.java,"@@ -0,0 +1,70 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file.yaml.writer;++import java.io.BufferedWriter;+import java.io.Closeable;+import java.io.IOException;+import java.nio.file.Files;+import java.nio.file.Path;+import org.snakeyaml.engine.v2.api.StreamDataWriter;++/**+ *+ * @author hmlnarik+ */+public class PathWriter implements StreamDataWriter, Closeable {++    private final BufferedWriter writer;++    public PathWriter(Path path) throws IOException {+        this.writer = Files.newBufferedWriter(path);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2366),x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1087675933,2023-01-26T10:48:23Z,.github/CODEOWNERS,"@@ -0,0 +1,50 @@+###################################################################################################+# Overview+#+# Pattern used to match files follows most of the same rules as used in gitignore files. Order is+# important; the last matching pattern takes precendence.+#+# For more info see:+# https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners+###################################################################################################+++###################################################################################################+# Global (@keycloak/maintainers)+###################################################################################################++/**                                                         @keycloak/maintainers++###################################################################################################+# Testing (@keycloak/testing-maintainers)+###################################################################################################++/testsuite/**                                               @keycloak/testing-maintainers++###################################################################################################+# Core (@keycloak/core-maintainers)+###################################################################################################+++###################################################################################################+# Cloud Native (@keycloak/cloud-native-maintainers)+###################################################################################################++/operator/**                                                @keycloak/cloud-native-maintainers+/quarkus/**                                                 @keycloak/cloud-native-maintainers++###################################################################################################+# Store (@keycloak/store-maintainers)+###################################################################################################++/model/**                                                   @keycloak/store-maintainers+/testsuite/model/**                                         @keycloak/store-maintainers++###################################################################################################+# UI (@keycloak/ui-maintainers)+###################################################################################################++/js/**                                                      @keycloak/ui-maintainers+/adapters/oidc/js/**                                        @keycloak/ui-maintainers+/rest/admin-ui-ext/**                                       @keycloak/ui-maintainers+/themes/src/main/resources/theme/keycloak.v2/account/**     @keycloak/ui-maintainers",Not sure if all of it belongs to us but the UI team might want to own `themes/src/main/resources/theme` entirely. @ssilvert WDYT?,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1087681038,2023-01-26T10:52:33Z,PR-CHECKLIST,"@@ -0,0 +1,19 @@+# Checklist for merging PRs",Since this is using markdown syntax perhaps this should be renamed to `PR-CHECKLIST.md`? Perhaps it belongs in the `docs/` directory as well?Or is this some kind of 'magic' file that GitHub picks up and presents in the UI.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1087709610,2023-01-26T11:15:50Z,.github/CODEOWNERS,"@@ -0,0 +1,50 @@+###################################################################################################+# Overview+#+# Pattern used to match files follows most of the same rules as used in gitignore files. Order is+# important; the last matching pattern takes precendence.+#+# For more info see:+# https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners+###################################################################################################+++###################################################################################################+# Global (@keycloak/maintainers)+###################################################################################################++/**                                                         @keycloak/maintainers++###################################################################################################+# Testing (@keycloak/testing-maintainers)+###################################################################################################++/testsuite/**                                               @keycloak/testing-maintainers++###################################################################################################+# Core (@keycloak/core-maintainers)+###################################################################################################+++###################################################################################################+# Cloud Native (@keycloak/cloud-native-maintainers)+###################################################################################################++/operator/**                                                @keycloak/cloud-native-maintainers+/quarkus/**                                                 @keycloak/cloud-native-maintainers++###################################################################################################+# Store (@keycloak/store-maintainers)+###################################################################################################++/model/**                                                   @keycloak/store-maintainers+/testsuite/model/**                                         @keycloak/store-maintainers++###################################################################################################+# UI (@keycloak/ui-maintainers)+###################################################################################################++/js/**                                                      @keycloak/ui-maintainers+/adapters/oidc/js/**                                        @keycloak/ui-maintainers+/rest/admin-ui-ext/**                                       @keycloak/ui-maintainers+/themes/src/main/resources/theme/keycloak.v2/account/**     @keycloak/ui-maintainers","The old account console and admin consoles will be deleted soon, so no need to list these. Then I guess we'd want to move the new account console to ""/js/"", which pretty much leaves the login theme stuff really.We can tune this overtime though, the main focus here initially is what you're currently owning in keycloak-ui and that you'll still own those bits after they move to the keycloak repo.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1087771988,2023-01-26T12:11:49Z,PR-CHECKLIST,"@@ -0,0 +1,19 @@+# Checklist for merging PRs++Before merging a PR the PR should follow these rules:++* The PR does not have the label ""hold""+* There is an associated GitHub Issue linked to the PR","Added an exception where GitHub Issue is not required. However, if a PR introduces a feature or enhancement, or is fixing an bug where previously released versions of Keycloak are affected we need the GitHub Issue.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1087801201,2023-01-26T12:31:09Z,PR-CHECKLIST.md,"@@ -0,0 +1,19 @@+# Checklist for merging PRs++Before merging a PR the PR should follow these rules:++* The PR does not have the label ""hold""+* There is an associated GitHub Issue linked to the PR+* There is sufficient test coverage+* Required documentation is included in the PR or an associated PR+* There are no negative reviews, or unresolved comments+* The PR does not contain changes not relevant to the GitHub Issue+* PRs has been reviewed by the relevant team, and approved by either a global maintainer or a team maintainer+* All required status checks have passed successfully+* If the PR is affected by unstable workflows or tests verify the issues are not introduced by the PR++Merging a PR:++* In most cases a PR should be merged by a team maintainer in the affected area+* Global maintainers can merge any PRs, but this is considered a fallback+* If a PR affects multiple areas it can be merged by any of the affected team maintainers",I am reading in the google document that you indeed meant:- PR should be reviewed *by all* maintainers of the affected areas- PR can be merged *by any* (as long as it was reviewed by all applicable teams). Still wonder if to clarify it a bit more in this last point and add something that PR can be merged after it was reviewed by all required owners?,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1088025865,2023-01-26T15:48:00Z,PR-CHECKLIST,"@@ -0,0 +1,19 @@+# Checklist for merging PRs++Before merging a PR the PR should follow these rules:++* The PR does not have the label ""hold""+* There is an associated GitHub Issue linked to the PR","> Added an exception where GitHub Issue is not required. However, if a PR introduces a feature or enhancement, or is fixing an bug where previously released versions of Keycloak are affected we need the GitHub Issue.That sounds reasonable thanks.",
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1088276682,2023-01-26T19:51:41Z,PR-CHECKLIST.md,"@@ -0,0 +1,20 @@+# Checklist for merging PRs++Before merging a PR the PR should follow these rules:++* The PR does not have the label ""hold""+* There is an associated GitHub Issue linked to the PR+  * A GitHub Issue is not required if the PR is not introducing a new feature or enhancement to Keycloak, or is resolving a bug where released versions of Keycloak are not affected+* There is sufficient test coverage+* Required documentation is included in the PR or an associated PR+* There are no negative reviews, or unresolved comments+* The PR does not contain changes not relevant to the GitHub Issue+* PRs has been reviewed by the relevant team, and approved by either a global maintainer or a team maintainer+* All required status checks have passed successfully+* If the PR is affected by unstable workflows or tests verify the issues are not introduced by the PR++Merging a PR:++* In most cases a PR should be merged by a team maintainer in the affected area+* Global maintainers can merge any PRs, but this is considered a fallback+* If a PR affects multiple areas it can be merged by any of the affected team maintainers","@mposolda I don't think he meant all maintainers.  For instance, everyone on the UI team is a maintainer of the UI code.  So we would not require a review from everyone on the team.Maybe this is a little more clear for the last bullet?```suggestion* If a PR affects multiple areas it can be merged by any of the affected team maintainers as long as someone from each affected team has completed a review.```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1088798669,2023-01-27T10:23:20Z,.github/CODEOWNERS,"@@ -0,0 +1,52 @@+###################################################################################################+# Overview+#+# Pattern used to match files follows most of the same rules as used in gitignore files. Order is+# important; the last matching pattern takes precendence.+#+# For more info see:+# https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners+###################################################################################################+++###################################################################################################+# Global (@keycloak/maintainers)+###################################################################################################++*                                                           @keycloak/maintainers++###################################################################################################+# Testing (@keycloak/testing-maintainers)+###################################################################################################++/testsuite/                                                 @keycloak/testing-maintainers",I'm not quite sure about having a separate team for `testing-maintainers`. Isn't technically every member of a `-mainstainers` team a testsuite maintainer?Do we plan to have folks that are only testsuite maintainers but not actually maintainers of the component that the test validates?I'm sorry if I missed some conversation about it.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16666,1088834008,2023-01-27T11:04:19Z,.github/workflows/codeql-analysis.yml,"@@ -21,25 +21,25 @@ defaults:  jobs: -  changes:-    name: Check changes+  conditional:+    name: Check conditional workflows and jobs     if: github.event_name != 'schedule' || github.repository == 'keycloak/keycloak'     runs-on: ubuntu-latest     outputs:-      java: ${{ steps.changes.outputs.java }}-      themes: ${{ steps.changes.outputs.themes }}-      js-adapter: ${{ steps.changes.outputs.js-adapter }}+      java: ${{ steps.conditional.outputs.codeql-java }}+      themes: ${{ steps.conditional.outputs.codeql-themes }}+      js-adapter: ${{ steps.conditional.outputs.codeql-js_adapter }}     steps:       - uses: actions/checkout@v3",Do we need to check out the repository for this part to work? If so perhaps it makes more sense to add the checkout of the repository to the `conditional` workflow itself? (same for the operator workflow),
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16666,1088835550,2023-01-27T11:06:21Z,.github/workflows/codeql-analysis.yml,"@@ -21,25 +21,25 @@ defaults:  jobs: -  changes:-    name: Check changes+  conditional:+    name: Check conditional workflows and jobs     if: github.event_name != 'schedule' || github.repository == 'keycloak/keycloak'     runs-on: ubuntu-latest     outputs:-      java: ${{ steps.changes.outputs.java }}-      themes: ${{ steps.changes.outputs.themes }}-      js-adapter: ${{ steps.changes.outputs.js-adapter }}+      java: ${{ steps.conditional.outputs.codeql-java }}+      themes: ${{ steps.conditional.outputs.codeql-themes }}+      js-adapter: ${{ steps.conditional.outputs.codeql-js_adapter }}     steps:       - uses: actions/checkout@v3 -      - id: changes-        uses: ./.github/actions/changed-files+      - id: conditional+        uses: ./.github/actions/conditional",The full path here should be `./.github/actions/conditional/action.yml`. Does GitHub actions treat `actions.yml` as some kind of 'index' file to make this work?,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16666,1088840463,2023-01-27T11:12:53Z,.github/workflows/codeql-analysis.yml,"@@ -21,25 +21,25 @@ defaults:  jobs: -  changes:-    name: Check changes+  conditional:+    name: Check conditional workflows and jobs     if: github.event_name != 'schedule' || github.repository == 'keycloak/keycloak'     runs-on: ubuntu-latest     outputs:-      java: ${{ steps.changes.outputs.java }}-      themes: ${{ steps.changes.outputs.themes }}-      js-adapter: ${{ steps.changes.outputs.js-adapter }}+      java: ${{ steps.conditional.outputs.codeql-java }}+      themes: ${{ steps.conditional.outputs.codeql-themes }}+      js-adapter: ${{ steps.conditional.outputs.codeql-js_adapter }}     steps:       - uses: actions/checkout@v3","Yes, composite actions run directly from the checkout, and won't work if you don't do the checkout. It's very fast though, so not really a big problem.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16666,1088844242,2023-01-27T11:17:50Z,.github/actions/conditional/conditions,"@@ -0,0 +1,14 @@+# File patterns used to decide what workflows/jobs to execute for a given PR+#+# To test a pattern run '.github/actions/conditional/conditional.sh <remote name> <branch>'+# Alternatively, run 'git diff <remote name>/<branch> <pattern>' (from the root directory)+#+# Note: The file needs to end with an empty line, otherwise last pattern is not picked up",If you put this in a `.editorconfig` file in the root of the project [most IDEs](https://editorconfig.org/#pre-installed) will enforce it.```[.github/actions/conditional/conditions]end_of_line = lfinsert_final_newline = true```,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16637,1088879606,2023-01-27T11:58:15Z,.github/CODEOWNERS,"@@ -0,0 +1,52 @@+###################################################################################################+# Overview+#+# Pattern used to match files follows most of the same rules as used in gitignore files. Order is+# important; the last matching pattern takes precendence.+#+# For more info see:+# https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners+###################################################################################################+++###################################################################################################+# Global (@keycloak/maintainers)+###################################################################################################++*                                                           @keycloak/maintainers++###################################################################################################+# Testing (@keycloak/testing-maintainers)+###################################################################################################++/testsuite/                                                 @keycloak/testing-maintainers",Found the conversation. I understand now it is a technical limitation. Then forget my comment. :),
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1088977804,2023-01-27T13:45:18Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -16,20 +16,327 @@  */ package org.keycloak.models.map.storage.file; +import org.keycloak.models.ClientModel; import org.keycloak.models.KeycloakSession; import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.realm.MapRealmEntity; import org.keycloak.models.map.storage.MapKeycloakTransaction; import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapCrudOperations;+import org.keycloak.models.map.storage.file.yaml.YamlParser;+import org.keycloak.models.map.storage.file.common.MapEntityContext;+import org.keycloak.models.map.storage.file.yaml.PathWriter;+import org.keycloak.models.map.storage.file.yaml.YamlWritingMechanism;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.DirectoryStream;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.attribute.BasicFileAttributes;+import java.util.List;+import java.util.Objects;+import java.util.Optional;+import java.util.Spliterator;+import java.util.Spliterators;+import java.util.function.Function;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import java.util.stream.StreamSupport;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.DumpSettings;+import org.snakeyaml.engine.v2.emitter.Emitter;  /**  * A file-based {@link MapStorage}.  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-public class FileMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class FileMapStorage<V extends AbstractEntity & UpdatableEntity, M> implements MapStorage<V, M> {++    private static final Logger LOG = Logger.getLogger(FileMapStorage.class);++    // any REALM_ID field would do, they share the same name+    private static final String SEARCHABLE_FIELD_REALM_ID_FIELD_NAME = ClientModel.SearchableFields.REALM_ID.getName();+    private static final String FILE_SUFFIX = "".yaml"";++    private final static DumpSettings DUMP_SETTINGS = DumpSettings.builder()+      .setIndent(4)+      .setIndicatorIndent(2)+      .setIndentWithIndicator(false)+      .build();++    private final Class<V> entityClass;+    private final Crud crud = new Crud();+    private final Function<String, Path> dataDirectoryFunc;+    private final Function<V, String[]> suggestedPath;++    // TODO: Add auxiliary directory for indices, locks etc.+    // private final String auxiliaryFilesDirectory;++    public FileMapStorage(Class<V> entityClass, Function<V, String[]> uniqueHumanReadableField, Function<String, Path> dataDirectoryFunc) {+        this.entityClass = entityClass;+        this.dataDirectoryFunc = dataDirectoryFunc;+        this.suggestedPath = uniqueHumanReadableField == null ? v -> v.getId() == null ? null : new String[] { v.getId() } : uniqueHumanReadableField;+    }      @Override     public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-        return new FileKeycloakTransaction();+        @SuppressWarnings(""unchecked"")+        MapKeycloakTransaction<V, M> sessionTransaction = session.getAttribute(""file-map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (sessionTransaction == null) {+            sessionTransaction = createTransactionInternal(session);+            session.setAttribute(""file-map-transaction-"" + hashCode(), sessionTransaction);+        }+        return sessionTransaction;+    }++    public MapKeycloakTransaction<V, M> createTransactionInternal(KeycloakSession session) {+        return new FileMapKeycloakTransaction<>(entityClass, crud);+    }++    private static boolean canParseFile(Path p, BasicFileAttributes attrs) {+        final String fn = p.getFileName().toString();+        return attrs.isRegularFile()+          && attrs.size() > 0L+          && ! fn.startsWith(""."")+          && fn.endsWith(FILE_SUFFIX)+          && Files.isReadable(p)+        ;+    }++    private class Crud implements ConcurrentHashMapCrudOperations<V, M>, HasRealmId {++        private String defaultRealmId;++        protected Path getPathForSanitizedId(Path sanitizedIdPath) {+            final Path dataDirectory = getDataDirectory();+            final Path dataDirectoryWithChildren = dataDirectory.resolve(sanitizedIdPath).getParent();++            if (! Files.isDirectory(dataDirectoryWithChildren)) {+                try {+                    Files.createDirectories(dataDirectoryWithChildren);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2367),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1088977808,2023-01-27T13:45:19Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -16,20 +16,327 @@  */ package org.keycloak.models.map.storage.file; +import org.keycloak.models.ClientModel; import org.keycloak.models.KeycloakSession; import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.realm.MapRealmEntity; import org.keycloak.models.map.storage.MapKeycloakTransaction; import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapCrudOperations;+import org.keycloak.models.map.storage.file.yaml.YamlParser;+import org.keycloak.models.map.storage.file.common.MapEntityContext;+import org.keycloak.models.map.storage.file.yaml.PathWriter;+import org.keycloak.models.map.storage.file.yaml.YamlWritingMechanism;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.DirectoryStream;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.attribute.BasicFileAttributes;+import java.util.List;+import java.util.Objects;+import java.util.Optional;+import java.util.Spliterator;+import java.util.Spliterators;+import java.util.function.Function;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import java.util.stream.StreamSupport;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.DumpSettings;+import org.snakeyaml.engine.v2.emitter.Emitter;  /**  * A file-based {@link MapStorage}.  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-public class FileMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class FileMapStorage<V extends AbstractEntity & UpdatableEntity, M> implements MapStorage<V, M> {++    private static final Logger LOG = Logger.getLogger(FileMapStorage.class);++    // any REALM_ID field would do, they share the same name+    private static final String SEARCHABLE_FIELD_REALM_ID_FIELD_NAME = ClientModel.SearchableFields.REALM_ID.getName();+    private static final String FILE_SUFFIX = "".yaml"";++    private final static DumpSettings DUMP_SETTINGS = DumpSettings.builder()+      .setIndent(4)+      .setIndicatorIndent(2)+      .setIndentWithIndicator(false)+      .build();++    private final Class<V> entityClass;+    private final Crud crud = new Crud();+    private final Function<String, Path> dataDirectoryFunc;+    private final Function<V, String[]> suggestedPath;++    // TODO: Add auxiliary directory for indices, locks etc.+    // private final String auxiliaryFilesDirectory;++    public FileMapStorage(Class<V> entityClass, Function<V, String[]> uniqueHumanReadableField, Function<String, Path> dataDirectoryFunc) {+        this.entityClass = entityClass;+        this.dataDirectoryFunc = dataDirectoryFunc;+        this.suggestedPath = uniqueHumanReadableField == null ? v -> v.getId() == null ? null : new String[] { v.getId() } : uniqueHumanReadableField;+    }      @Override     public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-        return new FileKeycloakTransaction();+        @SuppressWarnings(""unchecked"")+        MapKeycloakTransaction<V, M> sessionTransaction = session.getAttribute(""file-map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (sessionTransaction == null) {+            sessionTransaction = createTransactionInternal(session);+            session.setAttribute(""file-map-transaction-"" + hashCode(), sessionTransaction);+        }+        return sessionTransaction;+    }++    public MapKeycloakTransaction<V, M> createTransactionInternal(KeycloakSession session) {+        return new FileMapKeycloakTransaction<>(entityClass, crud);+    }++    private static boolean canParseFile(Path p, BasicFileAttributes attrs) {+        final String fn = p.getFileName().toString();+        return attrs.isRegularFile()+          && attrs.size() > 0L+          && ! fn.startsWith(""."")+          && fn.endsWith(FILE_SUFFIX)+          && Files.isReadable(p)+        ;+    }++    private class Crud implements ConcurrentHashMapCrudOperations<V, M>, HasRealmId {++        private String defaultRealmId;++        protected Path getPathForSanitizedId(Path sanitizedIdPath) {+            final Path dataDirectory = getDataDirectory();+            final Path dataDirectoryWithChildren = dataDirectory.resolve(sanitizedIdPath).getParent();++            if (! Files.isDirectory(dataDirectoryWithChildren)) {+                try {+                    Files.createDirectories(dataDirectoryWithChildren);+                } catch (IOException ex) {+                    throw new IllegalStateException(""Directory does not exist and cannot be created: "" + dataDirectory, ex);+                }+            }+            return dataDirectoryWithChildren.resolve(sanitizedIdPath.getFileName() + FILE_SUFFIX);+        }++        protected Path getPathForSanitizedId(String sanitizedId) {+            if (sanitizedId == null) {+                throw new IllegalStateException(""Invalid ID to sanitize"");+            }++            return getPathForSanitizedId(Path.of(sanitizedId));+        }++        protected String sanitizeId(String id) {+            Objects.requireNonNull(id, ""ID must be non-null"");++            // TODO: sanitize+//            id = id+//              .replaceAll(""="", ""=e"")+//              .replaceAll("":"", ""=c"")+//              .replaceAll(""/"", ""=s"")+//              .replaceAll(""\\\\"", ""=b"")+//            ;+            final Path pId = Path.of(id);++            // Do not allow absolute paths+            if (pId.isAbsolute()) {+                throw new IllegalStateException(""Illegal ID requested: "" + id);+            }++            return id;+        }++        protected String desanitizeId(String sanitizedId) {+            if (sanitizedId == null) {+                return null;+            }++            return sanitizedId+              .replaceAll(""=c"", "":"")+              .replaceAll(""=s"", ""/"")+              .replaceAll(""=b"", ""\\\\"")+              .replaceAll(""=e"", ""="")+            ;++        }++        protected V parse(Path fileName) {+            try {+                final V parsedObject = YamlParser.parse(Files.newInputStream(fileName), new MapEntityContext<>(entityClass));+                final String fileNameStr = fileName.getFileName().toString();+                String id = determineKeyFromValue(parsedObject, false);+                final String desanitizedId = desanitizeId(fileNameStr.substring(0, fileNameStr.length() - FILE_SUFFIX.length()));+                if (id == null) {+                    id = desanitizedId;+                } else if (! id.endsWith(desanitizedId)) {+                    LOG.warnf(""Filename \""%s\"" does not end with expected id \""%s\"". Fix the file name."", fileNameStr, id);+                }++                parsedObject.setId(id);+                parsedObject.clearUpdatedFlag();++                return parsedObject;+            } catch (IOException ex) {+                LOG.warnf(ex, ""Error reading %s"", fileName);+                return null;+            }+        }++        @Override+        public V create(V value) {+            // TODO: Lock realm directory for changes (e.g. on realm deletion)+            // TODO: Sanitize ID+            String sanitizedId = sanitizeId(value.getId());++            writeYamlContents(getPathForSanitizedId(sanitizedId), value);++            return value;+        }++        @Override+        public String determineKeyFromValue(V value, boolean forCreate) {+            final boolean randomId;+            String[] proposedId = suggestedPath.apply(value);++            if (! forCreate) {+                return proposedId == null ? null : String.join(""/"", proposedId);+            }++            if (proposedId == null || proposedId.length == 0) {+                randomId = value.getId() == null;+                proposedId = new String[] { value.getId() == null ? StringKey.INSTANCE.yieldNewUniqueKey() : value.getId() };+            } else {+                randomId = false;+            }+            String[] baseProposedId = proposedId;++            Path sanitizedId = Path.of(+              sanitizeId(proposedId[0]),+              Stream.of(proposedId).skip(1).map(this::sanitizeId).toArray(String[]::new)+            );++            Path sp = getPathForSanitizedId(sanitizedId);+            for (int counter = 0; counter < 100; counter++) {+                LOG.tracef(""Attempting to create file %s"", sp);+                try {+                    // touch. TODO: Garbage collection upon rollback+                    Files.createFile(sp);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2368),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1088977813,2023-01-27T13:45:19Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -16,20 +16,327 @@  */ package org.keycloak.models.map.storage.file; +import org.keycloak.models.ClientModel; import org.keycloak.models.KeycloakSession; import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.realm.MapRealmEntity; import org.keycloak.models.map.storage.MapKeycloakTransaction; import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapCrudOperations;+import org.keycloak.models.map.storage.file.yaml.YamlParser;+import org.keycloak.models.map.storage.file.common.MapEntityContext;+import org.keycloak.models.map.storage.file.yaml.PathWriter;+import org.keycloak.models.map.storage.file.yaml.YamlWritingMechanism;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.DirectoryStream;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.attribute.BasicFileAttributes;+import java.util.List;+import java.util.Objects;+import java.util.Optional;+import java.util.Spliterator;+import java.util.Spliterators;+import java.util.function.Function;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import java.util.stream.StreamSupport;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.DumpSettings;+import org.snakeyaml.engine.v2.emitter.Emitter;  /**  * A file-based {@link MapStorage}.  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-public class FileMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class FileMapStorage<V extends AbstractEntity & UpdatableEntity, M> implements MapStorage<V, M> {++    private static final Logger LOG = Logger.getLogger(FileMapStorage.class);++    // any REALM_ID field would do, they share the same name+    private static final String SEARCHABLE_FIELD_REALM_ID_FIELD_NAME = ClientModel.SearchableFields.REALM_ID.getName();+    private static final String FILE_SUFFIX = "".yaml"";++    private final static DumpSettings DUMP_SETTINGS = DumpSettings.builder()+      .setIndent(4)+      .setIndicatorIndent(2)+      .setIndentWithIndicator(false)+      .build();++    private final Class<V> entityClass;+    private final Crud crud = new Crud();+    private final Function<String, Path> dataDirectoryFunc;+    private final Function<V, String[]> suggestedPath;++    // TODO: Add auxiliary directory for indices, locks etc.+    // private final String auxiliaryFilesDirectory;++    public FileMapStorage(Class<V> entityClass, Function<V, String[]> uniqueHumanReadableField, Function<String, Path> dataDirectoryFunc) {+        this.entityClass = entityClass;+        this.dataDirectoryFunc = dataDirectoryFunc;+        this.suggestedPath = uniqueHumanReadableField == null ? v -> v.getId() == null ? null : new String[] { v.getId() } : uniqueHumanReadableField;+    }      @Override     public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-        return new FileKeycloakTransaction();+        @SuppressWarnings(""unchecked"")+        MapKeycloakTransaction<V, M> sessionTransaction = session.getAttribute(""file-map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (sessionTransaction == null) {+            sessionTransaction = createTransactionInternal(session);+            session.setAttribute(""file-map-transaction-"" + hashCode(), sessionTransaction);+        }+        return sessionTransaction;+    }++    public MapKeycloakTransaction<V, M> createTransactionInternal(KeycloakSession session) {+        return new FileMapKeycloakTransaction<>(entityClass, crud);+    }++    private static boolean canParseFile(Path p, BasicFileAttributes attrs) {+        final String fn = p.getFileName().toString();+        return attrs.isRegularFile()+          && attrs.size() > 0L+          && ! fn.startsWith(""."")+          && fn.endsWith(FILE_SUFFIX)+          && Files.isReadable(p)+        ;+    }++    private class Crud implements ConcurrentHashMapCrudOperations<V, M>, HasRealmId {++        private String defaultRealmId;++        protected Path getPathForSanitizedId(Path sanitizedIdPath) {+            final Path dataDirectory = getDataDirectory();+            final Path dataDirectoryWithChildren = dataDirectory.resolve(sanitizedIdPath).getParent();++            if (! Files.isDirectory(dataDirectoryWithChildren)) {+                try {+                    Files.createDirectories(dataDirectoryWithChildren);+                } catch (IOException ex) {+                    throw new IllegalStateException(""Directory does not exist and cannot be created: "" + dataDirectory, ex);+                }+            }+            return dataDirectoryWithChildren.resolve(sanitizedIdPath.getFileName() + FILE_SUFFIX);+        }++        protected Path getPathForSanitizedId(String sanitizedId) {+            if (sanitizedId == null) {+                throw new IllegalStateException(""Invalid ID to sanitize"");+            }++            return getPathForSanitizedId(Path.of(sanitizedId));+        }++        protected String sanitizeId(String id) {+            Objects.requireNonNull(id, ""ID must be non-null"");++            // TODO: sanitize+//            id = id+//              .replaceAll(""="", ""=e"")+//              .replaceAll("":"", ""=c"")+//              .replaceAll(""/"", ""=s"")+//              .replaceAll(""\\\\"", ""=b"")+//            ;+            final Path pId = Path.of(id);++            // Do not allow absolute paths+            if (pId.isAbsolute()) {+                throw new IllegalStateException(""Illegal ID requested: "" + id);+            }++            return id;+        }++        protected String desanitizeId(String sanitizedId) {+            if (sanitizedId == null) {+                return null;+            }++            return sanitizedId+              .replaceAll(""=c"", "":"")+              .replaceAll(""=s"", ""/"")+              .replaceAll(""=b"", ""\\\\"")+              .replaceAll(""=e"", ""="")+            ;++        }++        protected V parse(Path fileName) {+            try {+                final V parsedObject = YamlParser.parse(Files.newInputStream(fileName), new MapEntityContext<>(entityClass));+                final String fileNameStr = fileName.getFileName().toString();+                String id = determineKeyFromValue(parsedObject, false);+                final String desanitizedId = desanitizeId(fileNameStr.substring(0, fileNameStr.length() - FILE_SUFFIX.length()));+                if (id == null) {+                    id = desanitizedId;+                } else if (! id.endsWith(desanitizedId)) {+                    LOG.warnf(""Filename \""%s\"" does not end with expected id \""%s\"". Fix the file name."", fileNameStr, id);+                }++                parsedObject.setId(id);+                parsedObject.clearUpdatedFlag();++                return parsedObject;+            } catch (IOException ex) {+                LOG.warnf(ex, ""Error reading %s"", fileName);+                return null;+            }+        }++        @Override+        public V create(V value) {+            // TODO: Lock realm directory for changes (e.g. on realm deletion)+            // TODO: Sanitize ID+            String sanitizedId = sanitizeId(value.getId());++            writeYamlContents(getPathForSanitizedId(sanitizedId), value);++            return value;+        }++        @Override+        public String determineKeyFromValue(V value, boolean forCreate) {+            final boolean randomId;+            String[] proposedId = suggestedPath.apply(value);++            if (! forCreate) {+                return proposedId == null ? null : String.join(""/"", proposedId);+            }++            if (proposedId == null || proposedId.length == 0) {+                randomId = value.getId() == null;+                proposedId = new String[] { value.getId() == null ? StringKey.INSTANCE.yieldNewUniqueKey() : value.getId() };+            } else {+                randomId = false;+            }+            String[] baseProposedId = proposedId;++            Path sanitizedId = Path.of(+              sanitizeId(proposedId[0]),+              Stream.of(proposedId).skip(1).map(this::sanitizeId).toArray(String[]::new)+            );++            Path sp = getPathForSanitizedId(sanitizedId);+            for (int counter = 0; counter < 100; counter++) {+                LOG.tracef(""Attempting to create file %s"", sp);+                try {+                    // touch. TODO: Garbage collection upon rollback+                    Files.createFile(sp);+                    return String.join(""/"", proposedId);+                } catch (FileAlreadyExistsException ex) {+                    final String lastComponent = randomId ? StringKey.INSTANCE.yieldNewUniqueKey() : baseProposedId[baseProposedId.length - 1] + ""-"" + counter;+                    proposedId[proposedId.length - 1] = lastComponent;+                    sanitizedId = sanitizedId.resolveSibling(sanitizeId(lastComponent));",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2369),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1088977816,2023-01-27T13:45:19Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/yaml/PathWriter.java,"@@ -0,0 +1,70 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file.yaml;++import java.io.BufferedWriter;+import java.io.Closeable;+import java.io.IOException;+import java.nio.file.Files;+import java.nio.file.Path;+import org.snakeyaml.engine.v2.api.StreamDataWriter;++/**+ *+ * @author hmlnarik+ */+public class PathWriter implements StreamDataWriter, Closeable {++    private final BufferedWriter writer;++    public PathWriter(Path path) throws IOException {+        this.writer = Files.newBufferedWriter(path);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2370),x
6265563,zak905,https://api.github.com/repos/keycloak/keycloak/pulls/15100,1089401790,2023-01-27T20:30:24Z,services/src/main/java/org/keycloak/services/resources/LoginActionsService.java,"@@ -815,6 +815,7 @@ public Response authenticateOnly() throws AuthenticationFlowException {             protected Response authenticationComplete() {                 if (firstBrokerLogin) {                     authSession.setAuthNote(AbstractIdpAuthenticator.FIRST_BROKER_LOGIN_SUCCESS, identityProviderAlias);+                    event.success();","I think only one of the two should be triggered, not both, as you can see here:  https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java#L755however, thanks for drawing my attention to that. Now I need to slightly change the `event.success()` call to be outside of the if. ",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16291,1090401086,2023-01-30T09:57:03Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/LogoutTest.java,"@@ -195,6 +215,110 @@ public void testFrontchannelLogoutInSameBrowser() {         assertLogoutEvent(SAML_CLIENT_ID_SALES_POST);     } +    /**+     * Logout triggered with POST binding, with 2 clients to logout in the SLO process.+     * One of the client is configured with backchannel logout + SOAP logout URL+     */+    @Test+    public void testSoapBackchannelLogout() {+        try (SamlBackchannelLogoutReceiver backchannelLogoutReceiver = new SamlBackchannelLogoutReceiver(8082, sales2Rep.getClientId())) {+            adminClient.realm(REALM_NAME)+                    .clients().get(sales2Rep.getId())+                    .update(ClientBuilder.edit(sales2Rep)",Please use [ClientAttributeUpdater](https://github.com/keycloak/keycloak/blob/60f229f7c09b17d1a59f7e54433695962910dd31/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/LogoutTest.java#L535). We need to clean the changes after the method and the updater takes care of it.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16696,1090537737,2023-01-30T12:04:35Z,.github/actions/conditional/conditions,"@@ -3,10 +3,10 @@ # To test a pattern run '.github/actions/conditional/conditional.sh <remote name> <branch>' # Alternatively, run 'git diff <remote name>/<branch> <pattern>' (from the root directory) -ci=*/pom.xml */src/main/ */src/test/+ci=*/pom.xml */src/main/ */src/test/ .github/actions/ .github/workflows/ -operator=*/pom.xml */src/main/ */src/test/+operator=*/pom.xml */src/main/ */src/test/ .github/actions/ .github/workflows/ -codeql-java=*.java-codeql-themes=themes/-codeql-js_adapter=adapters/oidc/js/\ No newline at end of file+codeql-java=*.java .github/workflows/codeql-analysis.yml",These workflows have dependencies on other files (such as those in `.github/actions`). This means dependent files could be modified without these workflows running.,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/16699,1090638851,2023-01-30T13:40:09Z,common/src/main/java/org/keycloak/common/util/ObjectUtil.java,"@@ -76,4 +79,28 @@ public static boolean isBlank(final CharSequence cs) {         }         return true;     }++    /**+     * Calling:+     * <pre>joinValuesWithLogicalCondition(""or"", Arrays.asList(""foo"", ""bar"", ""baz"", ""caz"" ))</pre>+     * will return ""foo, bar, baz or caz""+     *+     * @param conditionText condition+     * @param values values to be joined with the condition at the end+     * @return see above+     */+    public static String joinValuesWithLogicalCondition(String conditionText, Collection<String> values) {","More like a string utility, no? See org.keycloak.utils.StringUtil. Perhaps we should move this class to core too.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/16497,1090649018,2023-01-30T13:49:23Z,server-spi-private/src/main/java/org/keycloak/requestfilter/IpAccessFilterProviderFactory.java,"@@ -0,0 +1,71 @@+package org.keycloak.requestfilter;++import org.jboss.resteasy.spi.ResteasyProviderFactory;+import org.keycloak.Config;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionFactory;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.provider.ProviderConfigurationBuilder;++import java.util.List;+import java.util.Optional;++public class IpAccessFilterProviderFactory implements RequestFilterProviderFactory {++    public static final String PROVIDER_ID = ""ip-access"";++    @Override+    public IpAccessFilterProvider create(KeycloakSession session) {+        return new IpAccessFilterProvider();+    }++    private boolean isEnabled = false;++    @Override+    public void init(Config.Scope config) {+        this.isEnabled = Optional.ofNullable(config.getBoolean(""enabled"")).orElse(false);+    }++    @Override+    public void postInit(KeycloakSessionFactory factory) {+        if (isEnabled) {+            ResteasyProviderFactory.getInstance().getContainerRequestFilterRegistry()","Ideally, we should do the opposite. Obtain the provider from a platform-specific filter/interceptor and then delegate validation/authorization to the provider.Custom extensions should not rely on the stack we are running. Recently, we did changes to reduce as much as possible the dependency on Resteasy APIs but provide our own API to abstract the underlying stack. For instance, the `RequestFilter` provider should be accepting `org.keycloak.http.HttpRequest` instances to do their job.Pretty much aligned with the discussion we had here https://github.com/keycloak/keycloak/discussions/12481#discussioncomment-2988243. Sorry for not replying to that thread anymore.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16291,1090674140,2023-01-30T14:09:40Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/LogoutTest.java,"@@ -195,6 +215,110 @@ public void testFrontchannelLogoutInSameBrowser() {         assertLogoutEvent(SAML_CLIENT_ID_SALES_POST);     } +    /**+     * Logout triggered with POST binding, with 2 clients to logout in the SLO process.+     * One of the client is configured with backchannel logout + SOAP logout URL+     */+    @Test+    public void testSoapBackchannelLogout() {+        try (SamlBackchannelLogoutReceiver backchannelLogoutReceiver = new SamlBackchannelLogoutReceiver(8082, sales2Rep.getClientId())) {+            adminClient.realm(REALM_NAME)+                    .clients().get(sales2Rep.getId())+                    .update(ClientBuilder.edit(sales2Rep)+                            .frontchannelLogout(false)+                            .attribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_SOAP_ATTRIBUTE, backchannelLogoutReceiver.getUrl())+                            .attribute(SamlConfigAttributes.SAML_SERVER_SIGNATURE, ""true"") // sign logout requests+                            .attribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, ""true"") // Force NameID to username+                            .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, ""username"") // Force NameID to username+                            .build());++            SAMLDocumentHolder samlResponse = prepareLogIntoTwoApps()+                    .logoutRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_SALES_POST, POST)+                    .nameId(nameIdRef::get)+                    .sessionIndex(sessionIndexRef::get)+                    .build()+                    .getSamlResponse(POST);++            assertThat(samlResponse.getSamlObject(), isSamlStatusResponse(JBossSAMLURIConstants.STATUS_SUCCESS));+            assertLogoutEvent(SAML_CLIENT_ID_SALES_POST);++            // check that the logout request sent to the client is compliant and signed+            assertTrue(backchannelLogoutReceiver.isLogoutRequestReceived());+            LogoutRequestType logoutRequest = backchannelLogoutReceiver.getLogoutRequest();+            assertNotNull(backchannelLogoutReceiver.getLogoutRequest().getSignature());+            // check nameID+            assertEquals(logoutRequest.getNameID().getValue(), bburkeUser.getUsername());+        } catch (Exception ex) {+            fail(""unexpected error"");+        }+    }++    /** Logout triggered with SOAP binding, request is properly signed */+    @Test+    public void testSoapBackchannelLogoutFromSamlClient() {+        try {+            adminClient.realm(REALM_NAME)+                    .clients().get(salesSigRep.getId())+                    .update(ClientBuilder.edit(salesSigRep)+                            .frontchannelLogout(false)+                            .attribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, ""true"") // Force NameID to username+                            .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, ""username"") // Force NameID to username+                            .build());++            SAMLDocumentHolder samlLogoutResponse = prepareLogIntoTwoAppsSig()+                    .clearCookies() // remove cookies, since SOAP calls do not embed cookie normally+                    .logoutRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_SALES_POST_SIG, SOAP)+                    .nameId(nameIdRef::get)+                    .sessionIndex(sessionIndexRef::get)+                    .signWith(SAML_CLIENT_SALES_POST_SIG_PRIVATE_KEY, SAML_CLIENT_SALES_POST_SIG_PUBLIC_KEY)+                    .build()+                    .getSamlResponse(SOAP);++            assertThat(samlLogoutResponse.getSamlObject(), isSamlStatusResponse(JBossSAMLURIConstants.STATUS_SUCCESS));+            assertSoapLogoutEvent(SAML_CLIENT_ID_SALES_POST_SIG);++        } catch (Exception ex) {+            ex.printStackTrace();+            fail(""unexpected error"");+        }+    }++    /** Logout triggered with SOAP binding, request is wrongly not signed --> ensure an error is thrown */+    @Test+    public void testSoapBackchannelLogoutFromSamlClientUnsignedRequest() {+        try {+            adminClient.realm(REALM_NAME)+                    .clients().get(salesSigRep.getId())+                    .update(ClientBuilder.edit(salesSigRep)+                            .frontchannelLogout(false)+                            .attribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, ""true"") // Force NameID to username+                            .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, ""username"") // Force NameID to username+                            .build());++            try {+                SAMLDocumentHolder samlLogoutResponse = prepareLogIntoTwoAppsSig()+                        .clearCookies() // remove cookies, since SOAP calls do not embed cookie normally+                        .logoutRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_SALES_POST_SIG, SOAP, true)","If I understand correctly, this test is testing this from spec:```Synchronous Bindings (Back-Channel)Alternatively, the session participant MAY use a synchronous binding, such as the SOAP binding[SAMLBind], to send the request directly to the identity provider. The identity provider SHOULD thenpropagate any required logout messages to additional session participants as required using asynchronous binding. The requester MUST authenticate itself to the identity provider, either by signingthe <LogoutRequest> or using any other binding-supported mechanism.```the last part `The requester MUST authenticate itself ....`.This test is currently passing because of [this check](https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/protocol/saml/SamlService.java#L301-L303). I am wondering, should this test pass also for `SAML_CLIENT_ID_SALES_POST` that does not have `""saml.client.signature""` set to `true`? It does not at the moment, should we add some check that requires a signature for `SOAP` binding regardless of the client settings?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16549,1090709703,2023-01-30T14:38:25Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -324,6 +326,15 @@ public String getProvider() {             .hidden()             .build(); +    public static final Option<String> STORAGE_JPA_DB = new OptionBuilder<>(""storage-jpa-db"", String.class)+            .category(OptionCategory.STORAGE)+            .defaultValue(Database.Vendor.POSTGRES.toString())+            .expectedValues(Database::getAvailableMapStoreAliases)+            .description(""The database vendor for jpa map storage."")+//            .hidden() // todo ??","We expect users to switch databases, so it should not be hidden (see also Pedro's comment). So I suggest to remove this line. ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16700,1090834680,2023-01-30T16:09:27Z,server-spi-private/src/main/java/org/keycloak/models/locking/LockAcquiringTimeoutException.java,"@@ -22,9 +22,7 @@ /**  * This exception is thrown when acquiring a lock times out.  */-public final class LockAcquiringTimeoutException extends Exception {--    private LockAcquiringTimeoutException() {}+public final class LockAcquiringTimeoutException extends RuntimeException {","The default no-args constructor is only created when there is no other constructor. When there is another constructor with parameters, it is not created. To summarize: * before, it was there and private and no-one would be able to call it from outside of the class (except an internal builder, which doesn't apply here).* after, it is now gone and no-one can call it.So I'd argue the new way is cleaner than the old one.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15484,1090988857,2023-01-30T18:21:27Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/CachedRealm.java,"@@ -241,8 +241,7 @@ public CachedRealm(Long revision, RealmModel model) {         requiredCredentials = model.getRequiredCredentialsStream().collect(Collectors.toList());         userActionTokenLifespans = Collections.unmodifiableMap(new HashMap<>(model.getUserActionTokenLifespans())); -        this.identityProviders = model.getIdentityProvidersStream().map(IdentityProviderModel::new)-                .collect(Collectors.toList());+        this.identityProviders = model.getIdentityProvidersStream().collect(Collectors.toList());","Yeah, it is not correct because here we are caching the model by creating another instance and copying data over.We can copy the icon class here https://github.com/keycloak/keycloak/blob/76d9125c3fad117a23d87cd6e6b054007c6770cf/server-spi/src/main/java/org/keycloak/models/IdentityProviderModel.java#L84 and keep it cached.I'm not sure why there is no field set to `displayIconClasses` but it should be OK to have one.",x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1091157604,2023-01-30T21:08:19Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -16,20 +16,372 @@  */ package org.keycloak.models.map.storage.file; +import org.keycloak.models.ClientModel; import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ModelDuplicateException; import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.ExpirableEntity;+import org.keycloak.models.map.common.ExpirationUtils;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.realm.MapRealmEntity; import org.keycloak.models.map.storage.MapKeycloakTransaction; import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapCrudOperations;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.models.map.storage.file.yaml.YamlParser;+import org.keycloak.models.map.storage.file.common.MapEntityContext;+import org.keycloak.models.map.storage.file.yaml.PathWriter;+import org.keycloak.models.map.storage.file.yaml.YamlWritingMechanism;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.attribute.BasicFileAttributes;+import java.util.IdentityHashMap;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Optional;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.stream.Collectors;+import java.util.stream.Stream;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.DumpSettings;+import org.snakeyaml.engine.v2.emitter.Emitter;+import static org.keycloak.utils.StreamsUtil.paginatedStream;  /**  * A file-based {@link MapStorage}.  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-public class FileMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class FileMapStorage<V extends AbstractEntity & UpdatableEntity, M> implements MapStorage<V, M> {++    private static final Logger LOG = Logger.getLogger(FileMapStorage.class);++    // any REALM_ID field would do, they share the same name+    private static final String SEARCHABLE_FIELD_REALM_ID_FIELD_NAME = ClientModel.SearchableFields.REALM_ID.getName();+    private static final String FILE_SUFFIX = "".yaml"";++    private final static DumpSettings DUMP_SETTINGS = DumpSettings.builder()+      .setIndent(4)+      .setIndicatorIndent(2)+      .setIndentWithIndicator(false)+      .build();++    private final Class<V> entityClass;+    private final Crud crud = new Crud();+    private final Function<String, Path> dataDirectoryFunc;+    private final Function<V, String[]> suggestedPath;+    private final boolean isExpirableEntity;+    private final Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates;++    // TODO: Add auxiliary directory for indices, locks etc.+    // private final String auxiliaryFilesDirectory;++    public FileMapStorage(Class<V> entityClass, Function<V, String[]> uniqueHumanReadableField, Function<String, Path> dataDirectoryFunc) {+        this.entityClass = entityClass;+        this.fieldPredicates = new IdentityHashMap<>(MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)));+        this.fieldPredicates.keySet().stream()   // Ignore realmId since this is treated in reading differently+          .filter(f -> Objects.equals(SEARCHABLE_FIELD_REALM_ID_FIELD_NAME, f.getName()))+          .findAny()+          .ifPresent(key -> this.fieldPredicates.replace(key, (builder, op, params) -> builder));+        this.dataDirectoryFunc = dataDirectoryFunc;+        this.suggestedPath = uniqueHumanReadableField == null ? v -> v.getId() == null ? null : new String[] { v.getId() } : uniqueHumanReadableField;+        this.isExpirableEntity = ExpirableEntity.class.isAssignableFrom(entityClass);+    }      @Override     public MapKeycloakTransaction<V, M> createTransaction(KeycloakSession session) {-        return new FileKeycloakTransaction();+        @SuppressWarnings(""unchecked"")+        MapKeycloakTransaction<V, M> sessionTransaction = session.getAttribute(""file-map-transaction-"" + hashCode(), MapKeycloakTransaction.class);++        if (sessionTransaction == null) {+            sessionTransaction = createTransactionInternal(session);+            session.setAttribute(""file-map-transaction-"" + hashCode(), sessionTransaction);+        }+        return sessionTransaction;+    }++    public MapKeycloakTransaction<V, M> createTransactionInternal(KeycloakSession session) {+        return new FileMapKeycloakTransaction<>(entityClass, crud);+    }++    private static boolean canParseFile(Path p, BasicFileAttributes attrs) {+        final String fn = p.getFileName().toString();+        return attrs.isRegularFile()+          && attrs.size() > 0L+          && ! fn.startsWith(""."")+          && fn.endsWith(FILE_SUFFIX)+          && Files.isReadable(p)+        ;+    }++    private class Crud implements ConcurrentHashMapCrudOperations<V, M>, HasRealmId {++        private String defaultRealmId;++        protected Path getPathForSanitizedId(Path sanitizedIdPath) {+            final Path dataDirectory = getDataDirectory();+            final Path dataDirectoryWithChildren = dataDirectory.resolve(sanitizedIdPath).getParent();++            if (! Files.isDirectory(dataDirectoryWithChildren)) {+                try {+                    Files.createDirectories(dataDirectoryWithChildren);+                } catch (IOException ex) {+                    throw new IllegalStateException(""Directory does not exist and cannot be created: "" + dataDirectory, ex);+                }+            }+            return dataDirectoryWithChildren.resolve(sanitizedIdPath.getFileName() + FILE_SUFFIX);+        }++        protected Path getPathForSanitizedId(String sanitizedId) {+            if (sanitizedId == null) {+                throw new IllegalStateException(""Invalid ID to sanitize"");+            }++            return getPathForSanitizedId(Path.of(sanitizedId));+        }++        protected String sanitizeId(String id) {+            Objects.requireNonNull(id, ""ID must be non-null"");++            // TODO: sanitize+//            id = id+//              .replaceAll(""="", ""=e"")+//              .replaceAll("":"", ""=c"")+//              .replaceAll(""/"", ""=s"")+//              .replaceAll(""\\\\"", ""=b"")+//            ;+            final Path pId = Path.of(id);++            // Do not allow absolute paths+            if (pId.isAbsolute()) {+                throw new IllegalStateException(""Illegal ID requested: "" + id);+            }++            return id;+        }++        protected String desanitizeId(String sanitizedId) {+            if (sanitizedId == null) {+                return null;+            }++            return sanitizedId+              .replaceAll(""=c"", "":"")+              .replaceAll(""=s"", ""/"")+              .replaceAll(""=b"", ""\\\\"")+              .replaceAll(""=e"", ""="")+            ;++        }++        protected V parse(Path fileName) {+            try {+                LOG.debugf(""Parsing %s"", fileName);+                final V parsedObject = YamlParser.parse(Files.newInputStream(fileName), new MapEntityContext<>(entityClass));+                final String fileNameStr = fileName.getFileName().toString();+                String id = determineKeyFromValue(parsedObject, false);+                final String desanitizedId = desanitizeId(fileNameStr.substring(0, fileNameStr.length() - FILE_SUFFIX.length()));+                if (id == null) {+                    LOG.debugf(""Determined ID from filename: %s"", desanitizedId);+                    id = desanitizedId;+                } else if (! id.endsWith(desanitizedId)) {+                    LOG.warnf(""Filename \""%s\"" does not end with expected id \""%s\"". Fix the file name."", fileNameStr, id);+                }++                parsedObject.setId(id);+                parsedObject.clearUpdatedFlag();++                return parsedObject;+            } catch (IOException ex) {+                LOG.warnf(ex, ""Error reading %s"", fileName);+                return null;+            }+        }++        @Override+        public V create(V value) {+            // TODO: Lock realm directory for changes (e.g. on realm deletion)+            // TODO: Sanitize ID+            String sanitizedId = sanitizeId(value.getId());++            writeYamlContents(getPathForSanitizedId(sanitizedId), value);++            return value;+        }++        @Override+        public String determineKeyFromValue(V value, boolean forCreate) {+            final boolean randomId;+            String[] proposedId = suggestedPath.apply(value);++            if (! forCreate) {+                return proposedId == null ? null : String.join(""/"", proposedId);+            }++            if (proposedId == null || proposedId.length == 0) {+                randomId = value.getId() == null;+                proposedId = new String[] { value.getId() == null ? StringKey.INSTANCE.yieldNewUniqueKey() : value.getId() };+            } else {+                randomId = false;+            }++            Path sanitizedId = Path.of(+              sanitizeId(proposedId[0]),+              Stream.of(proposedId).skip(1).map(this::sanitizeId).toArray(String[]::new)+            );++            Path sp = getPathForSanitizedId(sanitizedId);+            for (int counter = 0; counter < 100; counter++) {+                LOG.tracef(""Attempting to create file %s"", sp);+                try {+                    // touch. TODO: Garbage collection upon rollback+                    Files.createFile(sp);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2372),x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16700,1091536339,2023-01-31T07:20:53Z,server-spi-private/src/main/java/org/keycloak/models/locking/LockAcquiringTimeoutException.java,"@@ -22,9 +22,7 @@ /**  * This exception is thrown when acquiring a lock times out.  */-public final class LockAcquiringTimeoutException extends Exception {--    private LockAcquiringTimeoutException() {}+public final class LockAcquiringTimeoutException extends RuntimeException {","You are right. Sorry, it turned out I forgot how the no-argument constructor behaves when there is some parameteric added :man_facepalming: ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16595,1091735511,2023-01-31T10:30:42Z,docs/antora/ccutil/guides-operator/master.adoc,"@@ -0,0 +1,7 @@+:toc:+:toclevels: 3+:numbered:+:linkattrs:++include::guides-operator/20.0/guides-keycloak-operator-ccutil.adoc[]","done, this is now using an unversioned Antora component, so it is no longer part of the path.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16595,1091735664,2023-01-31T10:30:50Z,docs/antora/ccutil/guides-server/master.adoc,"@@ -0,0 +1,7 @@+:toc:+:toclevels: 3+:numbered:+:linkattrs:++include::guides-server/20.0/guides-keycloak-server-ccutil.adoc[]","done, this is now using an unversioned Antora component, so it is no longer part of the path.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16728,1091855330,2023-01-31T12:28:06Z,.github/actions/conditional/conditional.sh,"@@ -4,51 +4,64 @@ REMOTE=$1 BASE_REF=$2  if [ ""$BASE_REF"" != """" ]; then+  # Fetch ref if running in GitHub Actions   if [ ""$GITHUB_OUTPUT"" != """" ]; then-    echo ""--------------------------------------------------------------------------------""+    echo ""========================================================================================""     echo ""Fetching '$BASE_REF' in '`git remote get-url $REMOTE`'""     echo ""--------------------------------------------------------------------------------""     git fetch --depth 1 $REMOTE $BASE_REF   fi -  echo ""--------------------------------------------------------------------------------""+  echo ""========================================================================================""   echo ""Changes compared to '$BASE_REF' in '`git remote get-url $REMOTE`'""-  echo ""--------------------------------------------------------------------------------""-  git diff $REMOTE/$BASE_REF --name-only+  echo ""----------------------------------------------------------------------------------------""+  CHANGES=`git diff $REMOTE/$BASE_REF --name-only`+  echo ""$CHANGES""+fi++echo ""========================================================================================""+if [ ""$BASE_REF"" != """" ]; then+  echo ""Patterns""+  echo ""----------------------------------------------------------------------------------------"" else-  echo ""--------------------------------------------------------------------------------""   echo ""Not a pull request, marking everything as changed"" fi -echo ""--------------------------------------------------------------------------------""-echo ""Run conditions""-echo ""--------------------------------------------------------------------------------""+declare -A CHANGED+readarray -t CONDITIONS <<< `cat "".github/actions/conditional/conditions"" | grep -v '^[ ]*#' | grep -v '^[ ]*$'` -cat .github/actions/conditional/conditions | grep '=' | grep -v '#' | while read c; do-  KEY=`echo $c | cut -d '=' -f 1`-  PATTERN=`echo $c | cut -d '=' -f 2`+for CONDITION in ""${CONDITIONS[@]}""; do","It goes through the applicable lines in the conditions file, and ""returns"" an array with what workflows/jobs should be ran based on if it's matching the pattern.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/16736,1092061310,2023-01-31T15:02:17Z,quarkus/runtime/src/main/resources/application.properties,"@@ -30,7 +30,7 @@ quarkus.package.include-dependency-list=false quarkus.devservices.enabled=false  # We want to expose non-application paths (e.g. health) at the root path-quarkus.http.non-application-root-path=${quarkus.http.root-path}+quarkus.http.non-application-root-path=/${quarkus.http.root-path}",I see your point. But doing it programmatically will introduce unnecessary complexity. Quarkus is doing this already.We have tests covering this so that they will fail if something goes wrong.,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16728,1092076924,2023-01-31T15:13:33Z,.github/actions/conditional/conditional.sh,"@@ -1,54 +1,86 @@ #!/bin/bash -e -REMOTE=$1-BASE_REF=$2+REMOTE=""$1""+BASE_REF=""$2"" -if [ ""$BASE_REF"" != """" ]; then-  if [ ""$GITHUB_OUTPUT"" != """" ]; then-    echo ""--------------------------------------------------------------------------------""-    echo ""Fetching '$BASE_REF' in '`git remote get-url $REMOTE`'""+CONDITIONS_FILE="".github/actions/conditional/conditions""++[ ""$BASE_REF"" != """" ] && IS_PR=true || IS_PR=false+[ ""$GITHUB_OUTPUT"" != """" ] && IS_GITHUB_ACTIONS=true || IS_GITHUB_ACTIONS=false++if [ ""$IS_PR"" == true ]; then+  # Fetch remote if running on GitHub Actions+  if [ ""$IS_GITHUB_ACTIONS"" == true ]; then+    echo ""========================================================================================""+    echo ""Fetching '$BASE_REF' in '$(git remote get-url ""$REMOTE"")'""     echo ""--------------------------------------------------------------------------------""-    git fetch --depth 1 $REMOTE $BASE_REF+    git fetch --depth 1 ""$REMOTE"" ""$BASE_REF""   fi -  echo ""--------------------------------------------------------------------------------""-  echo ""Changes compared to '$BASE_REF' in '`git remote get-url $REMOTE`'""-  echo ""--------------------------------------------------------------------------------""-  git diff $REMOTE/$BASE_REF --name-only+  # Get list of changes files+  echo ""========================================================================================""+  echo ""Changes compared to '$BASE_REF' in '$(git remote get-url ""$REMOTE"")'""+  echo ""----------------------------------------------------------------------------------------""+  CHANGED_FILES=$(git diff ""$REMOTE/$BASE_REF"" --name-only)+  echo ""$CHANGED_FILES""+fi++echo ""========================================================================================""+if [ ""$IS_PR"" == true ]; then+  echo ""Matching regex""+  echo ""----------------------------------------------------------------------------------------"" else-  echo ""--------------------------------------------------------------------------------""   echo ""Not a pull request, marking everything as changed"" fi -echo ""--------------------------------------------------------------------------------""-echo ""Run conditions""-echo ""--------------------------------------------------------------------------------""+declare -A JOB_CONDITIONS++readarray -t CONDITIONS <<< ""$(cat ""$CONDITIONS_FILE"" | grep -v '^[ ]*#' | grep -v '^[ ]*$')""++for C in ""${CONDITIONS[@]}""; do+  read -r -a CONDITION <<< ""$C"" -cat .github/actions/conditional/conditions | grep '=' | grep -v '#' | while read c; do-  KEY=`echo $c | cut -d '=' -f 1`-  PATTERN=`echo $c | cut -d '=' -f 2`+  if [ ""$IS_PR"" == true ]; then+    PATTERN=""${CONDITION[0]}"" -  if [ ""$BASE_REF"" != """" ]; then-    DIFF=`echo $PATTERN | xargs git diff $REMOTE/$BASE_REF --name-only`-    if [ ""$DIFF"" != """" ]; then-      CHANGED=true+    # Convert pattern to regex+    REGEX=$(echo ""$PATTERN"" | sed 's|\.|[.]|g' | sed 's|/$|/.*|g' | sed 's|^*|.*|g')",This only covers simple pattern cases but fails for e.g. `*/src/test/*.java` which is translated to`.*/src/test/*[.]java`while it should be`.*/src/test/.*[.]java`I would incline to simply use regexes directly in the `conditions` file rather than translating. I leave to your discretion whether you'd like to follow this suggestion.,x
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16728,1092095541,2023-01-31T15:27:25Z,.github/actions/conditional/conditional.sh,"@@ -1,54 +1,86 @@ #!/bin/bash -e -REMOTE=$1-BASE_REF=$2+REMOTE=""$1""+BASE_REF=""$2"" -if [ ""$BASE_REF"" != """" ]; then-  if [ ""$GITHUB_OUTPUT"" != """" ]; then-    echo ""--------------------------------------------------------------------------------""-    echo ""Fetching '$BASE_REF' in '`git remote get-url $REMOTE`'""+CONDITIONS_FILE="".github/actions/conditional/conditions""++[ ""$BASE_REF"" != """" ] && IS_PR=true || IS_PR=false+[ ""$GITHUB_OUTPUT"" != """" ] && IS_GITHUB_ACTIONS=true || IS_GITHUB_ACTIONS=false++if [ ""$IS_PR"" == true ]; then+  # Fetch remote if running on GitHub Actions+  if [ ""$IS_GITHUB_ACTIONS"" == true ]; then+    echo ""========================================================================================""+    echo ""Fetching '$BASE_REF' in '$(git remote get-url ""$REMOTE"")'""     echo ""--------------------------------------------------------------------------------""-    git fetch --depth 1 $REMOTE $BASE_REF+    git fetch --depth 1 ""$REMOTE"" ""$BASE_REF""   fi -  echo ""--------------------------------------------------------------------------------""-  echo ""Changes compared to '$BASE_REF' in '`git remote get-url $REMOTE`'""-  echo ""--------------------------------------------------------------------------------""-  git diff $REMOTE/$BASE_REF --name-only+  # Get list of changes files+  echo ""========================================================================================""+  echo ""Changes compared to '$BASE_REF' in '$(git remote get-url ""$REMOTE"")'""+  echo ""----------------------------------------------------------------------------------------""+  CHANGED_FILES=$(git diff ""$REMOTE/$BASE_REF"" --name-only)+  echo ""$CHANGED_FILES""+fi++echo ""========================================================================================""+if [ ""$IS_PR"" == true ]; then+  echo ""Matching regex""+  echo ""----------------------------------------------------------------------------------------"" else-  echo ""--------------------------------------------------------------------------------""   echo ""Not a pull request, marking everything as changed"" fi -echo ""--------------------------------------------------------------------------------""-echo ""Run conditions""-echo ""--------------------------------------------------------------------------------""+declare -A JOB_CONDITIONS++readarray -t CONDITIONS <<< ""$(cat ""$CONDITIONS_FILE"" | grep -v '^[ ]*#' | grep -v '^[ ]*$')""++for C in ""${CONDITIONS[@]}""; do+  read -r -a CONDITION <<< ""$C"" -cat .github/actions/conditional/conditions | grep '=' | grep -v '#' | while read c; do-  KEY=`echo $c | cut -d '=' -f 1`-  PATTERN=`echo $c | cut -d '=' -f 2`+  if [ ""$IS_PR"" == true ]; then+    PATTERN=""${CONDITION[0]}"" -  if [ ""$BASE_REF"" != """" ]; then-    DIFF=`echo $PATTERN | xargs git diff $REMOTE/$BASE_REF --name-only`-    if [ ""$DIFF"" != """" ]; then-      CHANGED=true+    # Convert pattern to regex+    REGEX=$(echo ""$PATTERN"" | sed 's|\.|[.]|g' | sed 's|/$|/.*|g' | sed 's|^*|.*|g')","I didn't want to use regex in the conditions file itself as it makes it hard to maintain. We can tune/extend on it if needed based on what patterns we want to support. It's mostly at the moment trying to support what's supported in CODEOWNERS, to have some consistency cross the two.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16761,1092975225,2023-02-01T09:36:50Z,testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/WelcomeScreenTest.java,"@@ -141,7 +143,7 @@ public void resourcesTest() {          // test my resources appeared         accountWelcomeScreen.navigateTo();-        accountWelcomeScreen.assertMyResourcesCardVisible(true);+        Retry.execute(() -> accountWelcomeScreen.assertMyResourcesCardVisible(true), 10, 500);","I think the correct fix would be either to use [`WaitUtils.waitUntilElement`](https://github.com/keycloak/keycloak/blob/2ddfc9449563cd703724b960a20d2bc000a68eb6/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/WaitUtils.java#L62-L64), or maybe even tweak a bit [`waitForPageToLoad`](https://github.com/keycloak/keycloak/blob/2ddfc9449563cd703724b960a20d2bc000a68eb6/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/WaitUtils.java#L165). It might also help other flaky tests.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/16762,1093234964,2023-02-01T13:38:24Z,services/src/main/java/org/keycloak/social/google/GoogleIdentityProvider.java,"@@ -100,11 +101,11 @@ protected UriBuilder createAuthorizationUrl(AuthenticationRequest request) {         if (hostedDomain != null) {             uriBuilder.queryParam(OIDC_PARAMETER_HOSTED_DOMAINS, hostedDomain);",How does Google behave when setting a comma-separated list of domains?,
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093359408,2023-02-01T15:13:17Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapKeycloakTransaction.java,"@@ -0,0 +1,139 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file;+++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapKeycloakTransaction;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.StandardCopyOption;+import java.util.IdentityHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.function.Function;++/**+ * {@link MapKeycloakTransaction} implementation used with the file map storage.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class FileMapKeycloakTransaction<V extends AbstractEntity & UpdatableEntity, M>+  extends ConcurrentHashMapKeycloakTransaction<String, V, M> {++    private final List<Path> touchedPaths = new LinkedList<>();+    private Map<Path, Path> renameOnCommit = new IdentityHashMap<>();++    private final String txId = StringKey.INSTANCE.yieldNewUniqueKey();++    public static <V extends AbstractEntity & UpdatableEntity, M> FileMapKeycloakTransaction<V, M> newInstance(Class<V> entityClass,+      Function<String, Path> dataDirectoryFunc, Function<V, String[]> suggestedPath,+      boolean isExpirableEntity, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        Crud<V, M> crud = new Crud<>(entityClass, dataDirectoryFunc, suggestedPath, isExpirableEntity, fieldPredicates);+        FileMapKeycloakTransaction<V, M> tx = new FileMapKeycloakTransaction<>(entityClass, crud);+        crud.tx = tx;+        return tx;+    }++    private FileMapKeycloakTransaction(Class<V> entityClass, Crud crud) {+        super(+          crud,+          StringKeyConverter.StringKey.INSTANCE,+          DeepCloner.DUMB_CLONER,+          MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)),+          ModelEntityUtil.getRealmIdField(entityClass)+        );+    }++    @Override+    public void rollback() {+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+        super.rollback();+    }++    @Override+    public void commit() {+        super.commit();+        renameOnCommit.forEach(FileMapKeycloakTransaction::silentMove);+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+    }++    private static void silentMove(Path from, Path to) {+        try {+            Files.move(from, to, StandardCopyOption.REPLACE_EXISTING);+        } catch (IOException ex) {+            // Swallow the exception+        }+    }++    private static void silentDelete(Path p) {+        try {+            if (Files.exists(p) && Files.size(p) == 0) {+                Files.delete(p);+            }+        } catch (IOException e) {+            // Swallow the exception+        }+    }++    public void touch(Path path) throws FileAlreadyExistsException, IOException {+        Files.createFile(path);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2377),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093359417,2023-02-01T15:13:17Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorageProviderFactory.java,"@@ -54,7 +105,42 @@      @Override     public void init(Config.Scope config) {-        this.config = config;+        final String dir = config.get(""dir"");+        rootRealmsDirectory = dir == null ? null : Path.of(dir);+        getModelNames().stream()+          .filter(n -> ! Objects.equals(n, getModelName(RealmModel.class)))+          .forEach(n -> rootAreaDirectories.put(n, getRootDir(rootRealmsDirectory, n, config.get(""dir."" + n))));++        if (rootAreaDirectories != null) {+            rootAreaDirectories.put(getModelName(RealmModel.class), realmId -> realmId == null ? rootRealmsDirectory : rootRealmsDirectory.resolve(realmId) );+        }+    }++    private static final Pattern FORBIDDEN_CHARACTERS = Pattern.compile(""[\\.\\"" + File.separator + ""]"");++    private static Function<String, Path> getRootDir(Path rootRealmsDirectory, String areaName, String dirFromConfig) {+        if (dirFromConfig != null) {+            Path p = Path.of(dirFromConfig);+            return realmId -> p;+        } else {+            if (rootRealmsDirectory == null) {+                return p -> { throw new IllegalStateException(""Directory for "" + areaName + "" area not configured.""); };+            }++            String a = areaName.startsWith(""authz-"") ? ""authz"" : areaName;++            return realmId -> {+              if (realmId == null || FORBIDDEN_CHARACTERS.matcher(realmId).find()) {+                  throw new IllegalArgumentException(""Realm needed for constructing the path to "" + areaName + "" but not known or invalid: "" + realmId);+              }++              final Path path = rootRealmsDirectory+                .resolve(realmId)+                .resolve(a);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2378),x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093380002,2023-02-01T15:28:04Z,model/map-file/pom.xml,"@@ -28,15 +28,29 @@      <artifactId>keycloak-model-map-file</artifactId>     <name>Keycloak Model Map File</name>+    <build>+        <plugins>+            <plugin>+                <groupId>org.apache.maven.plugins</groupId>+                <artifactId>maven-compiler-plugin</artifactId>+                <version>2.3.2</version>+                <configuration>+                    <source>11</source>+                    <target>11</target>+                </configuration>+            </plugin>+        </plugins>+    </build>     <dependencies>         <dependency>             <groupId>org.keycloak</groupId>             <artifactId>keycloak-model-map</artifactId>         </dependency>+         <dependency>-            <groupId>junit</groupId>-            <artifactId>junit</artifactId>-            <scope>test</scope>+            <groupId>org.snakeyaml</groupId>+            <artifactId>snakeyaml-engine</artifactId>+            <version>2.5</version>",Shouldn't we declare the version (and maybe the dependency as well) within `keycloak/pom.xml`?,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093390371,2023-02-01T15:35:52Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/common/BlockContext.java,"@@ -0,0 +1,231 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file.common;++import org.keycloak.models.map.common.UndefinedValuesUtils;+import org.keycloak.models.map.storage.file.yaml.YamlParser;+import java.util.Collection;+import java.util.LinkedHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.TreeMap;+import static org.keycloak.models.map.common.CastUtils.cast;++/**+ * A class implementing a {@code YamlContext} interface represents a transformer",```suggestion * A class implementing a {@code BlockContext} interface represents a transformer```,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093454609,2023-02-01T16:25:05Z,model/map/src/main/java/org/keycloak/models/map/common/CastUtils.java,"@@ -0,0 +1,68 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.common;++import java.util.Objects;+import java.util.function.Function;++/**+ *",A brief comment about the purpose of this class and when it should be used would be great (think Responsibilities and Collaborators in CRC).,
40686856,lagess,https://api.github.com/repos/keycloak/keycloak/pulls/16291,1093456483,2023-02-01T16:26:43Z,services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java,"@@ -608,8 +615,12 @@ protected String getSAMLNameId(      public static String getLogoutServiceUrl(KeycloakSession session, ClientModel client, String bindingType, boolean backChannelLogout) {         String logoutServiceUrl = null;-        // backchannel logout doesn't support sending artifacts-        if (!backChannelLogout && useArtifactForLogout(client)) {++        if (SAML_SOAP_BINDING.equals(bindingType)) {","I do not think we should: the parameters in this function do no make much sense and are mainly related to the legacy behavior of the relationship between binding and front/backchannel.If SOAP Binding is requested, it must be backchannel.We could check for frontchannel + soap-binding and throw some exception in that case. But if we hit the exception, then it means that there is an implementation issue.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093459133,2023-02-01T16:28:49Z,model/map/src/main/java/org/keycloak/models/map/common/CastUtils.java,"@@ -0,0 +1,68 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.common;++import java.util.Objects;+import java.util.function.Function;++/**+ *+ * @author hmlnarik+ */+public class CastUtils {+    +    @SuppressWarnings(""unchecked"")+    public static <T> T cast(Object value, Class<T> toClass) {+        return value == null ? null : (T) ((Function) getCastFunc(value.getClass(), toClass)).apply(value);+    }++    public static <E extends Enum<E>> Function<?, ?> getCastFunc(Class<?> fromClass, Class<?> toClass) {+        if (fromClass == toClass || toClass.isAssignableFrom(fromClass)) {+            return Function.identity();+        }+        if (toClass == String.class) {+            return Objects::toString;+        }+        if (fromClass == String.class) {+            if (toClass == Integer.class) {+                return (String s) -> Integer.valueOf(s);+            } else if (toClass == Long.class) {+                return (String s) -> Long.valueOf(s);+            } else if (toClass == Boolean.class) {+                return (String s) -> Boolean.valueOf(s);","For the `valueOf()`s, my IDE suggests a method reference instead of a lambda. Same for `intValue()` and `longValue()` below.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093472014,2023-02-01T16:39:14Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/ConcurrentHashMapKeycloakTransaction.java,"@@ -136,13 +151,16 @@ public V read(String sKey) {         try {              // TODO: Consider using Optional rather than handling NPE             final V entity = read(sKey, map::read);-            return registerEntityForChanges(entity);+            if (entity == null) {+                log.debugf(""Could not read object for key %s"", sKey);+            }+            return postProcess(registerEntityForChanges(entity));","AFAIK `registerEntityForChanges(entity)` will throw a NPE when entity is null, as the first statement in that method is ` .getId()` on the entity parameter. So I don't understand why the change to check the entity and log a debug statement was added. Is it maybe missing a return statement with null just after the new debug statement?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093473734,2023-02-01T16:40:39Z,model/map/src/main/java/org/keycloak/models/map/storage/criteria/DefaultModelCriteria.java,"@@ -16,177 +16,26 @@  */ package org.keycloak.models.map.storage.criteria; -import org.keycloak.models.map.storage.ModelCriteriaBuilder;-import org.keycloak.models.map.storage.criteria.ModelCriteriaNode.ExtOperator;-import org.keycloak.storage.SearchableModelField;-import java.util.concurrent.atomic.AtomicBoolean;-import java.util.stream.Stream;- /**- * Descriptive model criteria implementation which in other words represents a Boolean formula on searchable fields.+ *",I see you removed the description for this class and move it to the new class. What's the purpose of this remaining class?,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093478271,2023-02-01T16:44:27Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/common/BlockContext.java,"@@ -0,0 +1,231 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file.common;++import org.keycloak.models.map.common.UndefinedValuesUtils;+import org.keycloak.models.map.storage.file.yaml.YamlParser;+import java.util.Collection;+import java.util.LinkedHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.TreeMap;+import static org.keycloak.models.map.common.CastUtils.cast;++/**+ * A class implementing a {@code YamlContext} interface represents a transformer+ * from a primitive value / sequence / mapping representation as declared in YAML+ * format into a Java object of type {@code V}, with ability to produce+ * the {@link #getResult() resulting instance} of parsing.+ *+ * <p>+ * NOTE: In the future, this transformer might also cover the other direction:+ * conversion from Java object into YAML primitive value / sequence / mapping representation.+ *+ * <p>+ * This transformer handles only a single nesting level in YAML file. The root level+ * is at the beginning of YAML document. Every mapping key and every sequence then+ * represents next level of nesting.+ *+ * @author hmlnarik+ * @param <V> Type of the result+ */+public interface BlockContext<V> {++    /**+     * Writes the given value using {@link WritingMechanism}.+     *+     * @param value+     * @param mech","These parameters didn't receive a description. If they don't need a description, I suggest to remove those lines. My IDE warns me about those, applies to other places as well, and also to `@return` without a description.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093492849,2023-02-01T16:55:15Z,model/build-processor/src/main/java/org/keycloak/models/map/processor/Util.java,"@@ -46,7 +47,7 @@ public class Util {      private static final Set<String> LIST_TYPES = Set.of(List.class.getCanonicalName(), ArrayList.class.getCanonicalName(), LinkedList.class.getCanonicalName());-    private static final Set<String> SET_TYPES = Set.of(Set.class.getCanonicalName(), TreeSet.class.getCanonicalName(), HashSet.class.getCanonicalName(), LinkedHashSet.class.getCanonicalName());+    private static final Set<String> SET_TYPES = Set.of(Set.class.getCanonicalName(), TreeSet.class.getCanonicalName(), HashSet.class.getCanonicalName(), LinkedHashSet.class.getCanonicalName(), Collection.class.getCanonicalName());","Reason is that it has to be listed either within `LIST_TYPES` or `SET_TYPES` to generate `EntityField.getCollectionElementClass` method, and collection generally does not guarantee the order, so it is not a `List` type.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1093500901,2023-02-01T17:01:42Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapKeycloakTransaction.java,"@@ -0,0 +1,139 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file;+++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapKeycloakTransaction;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.StandardCopyOption;+import java.util.IdentityHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.function.Function;++/**+ * {@link MapKeycloakTransaction} implementation used with the file map storage.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class FileMapKeycloakTransaction<V extends AbstractEntity & UpdatableEntity, M>+  extends ConcurrentHashMapKeycloakTransaction<String, V, M> {++    private final List<Path> touchedPaths = new LinkedList<>();+    private Map<Path, Path> renameOnCommit = new IdentityHashMap<>();++    private final String txId = StringKey.INSTANCE.yieldNewUniqueKey();++    public static <V extends AbstractEntity & UpdatableEntity, M> FileMapKeycloakTransaction<V, M> newInstance(Class<V> entityClass,+      Function<String, Path> dataDirectoryFunc, Function<V, String[]> suggestedPath,+      boolean isExpirableEntity, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        Crud<V, M> crud = new Crud<>(entityClass, dataDirectoryFunc, suggestedPath, isExpirableEntity, fieldPredicates);+        FileMapKeycloakTransaction<V, M> tx = new FileMapKeycloakTransaction<>(entityClass, crud);+        crud.tx = tx;+        return tx;+    }++    private FileMapKeycloakTransaction(Class<V> entityClass, Crud crud) {+        super(+          crud,+          StringKeyConverter.StringKey.INSTANCE,+          DeepCloner.DUMB_CLONER,+          MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)),+          ModelEntityUtil.getRealmIdField(entityClass)+        );+    }++    @Override+    public void rollback() {+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+        super.rollback();+    }++    @Override+    public void commit() {+        super.commit();+        renameOnCommit.forEach(FileMapKeycloakTransaction::silentMove);+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+    }++    private static void silentMove(Path from, Path to) {","Those `silent()` methods swallow exceptions, which can be dangerous. I don't see any JavaDoc indicating when it should be used and when not. Please advise when it is a good idea to swallow those. I just assume bad things can happend when something isn't deleted that is supposed to be deleted, or not moved when it was supposed to be moved.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1094325779,2023-02-02T10:21:23Z,model/map-file/pom.xml,"@@ -28,15 +28,29 @@      <artifactId>keycloak-model-map-file</artifactId>     <name>Keycloak Model Map File</name>+    <build>+        <plugins>+            <plugin>+                <groupId>org.apache.maven.plugins</groupId>+                <artifactId>maven-compiler-plugin</artifactId>+                <version>2.3.2</version>+                <configuration>+                    <source>11</source>+                    <target>11</target>+                </configuration>","Good spot. This is partly correct - the compiler plugin remained here due to historical reasons and will be fixed with the new commit.As for forcing the JDK version, it is set to be 11 (due to Keycloak source requirement inconsistency) similarly to e.g. quarkus module: https://github.com/keycloak/keycloak/blob/51bed81814574d254c07f091936483cf97716fa7/quarkus/pom.xml#L52-L54",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1094380886,2023-02-02T11:12:43Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapKeycloakTransaction.java,"@@ -0,0 +1,139 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file;+++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapKeycloakTransaction;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.StandardCopyOption;+import java.util.IdentityHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.function.Function;++/**+ * {@link MapKeycloakTransaction} implementation used with the file map storage.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class FileMapKeycloakTransaction<V extends AbstractEntity & UpdatableEntity, M>+  extends ConcurrentHashMapKeycloakTransaction<String, V, M> {++    private final List<Path> touchedPaths = new LinkedList<>();+    private Map<Path, Path> renameOnCommit = new IdentityHashMap<>();++    private final String txId = StringKey.INSTANCE.yieldNewUniqueKey();++    public static <V extends AbstractEntity & UpdatableEntity, M> FileMapKeycloakTransaction<V, M> newInstance(Class<V> entityClass,+      Function<String, Path> dataDirectoryFunc, Function<V, String[]> suggestedPath,+      boolean isExpirableEntity, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        Crud<V, M> crud = new Crud<>(entityClass, dataDirectoryFunc, suggestedPath, isExpirableEntity, fieldPredicates);+        FileMapKeycloakTransaction<V, M> tx = new FileMapKeycloakTransaction<>(entityClass, crud);+        crud.tx = tx;+        return tx;+    }++    private FileMapKeycloakTransaction(Class<V> entityClass, Crud crud) {+        super(+          crud,+          StringKeyConverter.StringKey.INSTANCE,+          DeepCloner.DUMB_CLONER,+          MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)),+          ModelEntityUtil.getRealmIdField(entityClass)+        );+    }++    @Override+    public void rollback() {+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+        super.rollback();+    }++    @Override+    public void commit() {+        super.commit();+        renameOnCommit.forEach(FileMapKeycloakTransaction::silentMove);+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+    }++    private static void silentMove(Path from, Path to) {","These are private methods of `FileMapKeycloakTransaction`. I've updated the `silentMove` to throw an exception if it cannot finish its job as it can spoil the filesystem, but failed removal does not lead to inconsistency.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/16771,1094423136,2023-02-02T11:54:48Z,services/src/main/java/org/keycloak/broker/saml/mappers/AdvancedAttributeToGroupMapper.java,"@@ -0,0 +1,145 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.broker.saml.mappers;++/**+ * @author <a href=""mailto:denis.bernard@avanade.com"">Denis Bernard</a>","Sorry, just like other classes you are adding, the `@author` should be right above the class declaration.",x
40686856,lagess,https://api.github.com/repos/keycloak/keycloak/pulls/16291,1094771782,2023-02-02T16:28:17Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/LogoutTest.java,"@@ -195,6 +215,110 @@ public void testFrontchannelLogoutInSameBrowser() {         assertLogoutEvent(SAML_CLIENT_ID_SALES_POST);     } +    /**+     * Logout triggered with POST binding, with 2 clients to logout in the SLO process.+     * One of the client is configured with backchannel logout + SOAP logout URL+     */+    @Test+    public void testSoapBackchannelLogout() {+        try (SamlBackchannelLogoutReceiver backchannelLogoutReceiver = new SamlBackchannelLogoutReceiver(8082, sales2Rep.getClientId())) {+            adminClient.realm(REALM_NAME)+                    .clients().get(sales2Rep.getId())+                    .update(ClientBuilder.edit(sales2Rep)+                            .frontchannelLogout(false)+                            .attribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_SOAP_ATTRIBUTE, backchannelLogoutReceiver.getUrl())+                            .attribute(SamlConfigAttributes.SAML_SERVER_SIGNATURE, ""true"") // sign logout requests+                            .attribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, ""true"") // Force NameID to username+                            .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, ""username"") // Force NameID to username+                            .build());++            SAMLDocumentHolder samlResponse = prepareLogIntoTwoApps()+                    .logoutRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_SALES_POST, POST)+                    .nameId(nameIdRef::get)+                    .sessionIndex(sessionIndexRef::get)+                    .build()+                    .getSamlResponse(POST);++            assertThat(samlResponse.getSamlObject(), isSamlStatusResponse(JBossSAMLURIConstants.STATUS_SUCCESS));+            assertLogoutEvent(SAML_CLIENT_ID_SALES_POST);++            // check that the logout request sent to the client is compliant and signed+            assertTrue(backchannelLogoutReceiver.isLogoutRequestReceived());+            LogoutRequestType logoutRequest = backchannelLogoutReceiver.getLogoutRequest();+            assertNotNull(backchannelLogoutReceiver.getLogoutRequest().getSignature());+            // check nameID+            assertEquals(logoutRequest.getNameID().getValue(), bburkeUser.getUsername());+        } catch (Exception ex) {+            fail(""unexpected error"");+        }+    }++    /** Logout triggered with SOAP binding, request is properly signed */+    @Test+    public void testSoapBackchannelLogoutFromSamlClient() {+        try {+            adminClient.realm(REALM_NAME)+                    .clients().get(salesSigRep.getId())+                    .update(ClientBuilder.edit(salesSigRep)+                            .frontchannelLogout(false)+                            .attribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, ""true"") // Force NameID to username+                            .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, ""username"") // Force NameID to username+                            .build());++            SAMLDocumentHolder samlLogoutResponse = prepareLogIntoTwoAppsSig()+                    .clearCookies() // remove cookies, since SOAP calls do not embed cookie normally",This is to avoid that the cookie is used for retrieving the user session when the logout request is received. I want to ensure that the session index contained in the logout request is used for determining the session to disconnect (i.e. that [this code](https://github.com/keycloak/keycloak/blob/022d2864a6fa71bd97c6f4ac86de178f8bdcfbd6/services/src/main/java/org/keycloak/protocol/saml/SamlService.java#L585) is used).,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16802,1095421817,2023-02-03T07:08:59Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -288,8 +288,10 @@ protected EntityManager getEntityManager() {             if (lockTimeout != null) {                 em.unwrap(SessionImpl.class)                         .doWork(connection -> {-                            PreparedStatement preparedStatement = connection.prepareStatement(""SET LOCAL lock_timeout = '"" + lockTimeout + ""';"");-                            preparedStatement.execute();+                            try (PreparedStatement preparedStatement = connection.prepareStatement(""SET LOCAL lock_timeout = ?"")) {+                                preparedStatement.setString(1, String.valueOf(lockTimeout));","I tried to use parameters here, however, it seemed that something (Postgres/Hibernate) support paremeters only for some SQL commands and the way I understood it `SET` is not between them. But would be great if you were able to make it work.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16802,1095423729,2023-02-03T07:12:19Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -288,8 +288,10 @@ protected EntityManager getEntityManager() {             if (lockTimeout != null) {                 em.unwrap(SessionImpl.class)                         .doWork(connection -> {-                            PreparedStatement preparedStatement = connection.prepareStatement(""SET LOCAL lock_timeout = '"" + lockTimeout + ""';"");-                            preparedStatement.execute();+                            try (PreparedStatement preparedStatement = connection.prepareStatement(""SET LOCAL lock_timeout = ?"")) {+                                preparedStatement.setString(1, String.valueOf(lockTimeout));","> I tried to use parameters here, however, it seemed that something (Postgres/Hibernate) support parameters only for some SQL commands and the way I understood it SET is not between them. But would be great if you were able to make it work.I've seen it work for CRDB, and now see it failing for PostgreSQL on GHA. Can only try it locally next week again. Will add comment that parameters won't work here. BTW: This is plain PostgreSQL JDBC, no Hibernate involved here as we're asking for a direct JDBC connection. ",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16783,1095554186,2023-02-03T09:26:21Z,pom.xml,"@@ -311,6 +311,13 @@                 <groupId>com.squareup.okhttp3</groupId>                 <artifactId>okhttp</artifactId>                 <version>${okhttp.version}</version>+                <!-- Library with known vulnerability and no fixed version -->+                <exclusions>+                    <exclusion>+                        <groupId>org.jetbrains.kotlin</groupId>+                        <artifactId>kotlin-stdlib</artifactId>+                    </exclusion>+                </exclusions>","Does this actually work? Not sure this would exclude `kotlin-stdlib` from the dist, and also not sure if `okhttp` will actually work without this dependency included.Another option is to get rid of `okhttp` completely, which I think is only needed due to [openshift-restclient-java](https://github.com/openshift/openshift-restclient-java), which we need to get rid of anyways as that's no longer maintained. The placement would be https://github.com/fabric8io/kubernetes-client/, which has integration with many different http clients, including plain `jdk`.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16697,1095578190,2023-02-03T09:40:15Z,.github/workflows/js-ci.yml,"@@ -0,0 +1,95 @@+name: Keycloak JavaScript CI++on:+  push:+    branches-ignore:+      - main+      - dependabot/**+  pull_request:+  schedule:+    - cron: 0 20,23,2,5 * * *+  workflow_dispatch:++env:+  NODE_VERSION: 18++concurrency:+  # Only cancel jobs for PR updates+  group: js-ci-${{ github.head_ref || github.run_id }}+  cancel-in-progress: true++defaults:+  run:+    shell: bash++jobs:+  conditional:+    name: Check conditional workflows and jobs+    if: github.event_name != 'schedule' || github.repository == 'keycloak/keycloak'+    runs-on: ubuntu-latest+    outputs:+      js-ci: ${{ steps.conditional.outputs.js }}+    steps:+      - uses: actions/checkout@v3++      - id: conditional+        uses: ./.github/actions/conditional++  npm-run:+    needs: conditional+    runs-on: ubuntu-latest",```suggestion    if: needs.conditional.outputs.js-ci == 'true'    runs-on: ubuntu-latest```,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16802,1095599394,2023-02-03T09:53:44Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -288,8 +288,10 @@ protected EntityManager getEntityManager() {             if (lockTimeout != null) {                 em.unwrap(SessionImpl.class)                         .doWork(connection -> {-                            PreparedStatement preparedStatement = connection.prepareStatement(""SET LOCAL lock_timeout = '"" + lockTimeout + ""';"");-                            preparedStatement.execute();+                            try (PreparedStatement preparedStatement = connection.prepareStatement(""SET LOCAL lock_timeout = ?"")) {+                                preparedStatement.setString(1, String.valueOf(lockTimeout));","Found a way with a prepared statement and a parameter. Build is now green with PostgreSQL, will test on Monday with CRDB, and then ask you for a review.",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1095665494,2023-02-03T10:50:39Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/common/MapEntityContext.java,"@@ -0,0 +1,275 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file.common;++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.EntityField;+import org.keycloak.models.map.common.UndefinedValuesUtils;+import org.keycloak.models.map.role.MapRoleEntityFields;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.file.common.BlockContext.DefaultListContext;+import org.keycloak.models.map.storage.file.common.BlockContext.DefaultMapContext;+import java.util.Collection;+import java.util.Collections;+import java.util.IdentityHashMap;+import java.util.List;+import java.util.Map;+import java.util.Optional;+import java.util.TreeSet;+import java.util.function.Function;+import java.util.function.Supplier;+import java.util.stream.Collectors;+import org.jboss.logging.Logger;+import static org.keycloak.models.map.common.CastUtils.cast;++/**+ * {@link BlockContext} which handles any entity accompanied with {@link EntityField} field getters and setters,+ * namely {@code Map*Entity} classes.+ * @author hmlnarik+ */+public class MapEntityContext<T> implements BlockContext<T> {++    private static final Logger LOG = Logger.getLogger(MapEntityContext.class);+    +    private final Map<String, EntityField<?>> nameToEntityField;+    private final Map<String, Supplier<? extends BlockContext<?>>> contextCreators;++    protected final T result;+    private static final Map<Class, Map<String, EntityField<?>>> CACHE_FIELD_TO_EF = new IdentityHashMap<>();+    private static final Map<Class, Map<String, Supplier<? extends BlockContext<?>>>> CACHE_CLASS_TO_CC = new IdentityHashMap<>();+    private final boolean topContext;+    private boolean alreadyReadProperty = false;++    public static final String SCHEMA_VERSION = ""schemaVersion"";++    public MapEntityContext(Class<T> clazz) {+        this(clazz, true);+    }++    @SuppressWarnings(""unchecked"")+    public MapEntityContext(Class<T> clazz, boolean topContext) {+        this(clazz,+          CACHE_FIELD_TO_EF.computeIfAbsent(clazz, MapEntityContext::fieldsToEntityField),+          CACHE_CLASS_TO_CC.computeIfAbsent(clazz, MapEntityContext::fieldsToContextCreators),+          topContext+        );+    }++    protected MapEntityContext(+      Class<T> clazz,+      Map<String, EntityField<?>> nameToEntityField,+      Map<String, Supplier<? extends BlockContext<?>>> contextCreators,+      boolean topContext) {+        this.result = DeepCloner.DUMB_CLONER.newInstance(clazz);+        this.nameToEntityField = nameToEntityField;+        this.contextCreators = contextCreators;+        this.topContext = topContext;+    }++    protected static <T> Map<String, Supplier<? extends BlockContext<?>>> fieldsToContextCreators(Class<T> type) {+        if (! ModelEntityUtil.entityFieldsKnown(type)) {+            return Collections.emptyMap();+        }++        return ModelEntityUtil.getEntityFields(type)+          .map(ef -> Map.entry(ef, Optional.ofNullable(getDefaultContextCreator(ef))))+          .filter(me -> me.getValue().isPresent())+          .collect(Collectors.toMap(me -> me.getKey().getNameCamelCase(), me -> me.getValue().get()));+    }++    private static <T> Supplier<? extends BlockContext<?>> getDefaultContextCreator(EntityField<? super T> ef) {+        final Class<?> collectionElementClass = ef.getCollectionElementClass();+        if (collectionElementClass != Void.class) {+            if (ModelEntityUtil.entityFieldsKnown(collectionElementClass)) {+                return () -> new MapEntitySequenceYamlContext<>(collectionElementClass);+            }+        }++        final Class<?> mapValueClass = ef.getMapValueClass();+        if (mapValueClass != Void.class) {+            if (ModelEntityUtil.entityFieldsKnown(mapValueClass)) {+                return () -> new MapEntityMappingYamlContext<>(mapValueClass);+            } else if (ATTRIBUTES_NAME.equals(ef.getName())) {+                return StringListMapContext::new;+            }+        }++        return null;+    }++    protected static final String ATTRIBUTES_NAME = MapRoleEntityFields.ATTRIBUTES.getName();++    public static <T> Map<String, EntityField<?>> fieldsToEntityField(Class<T> type) {+        return ModelEntityUtil.getEntityFields(type).collect(Collectors.toUnmodifiableMap(EntityField::getNameCamelCase, Function.identity()));+    }++    @SuppressWarnings(""unchecked"")+    public static <T> boolean setEntityField(T result, EntityField<? super T> ef, Object value) {+        LOG.tracef(""Setting %s::%s field"", ef, result.getClass());+        if (ef == null) {+            return false;+        }++        if (ef.getCollectionElementClass() != Void.class && value instanceof Collection) {+            Class<?> collectionElementClass = ef.getCollectionElementClass();+            ((Collection) value).forEach(v -> ef.collectionAdd(result, cast(v, collectionElementClass)));+        } else if (ef.getMapKeyClass() != Void.class && value instanceof Map) {+            Class<?> mapKeyClass = ef.getMapKeyClass();+            Class<?> mapValueClass = ef.getMapValueClass();+            ((Map) value).forEach((k, v) -> ef.mapPut(result, cast(k, mapKeyClass), cast(v, mapValueClass)));+        } else {+            final Object origValue = ef.get(result);+            if (origValue != null) {+                LOG.warnf(""Overwriting value of %s field"", ef.getNameCamelCase());","There is a lot of these warnings in the log. ```...13:27:37,799 WARN  org.keycloak.testsuite.KeycloakServer.main() [org.keycloak.models.map.storage.file.common.MapEntityContext] Overwriting value of clientRole field13:27:37,799 WARN  org.keycloak.testsuite.KeycloakServer.main() [org.keycloak.models.map.storage.file.common.MapEntityContext] Overwriting value of clientRole field13:27:37,800 WARN  org.keycloak.testsuite.KeycloakServer.main() [org.keycloak.models.map.storage.file.common.MapEntityContext] Overwriting value of clientRole field13:27:37,800 WARN  org.keycloak.testsuite.KeycloakServer.main() [org.keycloak.models.map.storage.file.common.MapEntityContext] Overwriting value of clientRole field13:27:37,800 WARN  org.keycloak.testsuite.KeycloakServer.main() [org.keycloak.models.map.storage.file.common.MapEntityContext] Overwriting value of clientRole field...```It's expected and caused by a fact that `MapRoleEntity.isClientRole()`  is implemented this way:https://github.com/keycloak/keycloak/blob/540722837568c2065e1fc6f67e39f6b738c81e17/model/map/src/main/java/org/keycloak/models/map/role/MapRoleEntity.java#L48-L51Therefore the `origValue` is not `null` in this case.I was just wondering whether we want to have the log flooded by the warning.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1095679543,2023-02-03T11:05:24Z,model/build-processor/src/main/java/org/keycloak/models/map/processor/Util.java,"@@ -46,7 +47,7 @@ public class Util {      private static final Set<String> LIST_TYPES = Set.of(List.class.getCanonicalName(), ArrayList.class.getCanonicalName(), LinkedList.class.getCanonicalName());-    private static final Set<String> SET_TYPES = Set.of(Set.class.getCanonicalName(), TreeSet.class.getCanonicalName(), HashSet.class.getCanonicalName(), LinkedHashSet.class.getCanonicalName());+    private static final Set<String> SET_TYPES = Set.of(Set.class.getCanonicalName(), TreeSet.class.getCanonicalName(), HashSet.class.getCanonicalName(), LinkedHashSet.class.getCanonicalName(), Collection.class.getCanonicalName());","Makes sense, the cleanest solution would probably be (as `Set` should guarantee uniqueness of elements) to introduce `COLLECTION_TYPES`, something like:```suggestion    private static final Set<String> LIST_TYPES = Set.of(List.class.getCanonicalName(), ArrayList.class.getCanonicalName(), LinkedList.class.getCanonicalName());    private static final Set<String> SET_TYPES = Set.of(Set.class.getCanonicalName(), TreeSet.class.getCanonicalName(), HashSet.class.getCanonicalName(), LinkedHashSet.class.getCanonicalName());    private static final Set<String> COLLECTION_TYPES = Set.of(Collection.class.getCanonicalName());    private static final Set<String> MAP_TYPES = Set.of(Map.class.getCanonicalName(), HashMap.class.getCanonicalName());    static {        COLLECTION_TYPES.addAll(LIST_TYPES);        COLLECTION_TYPES.addAll(SET_TYPES);    }```and `public static boolean isCollectionType(TypeElement typeElement)` method would have to be updated as well.I'm not sure if the additional complexity is worth, so I'll leave the decision up to you whether it will stay as is or to apply the suggestion.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1095790496,2023-02-03T13:18:38Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorageProviderFactory.java,"@@ -17,13 +17,44 @@ package org.keycloak.models.map.storage.file;  import org.keycloak.Config;+import org.keycloak.authorization.model.PermissionTicket;+import org.keycloak.authorization.model.Policy;+import org.keycloak.authorization.model.Resource;+import org.keycloak.authorization.model.ResourceServer;",unused imports,x
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/16783,1095851877,2023-02-03T14:20:57Z,pom.xml,"@@ -311,6 +311,13 @@                 <groupId>com.squareup.okhttp3</groupId>                 <artifactId>okhttp</artifactId>                 <version>${okhttp.version}</version>+                <!-- Library with known vulnerability and no fixed version -->+                <exclusions>+                    <exclusion>+                        <groupId>org.jetbrains.kotlin</groupId>+                        <artifactId>kotlin-stdlib</artifactId>+                    </exclusion>+                </exclusions>","@stianst +1 if we can get rid of openshift-restclient-java and answering your question, yes it works. Below you can find a side by side comparison:- main branch```❯ mvn dependency:tree | grep kotlin-stdlib[INFO] |  |  |  +- org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.7.20:compile[INFO] |  |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar:1.7.20:compile[INFO] |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib-common:jar:1.7.20:compile[INFO] |  |  \- org.jetbrains.kotlin:kotlin-stdlib:jar:1.7.20:compile[INFO] |  |  |  |  +- org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.7.20:compile[INFO] |  |  |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar:1.7.20:compile[INFO] |  |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib-common:jar:1.7.20:compile[INFO] |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib:jar:1.7.20:compile[INFO]    |  |  |  +- org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.7.20:compile[INFO]    |  |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar:1.7.20:compile[INFO]    |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib-common:jar:1.7.20:compile[INFO]    |  |  \- org.jetbrains.kotlin:kotlin-stdlib:jar:1.7.20:compile[INFO] |  |  |  |  +- org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.7.20:compile[INFO] |  |  |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar:1.7.20:compile[INFO] |  |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib-common:jar:1.7.20:compile[INFO] |  |  |  \- org.jetbrains.kotlin:kotlin-stdlib:jar:1.7.20:compile```- Outcome from the changes proposed here```❯ mvn dependency:tree | grep kotlin-stdlib[INFO] |  |     +- org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.7.20:compile[INFO] |  |     |  \- org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar:1.7.20:compile[INFO] |  |     \- org.jetbrains.kotlin:kotlin-stdlib-common:jar:1.7.20:compile[INFO] |  |  |     +- org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.7.20:compile[INFO] |  |  |     |  \- org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar:1.7.20:compile[INFO] |  |  |     \- org.jetbrains.kotlin:kotlin-stdlib-common:jar:1.7.20:compile[INFO]    |  |     +- org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.7.20:compile[INFO]    |  |     |  \- org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar:1.7.20:compile[INFO]    |  |     \- org.jetbrains.kotlin:kotlin-stdlib-common:jar:1.7.20:compile[INFO] |  |  |     +- org.jetbrains.kotlin:kotlin-stdlib-jdk8:jar:1.7.20:compile[INFO] |  |  |     |  \- org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar:1.7.20:compile[INFO] |  |  |     \- org.jetbrains.kotlin:kotlin-stdlib-common:jar:1.7.20:compile```",
13701445,dteleguin,https://api.github.com/repos/keycloak/keycloak/pulls/9018,1096869907,2023-02-06T01:38:04Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/AuthorizationEndpoint.java,"@@ -127,6 +128,12 @@ private Response process(MultivaluedMap<String, String> params) {          checkSsl();         checkRealm();++        try {+            session.clientPolicy().triggerOnEvent(new PreAuthorizationRequestContext(clientId, params));+        } catch (ClientPolicyException cpe) {+            return redirectErrorToClient(parsedResponseMode, cpe.getError(), cpe.getErrorDetail());","Thanks for your feedback guys. Let's get this done! :muscle:As for postponing error handling until redirect URI (and therefore client ID!) is verified - I'm afraid this makes little sense, as the main purpose for this hook is to be able to ""legitimize"" client IDs that would otherwise be considered invalid by Keycloak. More specifically, the main use case is to automatically register clients that use the ""client ID as a URL"" paradigm and publish their metadata under that URL. This approach is used not only by Solid-OIDC, but also by [IndieAuth](https://indieauth.net/), [OpenID Connect Federation](https://openid.net/specs/openid-connect-federation-1_0.html) and [OAuth 2.0 Client Discovery](https://datatracker.ietf.org/doc/draft-looker-oauth-client-discovery/01/).That said, I have changed error handling to display an error page instead of returning a HTTP redirect. This also changes the behavior of the RejectRequestExecutor - when used in the context of Authorization request, it will now fail earlier and display an error page. I have also added a proper integration test for the PreAuthorizationRequest event.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16635,1097034386,2023-02-06T07:44:39Z,model/map/src/main/java/org/keycloak/models/map/lock/MapLockProvider.java,"@@ -0,0 +1,83 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.lock;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelCriteriaBuilder;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.criteria.DefaultModelCriteria;+import org.keycloak.provider.Provider;++import java.util.Optional;++import static org.keycloak.models.map.storage.criteria.DefaultModelCriteria.criteria;++/**+ * @author Alexander Schwartz+ */+public class MapLockProvider implements Provider {++    private final KeycloakSession session;+    final MapKeycloakTransaction<MapLockEntity, MapLockEntity> tx;++    public MapLockProvider(KeycloakSession session, MapStorage<MapLockEntity, MapLockEntity> lockStore) {+        this.session = session;+        this.tx = lockStore.createTransaction(session);+        session.getTransactionManager().enlist(tx);+    }++    @Override+    public void close() {+    }++    public void lock(String lockName) {+        DefaultModelCriteria<MapLockEntity> mcb = criteria();+        mcb = mcb.compare(MapLockEntity.SearchableFields.NAME, ModelCriteriaBuilder.Operator.EQ, lockName);+        Optional<MapLockEntity> entry = tx.read(QueryParameters.withCriteria(mcb)).findFirst();++        if (entry.isEmpty()) {+            MapLockEntity entity = DeepCloner.DUMB_CLONER.newInstance(MapLockEntity.class);+            entity.setId(StringKeyConverter.UUIDKey.INSTANCE.yieldNewUniqueKey().toString());+            entity.setName(lockName);+            tx.create(entity);+        } else {+            throw new RuntimeException(""lock exists"");+        }+    }++    public void unlock(String lockName) {+        DefaultModelCriteria<MapLockEntity> mcb = criteria();+        mcb = mcb.compare(MapLockEntity.SearchableFields.NAME, ModelCriteriaBuilder.Operator.EQ, lockName);+        Optional<MapLockEntity> entry = tx.read(QueryParameters.withCriteria(mcb)).findFirst();++        if (entry.isEmpty()) {+            throw new RuntimeException(""didn't find lock - someone else unlocked it?"");+        } else {+            tx.delete(entry.get().getId());+        }",`tx.delete(mcb)` should be used to avoid a race condition between read and delete.,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16635,1097040518,2023-02-06T07:52:54Z,model/build-processor/src/main/java/org/keycloak/models/map/processor/GenerateEntityImplementationsProcessor.java,"@@ -261,7 +261,7 @@ public void generate(TypeElement e) throws IOException {             GenerateEntityImplementations an = e.getAnnotation(GenerateEntityImplementations.class);             TypeElement parentTypeElement = elements.getTypeElement((an.inherits() == null || an.inherits().isEmpty()) ? ""void"" : an.inherits());             if (parentTypeElement == null) {-                return;+                throw new IllegalArgumentException(""Unable to find type "" + an.inherits() + "" for inherits parameter for annotation "" + GenerateEntityImplementations.class.getTypeName());","If an error should be printed and compilation failed, use ```suggestion                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, """"Unable to find type "" + an.inherits() + "" for inherits parameter for annotation "" + GenerateEntityImplementations.class.getTypeName()"", e);```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1097162222,2023-02-06T09:55:18Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapKeycloakTransaction.java,"@@ -0,0 +1,140 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file;+++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapKeycloakTransaction;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.StandardCopyOption;+import java.util.IdentityHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.function.Function;++/**+ * {@link MapKeycloakTransaction} implementation used with the file map storage.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class FileMapKeycloakTransaction<V extends AbstractEntity & UpdatableEntity, M>+  extends ConcurrentHashMapKeycloakTransaction<String, V, M> {++    private final List<Path> touchedPaths = new LinkedList<>();+    private Map<Path, Path> renameOnCommit = new IdentityHashMap<>();++    private final String txId = StringKey.INSTANCE.yieldNewUniqueKey();++    public static <V extends AbstractEntity & UpdatableEntity, M> FileMapKeycloakTransaction<V, M> newInstance(Class<V> entityClass,+      Function<String, Path> dataDirectoryFunc, Function<V, String[]> suggestedPath,+      boolean isExpirableEntity, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        Crud<V, M> crud = new Crud<>(entityClass, dataDirectoryFunc, suggestedPath, isExpirableEntity, fieldPredicates);+        FileMapKeycloakTransaction<V, M> tx = new FileMapKeycloakTransaction<>(entityClass, crud);+        crud.tx = tx;+        return tx;+    }++    private FileMapKeycloakTransaction(Class<V> entityClass, Crud<V, M> crud) {+        super(+          crud,+          StringKeyConverter.StringKey.INSTANCE,+          DeepCloner.DUMB_CLONER,+          MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)),+          ModelEntityUtil.getRealmIdField(entityClass)+        );+    }++    @Override+    public void rollback() {+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+        super.rollback();+    }++    @Override+    public void commit() {+        super.commit();+        this.renameOnCommit.forEach(FileMapKeycloakTransaction::silentMove);+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+    }++    private static void silentMove(Path from, Path to) {+        try {+            Files.move(from, to, StandardCopyOption.REPLACE_EXISTING);+        } catch (IOException ex) {+            throw new UncheckedIOException(ex);+        }+    }++    private static void silentDelete(Path p) {+        try {+            if (Files.exists(p) && Files.size(p) == 0) {+                Files.delete(p);+            }+        } catch (IOException e) {+            // Swallow the exception","Similar to `silentMove()`, this should throw an exception. ```suggestion            throw new UncheckedIOException(ex);```",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1097169126,2023-02-06T10:01:03Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/yaml/YamlParser.java,"@@ -0,0 +1,257 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file.yaml;++import org.keycloak.models.map.storage.file.common.BlockContextStack;+import org.keycloak.models.map.storage.file.common.BlockContext.DefaultListContext;+import org.keycloak.models.map.storage.file.common.BlockContext.DefaultMapContext;+import org.keycloak.models.map.storage.file.common.BlockContext.DefaultObjectContext;+import java.io.InputStream;+import java.io.IOException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.util.EnumMap;+import java.util.Objects;+import java.util.Optional;+import java.util.function.Supplier;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.LoadSettings;+import org.snakeyaml.engine.v2.api.YamlUnicodeReader;+import org.snakeyaml.engine.v2.constructor.StandardConstructor;+import org.snakeyaml.engine.v2.events.Event;+import org.snakeyaml.engine.v2.events.Event.ID;+import org.snakeyaml.engine.v2.events.NodeEvent;+import org.snakeyaml.engine.v2.events.ScalarEvent;+import org.snakeyaml.engine.v2.exceptions.ConstructorException;+import org.snakeyaml.engine.v2.nodes.ScalarNode;+import org.snakeyaml.engine.v2.nodes.Tag;+import org.snakeyaml.engine.v2.parser.Parser;+import org.snakeyaml.engine.v2.parser.ParserImpl;+import org.snakeyaml.engine.v2.resolver.JsonScalarResolver;+import org.snakeyaml.engine.v2.resolver.ScalarResolver;+import org.snakeyaml.engine.v2.scanner.StreamReader;+import org.keycloak.models.map.storage.file.common.BlockContext;++import static org.keycloak.common.util.StackUtil.getShortStackTrace;++/**+ *+ * @author hmlnarik+ */+public class YamlParser<E> {++    private static final Logger LOG = Logger.getLogger(YamlParser.class);+    public static final String ARRAY_CONTEXT = ""$@[]@$"";++    private static final ScalarResolver RESOLVER = new JsonScalarResolver();+    private final Parser parser;+    private final BlockContextStack contextStack;++    // Leverage SnakeYaml's translation of primitive values+    private static final class MiniConstructor extends StandardConstructor {++        public MiniConstructor() {+            super(SETTINGS);+        }++        // This has been based on SnakeYaml's own org.snakeyaml.engine.v2.constructor.BaseConstructor.constructObjectNoCheck(Node node)+        @SuppressWarnings(value = ""unchecked"")+        public Object constructStandardJavaInstance(ScalarNode node) {+            return findConstructorFor(node)+                .map(constructor -> constructor.construct(node))+                .orElseThrow(() -> new ConstructorException(null, Optional.empty(), ""could not determine a constructor for the tag "" + node.getTag(), node.getStartMark()));+        }++        public static final MiniConstructor INSTANCE = new MiniConstructor();+    }++    private static final LoadSettings SETTINGS = LoadSettings.builder()+      .setAllowRecursiveKeys(false)+      .setParseComments(false)+      .build();++    public static <E> E parse(Path path, BlockContext<E> initialContext) {+        LOG.tracef(""parse(%s,%s)%s"", path, initialContext, getShortStackTrace());++        Objects.requireNonNull(path, ""Path invalid"");+        try (InputStream is = Files.newInputStream(path)) {+            if (Files.size(path) == 0) {+                return null;+            }+            Parser p = new ParserImpl(SETTINGS, new StreamReader(SETTINGS, new YamlUnicodeReader(is)));+            return new YamlParser<>(p, initialContext).parse();+        } catch (IOException ex) {+            LOG.warn(ex);+            return null;+        }+    }++    protected YamlParser(Parser p, BlockContext<E> initialContext) {+        this.parser = p;+        this.contextStack = new BlockContextStack(initialContext);+    }++    @SuppressWarnings(""unchecked"")+    protected <E> E parse() {+        consumeEvent(Event.ID.StreamStart, ""Expected a stream"");++        if (!parser.checkEvent(Event.ID.StreamEnd)) {+            consumeEvent(Event.ID.DocumentStart, ""Expected a document in the stream"");+            parseNode();+            consumeEvent(Event.ID.DocumentEnd, ""Expected a single document in the stream"");+        }++        consumeEvent(Event.ID.StreamEnd, ""Expected a single document in the stream"");++        return (E) contextStack.pop().getResult();+    }++    protected Object parseNode() {+        if (parser.checkEvent(Event.ID.Alias)) {+            throw new IllegalStateException(""Aliases are not handled at this moment"");+        }+        Event ev = parser.next();+        if (!(ev instanceof NodeEvent)) {+            throw new IllegalArgumentException(""Invalid event "" + ev);+        }+//        if (anchor != null) {+//            node.setAnchor(anchor);+//            anchors.put(anchor, node);+//        }+//        try {","Commented out code smell, please check.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1097169470,2023-02-06T10:01:20Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/yaml/YamlParser.java,"@@ -0,0 +1,257 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file.yaml;++import org.keycloak.models.map.storage.file.common.BlockContextStack;+import org.keycloak.models.map.storage.file.common.BlockContext.DefaultListContext;+import org.keycloak.models.map.storage.file.common.BlockContext.DefaultMapContext;+import org.keycloak.models.map.storage.file.common.BlockContext.DefaultObjectContext;+import java.io.InputStream;+import java.io.IOException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.util.EnumMap;+import java.util.Objects;+import java.util.Optional;+import java.util.function.Supplier;+import org.jboss.logging.Logger;+import org.snakeyaml.engine.v2.api.LoadSettings;+import org.snakeyaml.engine.v2.api.YamlUnicodeReader;+import org.snakeyaml.engine.v2.constructor.StandardConstructor;+import org.snakeyaml.engine.v2.events.Event;+import org.snakeyaml.engine.v2.events.Event.ID;+import org.snakeyaml.engine.v2.events.NodeEvent;+import org.snakeyaml.engine.v2.events.ScalarEvent;+import org.snakeyaml.engine.v2.exceptions.ConstructorException;+import org.snakeyaml.engine.v2.nodes.ScalarNode;+import org.snakeyaml.engine.v2.nodes.Tag;+import org.snakeyaml.engine.v2.parser.Parser;+import org.snakeyaml.engine.v2.parser.ParserImpl;+import org.snakeyaml.engine.v2.resolver.JsonScalarResolver;+import org.snakeyaml.engine.v2.resolver.ScalarResolver;+import org.snakeyaml.engine.v2.scanner.StreamReader;+import org.keycloak.models.map.storage.file.common.BlockContext;++import static org.keycloak.common.util.StackUtil.getShortStackTrace;++/**+ *+ * @author hmlnarik+ */+public class YamlParser<E> {++    private static final Logger LOG = Logger.getLogger(YamlParser.class);+    public static final String ARRAY_CONTEXT = ""$@[]@$"";++    private static final ScalarResolver RESOLVER = new JsonScalarResolver();+    private final Parser parser;+    private final BlockContextStack contextStack;++    // Leverage SnakeYaml's translation of primitive values+    private static final class MiniConstructor extends StandardConstructor {++        public MiniConstructor() {+            super(SETTINGS);+        }++        // This has been based on SnakeYaml's own org.snakeyaml.engine.v2.constructor.BaseConstructor.constructObjectNoCheck(Node node)+        @SuppressWarnings(value = ""unchecked"")+        public Object constructStandardJavaInstance(ScalarNode node) {+            return findConstructorFor(node)+                .map(constructor -> constructor.construct(node))+                .orElseThrow(() -> new ConstructorException(null, Optional.empty(), ""could not determine a constructor for the tag "" + node.getTag(), node.getStartMark()));+        }++        public static final MiniConstructor INSTANCE = new MiniConstructor();+    }++    private static final LoadSettings SETTINGS = LoadSettings.builder()+      .setAllowRecursiveKeys(false)+      .setParseComments(false)+      .build();++    public static <E> E parse(Path path, BlockContext<E> initialContext) {+        LOG.tracef(""parse(%s,%s)%s"", path, initialContext, getShortStackTrace());++        Objects.requireNonNull(path, ""Path invalid"");+        try (InputStream is = Files.newInputStream(path)) {+            if (Files.size(path) == 0) {+                return null;+            }+            Parser p = new ParserImpl(SETTINGS, new StreamReader(SETTINGS, new YamlUnicodeReader(is)));+            return new YamlParser<>(p, initialContext).parse();+        } catch (IOException ex) {+            LOG.warn(ex);+            return null;+        }+    }++    protected YamlParser(Parser p, BlockContext<E> initialContext) {+        this.parser = p;+        this.contextStack = new BlockContextStack(initialContext);+    }++    @SuppressWarnings(""unchecked"")+    protected <E> E parse() {+        consumeEvent(Event.ID.StreamStart, ""Expected a stream"");++        if (!parser.checkEvent(Event.ID.StreamEnd)) {+            consumeEvent(Event.ID.DocumentStart, ""Expected a document in the stream"");+            parseNode();+            consumeEvent(Event.ID.DocumentEnd, ""Expected a single document in the stream"");+        }++        consumeEvent(Event.ID.StreamEnd, ""Expected a single document in the stream"");++        return (E) contextStack.pop().getResult();+    }++    protected Object parseNode() {+        if (parser.checkEvent(Event.ID.Alias)) {+            throw new IllegalStateException(""Aliases are not handled at this moment"");+        }+        Event ev = parser.next();+        if (!(ev instanceof NodeEvent)) {+            throw new IllegalArgumentException(""Invalid event "" + ev);+        }+//        if (anchor != null) {+//            node.setAnchor(anchor);+//            anchors.put(anchor, node);+//        }+//        try {+        switch (ev.getEventId()) {+            case Scalar:+                ScalarEvent se = (ScalarEvent) ev;+                boolean implicit = se.getImplicit().canOmitTagInPlainScalar();+                Tag nodeTag = constructTag(se.getTag(), se.getValue(), implicit);+                return parseScalar(nodeTag, se);+            case SequenceStart:+                return parseSequence();+            case MappingStart:+                return parseMapping();+            default:+                throw new IllegalStateException(""Event not expected "" + ev);+        }+//        } finally {+//            anchors.remove(anchor);+//        }","commented out code smell, please check.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1097270153,2023-02-06T11:39:18Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapKeycloakTransaction.java,"@@ -0,0 +1,140 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file;+++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapKeycloakTransaction;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.StandardCopyOption;+import java.util.IdentityHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.function.Function;++/**+ * {@link MapKeycloakTransaction} implementation used with the file map storage.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class FileMapKeycloakTransaction<V extends AbstractEntity & UpdatableEntity, M>+  extends ConcurrentHashMapKeycloakTransaction<String, V, M> {++    private final List<Path> touchedPaths = new LinkedList<>();+    private Map<Path, Path> renameOnCommit = new IdentityHashMap<>();++    private final String txId = StringKey.INSTANCE.yieldNewUniqueKey();++    public static <V extends AbstractEntity & UpdatableEntity, M> FileMapKeycloakTransaction<V, M> newInstance(Class<V> entityClass,+      Function<String, Path> dataDirectoryFunc, Function<V, String[]> suggestedPath,+      boolean isExpirableEntity, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        Crud<V, M> crud = new Crud<>(entityClass, dataDirectoryFunc, suggestedPath, isExpirableEntity, fieldPredicates);+        FileMapKeycloakTransaction<V, M> tx = new FileMapKeycloakTransaction<>(entityClass, crud);+        crud.tx = tx;+        return tx;+    }++    private FileMapKeycloakTransaction(Class<V> entityClass, Crud<V, M> crud) {+        super(+          crud,+          StringKeyConverter.StringKey.INSTANCE,+          DeepCloner.DUMB_CLONER,+          MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)),+          ModelEntityUtil.getRealmIdField(entityClass)+        );+    }++    @Override+    public void rollback() {+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+        super.rollback();+    }++    @Override+    public void commit() {+        super.commit();+        this.renameOnCommit.forEach(FileMapKeycloakTransaction::silentMove);+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+    }++    private static void silentMove(Path from, Path to) {+        try {+            Files.move(from, to, StandardCopyOption.REPLACE_EXISTING);+        } catch (IOException ex) {+            throw new UncheckedIOException(ex);+        }+    }++    private static void silentDelete(Path p) {+        try {+            if (Files.exists(p) && Files.size(p) == 0) {+                Files.delete(p);+            }+        } catch (IOException e) {+            // Swallow the exception","This is _silent_ delete and the nonexistence of the file is expected, thus no exception should be thrown.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1097509106,2023-02-06T15:08:07Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapKeycloakTransaction.java,"@@ -0,0 +1,140 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file;+++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapKeycloakTransaction;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.StandardCopyOption;+import java.util.IdentityHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.function.Function;++/**+ * {@link MapKeycloakTransaction} implementation used with the file map storage.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class FileMapKeycloakTransaction<V extends AbstractEntity & UpdatableEntity, M>+  extends ConcurrentHashMapKeycloakTransaction<String, V, M> {++    private final List<Path> touchedPaths = new LinkedList<>();+    private Map<Path, Path> renameOnCommit = new IdentityHashMap<>();++    private final String txId = StringKey.INSTANCE.yieldNewUniqueKey();++    public static <V extends AbstractEntity & UpdatableEntity, M> FileMapKeycloakTransaction<V, M> newInstance(Class<V> entityClass,+      Function<String, Path> dataDirectoryFunc, Function<V, String[]> suggestedPath,+      boolean isExpirableEntity, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        Crud<V, M> crud = new Crud<>(entityClass, dataDirectoryFunc, suggestedPath, isExpirableEntity, fieldPredicates);+        FileMapKeycloakTransaction<V, M> tx = new FileMapKeycloakTransaction<>(entityClass, crud);+        crud.tx = tx;+        return tx;+    }++    private FileMapKeycloakTransaction(Class<V> entityClass, Crud<V, M> crud) {+        super(+          crud,+          StringKeyConverter.StringKey.INSTANCE,+          DeepCloner.DUMB_CLONER,+          MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)),+          ModelEntityUtil.getRealmIdField(entityClass)+        );+    }++    @Override+    public void rollback() {+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+        super.rollback();+    }++    @Override+    public void commit() {+        super.commit();+        this.renameOnCommit.forEach(FileMapKeycloakTransaction::silentMove);+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+    }++    private static void silentMove(Path from, Path to) {+        try {+            Files.move(from, to, StandardCopyOption.REPLACE_EXISTING);+        } catch (IOException ex) {+            throw new UncheckedIOException(ex);+        }+    }++    private static void silentDelete(Path p) {+        try {+            if (Files.exists(p) && Files.size(p) == 0) {+                Files.delete(p);+            }+        } catch (IOException e) {+            // Swallow the exception","**TL;DR**: Doing some search where this is being called from and when, this seems mostly harmless. Still, this swallowed exception will never occur when the file has already been deleted. In a previous review I asked for some comments when then this method should be used. Tracing this back it seems only be used for `touchedPaths`. Looking where this is being filled, it seems to used for temporary files. Looking at the body of the method, it also handles only empty files. It also checks if the file exists. A deletion of a file might fail due to multiple reasons, not only because it no longer exists. The file system might be a network file system and the operation might temporarily fail. Other reasons would be that the file system might be mounted read-only, the Keycloak instance might lack the required permissions (unlikely here as Keycloak created the files earlier in the transaction).  In such a situation, when the file exists, but can't be deleted, throwing an exception is IMHO valid. Not sure when those temporary files would cause problems later on. So to summarize, looking at the code, there should be no `IOException` when the file doesn't exist as it is handled via `Files.exists(p)`. There might be other `IOException`s for other reasons as described above, although I don't know if those would be harmful here / would lead to problems eventually when the file is not removed. So it is still not obvious to me why it is either important to swallow the exception here. UPDATE: please consider adding a comment to indicate why this can be swallowed without harm.The case where a delete that isn't executed is problematic is then probably here in `FileMapStoreage.Crud#delete()` where there is currently only warning.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16001,1097662085,2023-02-06T17:00:29Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapKeycloakTransaction.java,"@@ -0,0 +1,140 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file;+++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapKeycloakTransaction;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.StandardCopyOption;+import java.util.IdentityHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.function.Function;++/**+ * {@link MapKeycloakTransaction} implementation used with the file map storage.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class FileMapKeycloakTransaction<V extends AbstractEntity & UpdatableEntity, M>+  extends ConcurrentHashMapKeycloakTransaction<String, V, M> {++    private final List<Path> touchedPaths = new LinkedList<>();+    private Map<Path, Path> renameOnCommit = new IdentityHashMap<>();++    private final String txId = StringKey.INSTANCE.yieldNewUniqueKey();++    public static <V extends AbstractEntity & UpdatableEntity, M> FileMapKeycloakTransaction<V, M> newInstance(Class<V> entityClass,+      Function<String, Path> dataDirectoryFunc, Function<V, String[]> suggestedPath,+      boolean isExpirableEntity, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        Crud<V, M> crud = new Crud<>(entityClass, dataDirectoryFunc, suggestedPath, isExpirableEntity, fieldPredicates);+        FileMapKeycloakTransaction<V, M> tx = new FileMapKeycloakTransaction<>(entityClass, crud);+        crud.tx = tx;+        return tx;+    }++    private FileMapKeycloakTransaction(Class<V> entityClass, Crud<V, M> crud) {+        super(+          crud,+          StringKeyConverter.StringKey.INSTANCE,+          DeepCloner.DUMB_CLONER,+          MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)),+          ModelEntityUtil.getRealmIdField(entityClass)+        );+    }++    @Override+    public void rollback() {+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+        super.rollback();+    }++    @Override+    public void commit() {+        super.commit();+        this.renameOnCommit.forEach(FileMapKeycloakTransaction::silentMove);+        this.touchedPaths.forEach(FileMapKeycloakTransaction::silentDelete);+    }++    private static void silentMove(Path from, Path to) {+        try {+            Files.move(from, to, StandardCopyOption.REPLACE_EXISTING);+        } catch (IOException ex) {+            throw new UncheckedIOException(ex);+        }+    }++    private static void silentDelete(Path p) {+        try {+            if (Files.exists(p) && Files.size(p) == 0) {+                Files.delete(p);+            }+        } catch (IOException e) {+            // Swallow the exception+        }+    }++    public void touch(Path path) throws FileAlreadyExistsException, IOException {+        Files.createFile(path);+        touchedPaths.add(path);+    }++    void registerRenameOnCommit(Path from, Path to) {+        this.renameOnCommit.put(from, to);+        this.touchedPaths.add(from);","`from` files are temporary files owned by current transaction, e.g. `.tx-123-realm.yaml`. They have to be removed on commit (via renaming: `silentMove`) or on rollback (deleting).",x
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/9018,1098118207,2023-02-07T02:44:07Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/policies/ClientPoliciesTest.java,"@@ -909,8 +910,8 @@ public void testRejectRequestExecutor() throws Exception {         try {             oauth.clientId(clientBetaId);             oauth.openLoginForm();-            assertEquals(OAuthErrorException.INVALID_REQUEST, oauth.getCurrentQuery().get(OAuth2Constants.ERROR));-            assertEquals(ERR_MSG_REQ_NOT_ALLOWED, oauth.getCurrentQuery().get(OAuth2Constants.ERROR_DESCRIPTION));+            assertTrue(errorPage.isCurrent());+            assertEquals(""Request not allowed"", errorPage.getError());","How about using `ERR_MSG_REQ_NOT_ALLOWED` in AbstractClientPoliciesTest class instead of `""Request not allowed""` and modify AbstractClientPoliciesTest class as follows?```    protected static final String ERR_MSG_REQ_NOT_ALLOWED = ""request not allowed"";```to```    protected static final String ERR_MSG_REQ_NOT_ALLOWED = ""Request not allowed"";```In ClientPoliciesTest, error messages are in AbstractClientPoliciesTest and these are referred from test methods.",x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16001,1098526239,2023-02-07T11:18:51Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapKeycloakTransaction.java,"@@ -0,0 +1,153 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.file;+++import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.StringKeyConverter.StringKey;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.ModelEntityUtil;+import org.keycloak.models.map.storage.chm.ConcurrentHashMapKeycloakTransaction;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder.UpdatePredicatesFunc;+import org.keycloak.storage.SearchableModelField;+import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.nio.file.StandardCopyOption;+import java.util.IdentityHashMap;+import java.util.LinkedList;+import java.util.List;+import java.util.Map;+import java.util.function.Function;++/**+ * {@link MapKeycloakTransaction} implementation used with the file map storage.+ *+ * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>+ */+public class FileMapKeycloakTransaction<V extends AbstractEntity & UpdatableEntity, M>+  extends ConcurrentHashMapKeycloakTransaction<String, V, M> {++    private final List<Path> pathsToDelete = new LinkedList<>();+    private Map<Path, Path> renameOnCommit = new IdentityHashMap<>();++    private final String txId = StringKey.INSTANCE.yieldNewUniqueKey();++    public static <V extends AbstractEntity & UpdatableEntity, M> FileMapKeycloakTransaction<V, M> newInstance(Class<V> entityClass,+      Function<String, Path> dataDirectoryFunc, Function<V, String[]> suggestedPath,+      boolean isExpirableEntity, Map<SearchableModelField<? super M>, UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        Crud<V, M> crud = new Crud<>(entityClass, dataDirectoryFunc, suggestedPath, isExpirableEntity, fieldPredicates);+        FileMapKeycloakTransaction<V, M> tx = new FileMapKeycloakTransaction<>(entityClass, crud);+        crud.tx = tx;+        return tx;+    }++    private FileMapKeycloakTransaction(Class<V> entityClass, Crud<V, M> crud) {+        super(+          crud,+          StringKeyConverter.StringKey.INSTANCE,+          DeepCloner.DUMB_CLONER,+          MapFieldPredicates.getPredicates(ModelEntityUtil.getModelType(entityClass)),+          ModelEntityUtil.getRealmIdField(entityClass)+        );+    }++    @Override+    public void rollback() {+        this.renameOnCommit.keySet().forEach(FileMapKeycloakTransaction::silentDelete);+        this.pathsToDelete.forEach(FileMapKeycloakTransaction::silentDelete);+        super.rollback();+    }++    @Override+    public void commit() {+        super.commit();+        this.renameOnCommit.forEach(FileMapKeycloakTransaction::silentMove);+        this.pathsToDelete.forEach(FileMapKeycloakTransaction::silentDelete);+    }++    private static void silentMove(Path from, Path to) {+        try {+            Files.move(from, to, StandardCopyOption.REPLACE_EXISTING);+        } catch (IOException ex) {+            throw new UncheckedIOException(ex);+        }+    }++    private static void silentDelete(Path p) {+        try {+            if (Files.exists(p)) {+                Files.delete(p);+            }+        } catch (IOException e) {+            // Swallow the exception+        }+    }++    public void touch(Path path) throws FileAlreadyExistsException, IOException {+        Files.createFile(path);",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2391),x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16813,1099832159,2023-02-08T08:56:25Z,operator/src/test/java/org/keycloak/operator/testsuite/unit/IngressLogicTest.java,"@@ -116,4 +135,24 @@ public void testIngressSpecDefinedWithoutProperty() {         assertTrue(kc.reconciled());         assertFalse(kc.deleted());     }++    @Test+    public void testHttpSpecWithTlsSecret() {+        var kc = MockKeycloakIngress.build(null, false, true, true);+        Optional<HasMetadata> reconciled = kc.getReconciledResource();+        assertTrue(reconciled.isPresent());+        assertFalse(kc.deleted());+        assertEquals(""HTTPS"", reconciled.map(Ingress.class::cast).map(i -> i.getMetadata().getAnnotations().get(""nginx.ingress.kubernetes.io/backend-protocol"")).get());+        assertEquals(""passthrough"", reconciled.map(Ingress.class::cast).map(i -> i.getMetadata().getAnnotations().get(""route.openshift.io/termination"")).get());","```suggestionassertEquals(""HTTPS"", reconciled.get().getMetadata().getAnnotations().get(""nginx.ingress.kubernetes.io/backend-protocol""));        assertEquals(""passthrough"", reconciled.get().getMetadata().getAnnotations().get(""route.openshift.io/termination""));```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16813,1099832491,2023-02-08T08:56:43Z,operator/src/test/java/org/keycloak/operator/testsuite/unit/IngressLogicTest.java,"@@ -116,4 +135,24 @@ public void testIngressSpecDefinedWithoutProperty() {         assertTrue(kc.reconciled());         assertFalse(kc.deleted());     }++    @Test+    public void testHttpSpecWithTlsSecret() {+        var kc = MockKeycloakIngress.build(null, false, true, true);+        Optional<HasMetadata> reconciled = kc.getReconciledResource();+        assertTrue(reconciled.isPresent());+        assertFalse(kc.deleted());+        assertEquals(""HTTPS"", reconciled.map(Ingress.class::cast).map(i -> i.getMetadata().getAnnotations().get(""nginx.ingress.kubernetes.io/backend-protocol"")).get());+        assertEquals(""passthrough"", reconciled.map(Ingress.class::cast).map(i -> i.getMetadata().getAnnotations().get(""route.openshift.io/termination"")).get());+    }++    @Test+    public void testHttpSpecWithoutTlsSecret() {+        var kc = MockKeycloakIngress.build(null, false, true, false);+        Optional<HasMetadata> reconciled = kc.getReconciledResource();+        assertTrue(reconciled.isPresent());+        assertFalse(kc.deleted());+        assertEquals(""HTTP"", reconciled.map(Ingress.class::cast).map(i -> i.getMetadata().getAnnotations().get(""nginx.ingress.kubernetes.io/backend-protocol"")).get());+        assertEquals(""edge"", reconciled.map(Ingress.class::cast).map(i -> i.getMetadata().getAnnotations().get(""route.openshift.io/termination"")).get());","```suggestion        assertEquals(""HTTP"", reconciled.get().getMetadata().getAnnotations().get(""nginx.ingress.kubernetes.io/backend-protocol""));        assertEquals(""edge"", reconciled.get().getMetadata().getAnnotations().get(""route.openshift.io/termination""));```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16895,1099946703,2023-02-08T10:34:17Z,operator/src/test/resources/custom-ingress-installed-manually.yml,"@@ -0,0 +1,41 @@+apiVersion: networking.k8s.io/v1","I think we don't need anything as complex as this. A new ingress could be created programatically, maybe even as simple as this:```javanew IngressBuilder().withNewMetadata().withName(""example-kc-ingress"").endMetadata().build();```",
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/16879,1100518202,2023-02-08T18:18:42Z,quarkus/container/ubi8-null.sh,"@@ -0,0 +1,95 @@+#!/bin/bash++set -euo pipefail+#set -x++dir=""/tmp/null""+rm -rf ""$dir""+mkdir ""$dir""+cd ""$dir""++# Add all arguments as the initial core packages+printf '%s\n' ""$@"" > keep+# Packages required for a shell environment+cat >>keep <<EOF+bash+coreutils-single+EOF++# Disallow list to block certain packages and their dependencies+cat >disallow <<EOF+alsa-lib+copy-jdk-configs+cups-libs+chkconfig+grep","I looked, and grep is very cheap in terms of dependencies. Not a big risk of CVEs, potentially useful to have around. I put it back in for now",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/16291,1102641129,2023-02-10T11:25:49Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/LogoutTest.java,"@@ -195,6 +215,110 @@ public void testFrontchannelLogoutInSameBrowser() {         assertLogoutEvent(SAML_CLIENT_ID_SALES_POST);     } +    /**+     * Logout triggered with POST binding, with 2 clients to logout in the SLO process.+     * One of the client is configured with backchannel logout + SOAP logout URL+     */+    @Test+    public void testSoapBackchannelLogout() {+        try (SamlBackchannelLogoutReceiver backchannelLogoutReceiver = new SamlBackchannelLogoutReceiver(8082, sales2Rep.getClientId())) {+            adminClient.realm(REALM_NAME)+                    .clients().get(sales2Rep.getId())+                    .update(ClientBuilder.edit(sales2Rep)+                            .frontchannelLogout(false)+                            .attribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_SOAP_ATTRIBUTE, backchannelLogoutReceiver.getUrl())+                            .attribute(SamlConfigAttributes.SAML_SERVER_SIGNATURE, ""true"") // sign logout requests+                            .attribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, ""true"") // Force NameID to username+                            .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, ""username"") // Force NameID to username+                            .build());++            SAMLDocumentHolder samlResponse = prepareLogIntoTwoApps()+                    .logoutRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_SALES_POST, POST)+                    .nameId(nameIdRef::get)+                    .sessionIndex(sessionIndexRef::get)+                    .build()+                    .getSamlResponse(POST);++            assertThat(samlResponse.getSamlObject(), isSamlStatusResponse(JBossSAMLURIConstants.STATUS_SUCCESS));+            assertLogoutEvent(SAML_CLIENT_ID_SALES_POST);++            // check that the logout request sent to the client is compliant and signed+            assertTrue(backchannelLogoutReceiver.isLogoutRequestReceived());+            LogoutRequestType logoutRequest = backchannelLogoutReceiver.getLogoutRequest();+            assertNotNull(backchannelLogoutReceiver.getLogoutRequest().getSignature());+            // check nameID+            assertEquals(logoutRequest.getNameID().getValue(), bburkeUser.getUsername());+        } catch (Exception ex) {+            fail(""unexpected error"");+        }+    }++    /** Logout triggered with SOAP binding, request is properly signed */+    @Test+    public void testSoapBackchannelLogoutFromSamlClient() {+        try {+            adminClient.realm(REALM_NAME)+                    .clients().get(salesSigRep.getId())+                    .update(ClientBuilder.edit(salesSigRep)+                            .frontchannelLogout(false)+                            .attribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, ""true"") // Force NameID to username+                            .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, ""username"") // Force NameID to username+                            .build());++            SAMLDocumentHolder samlLogoutResponse = prepareLogIntoTwoAppsSig()+                    .clearCookies() // remove cookies, since SOAP calls do not embed cookie normally+                    .logoutRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_SALES_POST_SIG, SOAP)+                    .nameId(nameIdRef::get)+                    .sessionIndex(sessionIndexRef::get)+                    .signWith(SAML_CLIENT_SALES_POST_SIG_PRIVATE_KEY, SAML_CLIENT_SALES_POST_SIG_PUBLIC_KEY)+                    .build()+                    .getSamlResponse(SOAP);++            assertThat(samlLogoutResponse.getSamlObject(), isSamlStatusResponse(JBossSAMLURIConstants.STATUS_SUCCESS));+            assertSoapLogoutEvent(SAML_CLIENT_ID_SALES_POST_SIG);++        } catch (Exception ex) {+            ex.printStackTrace();+            fail(""unexpected error"");+        }+    }++    /** Logout triggered with SOAP binding, request is wrongly not signed --> ensure an error is thrown */+    @Test+    public void testSoapBackchannelLogoutFromSamlClientUnsignedRequest() {+        try {+            adminClient.realm(REALM_NAME)+                    .clients().get(salesSigRep.getId())+                    .update(ClientBuilder.edit(salesSigRep)+                            .frontchannelLogout(false)+                            .attribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, ""true"") // Force NameID to username+                            .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, ""username"") // Force NameID to username+                            .build());++            try {+                SAMLDocumentHolder samlLogoutResponse = prepareLogIntoTwoAppsSig()+                        .clearCookies() // remove cookies, since SOAP calls do not embed cookie normally+                        .logoutRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_SALES_POST_SIG, SOAP, true)","I agree that authentication is out of the SAML SOAP Binding scope. I'm also comfortable with the current change in this aspect. Signatures and https should be enabled if a decent level of security is wanted (it's the same for all the SAML configuration).But we have to keep in mind that clients can have weird things to allow the call from the server to execute the logout in then (for example basic auth, certificates,...). With the current implementation the server just sends the SOAP message with/without signature (nothing more) and this fact should be clear (maybe doc or something). I don't like either that SOAP is using default [SOAPConnectionFactory](https://github.com/keycloak/keycloak/blob/20.0.3/services/src/main/java/org/keycloak/protocol/saml/profile/util/Soap.java#L207-L209) to perform the SOAP call. It means using default `HttpURLConnection` instead of `SimpleHttp` (proxies, certs,... are not taken into account). But this is another issue, @mhajas WDYT? Do we file another issue for that?The same for the server, it accepts logout requests with or without signature. Although prod configurations needs https and signatures for SAML to be minimally secure.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16608,1104344098,2023-02-13T11:29:40Z,.github/workflows/ci.yml,"@@ -495,6 +495,43 @@ jobs:         with:           job-name: Account Console IT +  webauthn-integration-tests:+    name: WebAuthn IT+    runs-on: ubuntu-latest+    needs: build+    timeout-minutes: 75",I'd suggest we try with 30 minutes for now. If these tests end up taking 75 that really is way to long.```suggestion    timeout-minutes: 30```,
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/17031,1104344842,2023-02-13T11:30:28Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -149,79 +153,77 @@               .ifPresent(key -> this.fieldPredicates.replace(key, (builder, op, params) -> builder));         } -        protected Path getPathForSanitizedId(Path sanitizedIdPath) {-            final Path dataDirectory = getDataDirectory();-            final Path dataDirectoryWithChildren = dataDirectory.resolve(sanitizedIdPath).getParent();--            if (! Files.isDirectory(dataDirectoryWithChildren)) {-                try {-                    Files.createDirectories(dataDirectoryWithChildren);-                } catch (IOException ex) {-                    throw new IllegalStateException(""Directory does not exist and cannot be created: "" + dataDirectory, ex);+        protected Path getPathForEscapedId(String[] escapedIdPathArray) {+            Path parentDirectory = getDataDirectory();+            Path targetPath = parentDirectory;+            for (String path : escapedIdPathArray) {+                targetPath = targetPath.resolve(path).normalize();",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2393),x
40686856,lagess,https://api.github.com/repos/keycloak/keycloak/pulls/16291,1104383134,2023-02-13T12:08:58Z,services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java,"@@ -748,6 +759,38 @@ protected Response buildLogoutResponse(UserSessionModel userSession, String logo     public Response backchannelLogout(UserSessionModel userSession, AuthenticatedClientSessionModel clientSession) {         ClientModel client = clientSession.getClient();         SamlClient samlClient = new SamlClient(client);++        // real backchannel logout if SOAP binding is supported (#9548)+        String soapLogoutUrl = getLogoutServiceUrl(session, client, SAML_SOAP_BINDING, true);+        if (soapLogoutUrl != null) {+            try {+                LogoutRequestType logoutRequest = createLogoutRequest(soapLogoutUrl, clientSession, client);+                Document samlLogoutRequest = createBindingBuilder(samlClient, false).soapBinding(SAML2Request.convert(logoutRequest)).getDocument();+                SOAPMessage soapResponse = Soap.createMessage().addToBody(samlLogoutRequest).call(soapLogoutUrl);","We can indeed validate the response. But then what would you expect in terms of impact? As the SLO feature is mainly a best-effort move, then validating the response will not impact what happens next during the SLO. To me, the main consequence of receiving a bad response from the client will end up being an additional warning entry in the logs.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16895,1104751588,2023-02-13T16:47:37Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakIngress.java,"@@ -114,6 +115,22 @@ protected void deleteExistingIngress() {         client.network().v1().ingresses().inNamespace(getNamespace()).delete(existingIngress);     } +    private boolean isExistingIngressFromSameOwnerReference() {++        if ((Objects.nonNull(this.keycloak) && Objects.nonNull(this.keycloak.getMetadata().getUid())) &&+            (Objects.nonNull(this.existingIngress) && Objects.nonNull(this.existingIngress.getMetadata().getOwnerReferences()))) {","I think we don't need this `if` at all. We can assume the fields (and the metadata etc.) are not `null`. And since we don't expect anything to be `null` here, we actually should let the NPE propagate if something is `null` as it is an unexpected state and the reconciliation should fail.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16895,1104771887,2023-02-13T17:02:51Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java,"@@ -188,4 +193,87 @@ public void testMainIngressDurability() {                     assertThat(k8sclient.network().v1().ingresses().inNamespace(namespace).list().getItems().size()).isEqualTo(0);                 });     }++    @Test+    public void testCustomIngressDeletion() {++        Keycloak defaultKeycloakDeployment;+        Ingress customIngressCreatedManually;+        String kcDeploymentName = ""example-kc"";",```suggestion        Keycloak defaultKeycloakDeployment = K8sUtils.getDefaultKeycloakDeployment();        Ingress customIngressCreatedManually;        String kcDeploymentName = defaultKeycloakDeployment.getMetadata().getName();```,
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/16895,1104923381,2023-02-13T19:24:33Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakIngress.java,"@@ -114,6 +115,22 @@ protected void deleteExistingIngress() {         client.network().v1().ingresses().inNamespace(getNamespace()).delete(existingIngress);     } +    private boolean isExistingIngressFromSameOwnerReference() {++        if ((Objects.nonNull(this.keycloak) && Objects.nonNull(this.keycloak.getMetadata().getUid())) &&+            (Objects.nonNull(this.existingIngress) && Objects.nonNull(this.existingIngress.getMetadata().getOwnerReferences()))) {","I only added this ```If``` because the error below happens in this other test:`org.opentest4j.AssertionFailedError: Expected :trueActual   :false<Click to see difference>        ...	at org.keycloak.operator.testsuite.unit.IngressLogicTest.testIngressDisabledExisting(IngressLogicTest.java:99)        ...`The `deleteExistingIngress()` method must run for that the `IngressLogicTest.testIngressDisabledExisting()` can perform successfully.When running the `IngressLogicTest.testIngressDisabledExisting()`, it is created a Mocked Ingress with its `Metadata` as `null`. And yet still the `deleteExistingIngress()` method must be run.So I'm gonna keep that `If` to have all tests passing OK.WDYT, @vmuzikar ?",
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/16895,1104924219,2023-02-13T19:25:25Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakIngress.java,"@@ -114,6 +115,22 @@ protected void deleteExistingIngress() {         client.network().v1().ingresses().inNamespace(getNamespace()).delete(existingIngress);     } +    private boolean isExistingIngressFromSameOwnerReference() {++        if ((Objects.nonNull(this.keycloak) && Objects.nonNull(this.keycloak.getMetadata().getUid())) &&+            (Objects.nonNull(this.existingIngress) && Objects.nonNull(this.existingIngress.getMetadata().getOwnerReferences()))) {","I only added this ```If``` because the error below happens in this other test:`org.opentest4j.AssertionFailedError: Expected :trueActual   :false<Click to see difference>        ...	at org.keycloak.operator.testsuite.unit.IngressLogicTest.testIngressDisabledExisting(IngressLogicTest.java:99)        ...`The `deleteExistingIngress()` method must run for that the `IngressLogicTest.testIngressDisabledExisting()` can perform successfully.When running the `IngressLogicTest.testIngressDisabledExisting()`, it is created a Mocked Ingress with its `Metadata` as `null`. And yet still the `deleteExistingIngress()` method must be run.So I'm gonna keep that `If` to have all tests passing OK.WDYT, @vmuzikar ?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17031,1104965529,2023-02-13T20:07:10Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileMapStorage.java,"@@ -149,79 +153,77 @@ public Crud(Class<V> entityClass, Function<String, Path> dataDirectoryFunc, Func               .ifPresent(key -> this.fieldPredicates.replace(key, (builder, op, params) -> builder));         } -        protected Path getPathForSanitizedId(Path sanitizedIdPath) {-            final Path dataDirectory = getDataDirectory();-            final Path dataDirectoryWithChildren = dataDirectory.resolve(sanitizedIdPath).getParent();--            if (! Files.isDirectory(dataDirectoryWithChildren)) {-                try {-                    Files.createDirectories(dataDirectoryWithChildren);-                } catch (IOException ex) {-                    throw new IllegalStateException(""Directory does not exist and cannot be created: "" + dataDirectory, ex);+        protected Path getPathForEscapedId(String[] escapedIdPathArray) {+            Path parentDirectory = getDataDirectory();+            Path targetPath = parentDirectory;+            for (String path : escapedIdPathArray) {+                targetPath = targetPath.resolve(path).normalize();+                if (! targetPath.getParent().equals(parentDirectory)) {+                    LOG.warnf(""Path traversal detected: %s"", Arrays.toString(escapedIdPathArray));+                    return null;                 }+                parentDirectory = targetPath;             }-            return dataDirectoryWithChildren.resolve(sanitizedIdPath.getFileName() + FILE_SUFFIX);++            return targetPath.resolveSibling(targetPath.getFileName() + FILE_SUFFIX);         } -        protected Path getPathForSanitizedId(String sanitizedId) {-            if (sanitizedId == null) {-                throw new IllegalStateException(""Invalid ID to sanitize"");+        protected Path getPathForEscapedId(String escapedId) {+            if (escapedId == null) {+                throw new IllegalStateException(""Invalid ID to escape"");             } -            return getPathForSanitizedId(Path.of(sanitizedId));+            String[] escapedIdArray = ID_COMPONENT_SEPARATOR_PATTERN.split(escapedId);+            return getPathForEscapedId(escapedIdArray);         } -        protected String sanitizeId(String id) {-            Objects.requireNonNull(id, ""ID must be non-null"");+        // Percent sign + Unix (/) and https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file reserved characters","The reserved chars listed here are only a subset of those reserved characters listed at the given URL. * Integer value zero, sometimes referred to as the ASCII NUL character.* Characters whose integer representations are in the range from 1 through 31I assume that the creation of such a file will fail, and there will be no harm done. As those file names would also be strange on Linux systems, I'd suggest to treat those characters as illegal and not even escape those. The docs also list LPT1 and other file names which shouldn't be used. I gave it a try on a recent Windows machine:  I was able to create those files with ported *nix tools on the file system, but wasn't able to retrieve the files with *OS/*indows tools, so the results are kind of mixed. I am not sure if harm can be done here, so I'd suggest to avoid those names on Windows file systems.As those items are not necessarily related to the path traversal issue, feel free to consider them for a future issue.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16312,1104979542,2023-02-13T20:22:57Z,pom.xml,"@@ -1803,6 +1803,11 @@                         <nexusUrl>${jboss.repo.nexusUrl}</nexusUrl>                     </configuration>                 </plugin>+                <plugin>+                    <groupId>org.apache.maven.plugins</groupId>+                    <artifactId>maven-shade-plugin</artifactId>+                    <version>3.4.1</version>","Don't see this pattern applied consistently here, will still rework this PR. Back to draft mode.",x
240096,nielsbasjes,https://api.github.com/repos/keycloak/keycloak/pulls/16876,1105147188,2023-02-14T00:06:27Z,server-spi-private/src/main/java/org/keycloak/device/DeviceActivityManager.java,"@@ -104,45 +99,16 @@ private static DeviceRepresentation getDeviceFromUserAgent(KeycloakSession sessi         DeviceRepresentation current;          try {-            Client client = UA_PARSER.parse(userAgent);-            current = new DeviceRepresentation();--            current.setDevice(client.device.family);--            String browserVersion = client.userAgent.major;+            UserAgentAnalyzer uaa = UserAgentAnalyzer.newBuilder().hideMatcherLoadStats().withCache(10000).build();",Note that this step takes a few seconds.It is common to instantiate the UserAgentAnalyzer once and use it many times.,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16895,1105472271,2023-02-14T08:44:25Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakIngress.java,"@@ -114,6 +115,22 @@ protected void deleteExistingIngress() {         client.network().v1().ingresses().inNamespace(getNamespace()).delete(existingIngress);     } +    private boolean isExistingIngressFromSameOwnerReference() {++        if ((Objects.nonNull(this.keycloak) && Objects.nonNull(this.keycloak.getMetadata().getUid())) &&+            (Objects.nonNull(this.existingIngress) && Objects.nonNull(this.existingIngress.getMetadata().getOwnerReferences()))) {","I would fix the `testIngressDisabledExisting` to add (empty) metadata. In real-life scenarios, we can expect the metadata for existing Ingress are there. Otherwise, something's wrong and the reconciliation should fail.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/16895,1105474866,2023-02-14T08:46:51Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java,"@@ -188,4 +193,81 @@ public void testMainIngressDurability() {                     assertThat(k8sclient.network().v1().ingresses().inNamespace(namespace).list().getItems().size()).isEqualTo(0);                 });     }++    @Test+    public void testCustomIngressDeletion() {++        Keycloak defaultKeycloakDeployment = K8sUtils.getDefaultKeycloakDeployment();+        String kcDeploymentName = defaultKeycloakDeployment.getMetadata().getName();+        Resource<Ingress> customIngressDeployedManuallySelector = null;+        Ingress customIngressCreatedManually;++        try {++            customIngressCreatedManually = createCustomIngress(kcDeploymentName, namespace, 8443);++            customIngressDeployedManuallySelector = k8sclient+                    .network()+                    .v1()+                    .ingresses()+                    .inNamespace(namespace)+                    .withName(customIngressCreatedManually.getMetadata().getName());++            Awaitility.await().atMost(1, MINUTES).untilAsserted(() -> {+                assertThat(k8sclient.network().v1().ingresses().inNamespace(namespace).list().getItems().size()).isEqualTo(1);+            });++            Log.info(""Redeploying the Keycloak CR with default Ingress disabled"");+            defaultKeycloakDeployment = K8sUtils.getDefaultKeycloakDeployment();",Just a non-blocking nitpick. We don't need it as this variable is already assigned here:https://github.com/keycloak/keycloak/blob/89586ebaf4b6ace35d3b9f376975f67095ee5bc2/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java#L200,
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/16291,1105498994,2023-02-14T09:07:42Z,services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java,"@@ -748,6 +759,38 @@ protected Response buildLogoutResponse(UserSessionModel userSession, String logo     public Response backchannelLogout(UserSessionModel userSession, AuthenticatedClientSessionModel clientSession) {         ClientModel client = clientSession.getClient();         SamlClient samlClient = new SamlClient(client);++        // real backchannel logout if SOAP binding is supported (#9548)+        String soapLogoutUrl = getLogoutServiceUrl(session, client, SAML_SOAP_BINDING, true);+        if (soapLogoutUrl != null) {+            try {+                LogoutRequestType logoutRequest = createLogoutRequest(soapLogoutUrl, clientSession, client);+                Document samlLogoutRequest = createBindingBuilder(samlClient, false).soapBinding(SAML2Request.convert(logoutRequest)).getDocument();+                SOAPMessage soapResponse = Soap.createMessage().addToBody(samlLogoutRequest).call(soapLogoutUrl);","Yep, you are right. The logout is already done and any exception will produce just a warning of some kind. But don't you think is important knowing that the endpoint is not signing the response? Even to advise the configurator there is something weird here? ",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16876,1105566617,2023-02-14T10:03:52Z,server-spi-private/src/main/java/org/keycloak/device/DeviceActivityManager.java,"@@ -27,22 +27,18 @@ import org.keycloak.models.UserSessionModel; import org.keycloak.representations.account.DeviceRepresentation; import org.keycloak.util.JsonSerialization;-import ua_parser.Client;-import ua_parser.Parser;+import nl.basjes.parse.useragent.UserAgentAnalyzer;+import nl.basjes.parse.useragent.UserAgent;  /**  * @author <a href=""mailto:psilva@redhat.com"">Pedro Igor</a>  */ public class DeviceActivityManager {",I'd argue this should really be an SPI and not a util class like this. That would allow the factory to create a singleton provider that is re-used rather than rely on static/final in a helper class.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/17065,1105599135,2023-02-14T10:32:30Z,docs/guides/src/main/server/caching.adoc,"@@ -14,7 +14,7 @@ The current distributed cache implementation is built on top of https://infinisp == Enable distributed caching When you start Keycloak in production mode, by using the `start` command, caching is enabled and all Keycloak nodes in your network are discovered. -By default, caches are using a `UDP` transport stack so that nodes are discovered using IP multicast transport based on UDP. For most production environments, there are better discovery alternatives to UDP available. Keycloak allows you to either choose from a set of pre-defined default transport stacks, or to define your own custom stack, as you will see later in this guide.+By default, caches are using a `UDP` transport stack so that nodes are discovered using IP multicast transport based on UDP. For most production environments, there are better discovery alternatives to UDP available. Keycloak allows you to either choose from a set of pre-defined default transport stacks, or to define your own custom stack, as you will see later in this topic.","I don't think `topic` works from the community perspective, since we refer to them as independent guides, rather than topics within a guide.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16876,1105603742,2023-02-14T10:36:52Z,server-spi-private/src/main/java/org/keycloak/device/DeviceActivityManager.java,"@@ -27,22 +27,18 @@ import org.keycloak.models.UserSessionModel; import org.keycloak.representations.account.DeviceRepresentation; import org.keycloak.util.JsonSerialization;-import ua_parser.Client;-import ua_parser.Parser;+import nl.basjes.parse.useragent.UserAgentAnalyzer;+import nl.basjes.parse.useragent.UserAgent;  /**  * @author <a href=""mailto:psilva@redhat.com"">Pedro Igor</a>  */ public class DeviceActivityManager {","2-3 is a very long initialization. Why is it that slow? Really seems like that is adding a lot of overhead to getting ready just to be able to parse some headers. Regardless of how it's initalized (startup, in the background, or for first request) that is a lot of wasted CPU cycles just to initialize something small like this.Memory footprint of 150 MB is also very concerning.",
240096,nielsbasjes,https://api.github.com/repos/keycloak/keycloak/pulls/16876,1105611670,2023-02-14T10:44:06Z,server-spi-private/src/main/java/org/keycloak/device/DeviceActivityManager.java,"@@ -27,22 +27,18 @@ import org.keycloak.models.UserSessionModel; import org.keycloak.representations.account.DeviceRepresentation; import org.keycloak.util.JsonSerialization;-import ua_parser.Client;-import ua_parser.Parser;+import nl.basjes.parse.useragent.UserAgentAnalyzer;+import nl.basjes.parse.useragent.UserAgent;  /**  * @author <a href=""mailto:psilva@redhat.com"">Pedro Igor</a>  */ public class DeviceActivityManager {",The 2-3 seconds come from turning a few thousand rules into data structures that have been optimised for execution performance. Note that if you ask the system at startup for less fields both the startup time and runtime improve.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/17083,1105855771,2023-02-14T13:55:51Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/IckleQueryWhereClauses.java,"@@ -167,6 +170,30 @@ private static String whereClauseForConsentClientFederationLink(String modelFiel         return IckleQueryOperators.combineExpressions(ModelCriteriaBuilder.Operator.LIKE, getFieldName(UserModel.SearchableFields.CONSENT_FOR_CLIENT), new String[] {providerId + ""%""}, parameters);     } +    private static String whereClauseForClientRole(String modelFieldName, ModelCriteriaBuilder.Operator op, Object[] values, Map<String, Object> parameters) {+        if (op != ModelCriteriaBuilder.Operator.EQ && op != ModelCriteriaBuilder.Operator.NE) {+            throw new CriterionNotSupportedException(RoleModel.SearchableFields.IS_CLIENT_ROLE, op);+        }+        if (values == null || values.length != 1) {+            throw new CriterionNotSupportedException(RoleModel.SearchableFields.IS_CLIENT_ROLE, op, ""Invalid arguments, expected (boolean), got: "" + Arrays.toString(values));+        }++        Boolean b = (Boolean) values[0];+        if (op == Operator.EQ) {","This can be simplified to something like this:```javaBoolean b = (Boolean) values[0];Operator operatorToUse = (op == Operator.EQ && b == Boolean.TRUE) || (op == Operator.NE && b == Boolean.FALSE) ? Operator.EXISTS : Operator.NOT_EXISTS;return IckleQueryWhereClauses.produceWhereClause(RoleModel.SearchableFields.CLIENT_ID, operatorToUse, new Object[] {}, parameters);```however, I am not sure about readability. Your version is probably better.",
40686856,lagess,https://api.github.com/repos/keycloak/keycloak/pulls/16291,1106700812,2023-02-15T06:23:21Z,services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java,"@@ -748,6 +759,38 @@ protected Response buildLogoutResponse(UserSessionModel userSession, String logo     public Response backchannelLogout(UserSessionModel userSession, AuthenticatedClientSessionModel clientSession) {         ClientModel client = clientSession.getClient();         SamlClient samlClient = new SamlClient(client);++        // real backchannel logout if SOAP binding is supported (#9548)+        String soapLogoutUrl = getLogoutServiceUrl(session, client, SAML_SOAP_BINDING, true);+        if (soapLogoutUrl != null) {+            try {+                LogoutRequestType logoutRequest = createLogoutRequest(soapLogoutUrl, clientSession, client);+                Document samlLogoutRequest = createBindingBuilder(samlClient, false).soapBinding(SAML2Request.convert(logoutRequest)).getDocument();+                SOAPMessage soapResponse = Soap.createMessage().addToBody(samlLogoutRequest).call(soapLogoutUrl);","Yes, it can indeed be useful to know that something is not appropriately configured, or behaving badly.I'll check how to improve on that.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1106752322,2023-02-15T07:39:09Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {","It will be better to implement this as separate condition instead of extension of `SpnegoAuthenticator`.I know we have already `ConditionalFormAuthenticatorFactory`, but that was introduced before we have conditions support for authentication flows. For the sake of better composing and ability to re-use the similar condition in other places too, the dedicated implementation of `ConditionalAuthenticator` is much better option.I am not sure if it is easily possible to test with `X-Forwarded` header, but I think that we can at least test with protocol re-authentication (EG. check that with `prompt=login` the SPNEGO is not triggered, but without `prompt=login` it is triggered).",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1106764657,2023-02-15T07:54:01Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {++    private static Logger logger = Logger.getLogger(ConditionalSpnegoAuthenticator.class);++    public static final String WHITELIST_PATTERN = ""XForwardedForWhitelistPattern"";++    @Override+    public void authenticate(AuthenticationFlowContext context) {+        AuthenticationSessionModel session = context.getAuthenticationSession();+        Map<String, String> clientNotes = session.getClientNotes();+        if (""login"".equals(clientNotes.get(""prompt""))) {","Few points to this: 1) Is it possible to replace this with something like:```LoginProtocol protocol = context.getSession().getProvider(LoginProtocol.class, authSession.getProtocol());if (protocol.requireReauthentication(context.getUserSession(), context.getAuthenticationSession());```Will make it possible to use this with context of SAML as well. It is possible that this will need to add method `getUserSession()` to `AuthenticationFlowContext` (UserSession might have been attached before by CookieAuthenticator, which is usually before SPNEGO).Also will likely require some checks for null userSession in the protocol implementations.2) Is it possible to add option to the condition like `Ignore when protocol requires re-authentication` with the description similar to `When this option is enabled, then condition is evaluated to false when protocol requires re-authentication. For example when parameter prompt=login for OIDC protocol is used or forceauthn for SAML protocol` .This will allow that condition can be evaluated for:- only protocol authentication- only x-forwarded header- both",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1106765317,2023-02-15T07:54:43Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {++    private static Logger logger = Logger.getLogger(ConditionalSpnegoAuthenticator.class);++    public static final String WHITELIST_PATTERN = ""XForwardedForWhitelistPattern"";++    @Override+    public void authenticate(AuthenticationFlowContext context) {+        AuthenticationSessionModel session = context.getAuthenticationSession();+        Map<String, String> clientNotes = session.getClientNotes();+        if (""login"".equals(clientNotes.get(""prompt""))) {+            logger.debug(""Skip SPNEGO because of prompt=login"");",Minor: Will be nice to remove SPNEGO from the debug message (if we go with dedicated condition as I've proposed). Similar to other debug messages.,x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/16876,1106813082,2023-02-15T08:43:00Z,server-spi-private/src/main/java/org/keycloak/useragent/UserAgentProvider.java,"@@ -0,0 +1,13 @@+package org.keycloak.useragent;++import nl.basjes.parse.useragent.UserAgentAnalyzer;+import org.keycloak.provider.Provider;++public interface UserAgentProvider extends Provider {++    UserAgentAnalyzer userAgentAnalyser();",Is it possible that this method is changed to something like `DeviceRepresentation getDeviceRepresentation()` ?As it will be nice that SPI is generic and does not use any YAUAA specific stuff.That will allow that for example people can plug their own impl based on completely different library if they want to.,
2642119,slominskir,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1107479351,2023-02-15T17:43:52Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {","Ok, I'll look into `ConditionalAuthenticator`.   Just looking at the [docs](https://www.keycloak.org/docs/20.0.3/server_admin/index.html#conditional) it's a little confusing as it says:> - If all executions evaluate as true, the Conditional sub-flow acts as Required.> - If all executions evaluate as false, the Conditional sub-flow acts as Disabled.I think this might be trying to say:- If all executions evaluate as true, the Conditional sub-flow acts as Required.- If __any__ execution evaluates as false, the Conditional sub-flow acts as Disabled.Otherwise the case of some executions evaluate to true while others evaluate to false is left unexplained.Also, a SPNEGO execution is usually configured as an `ALTERNATIVE`, meaning if it fails no problem just continue on to the next authenticator.REQUIRED is defined in the docs as: > All Required elements in the flow must be successfully sequentially executed. The flow terminates if a required element fails.Does that mean that if we use a `ConditionalAuthenticator` it is not possible to conditonally attempt SPNEGO, and if attempted, but fails, continue on to the next authenticator?  If possible, then maybe I'm confusing the definition of a REQUIRED subflow vs a REQUIRED execution?",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1107532110,2023-02-15T18:23:17Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {","Yes, you're right. I think the docs should be updated as you suggested (regarding if *any* ...)Regarding conditional subflow: I think that what you want to achieve probably can be achieved with something like replacing default Kerberos authenticator with something like:```- kerberos-subflow1 ALTERNATIVE-- nested-conditional-subflow CONDITIONAL--- condition1-reauthentication REQUIRED--- condition2-xforwarded-headers REQUIRED--- Kerberos ALTERNATIVE```Note that I can be wrong as I did not test it by myself. This configuration is a bit cumbersome and we plan to improve authentication flows by adding ""Authentication policies"" in the future, which will allow to configure them in the more intuitive way.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1107535830,2023-02-15T18:26:12Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {++    private static Logger logger = Logger.getLogger(ConditionalSpnegoAuthenticator.class);++    public static final String WHITELIST_PATTERN = ""XForwardedForWhitelistPattern"";++    @Override+    public void authenticate(AuthenticationFlowContext context) {+        AuthenticationSessionModel session = context.getAuthenticationSession();+        Map<String, String> clientNotes = session.getClientNotes();+        if (""login"".equals(clientNotes.get(""prompt""))) {","yes, 2 separate conditions can be better option. +1 for `ReauthenticationCondition` (will be good to add option to it which allows to evaluate it to true in case that protocol re-authentication is used but also for the opposite case when protocol re-authentication is *not* used. As I think that for various cases, both conditions can be useful).",
2642119,slominskir,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1107595607,2023-02-15T19:12:55Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {","Wow, that's a mess.  It looks like the requirement type of `Conditional` unnecessarily complicates and de-normalizes.  The `Conditional` requirement should probably be deprecated and instead simply adding an execution type of Conditional subflow is enough to indicate you mean conditional subflow.  Having a separate requirement type is redundant and actually prevents you from indicating that the subflow is ALTERNATIVE.  Intuitively the only difference between a regular subflow and a conditional subflow would be that the regular one has ordered executions and a conditional subflow has ordered conditions and then one execution at the end that is only executed if the gauntlet of conditions are all passed.  It's actually not immediately clear how this is supposed to work.  It looks like this was defined in https://github.com/keycloak/keycloak/pull/7897",x
2642119,slominskir,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1107641239,2023-02-15T19:42:06Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {++    private static Logger logger = Logger.getLogger(ConditionalSpnegoAuthenticator.class);++    public static final String WHITELIST_PATTERN = ""XForwardedForWhitelistPattern"";++    @Override+    public void authenticate(AuthenticationFlowContext context) {+        AuthenticationSessionModel session = context.getAuthenticationSession();+        Map<String, String> clientNotes = session.getClientNotes();+        if (""login"".equals(clientNotes.get(""prompt""))) {",> but also for the opposite case when protocol re-authentication is not usedThis sounds like something the `ConditionalAuthenticator` framework should support generically - i.e. a config option to apply `not` (!) on the boolean result that a condition provides.,
2642119,slominskir,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1107666972,2023-02-15T20:06:41Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {","Actually, it looks like the way conditional subflows work is if their condition fails then they can short-circuit the conditional subflow as if the entire subflow execution is DISABLED.  If their condition passes then execution is allowed to continue and any executions in the conditional flow behave as if they're in a regular flow and not in a subflow at all.  If that's true then the setup would look like:```- conditional-subflow CONDITIONAL-- condition1-reauthentication-- condition2-xforwarded-headers-- Kerberos ALTERNATIVE```I don't think conditions have ""requirements"" - they just simply resolve to pass or fail.   I haven't tested any of this either and it's worrying that it's not immediately clear how this is supposed to work.",x
2642119,slominskir,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1107718750,2023-02-15T21:02:34Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {","The idea of a set of generic reusable conditions is good, but an ordered list of conditions should probably be an attribute of an execution, not a special subflow.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1108159657,2023-02-16T08:33:27Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {++    private static Logger logger = Logger.getLogger(ConditionalSpnegoAuthenticator.class);++    public static final String WHITELIST_PATTERN = ""XForwardedForWhitelistPattern"";++    @Override+    public void authenticate(AuthenticationFlowContext context) {+        AuthenticationSessionModel session = context.getAuthenticationSession();+        Map<String, String> clientNotes = session.getClientNotes();+        if (""login"".equals(clientNotes.get(""prompt""))) {","> This sounds like something the `ConditionalAuthenticator` framework should support generically - i.e. a config option to apply `not` (!) on the boolean result that a condition provides.+1, it does not right now, but it is generally useful for every condition though.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17064,1108164410,2023-02-16T08:38:09Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ConditionalSpnegoAuthenticator.java,"@@ -0,0 +1,87 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ *+ */+package org.keycloak.authentication.authenticators.browser;++import org.jboss.logging.Logger;+import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.Map;+import java.util.regex.Pattern;++/**+ * A {@link SpnegoAuthenticator} that can conditionally skip SPNEGO authentication.+ * <p>+ * This Keycloak authenticator allows SPNEGO authentication to be skipped by explicit client request and optionally by+ * request IP. Clients can request SPNEGO authentication be skipped via the URL prompt=login present in the client+ * request. A Whitelist Regex Pattern can optionally be configured, and if configured, it is compared against the+ * <i>X-Forwarded-For</i> header on auth requests to check for a match. If no match then no SPNEGO is skipped.+ * </p>+ * <p>+ * It is often desirable to treat Intranet (internal) users with the convenience of Kerberos Single Sign On, while+ * preventing Internet (external) users from possibly seeing a confusing NTLM prompt dialog.  It can also be useful to+ * allow users to explicitly opt out of SPNEGO in order to provide a switch user functionality.+ * </p>+ * @author <a href=""mailto:Ryan.Slominski@gmail.com"">Ryan Slominski</a>+ */+public class ConditionalSpnegoAuthenticator extends SpnegoAuthenticator {","Sorry about the confusion with the requirement on the conditions...I think that for your configuration, the `conditional-subflow` will become `REQUIRED` in case that conditions evaluate to true. Hence it likely won't work correctly if you want it to use at same level with other things and achieve something like: cookie OR conditional-kerberos OR identity-provider-redirector OR forms-subflowHence why I think another ""parent"" alternative subflow might be needed to wrap the conditional-subflow... You can try and see.I definitely agree that this stuff may require some more love to become more usable and intuitive to configure.",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/16619,1108211908,2023-02-16T09:21:41Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/HotRodMapStorage.java,"@@ -152,29 +194,91 @@ private static String toOrderString(QueryParameters.OrderBy<?> orderBy) {      @Override     public Stream<V> read(QueryParameters<M> queryParameters) {+        if (LockObjectsForModification.isEnabled(session, storedEntityDescriptor.getModelTypeClass())) {+            return pessimisticQueryRead(queryParameters);+        }++        Query<E> query = prepareQueryWithPrefixAndParameters(null, queryParameters);+        CloseableIterator<E> iterator = paginateQuery(query, queryParameters.getOffset(),+                queryParameters.getLimit()).iterator();+        return closing(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false))+                .onClose(iterator::close)+                .filter(Objects::nonNull) // see https://github.com/keycloak/keycloak/issues/9271+                .map(this.delegateProducer);+    }++    private Stream<V> pessimisticQueryRead(QueryParameters<M> queryParameters) {+        DefaultModelCriteria<M> dmc = queryParameters.getModelCriteriaBuilder();+        List<String> idsToRead = new LinkedList<>();++        dmc.partiallyEvaluate((field, operator, operatorArguments) -> {+            if (MapFieldPredicates.isPrimaryKey(field)) {+                if (operator == ModelCriteriaBuilder.Operator.EQ) {+                    idsToRead.add((String) operatorArguments[0]);+                }++                if (operator == ModelCriteriaBuilder.Operator.IN) {+                    for (Object operatorArgument : operatorArguments) {+                        idsToRead.add((String) operatorArgument);+                    }+                }+            }++            return null;+        });","The expectation that `idsToRead` will contain IDs which this condition is restricted to is based on premise that any operator on the ID is in positive path and is in the end included in the query. This assumption is not correct though: consider `NOT(ID=1)` condition.This assumption works in special cases, which should cover the usecases needed here: Assign `true` to every non-ID criteria and let the criteria tree `optimize`. Then pick the IDs from the tree while ensuring no unexpected operation is seen; otherwise defer to the ordinary query. See [`getSingleRestrictionArgument`](https://github.com/keycloak/keycloak/blob/3be2775f9e72845a1f4c178d8c197cc17488b7aa/model/map/src/main/java/org/keycloak/models/map/storage/criteria/DescriptiveModelCriteria.java#L181)",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/16897,1108303755,2023-02-16T10:43:18Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/ForceLoAAuthenticator.java,"@@ -0,0 +1,87 @@+package org.keycloak.authentication.authenticators.browser;++import org.keycloak.authentication.AuthenticationFlowContext;+import org.keycloak.authentication.Authenticator;+import org.keycloak.authentication.authenticators.util.AcrStore;+import org.keycloak.models.ClientModel;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.protocol.oidc.utils.AcrUtils;+import org.keycloak.sessions.AuthenticationSessionModel;++import java.util.List;+import java.util.Map;++import static org.keycloak.models.Constants.NO_LOA;++public class ForceLoAAuthenticator implements Authenticator {++    @Override+    public void authenticate(AuthenticationFlowContext authenticationFlowContext) {+        int configuredMinLoa = new ForceLoAAuthenticatorConfig(+            authenticationFlowContext.getAuthenticatorConfig()).levelOfAuthentication();++        ClientModel client = authenticationFlowContext.getAuthenticationSession().getClient();++        int maxDefaultLoa = getMaxDefaultLoa(client);+        int enforcedLoA = Math.max(configuredMinLoa, maxDefaultLoa);++        AuthenticationSessionModel authenticationSession = authenticationFlowContext.getAuthenticationSession();+        AcrStore acrStore = new AcrStore(authenticationSession);+        int requestedLevelOfAuthentication = acrStore.getRequestedLevelOfAuthentication();+        if (requestedLevelOfAuthentication < enforcedLoA) {+            authenticationSession.setClientNote(Constants.REQUESTED_LEVEL_OF_AUTHENTICATION,+                String.valueOf(enforcedLoA));+            authenticationSession.setClientNote(Constants.FORCE_LEVEL_OF_AUTHENTICATION, Boolean.TRUE.toString());+        }+        authenticationFlowContext.success();+    }++    private int getMaxDefaultLoa(ClientModel client) {+        int defaultLoa = NO_LOA;+        List<String> defaultAcrValues = AcrUtils.getDefaultAcrValues(client);+        Map<String, Integer> acrToLoaMap = AcrUtils.getAcrLoaMap(client);+        if (acrToLoaMap.isEmpty()) {+            acrToLoaMap = AcrUtils.getAcrLoaMap(client.getRealm());+        }+        for (String configuredAcr : defaultAcrValues) {+            int loa;+            if (acrToLoaMap.containsKey(configuredAcr)) {","Minor: Is it possible to add util method to `AcrUtils` like:```Integer getMappedLoad(String loa, Map<String, Integer> acrLoaMap);```and make the code in lines 50-59 to use that util method? For that case, it will be also good to update method `AcrUtils.mapLoaToAcr` (lines around 132-141) to use your new method. Just trying to avoid using same/similar logic on multiple places around codebase.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17150,1108964302,2023-02-16T19:58:55Z,services/src/main/java/org/keycloak/device/DeviceRepresentationProviderImpl.java,"@@ -0,0 +1,87 @@+package org.keycloak.device;++import org.jboss.logging.Logger;+import org.keycloak.models.KeycloakContext;+import org.keycloak.models.KeycloakSession;+import org.keycloak.representations.account.DeviceRepresentation;+import ua_parser.Client;+import ua_parser.Parser;++import javax.ws.rs.core.HttpHeaders;++public class DeviceRepresentationProviderImpl implements DeviceRepresentationProvider {+    private static final Logger logger = Logger.getLogger(DeviceActivityManager.class);+    private static final int USER_AGENT_MAX_LENGTH = 512;+    private static final Parser UA_PARSER;++    static {+        UA_PARSER = new Parser();","Hint: This `Parser()` field does not need to be static, but can be created by the factory (for example in the method `init` or `postInit` or via `lazyInit` pattern - see for example `DefaultJpaConnectionProviderFactory` for example of the `lazyInit` pattern) and be declared as the regular field on the factory.Then in `create` method of the factory, you can call `new DeviceRepresentationProviderImpl(session, parser);` . Factory is something like singleton, but the `DeviceRepresentationProviderImpl` does not need to be singleton, but rather per-request object. This means method `deviceRepresentation()` does not need session as an argument (as session would be passed to DeviceRepresentationProviderImpl via constructor).This is the similar approach, which we used for most of other Keycloak providers. See for example DefaultJpaConnectionProviderFactory.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/16924,1109394279,2023-02-17T07:38:45Z,docs/building.md,"@@ -30,19 +30,21 @@ First clone the Keycloak repository:      To build Keycloak run: -    mvn clean install+    mvn clean install -DskipTests=true     -This will build all modules and run the testsuite. +This will build all modules. The build of the Keycloak server is then available in the archive under the directory `quarkus/dist/target`. -To build the ZIP distribution run:+If you would also like to run testsuite during the build, you can omit the `-DskipTests=true` parameter. Please be aware that testsuite can take at least 3 hours to complete. However, there is an alternative if you want to avoid running the full testsuite on your laptop and at the same time ensure that your changes in the code did not cause regressions. To check if your changes will cause a regression, you should push the changes to a GitHub fork and verify if all the checks are successful. Those checks run testsuite and do other verifications. -    mvn clean install -Pdistribution+To build the ZIP for the WildFly distribution (*deprecated*) with all the adapters:",There is no longer a WF distribution in main,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17173,1110046561,2023-02-17T16:30:41Z,docs/guides/src/main/getting-started/templates/first-app.adoc,"@@ -1,36 +1,39 @@-== Secure your first app+== Secure the first application -Let's try to secure our first application. First step is to register this application with your Keycloak instance:+To secure the first application, you start by registering the application with your Keycloak instance: -. Open the {links-admin-console}-. Click 'Clients'-. Click 'Create client'+. Open the {links-admin-console}.+. Click *Clients*.+. Click *Create client* . Fill in the form with the following values:-** Client type: `OpenID Connect`-** Client ID: `myclient`-. Click 'Next'-. Make sure 'Standard flow' is enabled-. Click 'Save'+** *Client type*: `OpenID Connect`+** *Client ID*: `myclient`+. Click *Next*+. Confirm that *Standard flow* is enabled.+. Click *Save*.  image::add-client-1.png[Add Client] -After the client is created you need to update the following values for the client:+After the client is created, make these updates to the client: -. Valid redirect URIs: `https://www.keycloak.org/app/*`-. Web origins: `https://www.keycloak.org`--Remember to click `Save`.+. Scroll down to *Access settings*.+* Set *Valid redirect URIs* to `https://www.keycloak.org/app/*`+* Set *Web origins* to `https://www.keycloak.org`","Those links are data that should be entered, and not clicked on. Therefore I added a passthrough so they are rendered as text and not as links. This was this way in the original docs, still it should be changed.```suggestion* Set *Valid redirect URIs* to `+https://www.keycloak.org/app/*+`* Set *Web origins* to `+https://www.keycloak.org+````",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16619,1111623891,2023-02-20T08:33:59Z,model/map/src/main/java/org/keycloak/models/map/storage/chm/MapFieldPredicates.java,"@@ -613,4 +618,8 @@ public static <K, V extends AbstractEntity, M> Comparator<V> getComparator(Strea     public static <K, V extends AbstractEntity, M> Map<SearchableModelField<? super M>, UpdatePredicatesFunc<K, V, M>> getPredicates(Class<M> clazz) {         return PREDICATES.get(clazz);     }++    public static boolean isPrimaryKey(SearchableModelField<?> field) {",I removed the method since it is no longer necessary with the method [getSingleRestrictionArgument](https://github.com/keycloak/keycloak/blob/3be2775f9e72845a1f4c178d8c197cc17488b7aa/model/map/src/main/java/org/keycloak/models/map/storage/criteria/DescriptiveModelCriteria.java#L181),
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17205,1112811525,2023-02-21T09:42:59Z,docs/guides/src/main/operator/advanced-configuration.adoc,"@@ -60,21 +58,21 @@ spec:     xaEnabled: false ---- -For all available options please see the Keycloak CRD. For a documentation of the individual options, refer to <@links.server id=""all-config""/>.+For a list fo options, see the Keycloak CRD. For details on configuring options, see https://www.keycloak.org/server/all-config[All configuration].","```suggestionFor a list of options, see the Keycloak CRD. For details on configuring options, see https://www.keycloak.org/server/all-config[All configuration].```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17205,1112835479,2023-02-21T10:02:33Z,docs/guides/src/main/operator/basic-deployment.adoc,"@@ -4,29 +4,28 @@ <#import ""/templates/links.adoc"" as links>  <@tmpl.guide-title=""Basic Keycloak Deployment""+title=""Basic Keycloak deployment"" priority=20 summary=""How to install Keycloak using the Operator on Kubernetes or OpenShift""> -== Basic Keycloak Deployment-In this guide we will show how to have a basic Keycloak Deployment on Kubernetes or OpenShift using the Operator.-We assume that the Operator is correctly installed and running in the cluster namespace.+== Performing a basic Keycloak deployment+This guide describes how to perform a basic Keycloak Deployment on Kubernetes or OpenShift using the Operator. -=== Pre-requisites+=== Preparing for deployment++Once the Keycloak Operator is installed and running in the cluster namespace, you can set up the other deployment prerequisites.  * Database * Hostname * TLS Certificate and associated keys  ==== Database -A database should be available and accessible from the cluster namespace where you want to install Keycloak.-Please refer to <@links.server id=""db""/> for the list of supported databases.-The Keycloak Operator does not manage the database and you need to provision it yourself, we suggest to verify your cloud provider offering or use a database Operator such as https://access.crunchydata.com/documentation/postgres-operator/latest/[Crunchy].-+A database should be available and accessible from the cluster namespace where Keycloak is installed.+For a list of supported databases, see https://www.keycloak.org/server/db[Configuring the database].+The Keycloak Operator does not manage the database and you need to provision it yourself. Consider verifying your cloud provider offering or use a database operator such as https://access.crunchydata.com/documentation/postgres-operator/latest/[Crunchy].",```suggestionThe Keycloak Operator does not manage the database and you need to provision it yourself. Consider verifying your cloud provider offering or using a database operator such as https://access.crunchydata.com/documentation/postgres-operator/latest/[Crunchy].```,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/17196,1113140613,2023-02-21T14:27:49Z,docs/guides/src/main/server/fips.adoc,"@@ -0,0 +1,229 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""FIPS 140-2 support""+summary=""How to configure Keycloak server for FIPS compliance""+includedOptions="""">++The Federal Information Processing Standard Publication 140-2, (FIPS 140-2), is a U.S. government computer security standard used to approve cryptographic modules. Keycloak supports to+run in FIPS 140-2 compliant mode. In this case, Keycloak will use only FIPS approved cryptography algorithms for it's functionality.++In order to run in FIPS 140-2, Keycloak should run on FIPS 140-2 enabled system. This usually assumes RHEL or Fedora where FIPS was enabled during installation.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index#assembly_installing-the-system-in-fips-mode_security-hardening[RHEL documentation]+for the details. When system is in FIPS mode, it will automatically make sure that underlying OpenJDK is in FIPS mode as well and would use only+https://access.redhat.com/documentation/en-us/openjdk/17/html/configuring_openjdk_17_on_rhel_with_fips/openjdk-default-fips-configuration[FIPS enabled security providers].++== BouncyCastle library++Keycloak internally uses BouncyCastle library for lots of cryptography utilities. The thing is, that the default flavour of the BouncyCastle library shipped with Keycloak is not FIPS compliant.","```suggestionKeycloak internally uses the BouncyCastle library for many cryptography utilities. However, the default flavor of the BouncyCastle library that shipped with Keycloak is not FIPS compliant, ```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/17196,1113143843,2023-02-21T14:30:22Z,docs/guides/src/main/server/fips.adoc,"@@ -0,0 +1,229 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""FIPS 140-2 support""+summary=""How to configure Keycloak server for FIPS compliance""+includedOptions="""">++The Federal Information Processing Standard Publication 140-2, (FIPS 140-2), is a U.S. government computer security standard used to approve cryptographic modules. Keycloak supports to+run in FIPS 140-2 compliant mode. In this case, Keycloak will use only FIPS approved cryptography algorithms for it's functionality.++In order to run in FIPS 140-2, Keycloak should run on FIPS 140-2 enabled system. This usually assumes RHEL or Fedora where FIPS was enabled during installation.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index#assembly_installing-the-system-in-fips-mode_security-hardening[RHEL documentation]+for the details. When system is in FIPS mode, it will automatically make sure that underlying OpenJDK is in FIPS mode as well and would use only+https://access.redhat.com/documentation/en-us/openjdk/17/html/configuring_openjdk_17_on_rhel_with_fips/openjdk-default-fips-configuration[FIPS enabled security providers].++== BouncyCastle library++Keycloak internally uses BouncyCastle library for lots of cryptography utilities. The thing is, that the default flavour of the BouncyCastle library shipped with Keycloak is not FIPS compliant.+However BouncyCastle also provides FIPS validated version of it's library. The FIPS validated BouncyCastle library cannot be shipped with Keycloak by default for the licence purpose and","```suggestionbut, BouncyCastle also provides a FIPS validated version of it's library. The FIPS validated BouncyCastle library cannot be shipped with Keycloak due to license constraints and```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/17196,1113172872,2023-02-21T14:51:21Z,docs/guides/src/main/server/fips.adoc,"@@ -0,0 +1,229 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""FIPS 140-2 support""+summary=""How to configure Keycloak server for FIPS compliance""+includedOptions="""">++The Federal Information Processing Standard Publication 140-2, (FIPS 140-2), is a U.S. government computer security standard used to approve cryptographic modules. Keycloak supports to+run in FIPS 140-2 compliant mode. In this case, Keycloak will use only FIPS approved cryptography algorithms for it's functionality.++In order to run in FIPS 140-2, Keycloak should run on FIPS 140-2 enabled system. This usually assumes RHEL or Fedora where FIPS was enabled during installation.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index#assembly_installing-the-system-in-fips-mode_security-hardening[RHEL documentation]+for the details. When system is in FIPS mode, it will automatically make sure that underlying OpenJDK is in FIPS mode as well and would use only+https://access.redhat.com/documentation/en-us/openjdk/17/html/configuring_openjdk_17_on_rhel_with_fips/openjdk-default-fips-configuration[FIPS enabled security providers].++== BouncyCastle library++Keycloak internally uses BouncyCastle library for lots of cryptography utilities. The thing is, that the default flavour of the BouncyCastle library shipped with Keycloak is not FIPS compliant.+However BouncyCastle also provides FIPS validated version of it's library. The FIPS validated BouncyCastle library cannot be shipped with Keycloak by default for the licence purpose and+Keycloak cannot provide official support of it. So the requirement is, that to run in FIPS compliant mode, you need to download BouncyCastle-FIPS bits and add them to the Keycloak distribution.+When Keycloak executes in fips-mode, it will use the BCFIPS bits instead of the default BouncyCastle bits, which achieves FIPS compliance.++=== BouncyCastle FIPS bits++BouncyCastle FIPS can be downloaded from https://www.bouncycastle.org/fips-java/[BouncyCastle official page]. Then you can add them to the directory+`KEYCLOAK_HOME/providers` of your distribution. Make sure to use proper versions compatible with BouncyCastle Keycloak dependencies. The supported BCFIPS bits needed are:++* `bc-fips-1.0.2.3.jar`+* `bctls-fips-1.0.14.jar`+* `bcpkix-fips-1.0.7.jar`++== Generating keystore++You can create either `pkcs12` or `bcfks` keystore to be used for Keycloak server SSL. The `pkcs12` works fine just in BCFIPS non-approved mode.++PKCS12 keystore can be generated with OpenJDK 17 Java on RHEL 9 in the standard way.++For the BCFKS keystore generation, it is needed to use the BouncyCastle FIPS libraries and use custom security file.++You can start with create some helper file, for instance `/tmp/kc.keystore-create.java.security`. The content of the file just needs to have this single property+```+securerandom.strongAlgorithms=PKCS11:SunPKCS11-NSS-FIPS+```++Then use the command like this to generate the keystore:+```+keytool -keystore $KEYCLOAK_HOME/conf/server.keystore \+  -storetype bcfks \+  -providername BCFIPS \+  -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -providerpath $KEYCLOAK_HOME/providers/bc-fips-*.jar \+  -alias localhost \+  -genkeypair -sigalg SHA512withRSA -keyalg RSA -storepass passwordpassword \+  -dname CN=localhost -keypass passwordpassword \+  -J-Djava.security.properties=/tmp/kc.keystore-create.java.security+```++WARNING: Using self-signed certificates is for demonstration purposes only, please make sure to use proper certificates in production instead++Similar options are needed when you are doing any other manipulation with keystore/truststore of `bcfks` type.++== Running the server.++To run the server with BCFIPS in non-approved mode:++<@kc.start parameters=""--fips-mode=enabled --hostname=localhost --https-key-store-password=passwordpassword --log-level=INFO,org.keycloak.common.crypto:TRACE,org.keycloak.crypto:TRACE""/>++NOTE: The logging can be disabled in production if everything works as expected.++== Strict mode++For the `fips-mode` option, the more secure alternative is to use `--fips-mode=strict` in which case BouncyCastle FIPS will use ""approved mode"".+That means even stricter security requirements on cryptography and security algorithms.++When starting server at startup, you can check that startup log contains `KC` provider contains KC provider with the note about `Approved Mode` like this:++```+KC(BCFIPS version 1.000203 Approved Mode, FIPS-JVM: enabled) version 1.0 - class org.keycloak.crypto.fips.KeycloakFipsSecurityProvider,+```++=== Cryptography restrictions in strict mode++* As mentioned above, strict mode may not work with `pkcs12` keystore. It is needed to use other keystore (like `bcfks`) as mentioned above. Also `jks` and `pkcs12` keystores are not+supported in Keycloak itself. For instance when importing/generating keystore of OIDC/SAML client in the admin console or for `java-keystore` provider in the realm keys.++* User passwords must be 14 characters or longer. Keycloak uses PBKDF2 based password encoding by default. BCFIPS approved mode requires passwords to be at least 112 bits+(effectively 14 characters) with PBKDF2 algorithm. If you want to allow shorter password, you need to set property `max-padding-length` of provider `pbkdf2-sha256` of SPI `password-hashing`+to value 14, so there will be some additional padding used when verifying hash created by this algorithm. This is also backwards compatible with previously stored passwords+(if you had your user's DB in non-FIPS environment and you have shorter passwords and you want to verify them now with Keycloak using BCFIPS in approved mode, it should work fine).","```suggestionFor example, if the user's database is in a non-FIPS environment and you have shorter passwords and you want to verify them now with Keycloak using BCFIPS in approved mode, the passwords should work.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/17196,1113174448,2023-02-21T14:52:31Z,docs/guides/src/main/server/fips.adoc,"@@ -0,0 +1,229 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""FIPS 140-2 support""+summary=""How to configure Keycloak server for FIPS compliance""+includedOptions="""">++The Federal Information Processing Standard Publication 140-2, (FIPS 140-2), is a U.S. government computer security standard used to approve cryptographic modules. Keycloak supports to+run in FIPS 140-2 compliant mode. In this case, Keycloak will use only FIPS approved cryptography algorithms for it's functionality.++In order to run in FIPS 140-2, Keycloak should run on FIPS 140-2 enabled system. This usually assumes RHEL or Fedora where FIPS was enabled during installation.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index#assembly_installing-the-system-in-fips-mode_security-hardening[RHEL documentation]+for the details. When system is in FIPS mode, it will automatically make sure that underlying OpenJDK is in FIPS mode as well and would use only+https://access.redhat.com/documentation/en-us/openjdk/17/html/configuring_openjdk_17_on_rhel_with_fips/openjdk-default-fips-configuration[FIPS enabled security providers].++== BouncyCastle library++Keycloak internally uses BouncyCastle library for lots of cryptography utilities. The thing is, that the default flavour of the BouncyCastle library shipped with Keycloak is not FIPS compliant.+However BouncyCastle also provides FIPS validated version of it's library. The FIPS validated BouncyCastle library cannot be shipped with Keycloak by default for the licence purpose and+Keycloak cannot provide official support of it. So the requirement is, that to run in FIPS compliant mode, you need to download BouncyCastle-FIPS bits and add them to the Keycloak distribution.+When Keycloak executes in fips-mode, it will use the BCFIPS bits instead of the default BouncyCastle bits, which achieves FIPS compliance.++=== BouncyCastle FIPS bits++BouncyCastle FIPS can be downloaded from https://www.bouncycastle.org/fips-java/[BouncyCastle official page]. Then you can add them to the directory+`KEYCLOAK_HOME/providers` of your distribution. Make sure to use proper versions compatible with BouncyCastle Keycloak dependencies. The supported BCFIPS bits needed are:++* `bc-fips-1.0.2.3.jar`+* `bctls-fips-1.0.14.jar`+* `bcpkix-fips-1.0.7.jar`++== Generating keystore++You can create either `pkcs12` or `bcfks` keystore to be used for Keycloak server SSL. The `pkcs12` works fine just in BCFIPS non-approved mode.++PKCS12 keystore can be generated with OpenJDK 17 Java on RHEL 9 in the standard way.++For the BCFKS keystore generation, it is needed to use the BouncyCastle FIPS libraries and use custom security file.++You can start with create some helper file, for instance `/tmp/kc.keystore-create.java.security`. The content of the file just needs to have this single property+```+securerandom.strongAlgorithms=PKCS11:SunPKCS11-NSS-FIPS+```++Then use the command like this to generate the keystore:+```+keytool -keystore $KEYCLOAK_HOME/conf/server.keystore \+  -storetype bcfks \+  -providername BCFIPS \+  -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -providerpath $KEYCLOAK_HOME/providers/bc-fips-*.jar \+  -alias localhost \+  -genkeypair -sigalg SHA512withRSA -keyalg RSA -storepass passwordpassword \+  -dname CN=localhost -keypass passwordpassword \+  -J-Djava.security.properties=/tmp/kc.keystore-create.java.security+```++WARNING: Using self-signed certificates is for demonstration purposes only, please make sure to use proper certificates in production instead++Similar options are needed when you are doing any other manipulation with keystore/truststore of `bcfks` type.++== Running the server.++To run the server with BCFIPS in non-approved mode:++<@kc.start parameters=""--fips-mode=enabled --hostname=localhost --https-key-store-password=passwordpassword --log-level=INFO,org.keycloak.common.crypto:TRACE,org.keycloak.crypto:TRACE""/>++NOTE: The logging can be disabled in production if everything works as expected.++== Strict mode++For the `fips-mode` option, the more secure alternative is to use `--fips-mode=strict` in which case BouncyCastle FIPS will use ""approved mode"".+That means even stricter security requirements on cryptography and security algorithms.++When starting server at startup, you can check that startup log contains `KC` provider contains KC provider with the note about `Approved Mode` like this:++```+KC(BCFIPS version 1.000203 Approved Mode, FIPS-JVM: enabled) version 1.0 - class org.keycloak.crypto.fips.KeycloakFipsSecurityProvider,+```++=== Cryptography restrictions in strict mode++* As mentioned above, strict mode may not work with `pkcs12` keystore. It is needed to use other keystore (like `bcfks`) as mentioned above. Also `jks` and `pkcs12` keystores are not+supported in Keycloak itself. For instance when importing/generating keystore of OIDC/SAML client in the admin console or for `java-keystore` provider in the realm keys.++* User passwords must be 14 characters or longer. Keycloak uses PBKDF2 based password encoding by default. BCFIPS approved mode requires passwords to be at least 112 bits+(effectively 14 characters) with PBKDF2 algorithm. If you want to allow shorter password, you need to set property `max-padding-length` of provider `pbkdf2-sha256` of SPI `password-hashing`+to value 14, so there will be some additional padding used when verifying hash created by this algorithm. This is also backwards compatible with previously stored passwords+(if you had your user's DB in non-FIPS environment and you have shorter passwords and you want to verify them now with Keycloak using BCFIPS in approved mode, it should work fine).+So effectively, you can use option like this when starting the server:++```+--spi-password-hashing-pbkdf2-sha256-max-padding-length=14+```++NOTE: Using the option above does not break FIPS compliance. However note that longer passwords are good practice anyway. For example passwords auto-generated by modern browsers match this","```suggestionNOTE: Using the option above does not break FIPS compliance. However, note that longer passwords are good practice anyway. For example. passwords auto-generated by modern browsers match this```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/17196,1113179183,2023-02-21T14:55:40Z,docs/guides/src/main/server/fips.adoc,"@@ -0,0 +1,229 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""FIPS 140-2 support""+summary=""How to configure Keycloak server for FIPS compliance""+includedOptions="""">++The Federal Information Processing Standard Publication 140-2, (FIPS 140-2), is a U.S. government computer security standard used to approve cryptographic modules. Keycloak supports to+run in FIPS 140-2 compliant mode. In this case, Keycloak will use only FIPS approved cryptography algorithms for it's functionality.++In order to run in FIPS 140-2, Keycloak should run on FIPS 140-2 enabled system. This usually assumes RHEL or Fedora where FIPS was enabled during installation.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index#assembly_installing-the-system-in-fips-mode_security-hardening[RHEL documentation]+for the details. When system is in FIPS mode, it will automatically make sure that underlying OpenJDK is in FIPS mode as well and would use only+https://access.redhat.com/documentation/en-us/openjdk/17/html/configuring_openjdk_17_on_rhel_with_fips/openjdk-default-fips-configuration[FIPS enabled security providers].++== BouncyCastle library++Keycloak internally uses BouncyCastle library for lots of cryptography utilities. The thing is, that the default flavour of the BouncyCastle library shipped with Keycloak is not FIPS compliant.+However BouncyCastle also provides FIPS validated version of it's library. The FIPS validated BouncyCastle library cannot be shipped with Keycloak by default for the licence purpose and+Keycloak cannot provide official support of it. So the requirement is, that to run in FIPS compliant mode, you need to download BouncyCastle-FIPS bits and add them to the Keycloak distribution.+When Keycloak executes in fips-mode, it will use the BCFIPS bits instead of the default BouncyCastle bits, which achieves FIPS compliance.++=== BouncyCastle FIPS bits++BouncyCastle FIPS can be downloaded from https://www.bouncycastle.org/fips-java/[BouncyCastle official page]. Then you can add them to the directory+`KEYCLOAK_HOME/providers` of your distribution. Make sure to use proper versions compatible with BouncyCastle Keycloak dependencies. The supported BCFIPS bits needed are:++* `bc-fips-1.0.2.3.jar`+* `bctls-fips-1.0.14.jar`+* `bcpkix-fips-1.0.7.jar`++== Generating keystore++You can create either `pkcs12` or `bcfks` keystore to be used for Keycloak server SSL. The `pkcs12` works fine just in BCFIPS non-approved mode.++PKCS12 keystore can be generated with OpenJDK 17 Java on RHEL 9 in the standard way.++For the BCFKS keystore generation, it is needed to use the BouncyCastle FIPS libraries and use custom security file.++You can start with create some helper file, for instance `/tmp/kc.keystore-create.java.security`. The content of the file just needs to have this single property+```+securerandom.strongAlgorithms=PKCS11:SunPKCS11-NSS-FIPS+```++Then use the command like this to generate the keystore:+```+keytool -keystore $KEYCLOAK_HOME/conf/server.keystore \+  -storetype bcfks \+  -providername BCFIPS \+  -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -providerpath $KEYCLOAK_HOME/providers/bc-fips-*.jar \+  -alias localhost \+  -genkeypair -sigalg SHA512withRSA -keyalg RSA -storepass passwordpassword \+  -dname CN=localhost -keypass passwordpassword \+  -J-Djava.security.properties=/tmp/kc.keystore-create.java.security+```++WARNING: Using self-signed certificates is for demonstration purposes only, please make sure to use proper certificates in production instead++Similar options are needed when you are doing any other manipulation with keystore/truststore of `bcfks` type.++== Running the server.++To run the server with BCFIPS in non-approved mode:++<@kc.start parameters=""--fips-mode=enabled --hostname=localhost --https-key-store-password=passwordpassword --log-level=INFO,org.keycloak.common.crypto:TRACE,org.keycloak.crypto:TRACE""/>++NOTE: The logging can be disabled in production if everything works as expected.++== Strict mode++For the `fips-mode` option, the more secure alternative is to use `--fips-mode=strict` in which case BouncyCastle FIPS will use ""approved mode"".+That means even stricter security requirements on cryptography and security algorithms.++When starting server at startup, you can check that startup log contains `KC` provider contains KC provider with the note about `Approved Mode` like this:++```+KC(BCFIPS version 1.000203 Approved Mode, FIPS-JVM: enabled) version 1.0 - class org.keycloak.crypto.fips.KeycloakFipsSecurityProvider,+```++=== Cryptography restrictions in strict mode++* As mentioned above, strict mode may not work with `pkcs12` keystore. It is needed to use other keystore (like `bcfks`) as mentioned above. Also `jks` and `pkcs12` keystores are not+supported in Keycloak itself. For instance when importing/generating keystore of OIDC/SAML client in the admin console or for `java-keystore` provider in the realm keys.++* User passwords must be 14 characters or longer. Keycloak uses PBKDF2 based password encoding by default. BCFIPS approved mode requires passwords to be at least 112 bits+(effectively 14 characters) with PBKDF2 algorithm. If you want to allow shorter password, you need to set property `max-padding-length` of provider `pbkdf2-sha256` of SPI `password-hashing`+to value 14, so there will be some additional padding used when verifying hash created by this algorithm. This is also backwards compatible with previously stored passwords+(if you had your user's DB in non-FIPS environment and you have shorter passwords and you want to verify them now with Keycloak using BCFIPS in approved mode, it should work fine).+So effectively, you can use option like this when starting the server:++```+--spi-password-hashing-pbkdf2-sha256-max-padding-length=14+```++NOTE: Using the option above does not break FIPS compliance. However note that longer passwords are good practice anyway. For example passwords auto-generated by modern browsers match this+requirement as they are longer than 14 characters.++* RSA keys of 1024 bits do not work (2048 is the minimum). This applies for keys used by Keycloak realm itself (Realm keys from the `Keys` tab in the admin console), but also client keys and IDP keys++* HMAC SHA-XXX keys must be at least 112 bits (or 14 characters long). For example if you use OIDC clients with the client authentication `Signed Jwt with Client Secret` (or `client-secret-jwt` in+the OIDC notation), then your client secrets should be at least 14 characters long. Note that for good security, it is recommended to use client secrets generated by Keycloak server, which+always match this requirement.++== Other restrictions++In order to have SAML working, there is a need to have `XMLDSig` security provider to be available in your security providers.+In order to have Kerberos working, there is a need to have `SunJGSS` security provider available. In FIPS enabled RHEL 9 in OpenJDK 17.0.6, these+security providers are not by default in the `java.security`, which means that they effectively cannot work.++To have SAML working, you can manually add the provider into `JAVA_HOME/conf/security/java.security` into the list fips providers. For example add the line like:","```suggestionTo have SAML working, you can manually add the provider into `JAVA_HOME/conf/security/java.security` into the list fips providers. For example, add the line such as the following:```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/17196,1113191864,2023-02-21T15:05:07Z,docs/guides/src/main/server/fips.adoc,"@@ -0,0 +1,229 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""FIPS 140-2 support""+summary=""How to configure Keycloak server for FIPS compliance""+includedOptions="""">++The Federal Information Processing Standard Publication 140-2, (FIPS 140-2), is a U.S. government computer security standard used to approve cryptographic modules. Keycloak supports to+run in FIPS 140-2 compliant mode. In this case, Keycloak will use only FIPS approved cryptography algorithms for it's functionality.++In order to run in FIPS 140-2, Keycloak should run on FIPS 140-2 enabled system. This usually assumes RHEL or Fedora where FIPS was enabled during installation.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index#assembly_installing-the-system-in-fips-mode_security-hardening[RHEL documentation]+for the details. When system is in FIPS mode, it will automatically make sure that underlying OpenJDK is in FIPS mode as well and would use only+https://access.redhat.com/documentation/en-us/openjdk/17/html/configuring_openjdk_17_on_rhel_with_fips/openjdk-default-fips-configuration[FIPS enabled security providers].++== BouncyCastle library++Keycloak internally uses BouncyCastle library for lots of cryptography utilities. The thing is, that the default flavour of the BouncyCastle library shipped with Keycloak is not FIPS compliant.+However BouncyCastle also provides FIPS validated version of it's library. The FIPS validated BouncyCastle library cannot be shipped with Keycloak by default for the licence purpose and+Keycloak cannot provide official support of it. So the requirement is, that to run in FIPS compliant mode, you need to download BouncyCastle-FIPS bits and add them to the Keycloak distribution.+When Keycloak executes in fips-mode, it will use the BCFIPS bits instead of the default BouncyCastle bits, which achieves FIPS compliance.++=== BouncyCastle FIPS bits++BouncyCastle FIPS can be downloaded from https://www.bouncycastle.org/fips-java/[BouncyCastle official page]. Then you can add them to the directory+`KEYCLOAK_HOME/providers` of your distribution. Make sure to use proper versions compatible with BouncyCastle Keycloak dependencies. The supported BCFIPS bits needed are:++* `bc-fips-1.0.2.3.jar`+* `bctls-fips-1.0.14.jar`+* `bcpkix-fips-1.0.7.jar`++== Generating keystore++You can create either `pkcs12` or `bcfks` keystore to be used for Keycloak server SSL. The `pkcs12` works fine just in BCFIPS non-approved mode.++PKCS12 keystore can be generated with OpenJDK 17 Java on RHEL 9 in the standard way.++For the BCFKS keystore generation, it is needed to use the BouncyCastle FIPS libraries and use custom security file.++You can start with create some helper file, for instance `/tmp/kc.keystore-create.java.security`. The content of the file just needs to have this single property+```+securerandom.strongAlgorithms=PKCS11:SunPKCS11-NSS-FIPS+```++Then use the command like this to generate the keystore:+```+keytool -keystore $KEYCLOAK_HOME/conf/server.keystore \+  -storetype bcfks \+  -providername BCFIPS \+  -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -providerpath $KEYCLOAK_HOME/providers/bc-fips-*.jar \+  -alias localhost \+  -genkeypair -sigalg SHA512withRSA -keyalg RSA -storepass passwordpassword \+  -dname CN=localhost -keypass passwordpassword \+  -J-Djava.security.properties=/tmp/kc.keystore-create.java.security+```++WARNING: Using self-signed certificates is for demonstration purposes only, please make sure to use proper certificates in production instead++Similar options are needed when you are doing any other manipulation with keystore/truststore of `bcfks` type.++== Running the server.++To run the server with BCFIPS in non-approved mode:++<@kc.start parameters=""--fips-mode=enabled --hostname=localhost --https-key-store-password=passwordpassword --log-level=INFO,org.keycloak.common.crypto:TRACE,org.keycloak.crypto:TRACE""/>++NOTE: The logging can be disabled in production if everything works as expected.++== Strict mode++For the `fips-mode` option, the more secure alternative is to use `--fips-mode=strict` in which case BouncyCastle FIPS will use ""approved mode"".+That means even stricter security requirements on cryptography and security algorithms.++When starting server at startup, you can check that startup log contains `KC` provider contains KC provider with the note about `Approved Mode` like this:++```+KC(BCFIPS version 1.000203 Approved Mode, FIPS-JVM: enabled) version 1.0 - class org.keycloak.crypto.fips.KeycloakFipsSecurityProvider,+```++=== Cryptography restrictions in strict mode++* As mentioned above, strict mode may not work with `pkcs12` keystore. It is needed to use other keystore (like `bcfks`) as mentioned above. Also `jks` and `pkcs12` keystores are not+supported in Keycloak itself. For instance when importing/generating keystore of OIDC/SAML client in the admin console or for `java-keystore` provider in the realm keys.++* User passwords must be 14 characters or longer. Keycloak uses PBKDF2 based password encoding by default. BCFIPS approved mode requires passwords to be at least 112 bits+(effectively 14 characters) with PBKDF2 algorithm. If you want to allow shorter password, you need to set property `max-padding-length` of provider `pbkdf2-sha256` of SPI `password-hashing`+to value 14, so there will be some additional padding used when verifying hash created by this algorithm. This is also backwards compatible with previously stored passwords+(if you had your user's DB in non-FIPS environment and you have shorter passwords and you want to verify them now with Keycloak using BCFIPS in approved mode, it should work fine).+So effectively, you can use option like this when starting the server:++```+--spi-password-hashing-pbkdf2-sha256-max-padding-length=14+```++NOTE: Using the option above does not break FIPS compliance. However note that longer passwords are good practice anyway. For example passwords auto-generated by modern browsers match this+requirement as they are longer than 14 characters.++* RSA keys of 1024 bits do not work (2048 is the minimum). This applies for keys used by Keycloak realm itself (Realm keys from the `Keys` tab in the admin console), but also client keys and IDP keys++* HMAC SHA-XXX keys must be at least 112 bits (or 14 characters long). For example if you use OIDC clients with the client authentication `Signed Jwt with Client Secret` (or `client-secret-jwt` in+the OIDC notation), then your client secrets should be at least 14 characters long. Note that for good security, it is recommended to use client secrets generated by Keycloak server, which+always match this requirement.++== Other restrictions++In order to have SAML working, there is a need to have `XMLDSig` security provider to be available in your security providers.+In order to have Kerberos working, there is a need to have `SunJGSS` security provider available. In FIPS enabled RHEL 9 in OpenJDK 17.0.6, these+security providers are not by default in the `java.security`, which means that they effectively cannot work.++To have SAML working, you can manually add the provider into `JAVA_HOME/conf/security/java.security` into the list fips providers. For example add the line like:++```+fips.provider.7=XMLDSig+```++Adding this security provider should be fine as in fact it is FIPS compliant and likely will be added by default in the future OpenJDK 17 micro version.+Details are in the https://bugzilla.redhat.com/show_bug.cgi?id=1940064[bugzilla].++NOTE: It is recommended to look at `JAVA_HOME/conf/security/java.security` and check all configured providers here and make sure that the number matches. In other words, `fips.provider.7`+assumes that there are already 6 providers configured with prefix like `fips.provider.N` in this file.++If you don't want to edit your `java.security` file inside java itself, the option is to create custom java security file (for example named `kc.java.security`) and add just the single+property above for adding XMLDSig provider into that file. Then start your Keycloak server with this property file attached:++```+-Djava.security.properties=/location/to/your/file/kc.java.security+```++For Kerberos/SPNEGO, the security provider `SunJGSS` is not yet fully FIPS compliant. Hence it is not recommended to add it to your list of security providers+if you want to be FIPS compliant. The `KERBEROS` feature is disabled by default in Keycloak when it is executed on FIPS platform and when security provider is not+available. Details are in the https://bugzilla.redhat.com/show_bug.cgi?id=2051628[bugzilla].++== Run the CLI on the FIPS host++In case you want to run Client Registration CLI (`kcreg.sh|bat` script) or Admin CLI (`kcadm.sh|bat` script), it is needed+that CLI will also use the BouncyCastle FIPS dependencies instead of plain BouncyCastle dependencies. To achieve this, you may copy the+jars to the CLI library folder and that is enough. CLI tool will automatically use BCFIPS dependencies instead of plain BC when+it detects that corresponding BCFIPS jars are present (see above for the versions used). For example use command like this before running CLI:++```+cp $KEYCLOAK_HOME/providers/bc-fips-*.jar $KEYCLOAK_HOME/bin/client/lib/+cp $KEYCLOAK_HOME/providers/bctls-fips-*.jar $KEYCLOAK_HOME/bin/client/lib/+```++NOTE: When trying to use BCFKS truststore/keystore with CLI, you may see issues due this truststore is not the default java keystore type. It can be good to specify it as default in java+security properties. For example run this command on unix based systems before doing any operation with kcadm|kcreg clients:+```+echo ""keystore.type=bcfks+fips.keystore.type=bcfks"" > /tmp/kcadm.java.security+export KC_OPTS=""-Djava.security.properties=/tmp/kcadm.java.security""+```++== Keycloak server in FIPS mode in the container++When you want Keycloak in FIPS mode to be executed inside container, it is needed that your ""host"" is using FIPS mode as well. The container+will then ""inherit"" FIPS mode from the parent host.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening#enabling-fips-mode-in-a-container_using-the-system-wide-cryptographic-policies[this section]+in the RHEL documentation for the details.++So keycloak container image will be just automatically in fips mode when executed from the host in FIPS mode. So only things needed is to+make sure that Keycloak container also uses BCFIPS jars (instead of BC jars) and proper options when started.++Regarding this, it is best to build your own container image as described in the <@links.server id=""containers""/> and tweak it to use BCFIPS etc.++For example in the current directory, you can create sub-directory `files` and add:++* BC FIPS jar files as described above+* Custom keystore file - named for example `keycloak-fips.keystore.bcfks`+* Security file `kc.java.security` with added provider for SAML++Then create `Dockerfile` in the current directory similar to this:++.Dockerfile:+[source, dockerfile]+----+FROM quay.io/keycloak/keycloak:latest as builder++ADD files /tmp/files/++WORKDIR /opt/keycloak+RUN cp /tmp/files/*.jar /opt/keycloak/providers/+RUN cp /tmp/files/keycloak-fips.keystore.* /opt/keycloak/conf/server.keystore+RUN cp /tmp/files/kc.java.security /opt/keycloak/conf/++RUN /opt/keycloak/bin/kc.sh build --fips-mode=strict++FROM quay.io/keycloak/keycloak:latest+COPY --from=builder /opt/keycloak/ /opt/keycloak/++ENTRYPOINT [""/opt/keycloak/bin/kc.sh""]+----++Then build FIPS optimized docker image and start it as described in the <@links.server id=""containers""/>. Assumption is to use arguments as described above when starting the image.++== Migration from non-fips environment++If you previously used Keycloak in the non-fips environment, it is possible to migrate it to FIPS environment including it's data. However there are restrictions and considerations as","```suggestionIf you previously used Keycloak in the non-fips environment, it is possible to migrate it to FIPS environment including it's data. However, restrictions and considerations exist as```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/17196,1113198901,2023-02-21T15:10:25Z,docs/guides/src/main/server/fips.adoc,"@@ -0,0 +1,229 @@+<#import ""/templates/guide.adoc"" as tmpl>+<#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>++<@tmpl.guide+title=""FIPS 140-2 support""+summary=""How to configure Keycloak server for FIPS compliance""+includedOptions="""">++The Federal Information Processing Standard Publication 140-2, (FIPS 140-2), is a U.S. government computer security standard used to approve cryptographic modules. Keycloak supports to+run in FIPS 140-2 compliant mode. In this case, Keycloak will use only FIPS approved cryptography algorithms for it's functionality.++In order to run in FIPS 140-2, Keycloak should run on FIPS 140-2 enabled system. This usually assumes RHEL or Fedora where FIPS was enabled during installation.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index#assembly_installing-the-system-in-fips-mode_security-hardening[RHEL documentation]+for the details. When system is in FIPS mode, it will automatically make sure that underlying OpenJDK is in FIPS mode as well and would use only+https://access.redhat.com/documentation/en-us/openjdk/17/html/configuring_openjdk_17_on_rhel_with_fips/openjdk-default-fips-configuration[FIPS enabled security providers].++== BouncyCastle library++Keycloak internally uses BouncyCastle library for lots of cryptography utilities. The thing is, that the default flavour of the BouncyCastle library shipped with Keycloak is not FIPS compliant.+However BouncyCastle also provides FIPS validated version of it's library. The FIPS validated BouncyCastle library cannot be shipped with Keycloak by default for the licence purpose and+Keycloak cannot provide official support of it. So the requirement is, that to run in FIPS compliant mode, you need to download BouncyCastle-FIPS bits and add them to the Keycloak distribution.+When Keycloak executes in fips-mode, it will use the BCFIPS bits instead of the default BouncyCastle bits, which achieves FIPS compliance.++=== BouncyCastle FIPS bits++BouncyCastle FIPS can be downloaded from https://www.bouncycastle.org/fips-java/[BouncyCastle official page]. Then you can add them to the directory+`KEYCLOAK_HOME/providers` of your distribution. Make sure to use proper versions compatible with BouncyCastle Keycloak dependencies. The supported BCFIPS bits needed are:++* `bc-fips-1.0.2.3.jar`+* `bctls-fips-1.0.14.jar`+* `bcpkix-fips-1.0.7.jar`++== Generating keystore++You can create either `pkcs12` or `bcfks` keystore to be used for Keycloak server SSL. The `pkcs12` works fine just in BCFIPS non-approved mode.++PKCS12 keystore can be generated with OpenJDK 17 Java on RHEL 9 in the standard way.++For the BCFKS keystore generation, it is needed to use the BouncyCastle FIPS libraries and use custom security file.++You can start with create some helper file, for instance `/tmp/kc.keystore-create.java.security`. The content of the file just needs to have this single property+```+securerandom.strongAlgorithms=PKCS11:SunPKCS11-NSS-FIPS+```++Then use the command like this to generate the keystore:+```+keytool -keystore $KEYCLOAK_HOME/conf/server.keystore \+  -storetype bcfks \+  -providername BCFIPS \+  -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \+  -providerpath $KEYCLOAK_HOME/providers/bc-fips-*.jar \+  -alias localhost \+  -genkeypair -sigalg SHA512withRSA -keyalg RSA -storepass passwordpassword \+  -dname CN=localhost -keypass passwordpassword \+  -J-Djava.security.properties=/tmp/kc.keystore-create.java.security+```++WARNING: Using self-signed certificates is for demonstration purposes only, please make sure to use proper certificates in production instead++Similar options are needed when you are doing any other manipulation with keystore/truststore of `bcfks` type.++== Running the server.++To run the server with BCFIPS in non-approved mode:++<@kc.start parameters=""--fips-mode=enabled --hostname=localhost --https-key-store-password=passwordpassword --log-level=INFO,org.keycloak.common.crypto:TRACE,org.keycloak.crypto:TRACE""/>++NOTE: The logging can be disabled in production if everything works as expected.++== Strict mode++For the `fips-mode` option, the more secure alternative is to use `--fips-mode=strict` in which case BouncyCastle FIPS will use ""approved mode"".+That means even stricter security requirements on cryptography and security algorithms.++When starting server at startup, you can check that startup log contains `KC` provider contains KC provider with the note about `Approved Mode` like this:++```+KC(BCFIPS version 1.000203 Approved Mode, FIPS-JVM: enabled) version 1.0 - class org.keycloak.crypto.fips.KeycloakFipsSecurityProvider,+```++=== Cryptography restrictions in strict mode++* As mentioned above, strict mode may not work with `pkcs12` keystore. It is needed to use other keystore (like `bcfks`) as mentioned above. Also `jks` and `pkcs12` keystores are not+supported in Keycloak itself. For instance when importing/generating keystore of OIDC/SAML client in the admin console or for `java-keystore` provider in the realm keys.++* User passwords must be 14 characters or longer. Keycloak uses PBKDF2 based password encoding by default. BCFIPS approved mode requires passwords to be at least 112 bits+(effectively 14 characters) with PBKDF2 algorithm. If you want to allow shorter password, you need to set property `max-padding-length` of provider `pbkdf2-sha256` of SPI `password-hashing`+to value 14, so there will be some additional padding used when verifying hash created by this algorithm. This is also backwards compatible with previously stored passwords+(if you had your user's DB in non-FIPS environment and you have shorter passwords and you want to verify them now with Keycloak using BCFIPS in approved mode, it should work fine).+So effectively, you can use option like this when starting the server:++```+--spi-password-hashing-pbkdf2-sha256-max-padding-length=14+```++NOTE: Using the option above does not break FIPS compliance. However note that longer passwords are good practice anyway. For example passwords auto-generated by modern browsers match this+requirement as they are longer than 14 characters.++* RSA keys of 1024 bits do not work (2048 is the minimum). This applies for keys used by Keycloak realm itself (Realm keys from the `Keys` tab in the admin console), but also client keys and IDP keys++* HMAC SHA-XXX keys must be at least 112 bits (or 14 characters long). For example if you use OIDC clients with the client authentication `Signed Jwt with Client Secret` (or `client-secret-jwt` in+the OIDC notation), then your client secrets should be at least 14 characters long. Note that for good security, it is recommended to use client secrets generated by Keycloak server, which+always match this requirement.++== Other restrictions++In order to have SAML working, there is a need to have `XMLDSig` security provider to be available in your security providers.+In order to have Kerberos working, there is a need to have `SunJGSS` security provider available. In FIPS enabled RHEL 9 in OpenJDK 17.0.6, these+security providers are not by default in the `java.security`, which means that they effectively cannot work.++To have SAML working, you can manually add the provider into `JAVA_HOME/conf/security/java.security` into the list fips providers. For example add the line like:++```+fips.provider.7=XMLDSig+```++Adding this security provider should be fine as in fact it is FIPS compliant and likely will be added by default in the future OpenJDK 17 micro version.+Details are in the https://bugzilla.redhat.com/show_bug.cgi?id=1940064[bugzilla].++NOTE: It is recommended to look at `JAVA_HOME/conf/security/java.security` and check all configured providers here and make sure that the number matches. In other words, `fips.provider.7`+assumes that there are already 6 providers configured with prefix like `fips.provider.N` in this file.++If you don't want to edit your `java.security` file inside java itself, the option is to create custom java security file (for example named `kc.java.security`) and add just the single+property above for adding XMLDSig provider into that file. Then start your Keycloak server with this property file attached:++```+-Djava.security.properties=/location/to/your/file/kc.java.security+```++For Kerberos/SPNEGO, the security provider `SunJGSS` is not yet fully FIPS compliant. Hence it is not recommended to add it to your list of security providers+if you want to be FIPS compliant. The `KERBEROS` feature is disabled by default in Keycloak when it is executed on FIPS platform and when security provider is not+available. Details are in the https://bugzilla.redhat.com/show_bug.cgi?id=2051628[bugzilla].++== Run the CLI on the FIPS host++In case you want to run Client Registration CLI (`kcreg.sh|bat` script) or Admin CLI (`kcadm.sh|bat` script), it is needed+that CLI will also use the BouncyCastle FIPS dependencies instead of plain BouncyCastle dependencies. To achieve this, you may copy the+jars to the CLI library folder and that is enough. CLI tool will automatically use BCFIPS dependencies instead of plain BC when+it detects that corresponding BCFIPS jars are present (see above for the versions used). For example use command like this before running CLI:++```+cp $KEYCLOAK_HOME/providers/bc-fips-*.jar $KEYCLOAK_HOME/bin/client/lib/+cp $KEYCLOAK_HOME/providers/bctls-fips-*.jar $KEYCLOAK_HOME/bin/client/lib/+```++NOTE: When trying to use BCFKS truststore/keystore with CLI, you may see issues due this truststore is not the default java keystore type. It can be good to specify it as default in java+security properties. For example run this command on unix based systems before doing any operation with kcadm|kcreg clients:+```+echo ""keystore.type=bcfks+fips.keystore.type=bcfks"" > /tmp/kcadm.java.security+export KC_OPTS=""-Djava.security.properties=/tmp/kcadm.java.security""+```++== Keycloak server in FIPS mode in the container++When you want Keycloak in FIPS mode to be executed inside container, it is needed that your ""host"" is using FIPS mode as well. The container+will then ""inherit"" FIPS mode from the parent host.+See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening#enabling-fips-mode-in-a-container_using-the-system-wide-cryptographic-policies[this section]+in the RHEL documentation for the details.++So keycloak container image will be just automatically in fips mode when executed from the host in FIPS mode. So only things needed is to+make sure that Keycloak container also uses BCFIPS jars (instead of BC jars) and proper options when started.++Regarding this, it is best to build your own container image as described in the <@links.server id=""containers""/> and tweak it to use BCFIPS etc.++For example in the current directory, you can create sub-directory `files` and add:++* BC FIPS jar files as described above+* Custom keystore file - named for example `keycloak-fips.keystore.bcfks`+* Security file `kc.java.security` with added provider for SAML++Then create `Dockerfile` in the current directory similar to this:++.Dockerfile:+[source, dockerfile]+----+FROM quay.io/keycloak/keycloak:latest as builder++ADD files /tmp/files/++WORKDIR /opt/keycloak+RUN cp /tmp/files/*.jar /opt/keycloak/providers/+RUN cp /tmp/files/keycloak-fips.keystore.* /opt/keycloak/conf/server.keystore+RUN cp /tmp/files/kc.java.security /opt/keycloak/conf/++RUN /opt/keycloak/bin/kc.sh build --fips-mode=strict++FROM quay.io/keycloak/keycloak:latest+COPY --from=builder /opt/keycloak/ /opt/keycloak/++ENTRYPOINT [""/opt/keycloak/bin/kc.sh""]+----++Then build FIPS optimized docker image and start it as described in the <@links.server id=""containers""/>. Assumption is to use arguments as described above when starting the image.++== Migration from non-fips environment++If you previously used Keycloak in the non-fips environment, it is possible to migrate it to FIPS environment including it's data. However there are restrictions and considerations as+mentioned above. To highlight some of them:++* Make sure all the Keycloak functionality relying on keystores uses only supported keystore types. This differs based on whether strict or non-strict mode is used.+* Kerberos authentication may not work. If your authentication flow uses `Kerberos` authenticator, this authenticator will be automatically switched to `DISABLED` when migrated to FIPS+environment. It is recommended to remove any `Kerberos` user storage providers from your realm and disable `Kerberos` related functionality in LDAP providers before switching to FIPS environment.++In addition to the above, it is recommended to doublecheck this before switching to FIPS strict mode:++* Make sure that all the Keycloak functionality relying on keys (EG. realm or client keys) use RSA keys of at least 2048 bits++* Make sure that clients relying on `Signed JWT with Client Secret` use at least 14 characters long secrets (ideally generated secrets)++* Password length restriction as described above. In case your users have shorter passwords, it is needed to start the server with the max padding length set to 14 of PBKDF2 provider as mentioned+above. If you prefer to avoid this option, you can for instance ask all your users to reset their password (for example by `Forget password` link) during first authentication in the new environment.+++== Keycloak FIPS mode on the non-fips system++Keycloak is tested on FIPS enabled RHEL 9 system and `ubi9` image. Running on the non-RHEL compatible platform or on the non-FIPS enabled platform, the FIPS compliance cannot be+strictly guaranteed and cannot be officially supported.++If you are still restricted to run Keycloak on such system, you can for instance at least update your security providers configured in `java.security` file. This does not mean FIPS comliance, but+at least the setup is closer to it. It can be done by providing custom security file with only overriden list of security providers as described above. The list of recommended providers can be","```suggestionat least the setup is closer to it. It can be done by providing a custom security file with only an overriden list of security providers as described earlier. For a list of recommended providers, ```",
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/16639,1114706195,2023-02-22T17:38:55Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/PodTemplateTest.java,"@@ -222,4 +223,53 @@ public void testPodTemplateIncorrectImagePullSecretsConfig() {                 });     } ++    @Test+    public void testPodTemplateIfHasDuplicatedProxyEnvVarSet() {++        var keycloakWithPodTemplate = k8sclient.load(getClass()+                .getResourceAsStream(""/correct-with-proxy-set-podtemplate-keycloak.yml""));++        // Act+        keycloakWithPodTemplate.createOrReplace();++        // Assert+        Awaitility+                .await()+                .ignoreExceptions()+                .atMost(3, MINUTES).untilAsserted(() -> {++                    Log.info(""Getting the first Pod and its first Container"");++                    var firstKCContainer = k8sclient+                            .pods()+                            .inNamespace(namespace)+                            .withLabel(""app"", ""keycloak"")+                            .list()+                            .getItems()+                            .get(0)+                            .getSpec()+                            .getContainers()+                            .get(0);++                    Log.info(""Verifying the 'KC_PROXY' Env Var set"");++                    assertThat(firstKCContainer.getEnv()+                            .stream()+                            .filter(oneEnvVar -> oneEnvVar.getName().equalsIgnoreCase(""KC_PROXY""))+                            .count()).isEqualTo(1);++                    assertThat(firstKCContainer.getEnv()+                            .stream()+                            .anyMatch(oneEnvVar -> oneEnvVar.getValue() != null && oneEnvVar.getValue().equalsIgnoreCase(Constants.DEFAULT_DIST_CONFIG.get(""proxy"")))+                    ).isFalse();++                    assertThat(firstKCContainer.getEnv()+                            .stream()+                            .anyMatch(oneEnvVar -> oneEnvVar.getValue().equalsIgnoreCase(""reencrypt""))+                    ).isTrue();","Due to the fact that the Operator does not support overriding or removing `Env Vars` throughout `PodTemplate`, makes no sense to have such test method. Therefore, I'm removing all this new method from `PodTemplateTest` class.Thanks.",
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/16639,1114706538,2023-02-22T17:39:14Z,operator/src/test/resources/correct-with-proxy-set-podtemplate-keycloak.yml,"@@ -0,0 +1,42 @@+apiVersion: k8s.keycloak.org/v2alpha1+kind: Keycloak+metadata:+  name: example-podtemplate-kc+spec:+  instances: 1+  additionalOptions:+    - name: db+      value: postgres+    - name: db-url-host+      value: postgres-db+    - name: db-username+      value: postgres+    - name: db-password+      value: testpassword+    - name: proxy+      value: reencrypt","Due to the fact that the Operator does not support overriding or removing `Env Vars` throughout `PodTemplate`, makes no sense to have such test method. Therefore, I'm removing all this new method from `PodTemplateTest` class.Thanks.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/17265,1118583387,2023-02-27T10:56:24Z,services/src/main/java/org/keycloak/services/HttpResponseImpl.java,"@@ -44,6 +56,31 @@ public void setHeader(String name, String value) {         delegate.getOutputHeaders().putSingle(name, value);     } +    @Override+    public void addCookieIfAbsent(HttpCookie cookie) {+        if (cookie == null) {+            throw new IllegalArgumentException(""Cookie is null"");+        }++        if (cookies == null) {+            cookies = new HashSet<>();+        }++        if (cookies.add(cookie)) {","This relies on hasCode in Cookie:```    public int hashCode() {        int hash = 7;        hash = 97 * hash + (this.name != null ? this.name.hashCode() : 0);        hash = 97 * hash + (this.value != null ? this.value.hashCode() : 0);        hash = 97 * hash + this.version;        hash = 97 * hash + (this.path != null ? this.path.hashCode() : 0);        hash = 97 * hash + (this.domain != null ? this.domain.hashCode() : 0);        return hash;    }```So would be possible to have two set-cookie for the same cookie, but with different values. Would it be better to make cookies a list and search for existing cookies by name/path/domain instead?",x
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/17265,1118698386,2023-02-27T12:54:00Z,services/src/main/java/org/keycloak/services/HttpResponseImpl.java,"@@ -44,6 +56,31 @@ public void setHeader(String name, String value) {         delegate.getOutputHeaders().putSingle(name, value);     } +    @Override+    public void addCookieIfAbsent(HttpCookie cookie) {+        if (cookie == null) {+            throw new IllegalArgumentException(""Cookie is null"");+        }++        if (cookies == null) {+            cookies = new HashSet<>();+        }++        if (cookies.add(cookie)) {+            if (writeCookiesOnTransactionComplete) {+                // cookies are written after transaction completes+                return;+            }++            addHeader(HttpHeaders.SET_COOKIE, cookie.toHeaderValue());+        }+    }++    @Override+    public void setWriteCookiesOnTransactionComplete() {","These retriable blocks were introduced to deal with CockroachDB's RETRY exceptions that cause a significant amount of requests to fail in concurrent scenarios. Retrying the transaction is their recommended approach in these cases.Perhaps a better way to handle this would be to surround the original endpoint method in a try-catch block so we can check if the exception being thrown is a retriable exception and only then use the retry mechanism. That is, the original request is handled by the endpoint normally, and we trigger the retry mechanism only if a retriable exception is caught. This would prevent the creation of extra session/tx/objects, which would not be needed in the majority of scenarios.We could also discuss if this behavior should be configurable at the realm level. Something like ""Retry transactions where possible: yes/no"", along with maximum number of retries or maximum time allowed for retrying.",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/17265,1118763651,2023-02-27T13:52:10Z,server-spi/src/main/java/org/keycloak/http/HttpResponse.java,"@@ -45,4 +46,20 @@ public interface HttpResponse {      * @param value the header value      */     void setHeader(String name, String value);++    /**+     * Sets a new cookie only if not yet set.+     *+     * @param cookie the cookie+     */+    void setCookieIfAbsent(HttpCookie cookie);","@pedroigor Do we really need to ""pollute"" the `HttpResponse` interface with the custom class `HttpCookie` only due to the presence of the method converting the cookie props to the Set-Cookie form attribute? We could do it additionally in our implementation of the interface, right? Moreover, I'd rather see in this interface some standard structure such as `NewCookie` which should handle the whole process with Set-Cookie stuff.For inspiration: https://github.com/mabartos/keycloak/commit/89627088421c6c0d2fd60a6a0cade64f8e159a77",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/17331,1119888890,2023-02-28T10:53:21Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java,"@@ -459,7 +459,12 @@ protected List<LDAPObject> searchLDAP(RealmModel realm, Map<String, String> attr                 ldapQuery.addWhereCondition(emailCondition);                  List<LDAPObject> ldapObjects = ldapQuery.getResultList();-                results.addAll(ldapObjects);+                ldapObjects.forEach(ldapObject -> {+                    // ensure that no entity is listed twice and still preserve the order of returned entities+                    if (!results.contains(ldapObject)) {+                        results.addAll(ldapObjects);",I am worried of the complexity. Could we instead use a set of unique identifiers to check if the `ldapObject` has already been added?,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17331,1119898841,2023-02-28T11:02:42Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java,"@@ -459,7 +459,12 @@ protected List<LDAPObject> searchLDAP(RealmModel realm, Map<String, String> attr                 ldapQuery.addWhereCondition(emailCondition);                  List<LDAPObject> ldapObjects = ldapQuery.getResultList();-                results.addAll(ldapObjects);+                ldapObjects.forEach(ldapObject -> {+                    // ensure that no entity is listed twice and still preserve the order of returned entities+                    if (!results.contains(ldapObject)) {+                        results.addAll(ldapObjects);","@hmlnarik - reworked. Still, if we would have computational complexity here, I assume the result would be too big for the caller anyway / would take too long to retrieve from LDAP.",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1120019476,2023-02-28T12:54:15Z,services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java,"@@ -109,7 +108,7 @@ public KeycloakApplication() {             classes.add(KcUnrecognizedPropertyExceptionHandler.class);              singletons.add(new ObjectMapperResolver());","Why this `ObjectMapperResolver` is represented as a singleton? Would probably be better to use the same approach as for the WelcomeResource, right? Add it here to classes, and in QuarkusKeycloakApplication remove it. The instantiation of this object is done here and for Quarkus not used at all. Would be better to use only the class reference, right?WDYT?",x
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/17317,1120193258,2023-02-28T14:52:43Z,docs/guides/src/main/server/health.adoc,"@@ -34,6 +34,35 @@ It is possible to enable the health checks using the build time option `health-e  By default, no check is returned from the health endpoints. +== Using the health checks++It is recommended that the health endpoints be monitored by external HTTP requests. Due to security measures that remove `curl` and other packages from the Keycloak container image, local command-based monitoring will not function easily.++If you are not using Keycloak in a container, use whatever you want to access the health check endpoints.++=== curl++You may use a simple HTTP HEAD request to determine the `+live+` or `+ready+` state of Keycloak. `+curl+` is a good HTTP client for this purpose.++If Keycloak is deployed in a container, you must run this command from outside it due to the previously mentioned security measures. For example:++[source, bash]+----+curl --head -fsS http://localhost:8080/health/ready+----++If the command returns with status 0, then Keycloak is `+live+` or `+ready+`, depending on which endpoint you called. Otherwise there is a problem.++=== Kubernetes++Define a https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#http-probes[HTTP Probe] so that Kubernetes may externally monitor the health endpoints. Do not use a liveness command.++=== HEALTHCHECK++The Dockerfile image `+HEALTHCHECK+` instruction defines a command that will be periodically executed inside the container as it runs. The Keycloak container does not have any CLI HTTP clients installed. An executable jar, using the built-in Java HTTP client is nessessary to use the health endpoint in this way.++No such jar is provided as part of the Keycloak installation. You will have to implement it yourself, or use an alternative method.","The linked zip is just the source code. Compiling our own curl with just HTTP support would solve the problem, we could even use nss for curl's HTTPS support (the RPM version uses openssl, doubling the SSL library surface), but compiling our own is also not ideal in of itself.It is possible to do HTTP with just bash, I almost included the example here, but the problem is HTTPS. TLS support would require the openssl command. I can't find an equivalent CLI TLS interface for nss.```bashexec 3<>/dev/tcp/example.com/80echo -e ""GET / HTTP/1.1\r\nHost: example.com\r\nConnection: close\r\n\r\n"" >&3cat <&3```If the server could be configured to maintain HTTP bound to loopback in production mode, that'd help. Everything else would still be forced to use HTTPS",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/16619,1120218730,2023-02-28T15:06:46Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/HotRodMapStorage.java,"@@ -152,29 +190,74 @@ private static String toOrderString(QueryParameters.OrderBy<?> orderBy) {      @Override     public Stream<V> read(QueryParameters<M> queryParameters) {+        if (LockObjectsForModification.isEnabled(session, storedEntityDescriptor.getModelTypeClass())) {+            return pessimisticQueryRead(queryParameters);+        }++        Query<E> query = prepareQueryWithPrefixAndParameters(null, queryParameters);+        CloseableIterator<E> iterator = paginateQuery(query, queryParameters.getOffset(),+                queryParameters.getLimit()).iterator();+        return closing(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false))+                .onClose(iterator::close)+                .filter(Objects::nonNull) // see https://github.com/keycloak/keycloak/issues/9271+                .map(this.delegateProducer);+    }++    private Stream<V> pessimisticQueryRead(QueryParameters<M> queryParameters) {+        DefaultModelCriteria<M> dmc = queryParameters.getModelCriteriaBuilder();++        // Optimization if the criteria contains only one id+        String id = (String) dmc.getSingleRestrictionArgument(""id"");++        if (id != null) {+            // We have a criteria that contains ""id EQ 'some_key'"". We can change this to reading only some_key using read method and then apply the rest of criteria.+            MapModelCriteriaBuilder<K,V,M> mapMcb = dmc.flashToModelCriteriaBuilder(new MapModelCriteriaBuilder<>(keyConverter, fieldPredicates));+            V entity = read(id);+            if (entity == null) {+                return Stream.empty();+            }+            boolean fulfillsQueryCriteria = mapMcb.getKeyFilter().test(keyConverter.fromString(id)) && mapMcb.getEntityFilter().test(entity);+            if (!fulfillsQueryCriteria) {+                // entity does not fulfill whole criteria, we can release lock now+                HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, getLockName(id));+                return Stream.empty();+            }++            return Stream.of(entity);+        }++        // Criteria does not contain only one id, we need to read ids non-pessimistically and then read entities one by one pessimistically+        Query<Object[]> query = prepareQueryWithPrefixAndParameters(""SELECT id "", queryParameters);","During the optimistic locking development, I encountered problems with projection of `id` field for entities that don't have `projectable = true` annotation on `id` field. It was failing with the following error:`ISPN028502: Unknown alias: authenticatedClientSessions.` for the query `SELECT id FROM kc.HotRodUserSessionEntity c WHERE ((c.realmId = :realmId0) AND (c.offline = :offline0) AND (c.authenticatedClientSessions.clientId = :authenticatedClientSessionsclientId0)) ORDER BY lastSessionRefresh ASC` Here it is not failing probably because there is not a pessimistic locking in place for affected entities. Not sure if we want to fix it here or we will leave it for the optimistic locking PR.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1120876077,2023-02-28T22:32:14Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/resteasy/QuarkusHttpRequest.java,"@@ -0,0 +1,150 @@+/*+ * Copyright 2022 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.quarkus.runtime.integration.resteasy;++import java.io.IOException;+import java.security.cert.X509Certificate;+import java.util.Deque;+import java.util.Iterator;+import javax.enterprise.inject.Instance;+import javax.enterprise.inject.spi.CDI;+import javax.net.ssl.SSLPeerUnverifiedException;+import javax.net.ssl.SSLSession;+import javax.ws.rs.core.HttpHeaders;+import javax.ws.rs.core.MultivaluedMap;+import javax.ws.rs.core.UriInfo;+import org.jboss.resteasy.reactive.common.util.QuarkusMultivaluedHashMap;+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;+import org.jboss.resteasy.reactive.server.core.multipart.FormData;+import org.jboss.resteasy.reactive.server.core.multipart.FormData.FormValue;+import org.keycloak.http.FormPartValue;+import org.keycloak.http.HttpRequest;+import org.keycloak.quarkus.runtime.integration.jaxrs.EmptyMultivaluedMap;+import org.keycloak.services.FormPartValueImpl;++import io.vertx.ext.web.RoutingContext;++public final class QuarkusHttpRequest implements HttpRequest {++    private static final MultivaluedMap<String, String> EMPTY_FORM_PARAM = new EmptyMultivaluedMap<>();",Because we don't want callers writing to it as it should hold no data. If you try to add something to it you get an exception.,
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/17346,1121310024,2023-03-01T08:05:27Z,quarkus/runtime/pom.xml,"@@ -458,6 +458,17 @@             <artifactId>infinispan-client-hotrod-jakarta</artifactId>             <version>${infinispan.version}</version>         </dependency>+        <dependency>+            <groupId>org.infinispan</groupId>+            <artifactId>infinispan-query-dsl</artifactId>","This dependency was removed from this pom.xml, probably due to a mistake. Reverted.",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1121419164,2023-03-01T09:41:09Z,services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java,"@@ -109,7 +108,7 @@ public KeycloakApplication() {             classes.add(KcUnrecognizedPropertyExceptionHandler.class);              singletons.add(new ObjectMapperResolver());","Yeah, I understand, but why are the other singletons changed here in KeycloakApplication? It's only a nitpick, but would be good to have it unified, and I'd like to find out if there's some special intention behind it :)) ",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17350,1121871082,2023-03-01T14:58:47Z,services/src/main/java/org/keycloak/theme/DefaultThemeManager.java,"@@ -106,20 +115,19 @@ private Theme loadTheme(String name, Theme.Type type) {         List<Theme> themes = new LinkedList<>();         themes.add(theme); -        if (theme.getImportName() != null) {-            String[] s = theme.getImportName().split(""/"");-            themes.add(findTheme(s[1], Theme.Type.valueOf(s[0].toUpperCase())));-        }+        if (!processImportedTheme(themes, theme, name, type)) return null;","Actually not as `loadTheme` is private method, which is supposed to return the theme itself just if it exists and if it is OK. Even before this PR, the method returned null in case that theme itself is not found. So I've just extended this to return null also in case that ""parent"" is null or ""import"" is null (which means theme was found, but is incorrect).The fallback to default theme is already done in the calling method https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java#L68-L72 .",x
55846193,sjweixel,https://api.github.com/repos/keycloak/keycloak/pulls/17230,1121954397,2023-03-01T15:51:44Z,services/src/main/java/org/keycloak/services/ServicesLogger.java,"@@ -467,4 +467,9 @@ public interface ServicesLogger extends BasicLogger {     @Message(id=106, value=""Created script engine '%s', version '%s' for the mime type '%s'"")     @Once     void scriptEngineCreated(String engineName, String engineVersion, String mimeType);++    @LogMessage(level = ERROR)+    @Message(id=107, value=""User '%s' in realm '%s' is not assigned %s role"")+    void userNotAssignedRole(String user, String realm, String role);","I'm not clear on the comment.  The code in ApplianceBootStrap is testing if the user exists and if so, determines if the admin role is assigned to the user.```        if (existingUser != null) {            RoleModel adminRole = realm.getRole(AdminRoles.ADMIN);            if (existingUser.hasRole(adminRole)) {               ServicesLogger.LOGGER.addAdminUserUserExists(username, Config.getAdminRealm());            } else {               ServicesLogger.LOGGER.userNotAssignedRole(username, Config.getAdminRealm(), AdminRoles.ADMIN);            }            return;        }```Is your comment addressing one of these concerns?- The log message about the role doesn't match the logic in the code.- The change doesn't match the issue as it is described.- This message has no value.The initial issue that I opened was #16961.  It was closed as a duplicate of this issue, then reopened after my initial PR.  One of my concerns is that when KEYCLOAK_ADMIN is used to specify a user, an admin user isn't created if that username already exists without admin role.  This may not be a situation that occurs often.   I think it could the user some headache if the situation arises.  ",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17267,1122758914,2023-03-02T08:41:38Z,services/src/test/java/org/keycloak/protocol/docker/mapper/TestAuthenticatedClientSessionModel.java,"@@ -0,0 +1,119 @@+package org.keycloak.protocol.docker.mapper;","Is it possible to move this class to `org.keycloak.protocol` package (and likely make it public), so it can be eventually used by other ""unit tests"" for protocol mappers? It doesn't have anything docker-protocol specific, so can be more shared.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/17401,1122846095,2023-03-02T09:54:10Z,adapters/oidc/js/pom.xml,"@@ -1,85 +1,82 @@-<?xml version=""1.0""?>-<!---  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates-  ~ and other contributors as indicated by the @author tags.-  ~-  ~ Licensed under the Apache License, Version 2.0 (the ""License"");-  ~ you may not use this file except in compliance with the License.-  ~ You may obtain a copy of the License at-  ~-  ~ http://www.apache.org/licenses/LICENSE-2.0-  ~-  ~ Unless required by applicable law or agreed to in writing, software-  ~ distributed under the License is distributed on an ""AS IS"" BASIS,-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.-  ~ See the License for the specific language governing permissions and-  ~ limitations under the License.-  -->-+<?xml version=""1.0"" encoding=""UTF-8""?>",We still need to build a JAR to allow the Keycloak server to serve it statically. I'd really like to get rid of this in the long term.,x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/17327,1122948167,2023-03-02T11:24:25Z,quarkus/config-api/src/main/java/org/keycloak/config/database/Database.java,"@@ -213,4 +257,18 @@ public String toString() {             return databaseKind.toLowerCase(Locale.ROOT);         }     }++    private static class Enabled {","It could also be an enum, right? Or what's the intention behind that to have a static class with boolean flags?",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/17308,1124277442,2023-03-03T10:30:38Z,.github/actions/build-keycloak/action.yml,"@@ -46,7 +46,7 @@ runs:       shell: bash       run: |         MVN_HTTP_CONFIG=""-Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.httpconnectionManager.ttlSeconds=120""-        ./mvnw install -nsu -B -e -DskipTests -DskipExamples $MVN_HTTP_CONFIG +        ./mvnw install -nsu -B -e -DskipTests -DskipExamples $MVN_HTTP_CONFIG -Papp-server-wildfly","@stianst Using app-server-wildfly is just a temporary solution until we have a Quarkus 3 Alpha release with Hibernate 6. After that, we'll use app-server-undertow and auth-server-quarkus.",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/17327,1124622730,2023-03-03T15:33:08Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -894,6 +894,8 @@                                 <keycloak.map.storage.connectionsJpa.user>${keycloak.map.storage.connectionsJpa.user}</keycloak.map.storage.connectionsJpa.user>                                 <keycloak.map.storage.connectionsJpa.password>${keycloak.map.storage.connectionsJpa.password}</keycloak.map.storage.connectionsJpa.password> +                                <keycloak.storage.connections.vendor>postgres</keycloak.storage.connections.vendor>","`postgres`It is an alias, while `postgresql` is a databaseKind. We need to use the alias as CocroachDB and PostgreSQL have the same databaseKind and we need to distinguish between them.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/17327,1124635621,2023-03-03T15:42:15Z,quarkus/config-api/src/main/java/org/keycloak/config/database/Database.java,"@@ -213,4 +257,18 @@ public String toString() {             return databaseKind.toLowerCase(Locale.ROOT);         }     }++    private static class Enabled {",The intention was to make easy use of methods `isEnabledOnLegacyStore` and `isEnabledOnNewStore` on filters. E.g.:https://github.com/vramik/keycloak/blob/d760d18dbec0317f48bd43a8c9b6a775384e2dcd/quarkus/config-api/src/main/java/org/keycloak/config/database/Database.java#L115,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/15370,1124688540,2023-03-03T16:20:26Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/kerberos/AbstractKerberosTest.java,"@@ -209,6 +209,36 @@ protected AccessToken assertSuccessfulSpnegoLogin(String clientId, String loginU         return token;     } +    protected OAuthClient.AccessTokenResponse assertSpnegoLoginTokenResponse(String loginUsername, String expectedUsername, String password) throws Exception {+        return assertSpnegoLoginTokenResponse(""kerberos-app"", loginUsername, expectedUsername, password);+    }++    protected OAuthClient.AccessTokenResponse assertSpnegoLoginTokenResponse(String clientId, String loginUsername, String expectedUsername, String password) throws Exception {","IS it possible to update existing method `assertSuccessfulSpnegoLogin` to use your newly added method to avoid so much code duplications?I am thinking about something around:``` protected AccessToken assertSuccessfulSpnegoLogin(String clientId, String loginUsername, String expectedUsername, String password) throws Exception {        OAuthClient.AccessTokenResponse tokenResponse = assertSpnegoLoginTokenResponse(.. arguments of your new method here ...;        AccessToken token = oauth.verifyToken(tokenResponse.getAccessToken());        Assert.assertEquals(userId, token.getSubject());        Assert.assertEquals(expectedUsername, token.getPreferredUsername());         return token;}```",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/17308,1126529520,2023-03-06T14:49:32Z,testsuite/integration-arquillian/tests/base/testsuites/base-suite-profiles.sh,"@@ -0,0 +1,33 @@+#!/bin/bash -e++GROUP=""$1""++if [ ""$GROUP"" == """" ]; then+  echo 'Usage: base-suite-profiles.sh <group>'+  exit+fi++cd ""`readlink -f ""$0"" | xargs dirname`""++GROUP_PROFILES_FILE='base-suite-group-profiles'+PROFILES=`cat $GROUP_PROFILES_FILE | grep -v '^[[:space:]]*$' | grep -v '^[[:space:]]*#'`++SEP=""""+PROFILE_PROP=""-P""+APPLY_PROFILES=""""++for i in `echo $PROFILES`; do+  PROFILE_GROUP=`echo $i | cut -d ';' -f 1`+  PROFILE=`echo $i | cut -d ';' -f 2`++  if [ ""$GROUP"" == ""$PROFILE_GROUP"" ]; then+      APPLY_PROFILES=""$PROFILE_PROP$APPLY_PROFILES$SEP$PROFILE""+      SEP=','+      PROFILE_PROP=''+  fi+done++echo ""$APPLY_PROFILES""+++","Yep, it's only temporary, same as for WildFly app server. I wanted to keep the default Undertow app server wherever it's possible for a better simulation of the environment. But I think the other jobs don't use the app server a lot. Removed",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17327,1127630028,2023-03-07T10:07:34Z,quarkus/config-api/src/main/java/org/keycloak/config/database/Database.java,"@@ -136,29 +157,41 @@ private String addH2NonKeywords(String jdbcUrl) {                 ""dev-mem"", ""dev-file""         ),         MYSQL(""mysql"",+                Enabled.LEGACY_ONLY,                 ""com.mysql.cj.jdbc.MysqlXADataSource"",                 ""com.mysql.cj.jdbc.Driver"",                 ""org.hibernate.dialect.MySQL8Dialect"",                 ""jdbc:mysql://${kc.db-url-host:localhost}:${kc.db-url-port:3306}/${kc.db-url-database:keycloak}${kc.db-url-properties:}"",                 asList(""org.keycloak.connections.jpa.updater.liquibase.UpdatedMySqlDatabase"")         ),         MARIADB(""mariadb"",+                Enabled.LEGACY_ONLY,                 ""org.mariadb.jdbc.MariaDbDataSource"",                 ""org.mariadb.jdbc.Driver"",                 ""org.hibernate.dialect.MariaDBDialect"",                 ""jdbc:mariadb://${kc.db-url-host:localhost}:${kc.db-url-port:3306}/${kc.db-url-database:keycloak}${kc.db-url-properties:}"",                 asList(""org.keycloak.connections.jpa.updater.liquibase.UpdatedMariaDBDatabase"")         ),         POSTGRES(""postgresql"",+                Enabled.ENABLED,                 ""org.postgresql.xa.PGXADataSource"",                 ""org.postgresql.Driver"",                 ""io.quarkus.hibernate.orm.runtime.dialect.QuarkusPostgreSQL10Dialect"",                 ""jdbc:postgresql://${kc.db-url-host:localhost}:${kc.db-url-port:5432}/${kc.db-url-database:keycloak}${kc.db-url-properties:}"",-                asList(""liquibase.database.core.PostgresDatabase"", ""liquibase.database.core.CockroachDatabase"",-                        ""org.keycloak.connections.jpa.updater.liquibase.PostgresPlusDatabase""),+                asList(""liquibase.database.core.PostgresDatabase"", ""org.keycloak.connections.jpa.updater.liquibase.PostgresPlusDatabase""),                 ""postgres""         ),+        COCKROACH(POSTGRES.databaseKind, //needs to be aligned with https://quarkus.io/guides/datasource#default-datasource+                Enabled.MAP_STORE_ONLY,+                POSTGRES.xaDriver,+                POSTGRES.nonXaDriver,+                ""org.hibernate.dialect.CockroachDialect"",","AFAIK this should be a valid Hibernate class name. As there is no `CockroachDialect`, I'm suggesting as the most recent dialect supported in Hibernate 5.x.At the same time, this is in the Quarkus 2.x branch not used, as we'll override it for the new store with the `JsonbPostgreSQL95Dialect`, so this explains why the tests are green.```suggestion                ""org.hibernate.dialect.CockroachDB201Dialect"",```",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/12566,1129478727,2023-03-08T14:02:52Z,services/src/main/java/org/keycloak/protocol/oidc/TokenManager.java,"@@ -1077,8 +1077,9 @@ private int getRefreshExpiration() {                 clientSessionMaxLifespan = realm.getClientSessionMaxLifespan();             } +            AuthenticatedClientSessionModel clientSession = clientSessionCtx.getClientSession();             if (clientSessionMaxLifespan > 0) {-                int clientSessionMaxExpiration = userSession.getStarted() + clientSessionMaxLifespan;+                int clientSessionMaxExpiration = clientSession.getTimestamp() + clientSessionMaxLifespan;","Okis, no problem, then I'm going to create a new PR. I'm going to join this issue with https://github.com/keycloak/keycloak/pull/15070 (they are similar and modifying the same code area). I'll respect both commits.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/17327,1129608156,2023-03-08T15:19:38Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -333,6 +334,14 @@ public String getProvider() {             .description(""Root directory for file map store."")             .build(); +    public static final Option<String> STORAGE_JPA_DB = new OptionBuilder<>(""storage-jpa-db"", String.class)+            .category(OptionCategory.STORAGE)+            .defaultValue(Database.Vendor.POSTGRES.name().toLowerCase())+            .expectedValues(Database::getAvailableMapStoreAliases)+            .description(""The database vendor for jpa map storage."")+            .buildTime(true)+            .build();",I have a bit silly question. Why do we even need this new option? :) Can't we simply piggyback on `--db`?I understand that this is a new Store option. But what will happen with the `--db` after the new Store replaces the legacy Store? Would we keep using `--storage-jpa-db`? Isn't it a bit long? :),
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/17308,1129715097,2023-03-08T16:25:21Z,.github/actions/build-keycloak/action.yml,"@@ -46,7 +46,7 @@ runs:       shell: bash       run: |         MVN_HTTP_CONFIG=""-Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.httpconnectionManager.ttlSeconds=120""-        ./mvnw install -nsu -B -e -DskipTests -DskipExamples $MVN_HTTP_CONFIG +        ./mvnw install -nsu -B -e -DskipTests -DskipExamples $MVN_HTTP_CONFIG -Papp-server-wildfly","@mabartos Works for me, it's temporary and limited to this branch in any case. The PR LGTM then.@stianst Does it work for you?",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/17327,1129791046,2023-03-08T17:15:07Z,quarkus/config-api/src/main/java/org/keycloak/config/StorageOptions.java,"@@ -333,6 +334,14 @@ public String getProvider() {             .description(""Root directory for file map store."")             .build(); +    public static final Option<String> STORAGE_JPA_DB = new OptionBuilder<>(""storage-jpa-db"", String.class)+            .category(OptionCategory.STORAGE)+            .defaultValue(Database.Vendor.POSTGRES.name().toLowerCase())+            .expectedValues(Database::getAvailableMapStoreAliases)+            .description(""The database vendor for jpa map storage."")+            .buildTime(true)+            .build();","At this moment there is a difference in ""expected values' as well as in ""default value"" between `--db` and `--storage-jpa-db`. That's the reason it was introduced in the first place. I agree that after the new Store replaces the legacy Store it might be a bit long :) note: https://github.com/keycloak/keycloak/issues/13562 ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17519,1130624433,2023-03-09T08:11:27Z,docs/guides/server/configuration.adoc,"@@ -8,56 +8,53 @@ summary=""Understand how to configure and start Keycloak"">  This guide explains the configuration methods for Keycloak and how to start and apply the preferred configuration. It includes configuration guidelines for optimizing Keycloak for faster startup and low memory footprint. -== Configuration Sources for Keycloak-Keycloak loads the configuration from four different configuration sources:+== Sources for configuring Keycloak+Keycloak loads the configuration from four sources, which are listed here in order of application.  -* command-line parameters-* environment variables-* user-created `.conf` file-* `keycloak.conf` file located in the `conf` directory.+. Command-line parameters+. Environment variables+. Options defined in a user-created configuration file.+. Options defined in the `conf/keycloak.conf` file. -Configuration sources have a descending ordinal: command-line parameters take precedence over environment variables. Environment variables take precedence over options set by using a specific configuration file. Options from a specific config file take precedence over options defined in `conf/keycloak.conf`. When the same configuration key is found in multiple configuration sources, the applied value is taken from the configuration source with the highest ordinal.+When an option is set in more than one source, the highest source in the list determines the value for that option. For example, the value for an option set by a command-line parameter has a higher priority than an environment variable for the same option.","Instead of ""highest source"" - could there be a different phrase? It might be a technical term that I'm not familiar with. I mostly heard ""highest priority"", maybe it could be used here as well?```suggestionWhen an option is set in more than one source, the one that comes first on the list determines the value for that option. For example, the value for an option set by a command-line parameter has a higher priority than an environment variable for the same option.```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17519,1130654127,2023-03-09T08:39:58Z,docs/guides/server/configuration.adoc,"@@ -74,144 +71,148 @@ export KC_DB_URL_HOST=mykeycloakdb db-url-host=mykeycloakdb ---- -=== Using environment variables for configuration values-It is possible to use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:+=== Formats for command-line parameters++Keycloak is packed with many command line parameters for configuration. To see the available configuration formats, enter the following command:++<@kc.start parameters=""--help""/>++Alternatively, you can find all server options at <@links.server id=""all-config""/>.++=== Formats for environment variables+You can use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:  [source] ---- db-url-host=${r""${MY_DB_HOST}""} ---- -To specify a fallback value in case the environment variable can not be resolved, use a `:`:+To specify a fallback value in case the environment variable cannots be resolved, use a `:` (colon) as shown here before  `mydb`: [source, bash] ---- db-url-host=${r""${MY_DB_HOST:mydb}""} ---- -=== Configuring the server using a specific configuration file+=== Format to include a specific configuration file  By default, the server always fetches configuration options from the `conf/keycloak.conf` file. For a new installation, this file holds only commented settings as an idea of what you want to set when running in production. -You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by invoking the following command:+You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by entering the following command:  <@kc.start rootParameters=""--config-file=/path/to/myconfig.conf""/> -=== Using the command-line help-Keycloak is packed with a CLI that helps you to configure Keycloak. To find out about the available configuration, invoke the following command:--<@kc.start parameters=""--help""/>+=== Format for raw Quarkus properties+In most cases, the available configuration options should suffice to configure the server. +However, for a specific behavior or capability that is missing in the Keycloak configuration, you can use properties from the underlying Quarkus framework. -Alternatively, you can find all server options at <@links.server id=""all-config""/>.+If possible, avoid using properties directly from Quarkus, because they are unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first.  This approach helps us improve the configuration of Keycloak to fit your needs. -=== Using raw Quarkus properties-In most cases, the available configuration options should suffice to configure the server.-However, you might need to use properties directly from the underlying Quarkus framework to enable a specific behavior or capability that is missing in the keycloak configuration.+If an enhancement request is not possible, you can configure the server using raw Quarkus properties: -If possible, avoid using properties directly from Quarkus. These are considered unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first and help us-to improve Keycloak's configuration to fit your needs.+. Create a `quarkus.properties` file in the `conf` directory.+. Define the required properties in that file.+++You can use only a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of the Quarkus extensions that are defined in the https://quarkus.io/guides/all-config[Quarkus documentation]. Also, note these differences for Quarkus properties: -If that's not possible, you can configure the server using raw Quarkus properties:+* A lock icon for a Quarkus property in the https://quarkus.io/guides/all-config[Quarkus documentation] indicates a build time property.  You include the `build` option to apply this property. For details about the build command, see the subsequent sections on optimizing Keycloak.+* No lock icon for a property in the Quarkus guide indicates a runtime property for Quarkus and Keycloak.  -* Create a `quarkus.properties` file in the `conf` directory and define any property you need.+. Use the `[-cf|--config-file]` command line parameter to include that file. -For a complete list of Quarkus properties, see the https://quarkus.io/guides/all-config[Quarkus documentation]. Be aware that Keycloak uses a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of quarkus extensions, so not all properties will be available.--When a quarkus property is a runtime property (no lock icon shown in the quarkus guide), it is also handled as runtime property for Keycloak. When a quarkus property is a build time property, you have to invoke a `build` for the property to be applied. See the sections below for further information around the build command.--Note that some quarkus properties are mapped by the Keycloak configuration, for example `quarkus.http.port` and similar properties that are needed to configure Keycloak. If the property is used by Keycloak, defining the same underlying property key in  `quarkus.properties` will have no effect, as the keycloak configuration value takes precedence over the quarkus property value.+Note that some Quarkus properties are already mapped in the Keycloak configuration, such as `quarkus.http.port` and similar essential properties. If the property is used by Keycloak, defining that property key in `quarkus.properties` has no effect. The Keycloak configuration value takes precedence over the Quarkus property value.  == Starting Keycloak-Keycloak can be started in two operating modes, `development mode` and `production mode`. Both modes offer a different set of defaults for the environment they are intended to be used.+You can start Keycloak in `development mode` or `production mode`. Each mode offers different defaults for the intended environment.  === Starting Keycloak in development mode-The development mode is targeted for people trying out Keycloak the first time and get it up and running quickly. It also offers convenient defaults for developers, for example to develop a new Keycloak theme.+Use development mode to try out Keycloak for the first time to get it up and running quickly. This mode offers convenient defaults for developers, such as for developing a new Keycloak theme. -The development mode is started by invoking the following command:+To start in development mode, enter the following command:  <@kc.startdev parameters=""""/>  .Defaults-The development mode sets the following default configuration:+Development mode sets the following default configuration:  * HTTP is enabled * Strict hostname resolution is disabled * Cache is set to local (No distributed cache mechanism used for high availability)-* Theme- and Template-caching is disabled+* Theme-caching and template-caching is disabled  === Starting Keycloak in production mode-The production mode is targeted for deployments of Keycloak into production environments and follows a ""secure by default"" principle.+Use production mode for deployments of Keycloak in production environments. This mode follows a _secure by default_ principle. -The production mode is started by invoking the following command:+To start in production mode, enter the following command:  <@kc.start parameters=""""/> -Without further configuration, this command will not start Keycloak and show you an error instead. This is done on purpose, because Keycloak follows a ""secure by default"" principle in this mode and expects to have a hostname setup and a HTTPS/TLS setup available when started in production mode.+Without further configuration, this command will not start Keycloak and show you an error instead. This response is done on purpose, because Keycloak follows a _secure by default_ principle. Production mode expects a hostname to be set up and an HTTPS/TLS setup to be available when started.  .Defaults-The production mode sets the following defaults:+Production mode sets the following defaults:  * HTTP is disabled as transport layer security (HTTPS) is essential * Hostname configuration is expected * HTTPS/TLS configuration is expected -Make sure to follow the steps outlined in <@links.server id=""configuration-production""/> before deploying Keycloak to production environments.+Before deploying Keycloak in a production environment, make sure to follow the steps outlined in <@links.server id=""configuration-production""/>. -By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These give you an idea about the main configuration to consider when running Keycloak in production.+By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These options give you an idea about the main configuration to consider when running Keycloak in production. -== Setup of the initial admin user-The initial admin user can be added manually using the web frontend. It needs to be accessed using a local connection (localhost) or using environment variables:+== Creating the initial admin user+You can create the initial admin user by using the web frontend, which you access using a local connection (localhost). You can instead create this user by using environment variables. Set `KEYCLOAK_ADMIN=_<username>_` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=_<password>_` for the initial admin password. -To add the initial admin user using environment variables, set `KEYCLOAK_ADMIN=<username>` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=<password>` for the initial admin password. Keycloak parses these values at first startup to create an initial user with administrative rights.-Once the first user with administrative rights exists, you can use the admin UI or the command line tool `kcadm.[sh|bat]` to create additional users.+Once the first user with administrative rights exists, you can use the Admin Console or the command line tool `kcadm.[sh|bat]` to create additional users.  If the initial administrator already exists and the environment variables are still present at startup, an error message stating the failed creation of the initial administrator is shown in the logs. Keycloak ignores the values and starts up correctly.  == Optimize the Keycloak startup-It is highly recommended to optimize Keycloak for better startup times and memory consumption before deploying into production environments. This section shows you how to apply a set of optimizations for Keycloak to get the best performance and runtime behavior possible.+We recommend optimizing Keycloak to provide faster startup and better memory consumption before deploying Keycloak in a production environment. This section describes how to apply Keycloak optimizations for the best performance and runtime behavior.++=== Creating an optimized Keycloak build+By default, when you use the `start` or `start-dev` command, Keycloak runs a `build` command under the covers for convenience reasons.   -=== Create an optimized Keycloak build-By default, when the `start` or `start-dev` commands are used, Keycloak runs a `build` command under the covers for convenience reasons.-This `build` command performs a set of optimizations to achieve an optimized startup- and runtime-behavior. The build process can take some time, usually a few seconds. Especially when running Keycloak in containerized environments like Kubernetes or OpenShift, startup time is important.-So in order to avoid the time that gets lost when running a `build` as part of Keycloaks first startup, it is possible and recommended to invoke a `build` explicitly before starting up, for example as a separate step in a CI/CD pipeline.+This `build` command performs a set of optimizations for the startup and runtime behavior. The build process can take a few seconds. Especially when running Keycloak in containerized environments such as Kubernetes or OpenShift, startup time is important. To avoid losing that time, enter a `build` immediately before starting up, such as a separate step in a CI/CD pipeline.  ==== First step: Run a build explicitly-To run a `build`, invoke the following command:+To run a `build`, enter the following command:  <@kc.build parameters=""<build-options>""/> -As you may notice, the command above shows `build options` that should be invoked. Keycloak distinguishes between **build options**, that are usable when invoking the `build` command, and **configuration options**, that are usable when starting up the server.+This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when entering the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect, but when a build is invoked beforehand, there's only a subset of Options available to the build command. The reason is, that build options get persisted into Keycloaks classpath, so configuration for e.g. credentials like `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you enter a build just before the startup,  only a subset of options are available to the build command. The restriction is due to the build options getting persisted into the Keycloak classpath. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.","```suggestionFor a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into the Keycloak classpath. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17519,1130658180,2023-03-09T08:43:40Z,docs/guides/server/configuration.adoc,"@@ -74,144 +71,148 @@ export KC_DB_URL_HOST=mykeycloakdb db-url-host=mykeycloakdb ---- -=== Using environment variables for configuration values-It is possible to use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:+=== Formats for command-line parameters++Keycloak is packed with many command line parameters for configuration. To see the available configuration formats, enter the following command:++<@kc.start parameters=""--help""/>++Alternatively, you can find all server options at <@links.server id=""all-config""/>.++=== Formats for environment variables+You can use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:  [source] ---- db-url-host=${r""${MY_DB_HOST}""} ---- -To specify a fallback value in case the environment variable can not be resolved, use a `:`:+To specify a fallback value in case the environment variable cannots be resolved, use a `:` (colon) as shown here before  `mydb`: [source, bash] ---- db-url-host=${r""${MY_DB_HOST:mydb}""} ---- -=== Configuring the server using a specific configuration file+=== Format to include a specific configuration file  By default, the server always fetches configuration options from the `conf/keycloak.conf` file. For a new installation, this file holds only commented settings as an idea of what you want to set when running in production. -You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by invoking the following command:+You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by entering the following command:  <@kc.start rootParameters=""--config-file=/path/to/myconfig.conf""/> -=== Using the command-line help-Keycloak is packed with a CLI that helps you to configure Keycloak. To find out about the available configuration, invoke the following command:--<@kc.start parameters=""--help""/>+=== Format for raw Quarkus properties+In most cases, the available configuration options should suffice to configure the server. +However, for a specific behavior or capability that is missing in the Keycloak configuration, you can use properties from the underlying Quarkus framework. -Alternatively, you can find all server options at <@links.server id=""all-config""/>.+If possible, avoid using properties directly from Quarkus, because they are unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first.  This approach helps us improve the configuration of Keycloak to fit your needs. -=== Using raw Quarkus properties-In most cases, the available configuration options should suffice to configure the server.-However, you might need to use properties directly from the underlying Quarkus framework to enable a specific behavior or capability that is missing in the keycloak configuration.+If an enhancement request is not possible, you can configure the server using raw Quarkus properties: -If possible, avoid using properties directly from Quarkus. These are considered unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first and help us-to improve Keycloak's configuration to fit your needs.+. Create a `quarkus.properties` file in the `conf` directory.+. Define the required properties in that file.+++You can use only a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of the Quarkus extensions that are defined in the https://quarkus.io/guides/all-config[Quarkus documentation]. Also, note these differences for Quarkus properties: -If that's not possible, you can configure the server using raw Quarkus properties:+* A lock icon for a Quarkus property in the https://quarkus.io/guides/all-config[Quarkus documentation] indicates a build time property.  You include the `build` option to apply this property. For details about the build command, see the subsequent sections on optimizing Keycloak.+* No lock icon for a property in the Quarkus guide indicates a runtime property for Quarkus and Keycloak.  -* Create a `quarkus.properties` file in the `conf` directory and define any property you need.+. Use the `[-cf|--config-file]` command line parameter to include that file. -For a complete list of Quarkus properties, see the https://quarkus.io/guides/all-config[Quarkus documentation]. Be aware that Keycloak uses a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of quarkus extensions, so not all properties will be available.--When a quarkus property is a runtime property (no lock icon shown in the quarkus guide), it is also handled as runtime property for Keycloak. When a quarkus property is a build time property, you have to invoke a `build` for the property to be applied. See the sections below for further information around the build command.--Note that some quarkus properties are mapped by the Keycloak configuration, for example `quarkus.http.port` and similar properties that are needed to configure Keycloak. If the property is used by Keycloak, defining the same underlying property key in  `quarkus.properties` will have no effect, as the keycloak configuration value takes precedence over the quarkus property value.+Note that some Quarkus properties are already mapped in the Keycloak configuration, such as `quarkus.http.port` and similar essential properties. If the property is used by Keycloak, defining that property key in `quarkus.properties` has no effect. The Keycloak configuration value takes precedence over the Quarkus property value.  == Starting Keycloak-Keycloak can be started in two operating modes, `development mode` and `production mode`. Both modes offer a different set of defaults for the environment they are intended to be used.+You can start Keycloak in `development mode` or `production mode`. Each mode offers different defaults for the intended environment.  === Starting Keycloak in development mode-The development mode is targeted for people trying out Keycloak the first time and get it up and running quickly. It also offers convenient defaults for developers, for example to develop a new Keycloak theme.+Use development mode to try out Keycloak for the first time to get it up and running quickly. This mode offers convenient defaults for developers, such as for developing a new Keycloak theme. -The development mode is started by invoking the following command:+To start in development mode, enter the following command:  <@kc.startdev parameters=""""/>  .Defaults-The development mode sets the following default configuration:+Development mode sets the following default configuration:  * HTTP is enabled * Strict hostname resolution is disabled * Cache is set to local (No distributed cache mechanism used for high availability)-* Theme- and Template-caching is disabled+* Theme-caching and template-caching is disabled  === Starting Keycloak in production mode-The production mode is targeted for deployments of Keycloak into production environments and follows a ""secure by default"" principle.+Use production mode for deployments of Keycloak in production environments. This mode follows a _secure by default_ principle. -The production mode is started by invoking the following command:+To start in production mode, enter the following command:  <@kc.start parameters=""""/> -Without further configuration, this command will not start Keycloak and show you an error instead. This is done on purpose, because Keycloak follows a ""secure by default"" principle in this mode and expects to have a hostname setup and a HTTPS/TLS setup available when started in production mode.+Without further configuration, this command will not start Keycloak and show you an error instead. This response is done on purpose, because Keycloak follows a _secure by default_ principle. Production mode expects a hostname to be set up and an HTTPS/TLS setup to be available when started.  .Defaults-The production mode sets the following defaults:+Production mode sets the following defaults:  * HTTP is disabled as transport layer security (HTTPS) is essential * Hostname configuration is expected * HTTPS/TLS configuration is expected -Make sure to follow the steps outlined in <@links.server id=""configuration-production""/> before deploying Keycloak to production environments.+Before deploying Keycloak in a production environment, make sure to follow the steps outlined in <@links.server id=""configuration-production""/>. -By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These give you an idea about the main configuration to consider when running Keycloak in production.+By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These options give you an idea about the main configuration to consider when running Keycloak in production. -== Setup of the initial admin user-The initial admin user can be added manually using the web frontend. It needs to be accessed using a local connection (localhost) or using environment variables:+== Creating the initial admin user+You can create the initial admin user by using the web frontend, which you access using a local connection (localhost). You can instead create this user by using environment variables. Set `KEYCLOAK_ADMIN=_<username>_` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=_<password>_` for the initial admin password. -To add the initial admin user using environment variables, set `KEYCLOAK_ADMIN=<username>` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=<password>` for the initial admin password. Keycloak parses these values at first startup to create an initial user with administrative rights.-Once the first user with administrative rights exists, you can use the admin UI or the command line tool `kcadm.[sh|bat]` to create additional users.+Once the first user with administrative rights exists, you can use the Admin Console or the command line tool `kcadm.[sh|bat]` to create additional users.  If the initial administrator already exists and the environment variables are still present at startup, an error message stating the failed creation of the initial administrator is shown in the logs. Keycloak ignores the values and starts up correctly.  == Optimize the Keycloak startup-It is highly recommended to optimize Keycloak for better startup times and memory consumption before deploying into production environments. This section shows you how to apply a set of optimizations for Keycloak to get the best performance and runtime behavior possible.+We recommend optimizing Keycloak to provide faster startup and better memory consumption before deploying Keycloak in a production environment. This section describes how to apply Keycloak optimizations for the best performance and runtime behavior.++=== Creating an optimized Keycloak build+By default, when you use the `start` or `start-dev` command, Keycloak runs a `build` command under the covers for convenience reasons.   -=== Create an optimized Keycloak build-By default, when the `start` or `start-dev` commands are used, Keycloak runs a `build` command under the covers for convenience reasons.-This `build` command performs a set of optimizations to achieve an optimized startup- and runtime-behavior. The build process can take some time, usually a few seconds. Especially when running Keycloak in containerized environments like Kubernetes or OpenShift, startup time is important.-So in order to avoid the time that gets lost when running a `build` as part of Keycloaks first startup, it is possible and recommended to invoke a `build` explicitly before starting up, for example as a separate step in a CI/CD pipeline.+This `build` command performs a set of optimizations for the startup and runtime behavior. The build process can take a few seconds. Especially when running Keycloak in containerized environments such as Kubernetes or OpenShift, startup time is important. To avoid losing that time, enter a `build` immediately before starting up, such as a separate step in a CI/CD pipeline.  ==== First step: Run a build explicitly-To run a `build`, invoke the following command:+To run a `build`, enter the following command:  <@kc.build parameters=""<build-options>""/> -As you may notice, the command above shows `build options` that should be invoked. Keycloak distinguishes between **build options**, that are usable when invoking the `build` command, and **configuration options**, that are usable when starting up the server.+This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when entering the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect, but when a build is invoked beforehand, there's only a subset of Options available to the build command. The reason is, that build options get persisted into Keycloaks classpath, so configuration for e.g. credentials like `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you enter a build just before the startup,  only a subset of options are available to the build command. The restriction is due to the build options getting persisted into the Keycloak classpath. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.  Build options are marked in <@links.server id=""all-config""/> with a tool icon.-Find available build options either by looking at the https://www.keycloak.org/server/all-config?f=build[All configuration page with build options selected] or by invoking the following command:+To find available build options, see https://www.keycloak.org/server/all-config?f=build[All configuration page with build options selected] or enter the following command:  <@kc.build parameters=""--help""/> -.Example: Run the `build` command to set the database to PostgreSQL before startup:+.Example: Run a `build` to set the database to PostgreSQL before startup <@kc.build parameters=""--db=postgres""/>  ==== Second step: Start Keycloak using `--optimized`-After a successful build, you can start Keycloak and turn off the default startup behavior by invoking the following command:+After a successful build, you can start Keycloak and turn off the default startup behavior by entering the following command:  <@kc.start parameters=""--optimized <configuration-options>""/> -The `--optimized` parameter tells Keycloak to assume a pre-built, already optimized Keycloak image is used. As a result, Keycloak avoids checking for and running a build directly at startup to save the time to walk through this process.+The `--optimized` parameter tells Keycloak to assume a pre-built, already optimized Keycloak image is used. As a result, Keycloak avoids checking for and running a build directly at startup, which saves time. -You can invoke all configuration options at startup; these options are the ones in <@links.server id=""all-config""/> that are **not** marked with a tool icon.+You can enter all configuration options at startup; these options are the ones in <@links.server id=""all-config""/> that are **not** marked with a tool icon. -If a build option is found at startup with an equal value to the value used when invoking the `build`, it gets silently ignored when using the `--optimized` flag. If it has a different value than the value used when a build was invoked, a warning is shown in the logs and the previously built value is used. In order for this value to take effect, you have to run a new `build` before starting.+* If a build option is found at startup with a value that is equal to the value used when entering the `build`, that option gets silently ignored when you use the `--optimized` parameter.+* If that option has a different value than the value used when a build was entered, a warning is entered in the logs and the previously built value is used. For this value to take effect, enter a new `build` before starting. -The following example shows how to create an optimized build, then start Keycloak using the --optimized parameter:+The following example shows the creation an optimized build and followed by the use of the `--optimized` parameter when starting Keycloak.",```suggestionThe following example shows the creation of an optimized build followed by the use of the `--optimized` parameter when starting Keycloak.```,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/17519,1130660570,2023-03-09T08:45:51Z,docs/guides/server/configuration.adoc,"@@ -74,144 +71,148 @@ export KC_DB_URL_HOST=mykeycloakdb db-url-host=mykeycloakdb ---- -=== Using environment variables for configuration values-It is possible to use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:+=== Formats for command-line parameters++Keycloak is packed with many command line parameters for configuration. To see the available configuration formats, enter the following command:++<@kc.start parameters=""--help""/>++Alternatively, you can find all server options at <@links.server id=""all-config""/>.++=== Formats for environment variables+You can use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:  [source] ---- db-url-host=${r""${MY_DB_HOST}""} ---- -To specify a fallback value in case the environment variable can not be resolved, use a `:`:+To specify a fallback value in case the environment variable cannots be resolved, use a `:` (colon) as shown here before  `mydb`: [source, bash] ---- db-url-host=${r""${MY_DB_HOST:mydb}""} ---- -=== Configuring the server using a specific configuration file+=== Format to include a specific configuration file  By default, the server always fetches configuration options from the `conf/keycloak.conf` file. For a new installation, this file holds only commented settings as an idea of what you want to set when running in production. -You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by invoking the following command:+You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by entering the following command:  <@kc.start rootParameters=""--config-file=/path/to/myconfig.conf""/> -=== Using the command-line help-Keycloak is packed with a CLI that helps you to configure Keycloak. To find out about the available configuration, invoke the following command:--<@kc.start parameters=""--help""/>+=== Format for raw Quarkus properties+In most cases, the available configuration options should suffice to configure the server. +However, for a specific behavior or capability that is missing in the Keycloak configuration, you can use properties from the underlying Quarkus framework. -Alternatively, you can find all server options at <@links.server id=""all-config""/>.+If possible, avoid using properties directly from Quarkus, because they are unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first.  This approach helps us improve the configuration of Keycloak to fit your needs. -=== Using raw Quarkus properties-In most cases, the available configuration options should suffice to configure the server.-However, you might need to use properties directly from the underlying Quarkus framework to enable a specific behavior or capability that is missing in the keycloak configuration.+If an enhancement request is not possible, you can configure the server using raw Quarkus properties: -If possible, avoid using properties directly from Quarkus. These are considered unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first and help us-to improve Keycloak's configuration to fit your needs.+. Create a `quarkus.properties` file in the `conf` directory.+. Define the required properties in that file.+++You can use only a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of the Quarkus extensions that are defined in the https://quarkus.io/guides/all-config[Quarkus documentation]. Also, note these differences for Quarkus properties: -If that's not possible, you can configure the server using raw Quarkus properties:+* A lock icon for a Quarkus property in the https://quarkus.io/guides/all-config[Quarkus documentation] indicates a build time property.  You include the `build` option to apply this property. For details about the build command, see the subsequent sections on optimizing Keycloak.+* No lock icon for a property in the Quarkus guide indicates a runtime property for Quarkus and Keycloak.  -* Create a `quarkus.properties` file in the `conf` directory and define any property you need.+. Use the `[-cf|--config-file]` command line parameter to include that file. -For a complete list of Quarkus properties, see the https://quarkus.io/guides/all-config[Quarkus documentation]. Be aware that Keycloak uses a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of quarkus extensions, so not all properties will be available.--When a quarkus property is a runtime property (no lock icon shown in the quarkus guide), it is also handled as runtime property for Keycloak. When a quarkus property is a build time property, you have to invoke a `build` for the property to be applied. See the sections below for further information around the build command.--Note that some quarkus properties are mapped by the Keycloak configuration, for example `quarkus.http.port` and similar properties that are needed to configure Keycloak. If the property is used by Keycloak, defining the same underlying property key in  `quarkus.properties` will have no effect, as the keycloak configuration value takes precedence over the quarkus property value.+Note that some Quarkus properties are already mapped in the Keycloak configuration, such as `quarkus.http.port` and similar essential properties. If the property is used by Keycloak, defining that property key in `quarkus.properties` has no effect. The Keycloak configuration value takes precedence over the Quarkus property value.  == Starting Keycloak-Keycloak can be started in two operating modes, `development mode` and `production mode`. Both modes offer a different set of defaults for the environment they are intended to be used.+You can start Keycloak in `development mode` or `production mode`. Each mode offers different defaults for the intended environment.  === Starting Keycloak in development mode-The development mode is targeted for people trying out Keycloak the first time and get it up and running quickly. It also offers convenient defaults for developers, for example to develop a new Keycloak theme.+Use development mode to try out Keycloak for the first time to get it up and running quickly. This mode offers convenient defaults for developers, such as for developing a new Keycloak theme. -The development mode is started by invoking the following command:+To start in development mode, enter the following command:  <@kc.startdev parameters=""""/>  .Defaults-The development mode sets the following default configuration:+Development mode sets the following default configuration:  * HTTP is enabled * Strict hostname resolution is disabled * Cache is set to local (No distributed cache mechanism used for high availability)-* Theme- and Template-caching is disabled+* Theme-caching and template-caching is disabled  === Starting Keycloak in production mode-The production mode is targeted for deployments of Keycloak into production environments and follows a ""secure by default"" principle.+Use production mode for deployments of Keycloak in production environments. This mode follows a _secure by default_ principle. -The production mode is started by invoking the following command:+To start in production mode, enter the following command:  <@kc.start parameters=""""/> -Without further configuration, this command will not start Keycloak and show you an error instead. This is done on purpose, because Keycloak follows a ""secure by default"" principle in this mode and expects to have a hostname setup and a HTTPS/TLS setup available when started in production mode.+Without further configuration, this command will not start Keycloak and show you an error instead. This response is done on purpose, because Keycloak follows a _secure by default_ principle. Production mode expects a hostname to be set up and an HTTPS/TLS setup to be available when started.  .Defaults-The production mode sets the following defaults:+Production mode sets the following defaults:  * HTTP is disabled as transport layer security (HTTPS) is essential * Hostname configuration is expected * HTTPS/TLS configuration is expected -Make sure to follow the steps outlined in <@links.server id=""configuration-production""/> before deploying Keycloak to production environments.+Before deploying Keycloak in a production environment, make sure to follow the steps outlined in <@links.server id=""configuration-production""/>. -By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These give you an idea about the main configuration to consider when running Keycloak in production.+By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These options give you an idea about the main configuration to consider when running Keycloak in production. -== Setup of the initial admin user-The initial admin user can be added manually using the web frontend. It needs to be accessed using a local connection (localhost) or using environment variables:+== Creating the initial admin user+You can create the initial admin user by using the web frontend, which you access using a local connection (localhost). You can instead create this user by using environment variables. Set `KEYCLOAK_ADMIN=_<username>_` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=_<password>_` for the initial admin password. -To add the initial admin user using environment variables, set `KEYCLOAK_ADMIN=<username>` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=<password>` for the initial admin password. Keycloak parses these values at first startup to create an initial user with administrative rights.-Once the first user with administrative rights exists, you can use the admin UI or the command line tool `kcadm.[sh|bat]` to create additional users.+Once the first user with administrative rights exists, you can use the Admin Console or the command line tool `kcadm.[sh|bat]` to create additional users.  If the initial administrator already exists and the environment variables are still present at startup, an error message stating the failed creation of the initial administrator is shown in the logs. Keycloak ignores the values and starts up correctly.  == Optimize the Keycloak startup-It is highly recommended to optimize Keycloak for better startup times and memory consumption before deploying into production environments. This section shows you how to apply a set of optimizations for Keycloak to get the best performance and runtime behavior possible.+We recommend optimizing Keycloak to provide faster startup and better memory consumption before deploying Keycloak in a production environment. This section describes how to apply Keycloak optimizations for the best performance and runtime behavior.++=== Creating an optimized Keycloak build+By default, when you use the `start` or `start-dev` command, Keycloak runs a `build` command under the covers for convenience reasons.   -=== Create an optimized Keycloak build-By default, when the `start` or `start-dev` commands are used, Keycloak runs a `build` command under the covers for convenience reasons.-This `build` command performs a set of optimizations to achieve an optimized startup- and runtime-behavior. The build process can take some time, usually a few seconds. Especially when running Keycloak in containerized environments like Kubernetes or OpenShift, startup time is important.-So in order to avoid the time that gets lost when running a `build` as part of Keycloaks first startup, it is possible and recommended to invoke a `build` explicitly before starting up, for example as a separate step in a CI/CD pipeline.+This `build` command performs a set of optimizations for the startup and runtime behavior. The build process can take a few seconds. Especially when running Keycloak in containerized environments such as Kubernetes or OpenShift, startup time is important. To avoid losing that time, enter a `build` immediately before starting up, such as a separate step in a CI/CD pipeline.  ==== First step: Run a build explicitly-To run a `build`, invoke the following command:+To run a `build`, enter the following command:  <@kc.build parameters=""<build-options>""/> -As you may notice, the command above shows `build options` that should be invoked. Keycloak distinguishes between **build options**, that are usable when invoking the `build` command, and **configuration options**, that are usable when starting up the server.+This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when entering the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect, but when a build is invoked beforehand, there's only a subset of Options available to the build command. The reason is, that build options get persisted into Keycloaks classpath, so configuration for e.g. credentials like `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you enter a build just before the startup,  only a subset of options are available to the build command. The restriction is due to the build options getting persisted into the Keycloak classpath. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.  Build options are marked in <@links.server id=""all-config""/> with a tool icon.-Find available build options either by looking at the https://www.keycloak.org/server/all-config?f=build[All configuration page with build options selected] or by invoking the following command:+To find available build options, see https://www.keycloak.org/server/all-config?f=build[All configuration page with build options selected] or enter the following command:  <@kc.build parameters=""--help""/> -.Example: Run the `build` command to set the database to PostgreSQL before startup:+.Example: Run a `build` to set the database to PostgreSQL before startup <@kc.build parameters=""--db=postgres""/>  ==== Second step: Start Keycloak using `--optimized`-After a successful build, you can start Keycloak and turn off the default startup behavior by invoking the following command:+After a successful build, you can start Keycloak and turn off the default startup behavior by entering the following command:  <@kc.start parameters=""--optimized <configuration-options>""/> -The `--optimized` parameter tells Keycloak to assume a pre-built, already optimized Keycloak image is used. As a result, Keycloak avoids checking for and running a build directly at startup to save the time to walk through this process.+The `--optimized` parameter tells Keycloak to assume a pre-built, already optimized Keycloak image is used. As a result, Keycloak avoids checking for and running a build directly at startup, which saves time. -You can invoke all configuration options at startup; these options are the ones in <@links.server id=""all-config""/> that are **not** marked with a tool icon.+You can enter all configuration options at startup; these options are the ones in <@links.server id=""all-config""/> that are **not** marked with a tool icon. -If a build option is found at startup with an equal value to the value used when invoking the `build`, it gets silently ignored when using the `--optimized` flag. If it has a different value than the value used when a build was invoked, a warning is shown in the logs and the previously built value is used. In order for this value to take effect, you have to run a new `build` before starting.+* If a build option is found at startup with a value that is equal to the value used when entering the `build`, that option gets silently ignored when you use the `--optimized` parameter.+* If that option has a different value than the value used when a build was entered, a warning is entered in the logs and the previously built value is used. For this value to take effect, enter a new `build` before starting. -The following example shows how to create an optimized build, then start Keycloak using the --optimized parameter:+The following example shows the creation an optimized build and followed by the use of the `--optimized` parameter when starting Keycloak.  .Create an optimized build","Those are actually ordered steps, so I'd suggest to use an ordered list with all the items that have a title here.",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/11080,1130778889,2023-03-09T10:24:24Z,services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java,"@@ -343,10 +343,16 @@ private JaxrsSAML2BindingBuilder buildLogoutBinding(KeycloakSession session, Use     public Response export(UriInfo uriInfo, RealmModel realm, String format) {         try         {-            URI authnBinding = JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.getUri();+            URI authnResponseBinding = JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.getUri(); -            if (getConfig().isPostBindingAuthnRequest()) {-                authnBinding = JBossSAMLURIConstants.SAML_HTTP_POST_BINDING.getUri();+            if (getConfig().isPostBindingResponse()) {",I think we should maintain using `isPostBindingAuthnRequest` here. In theory both values should be the same but the one that really is forcing to use the post binding is the `isPostBindingAuthnRequest` (see [here](https://github.com/keycloak/keycloak/blob/21.0.1/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java#L170) and then [here](https://github.com/keycloak/keycloak/blob/21.0.1/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java#L196-L200)). The ` isPostBindingResponse` is only used to set the attribute in the request ([here](https://github.com/keycloak/keycloak/blob/21.0.1/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java#L135-L137)).Modify the tests accordingly please.,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/17445,1131271276,2023-03-09T16:17:47Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/spec/HostnameSpec.java,"@@ -40,6 +40,9 @@ public class HostnameSpec implements Serializable {     @JsonPropertyDescription(""By default backchannel URLs are dynamically resolved from request headers to allow internal and external applications."")     private Boolean strictBackchannel; +    @JsonPropertyDescription(""Enable/Disable the endpoint and page to help debugging Hostname issues."")+    private Boolean debugEnabled;","Since this is just a debug option, I'd suggest to not make it a first-class citizen field, i.e. I would not add a field for this to the Keycloak CRD.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/17445,1131297116,2023-03-09T16:35:52Z,docs/guides/server/hostname.adoc,"@@ -122,4 +122,18 @@ In this example, the server is accessible using a port other than the default po .Keycloak configuration: <@kc.start parameters=""--hostname-url=https://mykeycloak:8989""/> +=== Enabling the Hostname Debug Settings endpoint++In order to help checking the Hostname settings, enable the useful endpoint to show the Hostname settings applied, like this:++.Keycloak configuration:+<@kc.start parameters=""--hostname=mykeycloak --hostname-debug=true""/>++Then after Keycloak started properly, open your browser and go to:++`http://mykeycloak:8080/realms/master/debug-hostname-settings`++.By default, this endpoint is disabled (`--hostname-debug=false`)","```suggestion== TroubleshootingTo troubleshoot the hostname configuration, you can use a dedicated debug tool which can be enabled as:.Keycloak configuration:<@kc.start parameters=""--hostname=mykeycloak --hostname-debug=true""/>Then after Keycloak started properly, open your browser and go to:`http://mykeycloak:8080/realms/<your-realm>/hostname-debug`.By default, this endpoint is disabled (`--hostname-debug=false`)```",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1132226745,2023-03-10T10:51:36Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/util/SessionTimeouts.java,"@@ -103,25 +103,26 @@ public static long getUserSessionMaxIdleMs(RealmModel realm, UserSessionEntity u      * @return      */     public static long getClientSessionLifespanMs(RealmModel realm, AuthenticatedClientSessionEntity clientSessionEntity) {",Yeah! I also thought about getting the user session somehow. But I detected a big change (probably we would need the user session id in the authentication session) and I decided to follow contributors idea which seems to be easier.,
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1132238950,2023-03-10T11:04:50Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/util/SessionTimeouts.java,"@@ -103,25 +103,26 @@ public static long getUserSessionMaxIdleMs(RealmModel realm, UserSessionEntity u      * @return      */     public static long getClientSessionLifespanMs(RealmModel realm, AuthenticatedClientSessionEntity clientSessionEntity) {-        int timeSinceTimestampUpdate = Time.currentTime() - clientSessionEntity.getTimestamp();--        int sessionMaxLifespan = Math.max(realm.getSsoSessionMaxLifespan(), realm.getSsoSessionMaxLifespanRememberMe());--        // clientSession max lifespan has preference if set+        // calculate expiration of user session+        int currentTime = Time.currentTime();+        int timeSinceUserSessionStart = currentTime - clientSessionEntity.getUserSessionStarted();+        int userSessionMaxLifespan = Math.max(Math.max(realm.getSsoSessionMaxLifespan(), realm.getSsoSessionMaxLifespanRememberMe()), MINIMAL_EXPIRATION_SEC);+        int userTimeToExpire = userSessionMaxLifespan - timeSinceUserSessionStart;++        // clientSession max lifespan has preference but cannot be longer than the user session+        int clientTimeToExpire = userTimeToExpire;","Just a little comment here to understand better the new calculation. It fixes two different issues:* The max life was using the timestamp and not the STARTED_AT of the client session, which is directly wrong. We were calculating wrong max life (it was more an idle timeout than a max life).* Besides there is a second issue (non functional, just a memory issue) that client sessions can remain in memory more than the the user session. That's a waste of memory. Imagine a client session which is created just few seconds before than the user session expires, the user session will be removed but the client one (useless) remains in memory all the max-life of the client session. For this second problem the USER_SESSION_STARTED_AT_NOTE is needed.Regards!",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1133569934,2023-03-13T08:17:24Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java,"@@ -1044,37 +1049,195 @@ public void testUserSessionRefreshAndIdleRememberMe() throws Exception {         }     } +    private String getClientSessionUuid(final String userSessionId, String clientId) {+        return testingClient.server().fetch(session -> {+            RealmModel realmModel = session.realms().getRealm(""test"");+            ClientModel clientModel = realmModel.getClientByClientId(clientId);+            UserSessionModel userSession = session.sessions().getUserSession(realmModel, userSessionId);+            AuthenticatedClientSessionModel clientSession = userSession.getAuthenticatedClientSessionByClient(clientModel.getId());+            return clientSession.getId();+        }, String.class);+    }+     @Test     public void refreshTokenUserSessionMaxLifespan() throws Exception {-        oauth.doLogin(""test-user@localhost"", ""password"");+        RealmResource realmResource = adminClient.realm(""test"");+        Integer maxLifespan = realmResource.toRepresentation().getSsoSessionMaxLifespan();+        Integer idleTimeout = realmResource.toRepresentation().getSsoSessionIdleTimeout();+        getTestingClient().testing().setTestingInfinispanTimeService();+        try {+            RealmManager.realm(realmResource).ssoSessionMaxLifespan(3600);+            RealmManager.realm(realmResource).ssoSessionIdleTimeout(7200); -        EventRepresentation loginEvent = events.expectLogin().assertEvent();+            oauth.doLogin(""test-user@localhost"", ""password"");+            EventRepresentation loginEvent = events.expectLogin().assertEvent(); -        String sessionId = loginEvent.getSessionId();+            String sessionId = loginEvent.getSessionId(); -        String code = oauth.getCurrentQuery().get(OAuth2Constants.CODE);-        OAuthClient.AccessTokenResponse tokenResponse = oauth.doAccessTokenRequest(code, ""password"");+            String code = oauth.getCurrentQuery().get(OAuth2Constants.CODE);+            OAuthClient.AccessTokenResponse tokenResponse = oauth.doAccessTokenRequest(code, ""password"");+            assertTrue(""Invalid ExpiresIn"", 0 < tokenResponse.getRefreshExpiresIn() && tokenResponse.getRefreshExpiresIn() <= 3600);+            final String clientSessionId = getClientSessionUuid(sessionId, loginEvent.getClientId());+            assertTrue(""User session expired"", testingClient.testing().cache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME).contains(sessionId));+            assertTrue(""Client session expired"", testingClient.testing().cache(InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME).containsUuid(clientSessionId)); -        events.poll();+            events.poll(); -        String refreshId = oauth.parseRefreshToken(tokenResponse.getRefreshToken()).getId();+            setTimeOffset(1800); +            String refreshId = oauth.parseRefreshToken(tokenResponse.getRefreshToken()).getId();+            tokenResponse = oauth.doRefreshTokenRequest(tokenResponse.getRefreshToken(), ""password"");+            assertTrue(""Invalid ExpiresIn"", 0 < tokenResponse.getRefreshExpiresIn() && tokenResponse.getRefreshExpiresIn() <= 1800);+            assertTrue(""User session expired"", testingClient.testing().cache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME).contains(sessionId));+            assertTrue(""Client session expired"", testingClient.testing().cache(InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME).containsUuid(clientSessionId));+            events.expectRefresh(refreshId, sessionId).assertEvent();++            setTimeOffset(3700);+            refreshId = oauth.parseRefreshToken(tokenResponse.getRefreshToken()).getId();+            tokenResponse = oauth.doRefreshTokenRequest(tokenResponse.getRefreshToken(), ""password"");++            assertEquals(400, tokenResponse.getStatusCode());+            assertNull(tokenResponse.getAccessToken());+            assertNull(tokenResponse.getRefreshToken());+            events.expect(EventType.REFRESH_TOKEN).error(Errors.INVALID_TOKEN).user((String) null).assertEvent();+            assertFalse(""User session not expired"", testingClient.testing().cache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME).contains(sessionId));+            assertFalse(""Client session not expired"", testingClient.testing().cache(InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME).containsUuid(clientSessionId));+        } finally {+            getTestingClient().testing().revertTestingInfinispanTimeService();+            RealmManager.realm(realmResource).ssoSessionMaxLifespan(maxLifespan);+            RealmManager.realm(realmResource).ssoSessionIdleTimeout(idleTimeout);+            events.clear();+            resetTimeOffset();+        }+    }++    @Test+    public void refreshTokenUserClientMaxLifespanSmallerThanSession() throws Exception {         RealmResource realmResource = adminClient.realm(""test"");         Integer maxLifespan = realmResource.toRepresentation().getSsoSessionMaxLifespan();+        Integer idleTimeout = realmResource.toRepresentation().getSsoSessionIdleTimeout();+        Integer clientMaxLifespan = realmResource.toRepresentation().getClientSessionMaxLifespan();+        Integer clientIdleTimeout = realmResource.toRepresentation().getClientSessionIdleTimeout();+        getTestingClient().testing().setTestingInfinispanTimeService();         try {-            RealmManager.realm(realmResource).ssoSessionMaxLifespan(1);+            RealmManager.realm(realmResource).ssoSessionMaxLifespan(3600);+            RealmManager.realm(realmResource).ssoSessionIdleTimeout(7200);+            RealmManager.realm(realmResource).clientSessionMaxLifespan(1000);+            RealmManager.realm(realmResource).clientSessionIdleTimeout(7200); -            setTimeOffset(2);+            oauth.doLogin(""test-user@localhost"", ""password"");+            EventRepresentation loginEvent = events.expectLogin().assertEvent();++            String sessionId = loginEvent.getSessionId(); +            String code = oauth.getCurrentQuery().get(OAuth2Constants.CODE);+            OAuthClient.AccessTokenResponse tokenResponse = oauth.doAccessTokenRequest(code, ""password"");+            assertTrue(""Invalid ExpiresIn"", 0 < tokenResponse.getRefreshExpiresIn() && tokenResponse.getRefreshExpiresIn() <= 1000);+            String clientSessionId = getClientSessionUuid(sessionId, loginEvent.getClientId());+            assertTrue(""User session expired"", testingClient.testing().cache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME).contains(sessionId));+            assertTrue(""Client session expired"", testingClient.testing().cache(InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME).containsUuid(clientSessionId));++            events.poll();++            setTimeOffset(600);+            String refreshId = oauth.parseRefreshToken(tokenResponse.getRefreshToken()).getId();             tokenResponse = oauth.doRefreshTokenRequest(tokenResponse.getRefreshToken(), ""password"");+            assertTrue(""Invalid ExpiresIn"", 0 < tokenResponse.getRefreshExpiresIn() && tokenResponse.getRefreshExpiresIn() <= 400);+            assertTrue(""User session expired"", testingClient.testing().cache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME).contains(sessionId));+            assertTrue(""Client session expired"", testingClient.testing().cache(InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME).containsUuid(clientSessionId));+            events.expectRefresh(refreshId, sessionId).assertEvent(); +            setTimeOffset(1100);+            tokenResponse = oauth.doRefreshTokenRequest(tokenResponse.getRefreshToken(), ""password"");             assertEquals(400, tokenResponse.getStatusCode());             assertNull(tokenResponse.getAccessToken());             assertNull(tokenResponse.getRefreshToken());+            events.expect(EventType.REFRESH_TOKEN).error(Errors.INVALID_TOKEN).user((String) null).assertEvent();+            assertTrue(""User session expired"", testingClient.testing().cache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME).contains(sessionId));+            assertFalse(""Client session not expired"", testingClient.testing().cache(InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME).containsUuid(clientSessionId)); -            events.expectRefresh(refreshId, sessionId).error(Errors.INVALID_TOKEN);+            setTimeOffset(1600);+            oauth.doSilentLogin();+            loginEvent = events.expectLogin().assertEvent();+            sessionId = loginEvent.getSessionId();+            code = oauth.getCurrentQuery().get(OAuth2Constants.CODE);+            tokenResponse = oauth.doAccessTokenRequest(code, ""password"");+            assertTrue(""Invalid ExpiresIn"", 0 < tokenResponse.getRefreshExpiresIn() && tokenResponse.getRefreshExpiresIn() <= 1000);+            events.expectCodeToToken(loginEvent.getDetails().get(Details.CODE_ID), sessionId).assertEvent();++            clientSessionId = getClientSessionUuid(sessionId, loginEvent.getClientId());+            assertTrue(""User session expired"", testingClient.testing().cache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME).contains(sessionId));+            assertTrue(""Client session expired"", testingClient.testing().cache(InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME).containsUuid(clientSessionId));++            setTimeOffset(3700);+            tokenResponse = oauth.doRefreshTokenRequest(tokenResponse.getRefreshToken(), ""password"");+            assertEquals(400, tokenResponse.getStatusCode());+            assertNull(tokenResponse.getAccessToken());+            assertNull(tokenResponse.getRefreshToken());+            events.expect(EventType.REFRESH_TOKEN).error(Errors.INVALID_TOKEN).user((String) null).assertEvent();+            assertFalse(""User session not expired"", testingClient.testing().cache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME).contains(sessionId));+            assertFalse(""Client session not expired"", testingClient.testing().cache(InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME).containsUuid(clientSessionId));         } finally {+            getTestingClient().testing().revertTestingInfinispanTimeService();             RealmManager.realm(realmResource).ssoSessionMaxLifespan(maxLifespan);+            RealmManager.realm(realmResource).ssoSessionIdleTimeout(idleTimeout);+            RealmManager.realm(realmResource).clientSessionMaxLifespan(clientMaxLifespan);+            RealmManager.realm(realmResource).clientSessionIdleTimeout(clientIdleTimeout);+            events.clear();+            resetTimeOffset();+        }+    }++    @Test+    public void refreshTokenUserClientMaxLifespanGreaterThanSession() throws Exception {+        RealmResource realmResource = adminClient.realm(""test"");+        Integer maxLifespan = realmResource.toRepresentation().getSsoSessionMaxLifespan();+        Integer idleTimeout = realmResource.toRepresentation().getSsoSessionIdleTimeout();+        Integer clientMaxLifespan = realmResource.toRepresentation().getClientSessionMaxLifespan();+        Integer clientIdleTimeout = realmResource.toRepresentation().getClientSessionIdleTimeout();+        getTestingClient().testing().setTestingInfinispanTimeService();+        try {+            RealmManager.realm(realmResource).ssoSessionMaxLifespan(3600);+            RealmManager.realm(realmResource).ssoSessionIdleTimeout(7200);+            RealmManager.realm(realmResource).clientSessionMaxLifespan(5000);+            RealmManager.realm(realmResource).clientSessionIdleTimeout(7200);","This effectively means four very slow calls to update realm parameters upon setting and another four upon resetting in the `finally` block. Please consider replacling all these calls in all methods affected in this PR with `RealmAttributeUpdater`, and removing the changes in `RealmManager`.For an example usage, see https://github.com/keycloak/keycloak/blob/f5ebe675a845f26d338d7ccc64d8781fb6445597/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/LoginTest.java#L808-L812",x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1133570914,2023-03-13T08:18:28Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticatedClientSessionEntity.java,"@@ -83,6 +86,17 @@ public void setTimestamp(int timestamp) {         this.timestamp = timestamp;     } +    public int getUserSessionStarted() {+        String started = getNotes().get(USER_SESSION_STARTED_AT_NOTE);+        // Fallback to timestamp if ""started"" note is not available.+        return started == null ? timestamp : Integer.parseInt(started);+    }++    public int getStarted() {+        String started = getNotes().get(AuthenticatedClientSessionModel.STARTED_AT_NOTE);+        return started == null ? timestamp : Integer.parseInt(started);+    }+",These methods belong to either `AuthenticatedClientSessionModel` (not `AuthenticatedClientSessionEntity`) or into an utility method.,x
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/17445,1133673162,2023-03-13T09:48:09Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/services/resources/DebugHostnameSettingsResource.java,"@@ -0,0 +1,144 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.quarkus.runtime.services.resources;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.quarkus.runtime.Environment;+import org.keycloak.quarkus.runtime.configuration.Configuration;+import org.keycloak.services.Urls;+import org.keycloak.services.resources.Cors;+import org.keycloak.theme.FreeMarkerException;+import org.keycloak.theme.Theme;+import org.keycloak.theme.freemarker.FreeMarkerProvider;+import org.keycloak.urls.UrlType;++import javax.ws.rs.GET;+import javax.ws.rs.Path;+import javax.ws.rs.PathParam;+import javax.ws.rs.Produces;+import javax.ws.rs.core.Context;+import javax.ws.rs.core.HttpHeaders;+import javax.ws.rs.core.MediaType;+import javax.ws.rs.core.Response;+import java.io.IOException;+import java.net.URI;+import java.util.HashMap;+import java.util.LinkedHashMap;+import java.util.Map;+import java.util.TreeMap;++@Path(""/realms"")+public class DebugHostnameSettingsResource {","@vmuzikar ,In my first attempt, I tried to put this class exactly where you are mentioning now. But due to the dependencies below, the solution I've found was to create the Resource under the Quarkus module.```javaimport org.keycloak.quarkus.runtime.Environment;import org.keycloak.quarkus.runtime.configuration.Configuration;````Could you see another way to supply such needed dependencies from ""keycloak-services"" module, without touching the ""pom.xml""?Thanks.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/17445,1133818248,2023-03-13T11:55:56Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/services/resources/DebugHostnameSettingsResource.java,"@@ -0,0 +1,144 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.quarkus.runtime.services.resources;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.quarkus.runtime.Environment;+import org.keycloak.quarkus.runtime.configuration.Configuration;+import org.keycloak.services.Urls;+import org.keycloak.services.resources.Cors;+import org.keycloak.theme.FreeMarkerException;+import org.keycloak.theme.Theme;+import org.keycloak.theme.freemarker.FreeMarkerProvider;+import org.keycloak.urls.UrlType;++import javax.ws.rs.GET;+import javax.ws.rs.Path;+import javax.ws.rs.PathParam;+import javax.ws.rs.Produces;+import javax.ws.rs.core.Context;+import javax.ws.rs.core.HttpHeaders;+import javax.ws.rs.core.MediaType;+import javax.ws.rs.core.Response;+import java.io.IOException;+import java.net.URI;+import java.util.HashMap;+import java.util.LinkedHashMap;+import java.util.Map;+import java.util.TreeMap;++@Path(""/realms"")+public class DebugHostnameSettingsResource {","That's a good point. We certainly don't want to add Quarkus dependency to keycloak-services as it should be framework/app server agnostic. While the debug tool is focusing on the Hostname SPI (which is not specific to Quarkus), the config options that we are printing there are Quarkus specific.So I believe this approach might be correct in the end.@pedroigor WDYT?",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/17504,1134018116,2023-03-13T14:14:18Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java,"@@ -302,8 +302,11 @@ protected void finished(Description description) {      * local to the thread that calls this method, allowing for per-thread customization. This in turn allows      * testing of several parallel session factories which can be used to simulate several servers      * running in parallel.+     * <p>+     * The method itself is synchronized as <code>CONFIG</code> and <code>MODEL_PARAMETERS</code> are shared resources+     * used during the initialization of the factories.      */-    public static KeycloakSessionFactory createKeycloakSessionFactory() {+    public static synchronized KeycloakSessionFactory createKeycloakSessionFactory() {","Does this effectively mean that `inIndependentFactories()` will now spawn new nodes sequentially? And if so, do we want it?  ",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/17490,1134128574,2023-03-13T15:06:43Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/UserSessionAdapter.java,"@@ -91,7 +91,7 @@ public Map<String, AuthenticatedClientSessionModel> getAuthenticatedClientSessio                 // Check if client still exists                 ClientModel client = realm.getClientById(key);                 if (client != null) {-                    final AuthenticatedClientSessionAdapter clientSession = provider.getClientSession(this, client, value, offline);+                    final AuthenticatedClientSessionModel clientSession = provider.getClientSession(this, client, value, offline);","Because previously this called directly method `public AuthenticatedClientSessionAdapter getClientSession(UserSessionModel userSession, ClientModel client, UUID clientSessionId, boolean offline)` in `InfinispanUserSessionProvider` while now it calls `default AuthenticatedClientSessionModel getClientSession(UserSessionModel userSession, ClientModel client, UUID clientSessionId, boolean offline)` in `UserSessionProvider`. Btw, newly called method is deprecated so maybe I should call rather `getClientSession(UserSessionModel userSession, ClientModel client, String clientSessionId, boolean offline);` ?",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1134245161,2023-03-13T16:15:49Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticatedClientSessionEntity.java,"@@ -83,6 +86,17 @@ public void setTimestamp(int timestamp) {         this.timestamp = timestamp;     } +    public int getUserSessionStarted() {+        String started = getNotes().get(USER_SESSION_STARTED_AT_NOTE);+        // Fallback to timestamp if ""started"" note is not available.+        return started == null ? timestamp : Integer.parseInt(started);+    }++    public int getStarted() {+        String started = getNotes().get(AuthenticatedClientSessionModel.STARTED_AT_NOTE);+        return started == null ? timestamp : Integer.parseInt(started);+    }+",I need to maintain both in the infinispan project. This class is not related at all to `AuthenticatedClientSessionModel` so I cannot reuse the methods from there. So creating them here is more or less the same than creating a utility class in the infinispan section.Let me know if you have a better idea.,
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1134260251,2023-03-13T16:25:21Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/util/SessionTimeouts.java,"@@ -103,25 +103,26 @@ public static long getUserSessionMaxIdleMs(RealmModel realm, UserSessionEntity u      * @return      */     public static long getClientSessionLifespanMs(RealmModel realm, AuthenticatedClientSessionEntity clientSessionEntity) {",@pjbober If we also want to include the remember me then maybe it's better to directly store the user session id. I think it will need a big refactoring but it probably makes sense. @mposolda WDYT? (I suppose this will only be for the infinispan implementation.),
6528869,vilmosnagy,https://api.github.com/repos/keycloak/keycloak/pulls/16499,1134442988,2023-03-13T18:17:54Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java,"@@ -635,7 +640,15 @@ public Response resourceOwnerPasswordCredentialsGrant() {                 .setSession(session)                 .setUriInfo(session.getContext().getUri())                 .setRequest(request);-        Response challenge = processor.authenticateOnly();+        Response challenge;+        try{+            challenge = processor.authenticateOnly();+        }catch (AuthenticationFlowException exception){",Should we reformat this:```suggestion        try {            challenge = processor.authenticateOnly();        } catch (AuthenticationFlowException exception){```The keycloak codebase uses space after the `try` and before the `catch` words at other places.,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16635,1135112427,2023-03-14T07:43:18Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -217,6 +221,9 @@ public class JpaMapStorageProviderFactory implements         //user/client session         .constructor(JpaClientSessionEntity.class,              JpaClientSessionEntity::new)         .constructor(JpaUserSessionEntity.class,                JpaUserSessionEntity::new)+        //lock+        .constructor(JpaLockEntity.class,                       JpaLockEntity::new)+        .constructor(MapLockEntity.class,                       JpaLockEntity::new)","I believe @hmlnarik's point is still valid. Adding```java.constructor(JpaLockEntity.class,                       JpaLockEntity::new)```should be sufficient and ```java.constructor(MapLockEntity.class, JpaLockEntity::new)```seems redundant.",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16635,1135113237,2023-03-14T07:44:18Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/JpaMapStorageProviderFactory.java,"@@ -81,6 +81,8 @@ import org.keycloak.models.map.client.MapProtocolMapperEntity; import org.keycloak.models.map.client.MapProtocolMapperEntityImpl; import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.lock.MapLockEntity;+import org.keycloak.models.map.lock.MapLockEntityImpl;",nitpick: unused import,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/16635,1135764673,2023-03-14T15:43:16Z,model/map/src/main/java/org/keycloak/models/map/lock/MapLockEntity.java,"@@ -0,0 +1,78 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.lock;++import org.keycloak.models.map.annotations.GenerateEntityImplementations;+import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.storage.SearchableModelField;++import java.util.Objects;++/**+ * Entity to hold locks needed for the {@link MapGlobalLockProvider}.+ *+ * @author Alexander Schwartz+ */+@GenerateEntityImplementations(+        inherits = ""org.keycloak.models.map.lock.MapLockEntity.AbstractLockEntity""+)+@DeepCloner.Root+public interface MapLockEntity extends UpdatableEntity, AbstractEntity {++    public static class SearchableFields {+        public static final SearchableModelField<MapLockEntity> ID = new SearchableModelField<>(""id"", String.class);+        public static final SearchableModelField<MapLockEntity> NAME = new SearchableModelField<>(""name"", String.class);+    }++    public abstract class AbstractLockEntity extends Impl implements MapLockEntity {++        private String id;++        @Override+        public String getId() {+            return this.id;+        }++        @Override+        public void setId(String id) {+            if (this.id != null) throw new IllegalStateException(""Id cannot be changed"");+            this.id = id;+            this.updated |= id != null;+        }++    }++    String getName();","The name is the name of the lock, which is defined by the caller. It can't be passed down as the ID to the store implementation, as the `MapKeycloakTransaction#create()` is documented as follows: >  The ID of the entity passed in the parameter might change to a different value in the returned value if the underlying storage decided this was necessary.As the name of the lock must be stored as-is in the store to effectively create a lock, the separate name field is required.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/17609,1136114839,2023-03-14T19:54:01Z,saml-core/src/main/java/org/keycloak/saml/processing/core/util/XMLSignatureUtil.java,"@@ -494,20 +490,16 @@ public static boolean validateSingleNode(Node signatureNode, final KeyLocator lo          logger.trace(""Could not validate signature using ds:KeyInfo/ds:KeyName hint.""); -        if (locator instanceof Iterable) {-            Iterable<Key> availableKeys = (Iterable<Key>) locator;+        logger.trace(""Trying hard to validate XML signature using all available keys.""); -            logger.trace(""Trying hard to validate XML signature using all available keys."");--            for (Key key : availableKeys) {-                try {-                    if (validateUsingKeySelector(signatureNode, new KeySelectorPresetKey(key))) {-                        return true;-                    }-                } catch (XMLSignatureException ex) { // pass through MarshalException-                    logger.debug(""Verification failed: "" + ex);-                    logger.trace(ex);+        for (Key key : locator) {+            try {+                if (validateUsingKeySelector(signatureNode, new KeySelectorPresetKey(key))) {",Not a blocker but do we need `KeySelectorPresetKey` or we can just use `javax.xml.crypto.KeySelector#singletonKeySelector`?,
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17609,1136646860,2023-03-15T07:46:43Z,saml-core/src/main/java/org/keycloak/saml/processing/core/util/XMLSignatureUtil.java,"@@ -494,20 +490,16 @@ public static boolean validateSingleNode(Node signatureNode, final KeyLocator lo          logger.trace(""Could not validate signature using ds:KeyInfo/ds:KeyName hint.""); -        if (locator instanceof Iterable) {-            Iterable<Key> availableKeys = (Iterable<Key>) locator;+        logger.trace(""Trying hard to validate XML signature using all available keys.""); -            logger.trace(""Trying hard to validate XML signature using all available keys."");--            for (Key key : availableKeys) {-                try {-                    if (validateUsingKeySelector(signatureNode, new KeySelectorPresetKey(key))) {-                        return true;-                    }-                } catch (XMLSignatureException ex) { // pass through MarshalException-                    logger.debug(""Verification failed: "" + ex);-                    logger.trace(ex);+        for (Key key : locator) {+            try {+                if (validateUsingKeySelector(signatureNode, new KeySelectorPresetKey(key))) {","No, not needed I think, I just used the same code that was before. The `KeySelectorPresetKey` is the same than the `KeySelector.singletonKeySelector`. Let me replace it.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16635,1136985010,2023-03-15T12:32:34Z,model/map/src/main/java/org/keycloak/models/map/lock/MapGlobalLockProvider.java,"@@ -0,0 +1,204 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.lock;++import org.jboss.logging.Logger;+import org.keycloak.common.util.Time;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.KeycloakSessionTaskWithResult;+import org.keycloak.models.locking.GlobalLockProvider;+import org.keycloak.models.locking.LockAcquiringTimeoutException;+import org.keycloak.models.map.common.DeepCloner;+import org.keycloak.models.map.storage.MapKeycloakTransaction;+import org.keycloak.models.map.storage.MapStorage;+import org.keycloak.models.map.storage.ModelCriteriaBuilder;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.criteria.DefaultModelCriteria;+import org.keycloak.models.utils.KeycloakModelUtils;++import java.net.InetAddress;+import java.net.UnknownHostException;+import java.time.Duration;+import java.time.Instant;+import java.util.Optional;+import java.util.function.Supplier;++import static org.keycloak.models.map.storage.criteria.DefaultModelCriteria.criteria;+++/**+ * Implementing a {@link GlobalLockProvider} based on a map storage.+ * This requires the map store to support the entity type {@link MapLockEntity}. One of the stores which supports+ * this is the JPA Map Store. The store needs to support the uniqueness of entries in the lock area, see+ * {@link #lock(String)} for details.+ *+ * @author Alexander Schwartz+ */+public class MapGlobalLockProvider implements GlobalLockProvider {++    private static final Logger LOG = Logger.getLogger(MapGlobalLockProvider.class);++    private final KeycloakSession session;+    private final long defaultTimeoutMilliseconds;+    private MapKeycloakTransaction<MapLockEntity, MapLockEntity> tx;++    /**+     * The lockStoreSupplier allows the store to be initialized lazily and only when needed: As this provider is initialized+     * for both the outer and the inner transactions, and the store is needed only for the inner transactions.+     */+    private final Supplier<MapStorage<MapLockEntity, MapLockEntity>> lockStoreSupplier;++    public MapGlobalLockProvider(KeycloakSession session, long defaultTimeoutMilliseconds, Supplier<MapStorage<MapLockEntity, MapLockEntity>> lockStoreSupplier) {+        this.defaultTimeoutMilliseconds = defaultTimeoutMilliseconds;+        this.session = session;+        this.lockStoreSupplier = lockStoreSupplier;+    }++    @Override+    public <V> V withLock(String lockName, Duration timeToWaitForLock, KeycloakSessionTaskWithResult<V> task) throws LockAcquiringTimeoutException {+        MapLockEntity lockEntity = null;+        try {+            if (timeToWaitForLock == null) {+                // Set default timeout if null provided+                timeToWaitForLock = Duration.ofMillis(defaultTimeoutMilliseconds);+            }+            long started = System.currentTimeMillis();+            String keycloakInstanceIdentifier = null;+            Instant timeWhenAcquired = null;+            while (true) {",Should we use `Retry.executeWithBackoff`? Similarly as [here](https://github.com/keycloak/keycloak/blob/main/model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/locking/HotRodLocksUtils.java#L69)?,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16635,1137010206,2023-03-15T12:50:48Z,model/map-jpa/src/main/java/org/keycloak/models/map/storage/jpa/lock/JpaLockModelCriteriaBuilder.java,"@@ -0,0 +1,71 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ * + * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ * + * http://www.apache.org/licenses/LICENSE-2.0+ * + * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.map.storage.jpa.lock;++import org.keycloak.models.map.common.StringKeyConverter.UUIDKey;+import org.keycloak.models.map.lock.MapLockEntity;+import org.keycloak.models.map.storage.CriterionNotSupportedException;+import org.keycloak.models.map.storage.jpa.JpaModelCriteriaBuilder;+import org.keycloak.models.map.storage.jpa.JpaPredicateFunction;+import org.keycloak.models.map.storage.jpa.authorization.resource.entity.JpaResourceEntity;+import org.keycloak.storage.SearchableModelField;++import java.util.Objects;+import java.util.UUID;++import static org.keycloak.models.map.lock.MapLockEntity.SearchableFields;++public class JpaLockModelCriteriaBuilder extends JpaModelCriteriaBuilder<JpaResourceEntity, MapLockEntity, JpaLockModelCriteriaBuilder> {++    public JpaLockModelCriteriaBuilder() {+        super(JpaLockModelCriteriaBuilder::new);+    }++    private JpaLockModelCriteriaBuilder(JpaPredicateFunction<JpaResourceEntity> predicateFunc) {+        super(JpaLockModelCriteriaBuilder::new, predicateFunc);+    }++    @Override+    public JpaLockModelCriteriaBuilder compare(SearchableModelField<? super MapLockEntity> modelField, Operator op, Object... value) {+        switch (op) {+            case EQ:+                if (modelField == SearchableFields.ID) {","It is ok if this stays as is, but out of curiosity:If I understood correctly, in JPA criteria we want to cover only fields+operators that are currently used in the codebase. Should we rather throw an exception if the ID searchable field is used?  ",
1251974,miquelsi,https://api.github.com/repos/keycloak/keycloak/pulls/17651,1138326809,2023-03-16T09:03:52Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/util/AccountHelper.java,"@@ -32,7 +34,7 @@ public static boolean updatePassword(RealmResource realm, String username, Strin         }          UserRepresentation userRepresentation = userResult.get();","All these lines above are no longer necessary, they are executed in `getUserId` method.",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/19059,1138457978,2023-03-16T10:47:05Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java,"@@ -361,36 +362,42 @@ public static CommandLine createCommandLine(List<String> cliArgs) {         return cmd;     } -    private static void addCommandOptions(List<String> cliArgs, CommandSpec command) {+    private static void addCommandOptions(List<String> cliArgs, CommandLine command) {         if (command != null) {             boolean includeBuildTime = false;             boolean includeRuntime = false; -            if (Start.NAME.equals(command.name()) || StartDev.NAME.equals(command.name()) || Export.NAME.equals(command.name())) {+            if (command.getCommand() instanceof AbstractCommand) {+                AbstractCommand abstractStartCommand = command.getCommand();+                includeRuntime = abstractStartCommand.includeRuntime();+                includeBuildTime = abstractStartCommand.includeBuildTime();+            }++            if (!includeBuildTime && !includeRuntime) {+                return;+            } else if (includeRuntime && !includeBuildTime && (Start.NAME.equals(command.getCommandName())) || StartDev.NAME.equals(command.getCommandName())) {","Thinking about this statement. We'll in the near future also provide the possibility to have Export with an optimized flag and probably even more commands in the future with that; this will be kinda messy. I was thinking something like this[1]. It's just a quick prototype, but it probably would be good to consider. For all 'Dependent' options, we just check the default action, and that's mainly related to the `--optimized` flag. But in the future, we could provide method sth like `evaluateDependentOptions(List<String> cliArgs){...}`, where we could specify when the dependent option should include also `build` process. However, it'd need to be properly documented and as these flags are used only on one place ATM, I don't see the high need to provide the additional logic. We can discuss this in the future; kinda out of scope of this PR.[1] https://github.com/mabartos/keycloak/commit/31ae219a33ce109142f46a655acccbd6a6ce40d0",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/17664,1138612778,2023-03-16T12:53:45Z,model/jpa/src/main/java/org/keycloak/connections/jpa/DefaultJpaConnectionProviderFactory.java,"@@ -143,17 +133,7 @@ public void init(Config.Scope config) {     @Override     public void postInit(KeycloakSessionFactory factory) {         this.factory = factory;-        checkJtaEnabled(factory);--    }--    protected void checkJtaEnabled(KeycloakSessionFactory factory) {-        jtaLookup = (JtaTransactionManagerLookup) factory.getProviderFactory(JtaTransactionManagerLookup.class);-        if (jtaLookup != null) {-            if (jtaLookup.getTransactionManager() != null) {-                jtaEnabled = true;-            }-        }+        this.jtaLookup = (JtaTransactionManagerLookup) factory.getProviderFactory(JtaTransactionManagerLookup.class);","@vramik @ahus1 I'm not sure about changes in this commit. It shouldn't be changed, right? As there can be non-JTA data sources provided, right?",
91681638,stelewis-redhat,https://api.github.com/repos/keycloak/keycloak/pulls/17572,1139378452,2023-03-16T21:30:42Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/userSession/HotRodUserSessionTransaction.java,"@@ -79,20 +77,33 @@ private MapUserSessionEntity wrapUserSessionEntityToClientSessionAwareDelegate(M         if (entity == null) return null;          return new MapUserSessionEntityDelegate(new SimpleDelegateProvider<>(entity)) {++            private boolean filterAndRemoveNotExpired(MapAuthenticatedClientSessionEntity clientSession) {+                if (!clientSessionTransaction.exists(clientSession.getId())) {+                    // If client session does not exist, remove the reference to it from userSessionEntity loaded in this transaction+                    entity.removeAuthenticatedClientSession(clientSession.getClientId());",Is this N possible hits to the database or just one?,
91681638,stelewis-redhat,https://api.github.com/repos/keycloak/keycloak/pulls/17572,1143311821,2023-03-21T12:38:55Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/userSession/HotRodUserSessionTransaction.java,"@@ -79,20 +77,33 @@ private MapUserSessionEntity wrapUserSessionEntityToClientSessionAwareDelegate(M         if (entity == null) return null;          return new MapUserSessionEntityDelegate(new SimpleDelegateProvider<>(entity)) {++            private boolean filterAndRemoveNotExpired(MapAuthenticatedClientSessionEntity clientSession) {+                if (!clientSessionTransaction.exists(clientSession.getId())) {+                    // If client session does not exist, remove the reference to it from userSessionEntity loaded in this transaction+                    entity.removeAuthenticatedClientSession(clientSession.getClientId());","I think my mental model of the data is wrong, after thinking about this a bit more.If this gets called in a loop, ""removeAuthenticateClientSession"" does something like ""delete from blah where blah_id=id"" which is fine. In the SQL world, one could optimize a little by ""delete from blah where blah_id in (id1, id2)"" which isn't really possible, since HotRod isn't the SQL world.In sum: nevermind.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19086,1143317657,2023-03-21T12:44:08Z,js/apps/admin-ui/package.json,,"I see a new dependency added here, but the lockfile was not updated. Can you commit the lockfile as well?",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1143497886,2023-03-21T14:40:54Z,services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java,"@@ -1292,7 +1291,7 @@ protected static Response executionActions(KeycloakSession session, Authenticati     private static Response executeAction(KeycloakSession session, AuthenticationSessionModel authSession, RequiredActionProviderModel model,                                           HttpRequest request, EventBuilder event, RealmModel realm, UserModel user, boolean kcActionExecution) {         RequiredActionFactory factory = (RequiredActionFactory) session.getKeycloakSessionFactory()-                .getProviderFactory(RequiredActionProvider.class, getDefaultRequiredActionCaseInsensitively(model.getProviderId()));+                .getProviderFactory(RequiredActionProvider.class, model.getProviderId());","IMHO this will work when all instances for TERMS_AND_CONDITIONS have been updated. Still it might break some old legacy (?) data as in previous versions case insensitivity was supported. So I wonder if removing this snippet of code could be removed in the next major version, as it is now fix the bug. ",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1143509128,2023-03-21T14:47:53Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/util/SessionTimeouts.java,"@@ -103,25 +103,26 @@ public static long getUserSessionMaxIdleMs(RealmModel realm, UserSessionEntity u      * @return      */     public static long getClientSessionLifespanMs(RealmModel realm, AuthenticatedClientSessionEntity clientSessionEntity) {","@rmartinc @pjbober Will it be possible to have ""remember me"" as another note on AuthenticatedClientSessionModel? The storing userSessionId instead on AuthenticatedClientSessionModel (instead of ""Started at"" and ""remember me"") works as well, but if it requires a big refactoring or additional lookup of userSession from infinispan, then my preference would be to rather stick with ""Started at"" and ""remember me"" notes.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1143511600,2023-03-21T14:49:31Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java,"@@ -772,4 +773,10 @@ protected boolean isUserCacheEnabled() {                 .fetchString(s -> s.getKeycloakSessionFactory().getProviderFactory(UserCache.class));         return Objects.nonNull(userCache);     }++    protected boolean isInfinispanUserSessionProviderUsed() {","Is it possible to move it to some ""util"" method instead of having it as a method on `AbstractKeycloakTest`? Maybe like `StorageUtil` class can be introduced for this (if there is not something like this already?)AFAIK some tests still might have issues with ""testing client""...",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1143519827,2023-03-21T14:54:29Z,model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate21_0_2_TermsAndConditionsRequiredAction.java,"@@ -0,0 +1,50 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.connections.jpa.updater.liquibase.custom;++import liquibase.exception.CustomChangeException;+import liquibase.statement.core.UpdateStatement;+import org.keycloak.models.UserModel;++public class JpaUpdate21_0_2_TermsAndConditionsRequiredAction extends CustomKeycloakTask {++    private static final String TERMS_AND_CONDITION_LEGACY_ALIAS = ""terms_and_conditions"";++    @Override+    protected void generateStatementsImpl() throws CustomChangeException {+        statements.add(+            new UpdateStatement(null, null, getTableName(""REQUIRED_ACTION_PROVIDER""))+                .addNewColumnValue(""ALIAS"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .addNewColumnValue(""PROVIDER_ID"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""ALIAS=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)+        );++        statements.add(+            new UpdateStatement(null, null, getTableName(""USER_REQUIRED_ACTION""))+                .addNewColumnValue(""REQUIRED_ACTION"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""REQUIRED_ACTION=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)","I see that the ""TermsAndConditions.USER_ATTRIBUTE"" has also changed in the original PR. There might be now old lowercase and new uppercase user attributes with the confirmed terms and conditions timestamp. A simple update might not be sufficient, as there might be users who have both the old and the new entry. So those might need to be consolidated to either the minimum timestamp or maximum timestamp. One could migrate only those where there is only one entry? Still it would only be local users, and not federated users. If we think we won't come up with a solution for this one soon, the migration can be handled in another PR for the KC22 release.  Having this change in the user attributes might be worth a migration guide / release notes thing for KC21, as customers might have processes that build on top of this attribute. ",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1144448220,2023-03-22T09:12:14Z,services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java,"@@ -1292,7 +1291,7 @@ protected static Response executionActions(KeycloakSession session, Authenticati     private static Response executeAction(KeycloakSession session, AuthenticationSessionModel authSession, RequiredActionProviderModel model,                                           HttpRequest request, EventBuilder event, RealmModel realm, UserModel user, boolean kcActionExecution) {         RequiredActionFactory factory = (RequiredActionFactory) session.getKeycloakSessionFactory()-                .getProviderFactory(RequiredActionProvider.class, getDefaultRequiredActionCaseInsensitively(model.getProviderId()));+                .getProviderFactory(RequiredActionProvider.class, model.getProviderId());","What do you mean by old legacy data? After the migration, no `providerId` should equal legacy id `terms_and_conditions`. Maybe I am missing something.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1144574933,2023-03-22T10:32:35Z,model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate21_0_2_TermsAndConditionsRequiredAction.java,"@@ -0,0 +1,50 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.connections.jpa.updater.liquibase.custom;++import liquibase.exception.CustomChangeException;+import liquibase.statement.core.UpdateStatement;+import org.keycloak.models.UserModel;++public class JpaUpdate21_0_2_TermsAndConditionsRequiredAction extends CustomKeycloakTask {++    private static final String TERMS_AND_CONDITION_LEGACY_ALIAS = ""terms_and_conditions"";++    @Override+    protected void generateStatementsImpl() throws CustomChangeException {+        statements.add(+            new UpdateStatement(null, null, getTableName(""REQUIRED_ACTION_PROVIDER""))+                .addNewColumnValue(""ALIAS"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .addNewColumnValue(""PROVIDER_ID"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""ALIAS=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)+        );++        statements.add(+            new UpdateStatement(null, null, getTableName(""USER_REQUIRED_ACTION""))+                .addNewColumnValue(""REQUIRED_ACTION"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""REQUIRED_ACTION=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)","I missed that one. I see `TermsAndConditions.USER_ATTRIBUTE` is not used very often in Keycloak itself, however, the change can break some third-party code. About the situation where the attribute is doubled, it probably should not happen as terms and conditions is asked usually only once and Keycloak never checks whether the user accepted it by checking the attribute. This means each user should have only one of them. The problem is, that we cannot be sure in the current situation (when we didn't do the migration properly in 21).To account for this we can probably try to do some SQL magic.This will solve double field```DELETE attr1    FROM USER_ATTRIBUTE attr1INNER JOIN USER_ATTRIBUTE attr2     ON attr1.USER_ID = attr2.USER_ID AND (attr2.NAME = TERMS_AND_CONDITIONS OR attr2.NAME = terms_and_conditions) AND attr1.NAME != attr2.NAMEWHERE (attr1.NAME = terms_and_conditions OR attr1.NAME = TERMS_AND_CONDITIONS) AND (attr1.VALUE <= attr2.value)```This will change all legacy names to the new one```UPDATE attr1 SET NAME = TERMS_AND_CONDITIONS    FROM USER_ATTRIBUTE attr1WHERE attr1.NAME = terms_and_conditions```WDYT? ",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1144592898,2023-03-22T10:46:33Z,services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java,"@@ -1292,7 +1291,7 @@ protected static Response executionActions(KeycloakSession session, Authenticati     private static Response executeAction(KeycloakSession session, AuthenticationSessionModel authSession, RequiredActionProviderModel model,                                           HttpRequest request, EventBuilder event, RealmModel realm, UserModel user, boolean kcActionExecution) {         RequiredActionFactory factory = (RequiredActionFactory) session.getKeycloakSessionFactory()-                .getProviderFactory(RequiredActionProvider.class, getDefaultRequiredActionCaseInsensitively(model.getProviderId()));+                .getProviderFactory(RequiredActionProvider.class, model.getProviderId());","Sorry, I missed adding some context: The legacy data might come from custom 3rd party providers that users built themselves. They might depend on the case insensitivity. For the terms and conditions, this should work as all legacy data is migrated with your scripts.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1144621903,2023-03-22T10:58:02Z,model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate21_0_2_TermsAndConditionsRequiredAction.java,"@@ -0,0 +1,50 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.connections.jpa.updater.liquibase.custom;++import liquibase.exception.CustomChangeException;+import liquibase.statement.core.UpdateStatement;+import org.keycloak.models.UserModel;++public class JpaUpdate21_0_2_TermsAndConditionsRequiredAction extends CustomKeycloakTask {++    private static final String TERMS_AND_CONDITION_LEGACY_ALIAS = ""terms_and_conditions"";++    @Override+    protected void generateStatementsImpl() throws CustomChangeException {+        statements.add(+            new UpdateStatement(null, null, getTableName(""REQUIRED_ACTION_PROVIDER""))+                .addNewColumnValue(""ALIAS"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .addNewColumnValue(""PROVIDER_ID"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""ALIAS=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)+        );++        statements.add(+            new UpdateStatement(null, null, getTableName(""USER_REQUIRED_ACTION""))+                .addNewColumnValue(""REQUIRED_ACTION"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""REQUIRED_ACTION=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)","Some syntax comments: some quotes might be missing for the attribute name - this is probably obvious. Something that might be less obvious: value is a string, and it contains a number. To properly compare them, one would need to convert them to a number. I don't have access the code at the moment, but something I remember: When this is a CLOB field, different databases would require different conversions to make this a number :-( ... and this is again slow.I see that you want to delete the older entry (smaller value), and keep the newer one. This is one way to clean it up. Still it is a choice, and it might not fit all customer situations - maybe they want to keep the other one. While this can work and is a possible solution, it should be mentioned in the migration guide. Some more context on T&C: Terms and conditions change, and one would have users to reconfirm the T&C now and then. So in some situations one would be interested when they confirmed them the last time. Still this depends on the use case, and the choice we're about to make should be documented in the migration guide. As those statements will analyze a lot of data, and possibly also update a lot of data, those statements will be slow. Nothing we can change here I'm afraid.  So my take on this: Use the statement above, and put enough information in the migration guide (which should include the possibly long schema migration execution time). ",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1144638979,2023-03-22T11:13:59Z,model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate21_0_2_TermsAndConditionsRequiredAction.java,"@@ -0,0 +1,50 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.connections.jpa.updater.liquibase.custom;++import liquibase.exception.CustomChangeException;+import liquibase.statement.core.UpdateStatement;+import org.keycloak.models.UserModel;++public class JpaUpdate21_0_2_TermsAndConditionsRequiredAction extends CustomKeycloakTask {++    private static final String TERMS_AND_CONDITION_LEGACY_ALIAS = ""terms_and_conditions"";++    @Override+    protected void generateStatementsImpl() throws CustomChangeException {+        statements.add(+            new UpdateStatement(null, null, getTableName(""REQUIRED_ACTION_PROVIDER""))+                .addNewColumnValue(""ALIAS"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .addNewColumnValue(""PROVIDER_ID"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""ALIAS=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)+        );++        statements.add(+            new UpdateStatement(null, null, getTableName(""USER_REQUIRED_ACTION""))+                .addNewColumnValue(""REQUIRED_ACTION"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""REQUIRED_ACTION=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)","Thank you very much for the suggestions.Another option would be to revert the attribute name to the older one and just ignore or remove the new name from the database. Then we can update the migration guide with info that some T&C timestamps can be in form of the new attribute name so they can migrate themselves if they want. Or, they can just live with the fact that some users don't have the attribute set. ",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1144770881,2023-03-22T12:58:20Z,model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate21_0_2_TermsAndConditionsRequiredAction.java,"@@ -0,0 +1,50 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.connections.jpa.updater.liquibase.custom;++import liquibase.exception.CustomChangeException;+import liquibase.statement.core.UpdateStatement;+import org.keycloak.models.UserModel;++public class JpaUpdate21_0_2_TermsAndConditionsRequiredAction extends CustomKeycloakTask {++    private static final String TERMS_AND_CONDITION_LEGACY_ALIAS = ""terms_and_conditions"";++    @Override+    protected void generateStatementsImpl() throws CustomChangeException {+        statements.add(+            new UpdateStatement(null, null, getTableName(""REQUIRED_ACTION_PROVIDER""))+                .addNewColumnValue(""ALIAS"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .addNewColumnValue(""PROVIDER_ID"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""ALIAS=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)+        );++        statements.add(+            new UpdateStatement(null, null, getTableName(""USER_REQUIRED_ACTION""))+                .addNewColumnValue(""REQUIRED_ACTION"", UserModel.RequiredAction.TERMS_AND_CONDITIONS.name())+                .setWhereClause(""REQUIRED_ACTION=?"")+                .addWhereParameter(TERMS_AND_CONDITION_LEGACY_ALIAS)","The capitalization was changed to be consistent with [other default-required actions](https://github.com/keycloak/keycloak/blob/main/server-spi/src/main/java/org/keycloak/models/UserModel.java#L265-L274), all of them have upper-case `providerId` and `alias`. Only T&C had it lower-case which made it inconsistent and was causing this bug: https://github.com/keycloak/keycloak/issues/9991The idea was to revert only the user attribute. `providerId` and `alias` of T&C would still stay upper-case. In my opinion, the consistency still makes sense, especially when we already did part of it in KC21 release. I will update the PR to revert the user attribute and put together some text for the migration guide.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19161,1145844850,2023-03-23T08:38:15Z,pom.xml,"@@ -424,9 +425,14 @@              <!--JAKARTA-->             <dependency>-                <groupId>com.sun.mail</groupId>-                <artifactId>jakarta.mail</artifactId>-                <version>${com.sun.jakarta.mail.version}</version>+                <groupId>jakarta.mail</groupId>+                <artifactId>jakarta.mail-api</artifactId>+                <version>${jakarta.mail.version}</version>+            </dependency>+            <dependency>+                <groupId>org.eclipse.angus</groupId>+                <artifactId>angus-mail</artifactId>+                <version>${angus.mail.version}</version>             </dependency>","If I understand correctly, this dependency will be used just in tests, correct?And just a silly question but why do we need it at all now? It is a replacement for what dependency?",
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/17445,1146396141,2023-03-23T15:42:36Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/services/resources/DebugHostnameSettingsResource.java,"@@ -0,0 +1,144 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.quarkus.runtime.services.resources;++import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.quarkus.runtime.Environment;+import org.keycloak.quarkus.runtime.configuration.Configuration;+import org.keycloak.services.Urls;+import org.keycloak.services.resources.Cors;+import org.keycloak.theme.FreeMarkerException;+import org.keycloak.theme.Theme;+import org.keycloak.theme.freemarker.FreeMarkerProvider;+import org.keycloak.urls.UrlType;++import javax.ws.rs.GET;+import javax.ws.rs.Path;+import javax.ws.rs.PathParam;+import javax.ws.rs.Produces;+import javax.ws.rs.core.Context;+import javax.ws.rs.core.HttpHeaders;+import javax.ws.rs.core.MediaType;+import javax.ws.rs.core.Response;+import java.io.IOException;+import java.net.URI;+import java.util.HashMap;+import java.util.LinkedHashMap;+import java.util.Map;+import java.util.TreeMap;++@Path(""/realms"")+public class DebugHostnameSettingsResource {","@vmuzikar, on March 13th, @pedroigor and I have a quick chat and we tried to figure out how to move it to service or even use the `RealmResourceSPI` to expose the endpoint, but at the end, that approach should be the best for now as the option can be a runtime option and conditionally add the debug tool if needed.@pedroigor mentioned that the other option, implementing the SPI would force the tool to be enabled during build only. We agreed that, perhaps, one of the most strong reasons to keep it within Quarkus is to avoid introducing `ENV` dependent templates into themes. Therefore, there are only a few adjustments, like do not put the debug FTL into the server themes. Instead of that approach, we are putting the .ftl page in `/quarkus/runtime/src/main/resources/theme-resources/templates`.We had the idea that, maybe in the future, to propose a dedicated endpoint for ""debug"" and/or ""troubleshooting"" purposes, as we have for ""metrics"" and ""health"", in which each extension could attach its own endpoint to expose its debug/troubleshooting details.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1147281507,2023-03-24T08:56:53Z,docs/documentation/upgrading/topics/keycloak/changes-21_0_2.adoc,"@@ -0,0 +1,85 @@+= Terms and conditions required actions migration++Keycloak 21.0.0 changed `providerId` and `alias` for Terms and conditions+required action. The change was from lower-case `terms_and_conditions` string+to upper-case `TERMS_AND_CONDITIONS`.++Due to insufficient migration, there were issues with accepting T&C pages.+For more details see the following+https://github.com/keycloak/keycloak/issues/17277[GitHub issue].++The issues above are fixed in version 21.0.2.++== Using `terms_and_conditions` user attribute++When T&C page is accepted, Keycloak adds a new user attribute containing+the timestamp when the required action was finished. As part of Keycloak 21.0.0+the attribute was renamed to upper-case `TERMS_AND_CONDITIONS`. This is a+breaking for each third-party code relying on the user attribute, therefore,+we reverted this change back to original lower-case `terms_and_conditions`.++If you are relying on this attribute, and you used Keycloak 21.0.0 or 21.0.1+an additional migration may be needed. For users that accepted T&C in these+versions the attribute was created with different name+(`TERMS_AND_CONDITIONS`). It may be also possible that some users have both+attributes `terms_and_conditions` and `TERMS_AND_CONDITIONS`.++There are two ways to solve this issue.++First option is to update your code that is using the user attribute to read+also upper-case version if the lower-case does not exist. It may be also+necessary, to solve conflicting situations where both attributes exist.++The second option is to migrate data in your database. This can be a+time-consuming operation as the database can contain many user attributes.++Follow these steps to perform the migration.++1. To find out whether you database contains any attribute with upper-case+`TERMS_AND_CONDITIONS` name, execute the following script.+++```sql+SELECT COUNT(*) FROM USER_ATTRIBUTE WHERE name = 'TERMS_AND_CONDITIONS'+```+++If the query above returned 0 no migration is needed and everything should work+as before you can skip the following steps.+++If the query returned non-zero value a migration from `TERMS_AND_CONDITIONS` to+`terms_and_conditions` is necessary for some users.+2. Here, we need to find out whether there are users with conflicting attributes.+++```sql+SELECT COUNT(attr1)+FROM USER_ATTRIBUTE attr1+INNER JOIN USER_ATTRIBUTE attr2+ON attr1.USER_ID = attr2.USER_ID AND attr2.NAME = 'TERMS_AND_CONDITIONS'+WHERE attr1.NAME = 'terms_and_conditions'+```+++If the query above returned 0, there are no conflicts in your database. You+can skip to step 4.+3. There are some users with both attributes `terms_and_conditions` and+`TERMS_AND_CONDITIONS`. It is necessary to remove one of them. There are more+options how to solve the conflict and it depends on your preference. If you+want to remove attribute with an older timestamp execute the following query:+++```sql+DELETE attr1+FROM USER_ATTRIBUTE attr1+INNER JOIN USER_ATTRIBUTE attr2+    ON attr1.USER_ID = attr2.USER_ID AND (attr2.NAME = 'TERMS_AND_CONDITIONS' OR attr2.NAME = 'terms_and_conditions') AND attr1.NAME != attr2.NAME+WHERE (attr1.NAME = 'terms_and_conditions' OR attr1.NAME = 'TERMS_AND_CONDITIONS') AND (CAST(attr1.VALUE AS int) <= CAST(attr2.VALUE AS int))+```+++4. Rename all attributes with `TERMS_AND_CONDITIONS` name to `terms_and_conditions`.+++```sql+UPDATE attr1 SET NAME = 'terms_and_conditions'+FROM USER_ATTRIBUTE attr1+WHERE attr1.NAME = 'TERMS_AND_CONDITIONS'",This could be written as:```suggestionUPDATE user_attribute attr1 SET NAME = 'terms_and_conditions'WHERE attr1.NAME = 'TERMS_AND_CONDITIONS'```,
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17551,1147376743,2023-03-24T10:13:06Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java,"@@ -1071,8 +1074,22 @@ public void testSamlExportSignatureOn() throws URISyntaxException, IOException,         response.close();          Document document = DocumentUtil.getDocument(body);+        System.out.println(DocumentUtil.getNodeAsString(document));          Element signatureElement = DocumentUtil.getDirectChildElement(document.getDocumentElement(), XMLDSIG_NSURI.get(), ""Signature"");-        Assert.assertNotNull(signatureElement);+        Assert.assertNotNull(""Signature not null"", signatureElement);++        Element keyInfoElement = DocumentUtil.getDirectChildElement(signatureElement, XMLDSIG_NSURI.get(), ""KeyInfo"");+        Assert.assertNotNull(""KeyInfo not null"", keyInfoElement);++        Element x509DataElement = DocumentUtil.getDirectChildElement(keyInfoElement, XMLDSIG_NSURI.get(), ""X509Data"");+        Assert.assertNotNull(""X509Data not null"", x509DataElement);++        Element x509CertificateElement = DocumentUtil.getDirectChildElement(x509DataElement, XMLDSIG_NSURI.get(), ""X509Certificate"");+        Assert.assertNotNull(""X509Certificate not null"", x509CertificateElement);++        System.out.println(DocumentUtil.getNodeAsString(keyInfoElement));+        Element keyNameElement = DocumentUtil.getDirectChildElement(keyInfoElement, XMLDSIG_NSURI.get(), ""KeyName"");+        Assert.assertNotNull(""KeyName not null"", keyNameElement);","Can you please try to verify the signature too? I know it was not done before but it's better if we it now, it would be something like the following:```java        String keyId = realm.keys().getKeyMetadata().getActive().get(Constants.DEFAULT_SIGNATURE_ALGORITHM);        String certificate = realm.keys().getKeyMetadata().getKeys().stream().filter(k -> keyId.equals(k.getKid())).findFirst().get().getCertificate();        X509Certificate x509cert = XMLSignatureUtil.getX509CertificateFromKeyInfoString(certificate);        SamlProtocolUtils.verifyDocumentSignature(document, new HardcodedKeyLocator(x509cert.getPublicKey()));```If you want you can also use those values to ensure the KeyInfo is containing those keyId and certificate values.",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17551,1147387238,2023-03-24T10:23:15Z,services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java,"@@ -457,13 +458,16 @@ public Response export(UriInfo uriInfo, RealmModel realm, String format) {             if (getConfig().isSignSpMetadata())             {                 KeyManager.ActiveRsaKey activeKey = session.keys().getActiveRsaKey(realm);-                String keyName = getConfig().getXmlSigKeyInfoKeyNameTransformer().getKeyName(activeKey.getKid(), activeKey.getCertificate());-                KeyPair keyPair = new KeyPair(activeKey.getPublicKey(), activeKey.getPrivateKey());+                X509Certificate certificate = activeKey.getCertificate();+                String keyName = getConfig().getXmlSigKeyInfoKeyNameTransformer().getKeyName(activeKey.getKid(), certificate);+                // No need to expose pubkey separately if cert is available+                KeyPair keyPair = new KeyPair(certificate == null ? activeKey.getPublicKey() : null, activeKey.getPrivateKey());","Buf! This is very weird. I think the correct way of fixing this is passing the certificate in [the SAML2Signature class to the sing call](https://github.com/keycloak/keycloak/blob/21.0.1/saml-core/src/main/java/org/keycloak/saml/processing/api/saml/v2/sig/SAML2Signature.java#L144) (there is a variant in [XMLSignatureUtil.sign](https://github.com/keycloak/keycloak/blob/21.0.1/saml-core/src/main/java/org/keycloak/saml/processing/core/util/XMLSignatureUtil.java#L369-L370) which receives the certificate parameter). And in the same class just add to the KeyInfo the certificate or the Public Key, not both [here](https://github.com/keycloak/keycloak/blob/21.0.1/saml-core/src/main/java/org/keycloak/saml/processing/core/util/XMLSignatureUtil.java#L750-L756). This second part can be something like:```java        if (x509Certificate != null) {            items.add(keyInfoFactory.newX509Data(Collections.singletonList(x509Certificate)));        } else if (publicKey != null) {            items.add(keyInfoFactory.newKeyValue(publicKey));        }```I think this is fixing the issue in all the places. The X509Certificate is always sent if present, if not the PublicKey info. I have checked in several places and the behavior is now quite erratic (sometimes only the public key is added, sometimes both). This way we are doing always the same, preferring cert over key in all the calls.WDYT?",
7584303,Agh42,https://api.github.com/repos/keycloak/keycloak/pulls/19306,1147421026,2023-03-24T10:56:43Z,server-spi-private/src/main/java/org/keycloak/policy/BlacklistPasswordPolicyProvider.java,"@@ -46,7 +46,7 @@ public PolicyError validate(String username, String password) {      PasswordBlacklist blacklist = (FileBasedPasswordBlacklist) policyConfig; -    if (!blacklist.contains(password.toLowerCase())) {+    if (!blacklist.contains(password)) {","If the idea really is to normalize all passwords to lower case before comparing to the blacklist, this needs to stay. I just now noticed the comment in KEYCLOAK-11700 introduced in ea248b560183c58f65761053228d343829cf65e2 ("" All passwords in the blacklist must be lowercased to facilitate case-insensitive comparison."").But maybe it would be safer  to force the password to lower-case when reading the blocklist instead of relying on the user to ensure this?",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/17664,1147424848,2023-03-24T11:00:07Z,model/jpa/src/main/java/org/keycloak/connections/jpa/PersistenceExceptionConverter.java,"@@ -75,10 +77,23 @@ private void flushInBatchIfEnabled(Method method) {         }     } +    // For JTA, the database operations are executed during the commit phase of a transaction, and DB exceptions can be propagated differently     public static ModelException convert(Throwable t) {-        if (t.getCause() != null && t.getCause() instanceof ConstraintViolationException) {-            throw new ModelDuplicateException(t);-        } if (t instanceof EntityExistsException || t instanceof ConstraintViolationException) {+        final Predicate<Throwable> checkDuplicationMessage = throwable -> {+            final String message = throwable.getCause() != null ? throwable.getCause().getMessage() : throwable.getMessage();+            return message.toLowerCase().contains(""duplicate"");+        };++        Predicate<Throwable> throwModelDuplicateEx = throwable ->","@ahus1 @vmuzikar This commit solves the issue of handling exceptions for the JTA tx type.You can check the original log[1]. There's only a WARN log where the `org.hibernate.exception.ConstraintViolationException` is thrown, but at the end, we get directly the cause of that (you can see the comment of this method.). [1] https://gist.github.com/mabartos/e8ea1e3ea945cf0b22748c40c2ce7e63",
30901193,dkobras,https://api.github.com/repos/keycloak/keycloak/pulls/17551,1147486249,2023-03-24T11:56:02Z,services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java,"@@ -457,13 +458,16 @@ public Response export(UriInfo uriInfo, RealmModel realm, String format) {             if (getConfig().isSignSpMetadata())             {                 KeyManager.ActiveRsaKey activeKey = session.keys().getActiveRsaKey(realm);-                String keyName = getConfig().getXmlSigKeyInfoKeyNameTransformer().getKeyName(activeKey.getKid(), activeKey.getCertificate());-                KeyPair keyPair = new KeyPair(activeKey.getPublicKey(), activeKey.getPrivateKey());+                X509Certificate certificate = activeKey.getCertificate();+                String keyName = getConfig().getXmlSigKeyInfoKeyNameTransformer().getKeyName(activeKey.getKid(), certificate);+                // No need to expose pubkey separately if cert is available+                KeyPair keyPair = new KeyPair(certificate == null ? activeKey.getPublicKey() : null, activeKey.getPrivateKey());","Thanks for the feedback! Indeed I had originally expected the `SAML2Signature` to prefer certs over public keys, and was surprised that it didn't. Being unsure if the behavior was intentional, I went for the limited workaround in `SAMLIdentityProvider`, but given your feedback, I'm more than happy to change `SAML2Signature` semantics instead.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19059,1147760488,2023-03-24T15:42:11Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Start.java,"@@ -85,4 +87,13 @@ public static boolean isDevProfileNotAllowed(List<String> currentCliArgs) {          return false;     }++    public List<OptionCategory> getOptionCategories() {+        return super.getOptionCategories().stream().filter(optionCategory -> optionCategory != OptionCategory.EXPORT && optionCategory != OptionCategory.IMPORT).collect(Collectors.toList());+    }++    @Override+    public boolean includeRuntime() {+        return true;+    }","Just a nitpick. I find this a bit confusing. We have a custom logic for hiding runtime and buildtime options for `start` and `start-dev` commands in the `Picocli` class. I would probably not override this, or override both `includeRuntime` and `includeBuildtime`, and add some comment here that it actually does not take any effect. WDYT?",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/19325,1148961411,2023-03-27T08:27:50Z,crypto/fips1402/src/main/java/org/keycloak/crypto/fips/KeycloakFipsSecurityProvider.java,"@@ -38,23 +36,4 @@ public synchronized final Service getService(String type, String algorithm) {             return null;         }     }--    public static String isSystemFipsEnabled() {","@pedroigor Some correction to this as I've already investigated something similar few months ago once you introduced this. That's also why I've slightly changed this code in this commit https://github.com/keycloak/keycloak/commit/4f068fcd  to return 3 statuses (`enabled`, `disabled`, `unknown` ) instead of 2 statuses (`enabled`, `disabled`), which you originally had.This code actually works even on JDK 17. But strangely enough, it does not work on all JVM platforms. Few details:- It does not work on my Ubuntu laptop at all. On both OpenJDK 11 and OpenJDK 17 I have `java.lang.ClassNotFoundException: java.security.SystemConfigurator`- However on RHEL 9, it works fine with OpenJDK 17! When running Keycloak server on this OpenJDK 17 version:```openjdk version ""17.0.6"" 2023-01-17 LTSOpenJDK Runtime Environment (Red_Hat-17.0.6.0.10-3.el9_1) (build 17.0.6+10-LTS)OpenJDK 64-Bit Server VM (Red_Hat-17.0.6.0.10-3.el9_1) (build 17.0.6+10-LTS, mixed mode, sharing)```The code actually works and it is able to correctly detect status. See this, which I've tried this morning:```2023-03-27 09:35:48,159 TRACE [org.keycloak.common.crypto.CryptoIntegration] (main) Java security providers: [  KC(BCFIPS version 1.000203, FIPS-JVM: enabled) version 1.0 - class org.keycloak.crypto.fips.KeycloakFipsSecurityProvider,  BCFIPS version 1.000203 - class org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,  BCJSSE version 1.0014 - class org.bouncycastle.jsse.provider.BouncyCastleJsseProvider,  SunPKCS11-NSS-FIPS version 17 - class sun.security.pkcs11.SunPKCS11,  SUN version 17 - class sun.security.provider.Sun,  SunEC version 17 - class sun.security.ec.SunEC,  SunJSSE version 17 - class sun.security.ssl.SunJSSE,  SunJCE version 17 - class com.sun.crypto.provider.SunJCE,  SunRsaSign version 17 - class sun.security.rsa.SunRsaSign,  XMLDSig version 17 - class org.jcp.xml.dsig.internal.dom.XMLDSigRI, ]```- One interesting aspect: This works when I execute the Keycloak with Quarkus distribution. Which can be done when I test manually on RHEL VM or when running tests as described here: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#integration-tests . However when I run the tests as unit tests with Java 17 as described here https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#unit-tests, then I have also status `unknown`. But the reason is `java.lang.reflect.InaccessibleObjectException: Unable to make static boolean java.security.SystemConfigurator.isSystemFipsEnabled() accessible: module java.base does not ""opens java.security"" to unnamed module @22f71333` . So the reason is different than on Ubuntu when the class SystemConfigurator is not available at all. This can be good to investigate, but IMO it very low priority as it affects only unit tests.- I am not sure about Fedora and not sure if it works there or notSo in shortcut: My vote is definitely to keep this code as it works on OpenJDK 17 at least on some platforms like RHEL 9 and UBI 9, which are most important platforms for us and for our customers. The fact that it doesn't work everywhere is OK as long as status `unknown` is reported.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/17519,1149475984,2023-03-27T16:04:50Z,docs/guides/server/configuration.adoc,"@@ -74,145 +71,149 @@ export KC_DB_URL_HOST=mykeycloakdb db-url-host=mykeycloakdb ---- -=== Using environment variables for configuration values-It is possible to use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:+=== Formats for command-line parameters++Keycloak is packed with many command line parameters for configuration. To see the available configuration formats, enter the following command:++<@kc.start parameters=""--help""/>++Alternatively, see <@links.server id=""all-config""/> for all server options.++=== Formats for environment variables+You can use placeholders to resolve an environment specific value from environment variables inside the `keycloak.conf` file by using the `${r""++${ENV_VAR}++""}` syntax:  [source] ---- db-url-host=${r""${MY_DB_HOST}""} ---- -To specify a fallback value in case the environment variable can not be resolved, use a `:`:+In case the environment variable cannot be resolved, you can specify a fallback value. Use a `:` (colon) as shown here before  `mydb`: [source, bash] ---- db-url-host=${r""${MY_DB_HOST:mydb}""} ---- -=== Configuring the server using a specific configuration file+=== Format to include a specific configuration file  By default, the server always fetches configuration options from the `conf/keycloak.conf` file. For a new installation, this file holds only commented settings as an idea of what you want to set when running in production. -You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by invoking the following command:+You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by entering the following command:  <@kc.start rootParameters=""--config-file=/path/to/myconfig.conf""/> -=== Using the command-line help-Keycloak is packed with a CLI that helps you to configure Keycloak. To find out about the available configuration, invoke the following command:--<@kc.start parameters=""--help""/>--Alternatively, you can find all server options at <@links.server id=""all-config""/>.+=== Format for raw Quarkus properties+In most cases, the available configuration options should suffice to configure the server. +However, for a specific behavior or capability that is missing in the Keycloak configuration, you can use properties from the underlying Quarkus framework. -=== Using raw Quarkus properties-In most cases, the available configuration options should suffice to configure the server.-However, you might need to use properties directly from the underlying Quarkus framework to enable a specific behavior or capability that is missing in the keycloak configuration.+If possible, avoid using properties directly from Quarkus, because they are unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first.  This approach helps us improve the configuration of Keycloak to fit your needs. -If possible, avoid using properties directly from Quarkus. These are considered unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first and help us-to improve Keycloak's configuration to fit your needs.+If an enhancement request is not possible, you can configure the server using raw Quarkus properties: -If that's not possible, you can configure the server using raw Quarkus properties:+. Create a `quarkus.properties` file in the `conf` directory.+. Define the required properties in that file.+++You can use only a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of the Quarkus extensions that are defined in the https://quarkus.io/guides/all-config[Quarkus documentation]. Also, note these differences for Quarkus properties: -* Create a `quarkus.properties` file in the `conf` directory and define any property you need.+* A lock icon for a Quarkus property in the https://quarkus.io/guides/all-config[Quarkus documentation] indicates a build time property.  You run the `build` command to apply this property. For details about the build command, see the subsequent sections on optimizing Keycloak.+* No lock icon for a property in the Quarkus guide indicates a runtime property for Quarkus and Keycloak.  -For a complete list of Quarkus properties, see the https://quarkus.io/guides/all-config[Quarkus documentation]. Be aware that Keycloak uses a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of quarkus extensions, so not all properties will be available.+. Use the `[-cf|--config-file]` command line parameter to include that file. -When a quarkus property is a runtime property (no lock icon shown in the quarkus guide), it is also handled as runtime property for Keycloak. When a quarkus property is a build time property, you have to invoke a `build` for the property to be applied. See the sections below for further information around the build command.--Note that some quarkus properties are mapped by the Keycloak configuration, for example `quarkus.http.port` and similar properties that are needed to configure Keycloak. If the property is used by Keycloak, defining the same underlying property key in  `quarkus.properties` will have no effect, as the keycloak configuration value takes precedence over the quarkus property value.+Note that some Quarkus properties are already mapped in the Keycloak configuration, such as `quarkus.http.port` and similar essential properties. If the property is used by Keycloak, defining that property key in `quarkus.properties` has no effect. The Keycloak configuration value takes precedence over the Quarkus property value.  == Starting Keycloak-Keycloak can be started in two operating modes, `development mode` and `production mode`. Both modes offer a different set of defaults for the environment they are intended to be used.+You can start Keycloak in `development mode` or `production mode`. Each mode offers different defaults for the intended environment.  === Starting Keycloak in development mode-The development mode is targeted for people trying out Keycloak the first time and get it up and running quickly. It also offers convenient defaults for developers, for example to develop a new Keycloak theme.+Use development mode to try out Keycloak for the first time to get it up and running quickly. This mode offers convenient defaults for developers, such as for developing a new Keycloak theme. -The development mode is started by invoking the following command:+To start in development mode, enter the following command:  <@kc.startdev parameters=""""/>  .Defaults-The development mode sets the following default configuration:+Development mode sets the following default configuration:  * HTTP is enabled * Strict hostname resolution is disabled * Cache is set to local (No distributed cache mechanism used for high availability)-* Theme- and Template-caching is disabled+* Theme-caching and template-caching is disabled  === Starting Keycloak in production mode-The production mode is targeted for deployments of Keycloak into production environments and follows a ""secure by default"" principle.+Use production mode for deployments of Keycloak in production environments. This mode follows a _secure by default_ principle. -The production mode is started by invoking the following command:+To start in production mode, enter the following command:  <@kc.start parameters=""""/> -Without further configuration, this command will not start Keycloak and show you an error instead. This is done on purpose, because Keycloak follows a ""secure by default"" principle in this mode and expects to have a hostname setup and a HTTPS/TLS setup available when started in production mode.+Without further configuration, this command will not start Keycloak and show you an error instead. This response is done on purpose, because Keycloak follows a _secure by default_ principle. Production mode expects a hostname to be set up and an HTTPS/TLS setup to be available when started.  .Defaults-The production mode sets the following defaults:+Production mode sets the following defaults:  * HTTP is disabled as transport layer security (HTTPS) is essential * Hostname configuration is expected * HTTPS/TLS configuration is expected -Make sure to follow the steps outlined in <@links.server id=""configuration-production""/> before deploying Keycloak to production environments.+Before deploying Keycloak in a production environment, make sure to follow the steps outlined in <@links.server id=""configuration-production""/>. -By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These give you an idea about the main configuration to consider when running Keycloak in production.+By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These options give you an idea about the main configuration to consider when running Keycloak in production. -== Setup of the initial admin user-The initial admin user can be added manually using the web frontend. It needs to be accessed using a local connection (localhost) or using environment variables:+== Creating the initial admin user+You can create the initial admin user by using the web frontend, which you access using a local connection (localhost). You can instead create this user by using environment variables. Set `KEYCLOAK_ADMIN=_<username>_` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=_<password>_` for the initial admin password. -To add the initial admin user using environment variables, set `KEYCLOAK_ADMIN=<username>` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=<password>` for the initial admin password. Keycloak parses these values at first startup to create an initial user with administrative rights.-Once the first user with administrative rights exists, you can use the admin UI or the command line tool `kcadm.[sh|bat]` to create additional users.+Once the first user with administrative rights exists, you can use the Admin Console or the command line tool `kcadm.[sh|bat]` to create additional users.  If the initial administrator already exists and the environment variables are still present at startup, an error message stating the failed creation of the initial administrator is shown in the logs. Keycloak ignores the values and starts up correctly.  == Optimize the Keycloak startup-It is highly recommended to optimize Keycloak for better startup times and memory consumption before deploying into production environments. This section shows you how to apply a set of optimizations for Keycloak to get the best performance and runtime behavior possible.+We recommend optimizing Keycloak to provide faster startup and better memory consumption before deploying Keycloak in a production environment. This section describes how to apply Keycloak optimizations for the best performance and runtime behavior.++=== Creating an optimized Keycloak build+By default, when you use the `start` or `start-dev` command, Keycloak runs a `build` command under the covers for convenience reasons.   -=== Create an optimized Keycloak build-By default, when the `start` or `start-dev` commands are used, Keycloak runs a `build` command under the covers for convenience reasons.-This `build` command performs a set of optimizations to achieve an optimized startup- and runtime-behavior. The build process can take some time, usually a few seconds. Especially when running Keycloak in containerized environments like Kubernetes or OpenShift, startup time is important.-So in order to avoid the time that gets lost when running a `build` as part of Keycloaks first startup, it is possible and recommended to invoke a `build` explicitly before starting up, for example as a separate step in a CI/CD pipeline.+This `build` command performs a set of optimizations for the startup and runtime behavior. The build process can take a few seconds. Especially when running Keycloak in containerized environments such as Kubernetes or OpenShift, startup time is important. To avoid losing that time, run a `build` immediately before starting up, such as a separate step in a CI/CD pipeline.  ==== First step: Run a build explicitly-To run a `build`, invoke the following command:+To run a `build`, enter the following command:  <@kc.build parameters=""<build-options>""/> -As you may notice, the command above shows `build options` that should be invoked. Keycloak distinguishes between **build options**, that are usable when invoking the `build` command, and **configuration options**, that are usable when starting up the server.+This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when running the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect, but when a build is invoked beforehand, there's only a subset of Options available to the build command. The reason is, that build options get persisted into Keycloaks classpath, so configuration for e.g. credentials like `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build just before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into the Keycloak classpath. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.","`build` does not need to be ran immediately before start. It can be ran anytime before start.```suggestionFor a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into the Keycloak classpath. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.```",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/17519,1149714346,2023-03-27T19:39:21Z,docs/guides/server/configuration.adoc,"@@ -74,145 +71,149 @@ export KC_DB_URL_HOST=mykeycloakdb db-url-host=mykeycloakdb ---- -=== Using environment variables for configuration values-It is possible to use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:+=== Formats for command-line parameters++Keycloak is packed with many command line parameters for configuration. To see the available configuration formats, enter the following command:++<@kc.start parameters=""--help""/>++Alternatively, see <@links.server id=""all-config""/> for all server options.++=== Formats for environment variables+You can use placeholders to resolve an environment specific value from environment variables inside the `keycloak.conf` file by using the `${r""++${ENV_VAR}++""}` syntax:  [source] ---- db-url-host=${r""${MY_DB_HOST}""} ---- -To specify a fallback value in case the environment variable can not be resolved, use a `:`:+In case the environment variable cannot be resolved, you can specify a fallback value. Use a `:` (colon) as shown here before  `mydb`: [source, bash] ---- db-url-host=${r""${MY_DB_HOST:mydb}""} ---- -=== Configuring the server using a specific configuration file+=== Format to include a specific configuration file  By default, the server always fetches configuration options from the `conf/keycloak.conf` file. For a new installation, this file holds only commented settings as an idea of what you want to set when running in production. -You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by invoking the following command:+You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by entering the following command:  <@kc.start rootParameters=""--config-file=/path/to/myconfig.conf""/> -=== Using the command-line help-Keycloak is packed with a CLI that helps you to configure Keycloak. To find out about the available configuration, invoke the following command:--<@kc.start parameters=""--help""/>--Alternatively, you can find all server options at <@links.server id=""all-config""/>.+=== Format for raw Quarkus properties+In most cases, the available configuration options should suffice to configure the server. +However, for a specific behavior or capability that is missing in the Keycloak configuration, you can use properties from the underlying Quarkus framework. -=== Using raw Quarkus properties-In most cases, the available configuration options should suffice to configure the server.-However, you might need to use properties directly from the underlying Quarkus framework to enable a specific behavior or capability that is missing in the keycloak configuration.+If possible, avoid using properties directly from Quarkus, because they are unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first.  This approach helps us improve the configuration of Keycloak to fit your needs. -If possible, avoid using properties directly from Quarkus. These are considered unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first and help us-to improve Keycloak's configuration to fit your needs.+If an enhancement request is not possible, you can configure the server using raw Quarkus properties: -If that's not possible, you can configure the server using raw Quarkus properties:+. Create a `quarkus.properties` file in the `conf` directory.+. Define the required properties in that file.+++You can use only a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of the Quarkus extensions that are defined in the https://quarkus.io/guides/all-config[Quarkus documentation]. Also, note these differences for Quarkus properties: -* Create a `quarkus.properties` file in the `conf` directory and define any property you need.+* A lock icon for a Quarkus property in the https://quarkus.io/guides/all-config[Quarkus documentation] indicates a build time property.  You run the `build` command to apply this property. For details about the build command, see the subsequent sections on optimizing Keycloak.+* No lock icon for a property in the Quarkus guide indicates a runtime property for Quarkus and Keycloak.  -For a complete list of Quarkus properties, see the https://quarkus.io/guides/all-config[Quarkus documentation]. Be aware that Keycloak uses a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of quarkus extensions, so not all properties will be available.+. Use the `[-cf|--config-file]` command line parameter to include that file. -When a quarkus property is a runtime property (no lock icon shown in the quarkus guide), it is also handled as runtime property for Keycloak. When a quarkus property is a build time property, you have to invoke a `build` for the property to be applied. See the sections below for further information around the build command.--Note that some quarkus properties are mapped by the Keycloak configuration, for example `quarkus.http.port` and similar properties that are needed to configure Keycloak. If the property is used by Keycloak, defining the same underlying property key in  `quarkus.properties` will have no effect, as the keycloak configuration value takes precedence over the quarkus property value.+Note that some Quarkus properties are already mapped in the Keycloak configuration, such as `quarkus.http.port` and similar essential properties. If the property is used by Keycloak, defining that property key in `quarkus.properties` has no effect. The Keycloak configuration value takes precedence over the Quarkus property value.  == Starting Keycloak-Keycloak can be started in two operating modes, `development mode` and `production mode`. Both modes offer a different set of defaults for the environment they are intended to be used.+You can start Keycloak in `development mode` or `production mode`. Each mode offers different defaults for the intended environment.  === Starting Keycloak in development mode-The development mode is targeted for people trying out Keycloak the first time and get it up and running quickly. It also offers convenient defaults for developers, for example to develop a new Keycloak theme.+Use development mode to try out Keycloak for the first time to get it up and running quickly. This mode offers convenient defaults for developers, such as for developing a new Keycloak theme. -The development mode is started by invoking the following command:+To start in development mode, enter the following command:  <@kc.startdev parameters=""""/>  .Defaults-The development mode sets the following default configuration:+Development mode sets the following default configuration:  * HTTP is enabled * Strict hostname resolution is disabled * Cache is set to local (No distributed cache mechanism used for high availability)-* Theme- and Template-caching is disabled+* Theme-caching and template-caching is disabled  === Starting Keycloak in production mode-The production mode is targeted for deployments of Keycloak into production environments and follows a ""secure by default"" principle.+Use production mode for deployments of Keycloak in production environments. This mode follows a _secure by default_ principle. -The production mode is started by invoking the following command:+To start in production mode, enter the following command:  <@kc.start parameters=""""/> -Without further configuration, this command will not start Keycloak and show you an error instead. This is done on purpose, because Keycloak follows a ""secure by default"" principle in this mode and expects to have a hostname setup and a HTTPS/TLS setup available when started in production mode.+Without further configuration, this command will not start Keycloak and show you an error instead. This response is done on purpose, because Keycloak follows a _secure by default_ principle. Production mode expects a hostname to be set up and an HTTPS/TLS setup to be available when started.  .Defaults-The production mode sets the following defaults:+Production mode sets the following defaults:  * HTTP is disabled as transport layer security (HTTPS) is essential * Hostname configuration is expected * HTTPS/TLS configuration is expected -Make sure to follow the steps outlined in <@links.server id=""configuration-production""/> before deploying Keycloak to production environments.+Before deploying Keycloak in a production environment, make sure to follow the steps outlined in <@links.server id=""configuration-production""/>. -By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These give you an idea about the main configuration to consider when running Keycloak in production.+By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These options give you an idea about the main configuration to consider when running Keycloak in production. -== Setup of the initial admin user-The initial admin user can be added manually using the web frontend. It needs to be accessed using a local connection (localhost) or using environment variables:+== Creating the initial admin user+You can create the initial admin user by using the web frontend, which you access using a local connection (localhost). You can instead create this user by using environment variables. Set `KEYCLOAK_ADMIN=_<username>_` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=_<password>_` for the initial admin password. -To add the initial admin user using environment variables, set `KEYCLOAK_ADMIN=<username>` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=<password>` for the initial admin password. Keycloak parses these values at first startup to create an initial user with administrative rights.-Once the first user with administrative rights exists, you can use the admin UI or the command line tool `kcadm.[sh|bat]` to create additional users.+Once the first user with administrative rights exists, you can use the Admin Console or the command line tool `kcadm.[sh|bat]` to create additional users.  If the initial administrator already exists and the environment variables are still present at startup, an error message stating the failed creation of the initial administrator is shown in the logs. Keycloak ignores the values and starts up correctly.  == Optimize the Keycloak startup-It is highly recommended to optimize Keycloak for better startup times and memory consumption before deploying into production environments. This section shows you how to apply a set of optimizations for Keycloak to get the best performance and runtime behavior possible.+We recommend optimizing Keycloak to provide faster startup and better memory consumption before deploying Keycloak in a production environment. This section describes how to apply Keycloak optimizations for the best performance and runtime behavior.++=== Creating an optimized Keycloak build+By default, when you use the `start` or `start-dev` command, Keycloak runs a `build` command under the covers for convenience reasons.   -=== Create an optimized Keycloak build-By default, when the `start` or `start-dev` commands are used, Keycloak runs a `build` command under the covers for convenience reasons.-This `build` command performs a set of optimizations to achieve an optimized startup- and runtime-behavior. The build process can take some time, usually a few seconds. Especially when running Keycloak in containerized environments like Kubernetes or OpenShift, startup time is important.-So in order to avoid the time that gets lost when running a `build` as part of Keycloaks first startup, it is possible and recommended to invoke a `build` explicitly before starting up, for example as a separate step in a CI/CD pipeline.+This `build` command performs a set of optimizations for the startup and runtime behavior. The build process can take a few seconds. Especially when running Keycloak in containerized environments such as Kubernetes or OpenShift, startup time is important. To avoid losing that time, run a `build` immediately before starting up, such as a separate step in a CI/CD pipeline.  ==== First step: Run a build explicitly-To run a `build`, invoke the following command:+To run a `build`, enter the following command:  <@kc.build parameters=""<build-options>""/> -As you may notice, the command above shows `build options` that should be invoked. Keycloak distinguishes between **build options**, that are usable when invoking the `build` command, and **configuration options**, that are usable when starting up the server.+This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when running the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect, but when a build is invoked beforehand, there's only a subset of Options available to the build command. The reason is, that build options get persisted into Keycloaks classpath, so configuration for e.g. credentials like `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build just before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into the Keycloak classpath. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.","This does not read correct "" ... persisted into the Keycloak classpath"". We were using ""server image"" when talking about persisted properties, weren't we?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16980,1150254425,2023-03-28T08:54:20Z,js/apps/admin-ui/src/user-federation/ldap/LdapSettingsAdvanced.tsx,"@@ -4,7 +4,7 @@ import { useTranslation } from ""react-i18next"";  import { useAlerts } from ""../../components/alert/Alerts""; import { FormAccess } from ""../../components/form-access/FormAccess"";-import { HelpItem } from ""ui-shared"";+import { HelpItem } from ""../../components/help-enabler/HelpItem"";",Why is this no longer imported from `ui-shared`?,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/19389,1150870198,2023-03-28T16:19:21Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java,"@@ -814,9 +814,9 @@ public void fragmentInLoginFunction() {     @Test     public void testRefreshTokenWithDeprecatedPromiseHandles() {","This test can be removed. This was supposed to test the legacy promise handles. After your changes, it should be similar to [this method](https://github.com/keycloak/keycloak/blob/e3c8a1df569af4a380c35e1e80a4ca6882b76154/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java#L262-L269).",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/19372,1151171840,2023-03-28T21:31:33Z,docs/documentation/server_admin/topics/authentication/flows.adoc,"@@ -425,14 +425,30 @@ If both session limits and client session limits are enabled, it makes sense to  Note that the user session limits should be added to your bound *Browser flow*, *Direct grant flow*, *Reset credentials* and also to any *Post broker login flow*. The authenticator should be added at the point when the user is already known during authentication (usually at the end of the authentication flow) and should be typically REQUIRED. Note that it is not possible to have-ALTERNATIVE and REQUIRED executions at the same level. For example for the default browser flow, it may be necessary to wrap the existing flow as a REQUIRED level-1 subflow and-add `User Session Count Limiter` to the same level as this new subflow. Example of such flow is below.+ALTERNATIVE and REQUIRED executions at the same level. -image:images/authentication-user-session-limits.png[Authentication User Session Limits Flow]+For most of authenticators like `Direct grant flow`, `Reset credentials` or `Post broker login flow`, it is recommended to add the authenticator as REQUIRED at the end of the authentication flow.+For example it can look like this for `Reset credentials` flow: -Currently, the administrator is responsible for maintaining consistency between the different configurations.+image:images/authentication-user-session-limits-resetcred.png[Authentication User Session Limits Reset Credentials Flow] -Note also that the user session limit feature is not available for CIBA.+For `Browser` flow, it can be beneficial to not add the Session Limits authenticator at the top level flow. This is due the `Cookie` authenticator, which automatically re-authenticates users based+on SSO cookie, is at top level and we do not want to check session limits during SSO re-authentication as user session already exists. So instead, it can be good to add separate ALTERNATIVE+subflow (like `authenticate-user-with-session-limit` at the example below) at the same level like `Cookie`. Then it it possible to add REQUIRED subflow (in the example below+`real-authentication-subflow`) as nested subflow of `authenticate-user-with-session-limit` and add `User Session Limit` at the same level as well. Inside `real-authentication-subflow`,+you can add real authenticators similarly like in the default browser flow. For example you can see the example flow below, which allows to authenticate users either with identity provider or",```suggestionyou can add real authenticators in a similar fashion to the default browser flow. The following example flow allows to users to authenticate with an identity provider or```,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/19372,1151173927,2023-03-28T21:34:26Z,docs/documentation/server_admin/topics/authentication/flows.adoc,"@@ -425,14 +425,30 @@ If both session limits and client session limits are enabled, it makes sense to  Note that the user session limits should be added to your bound *Browser flow*, *Direct grant flow*, *Reset credentials* and also to any *Post broker login flow*. The authenticator should be added at the point when the user is already known during authentication (usually at the end of the authentication flow) and should be typically REQUIRED. Note that it is not possible to have-ALTERNATIVE and REQUIRED executions at the same level. For example for the default browser flow, it may be necessary to wrap the existing flow as a REQUIRED level-1 subflow and-add `User Session Count Limiter` to the same level as this new subflow. Example of such flow is below.+ALTERNATIVE and REQUIRED executions at the same level. -image:images/authentication-user-session-limits.png[Authentication User Session Limits Flow]+For most of authenticators like `Direct grant flow`, `Reset credentials` or `Post broker login flow`, it is recommended to add the authenticator as REQUIRED at the end of the authentication flow.+For example it can look like this for `Reset credentials` flow: -Currently, the administrator is responsible for maintaining consistency between the different configurations.+image:images/authentication-user-session-limits-resetcred.png[Authentication User Session Limits Reset Credentials Flow] -Note also that the user session limit feature is not available for CIBA.+For `Browser` flow, it can be beneficial to not add the Session Limits authenticator at the top level flow. This is due the `Cookie` authenticator, which automatically re-authenticates users based+on SSO cookie, is at top level and we do not want to check session limits during SSO re-authentication as user session already exists. So instead, it can be good to add separate ALTERNATIVE+subflow (like `authenticate-user-with-session-limit` at the example below) at the same level like `Cookie`. Then it it possible to add REQUIRED subflow (in the example below+`real-authentication-subflow`) as nested subflow of `authenticate-user-with-session-limit` and add `User Session Limit` at the same level as well. Inside `real-authentication-subflow`,+you can add real authenticators similarly like in the default browser flow. For example you can see the example flow below, which allows to authenticate users either with identity provider or+with password and OTP:++image:images/authentication-user-session-limits-browser.png[Authentication User Session Limits Browser Flow]++Regarding `Post Broker login flow`, it can be fine to just add the `User Session Limits` as only authenticator in the authentication flow (as long as you do not have any other authenticators,+which you want to trigger after authentication with your identity provider) and make sure that this flow is configured as `Post Broker Flow` at your identity providers. This is needed, so","```suggestionRegarding `Post Broker login flow`,  you can add the `User Session Limits` as the only authenticator in the authentication flow  as long as you have no other authenticators that you  trigger after authentication with your identity provider.  However, make sure that this flow is configured as `Post Broker Flow` at your identity providers. This requirement exists needed so that ```",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/19389,1151456012,2023-03-29T06:37:39Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -0,0 +1,40 @@+= Legacy Promise API removed from Keycloak JS++With this release, we have removed the legacy Promise API methods from Keycloak JS. This means that calling `.success()` and `.error()` on promises returned from the adapter is no longer possible. Instead standardized Promise methods such as https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then[`.then()`] and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch[`.catch()`] should be used.++*Before:*","Sorry, I should have told you before. Release notes should contain only a brief description of what was changed. Details on what migration steps are needed should be mentioned in [upgrading docs](https://github.com/keycloak/keycloak/blob/main/docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc).See, for example, this PR to the old docs repository: https://github.com/keycloak/keycloak-documentation/pull/1760/files",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/19398,1151478961,2023-03-29T07:03:42Z,testsuite/integration-arquillian/tests/other/sssd/src/test/java/org/keycloak/testsuite/sssd/SSSDTest.java,"@@ -10,11 +10,7 @@ import org.apache.commons.configuration.PropertiesConfiguration; import org.jboss.arquillian.graphene.page.Page; import org.jboss.logging.Logger;-import org.junit.Assume;-import org.junit.Before;-import org.junit.BeforeClass;-import org.junit.Rule;-import org.junit.Test;+import org.junit.*;",A small detail: Can you remove star imports (and update your IDE to avoid using star imports and star static imports?)AFAIK we discussed this in the team a long time ago to avoid star imports (although I think it is not formally documented anywhere),x
1251974,miquelsi,https://api.github.com/repos/keycloak/keycloak/pulls/19362,1151547479,2023-03-29T08:07:46Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/util/AccountHelper.java,"@@ -44,4 +59,16 @@ public static boolean updatePassword(RealmResource realm, String username, Strin         }     } +    public static String getEmail(RealmResource realm, String username) {","I think these methods are too fine-grained for a generic `AccountHelper` class. Each of them is calling `getUserRepresentation`, which performs a search query. If you need email, first name and last name in a test, you are querying the DB 3 times. I think it's better to use `getUserRepresentation` directly in the test method.",
1251974,miquelsi,https://api.github.com/repos/keycloak/keycloak/pulls/19362,1151548598,2023-03-29T08:08:39Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/util/AccountHelper.java,"@@ -25,14 +25,29 @@  public class AccountHelper { -    public static boolean updatePassword(RealmResource realm, String username, String password) {+    public static UserRepresentation getUserRepresentation(RealmResource realm, String username) {         Optional<UserRepresentation> userResult = realm.users().search(username).stream().findFirst();         if (userResult.isEmpty()) {             throw new RuntimeException(""User with username "" + username + "" not found"");         } -        UserRepresentation userRepresentation = userResult.get();-        UserResource user = realm.users().get(userRepresentation.getId());+        return userResult.get();+    }++    public static void logout(RealmResource realm, String username) {+        realm.users().get(getUserRepresentation(realm, username).getId()).logout();+    }++    public static String getUsername(RealmResource realm, String username) {+        return getUserRepresentation(realm, username).getUsername();",What is the difference between the parameter `username` and the returned in `getUsername`? Isn't it the same?,x
1251974,miquelsi,https://api.github.com/repos/keycloak/keycloak/pulls/19362,1151581568,2023-03-29T08:34:56Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/custom/CustomThemeTest.java,"@@ -61,26 +58,25 @@ public void configureTestRealm(RealmRepresentation testRealm) {     protected LoginPage loginPage;      @Page-    protected AccountUpdateProfilePage profilePage;+    protected AppPage appPage;",Is `appPage` used anywhere in this or any child class?,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19384,1151600059,2023-03-29T08:49:13Z,quarkus/runtime/src/main/resources/application.properties,"@@ -40,4 +40,7 @@ quarkus.devservices.enabled=false quarkus.http.non-application-root-path=/${quarkus.http.root-path}  # Disable specific categories from logs-quarkus.log.category.""io.quarkus.config"".level=off\ No newline at end of file+quarkus.log.category.""io.quarkus.config"".level=off++# Set default directory name for the location of the transaction logs+quarkus.transaction-manager.object-store-directory=${kc.home.dir}/data/transaction-logs",Should we perhaps use this approach to align with a [similar options](https://github.com/keycloak/keycloak/blob/142bb30f669de957ce6872fdce4056eddc36605d/quarkus/runtime/src/main/resources/META-INF/keycloak.conf#L28) to be platform agnostic?```suggestionquarkus.transaction-manager.object-store-directory=${kc.home.dir:default}${file.separator}data${file.separator}transaction-logs```,
61687012,Aboullos,https://api.github.com/repos/keycloak/keycloak/pulls/19362,1151636884,2023-03-29T09:18:25Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/util/AccountHelper.java,"@@ -25,14 +25,29 @@  public class AccountHelper { -    public static boolean updatePassword(RealmResource realm, String username, String password) {+    public static UserRepresentation getUserRepresentation(RealmResource realm, String username) {         Optional<UserRepresentation> userResult = realm.users().search(username).stream().findFirst();         if (userResult.isEmpty()) {             throw new RuntimeException(""User with username "" + username + "" not found"");         } -        UserRepresentation userRepresentation = userResult.get();-        UserResource user = realm.users().get(userRepresentation.getId());+        return userResult.get();+    }++    public static void logout(RealmResource realm, String username) {+        realm.users().get(getUserRepresentation(realm, username).getId()).logout();+    }++    public static String getUsername(RealmResource realm, String username) {+        return getUserRepresentation(realm, username).getUsername();","`Username` is the hardcoded one checking and `getUsername` is the one stored on the database, would you prefer to change the asserts of the `getUsername` to just a not null of `getUserRepresentation`?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/16980,1151665464,2023-03-29T09:40:12Z,js/apps/admin-ui/src/user-federation/ldap/LdapSettingsAdvanced.tsx,"@@ -4,7 +4,7 @@ import { useTranslation } from ""react-i18next"";  import { useAlerts } from ""../../components/alert/Alerts""; import { FormAccess } from ""../../components/form-access/FormAccess"";-import { HelpItem } from ""ui-shared"";+import { HelpItem } from ""../../components/help-enabler/HelpItem"";","Yes, we do prefer using the components from `ui-shared` where possible.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/19098,1151746330,2023-03-29T10:47:52Z,docs/documentation/upgrading/topics/keycloak/changes-21_0_2.adoc,"@@ -0,0 +1,22 @@+= Terms and conditions user attribute migration++When T&C page is accepted, Keycloak adds a new user attribute containing","Nit: I would suggest changing the order of the sentences:The `terms_and_conditions` user attribute was accidentally changed in 21.0.0to uppercase. This version reverts the user attribute back to lowercase.The value of the attribute is set when accepting `Terms and Conditions` page.If any of your custom extensions relies on this attribute, you may need toadjust your code to check both `terms_and_conditions` and`TERMS_AND_CONDITIONS` attributes.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/19344,1151809119,2023-03-29T11:44:17Z,testsuite/integration-arquillian/HOW-TO-RUN.md,"@@ -826,6 +826,19 @@ because this is not UI testing). For debugging purposes you can override the hea For changing the hostname in the hostname tests (e.g. [DefaultHostnameTest](https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/url/DefaultHostnameTest.java)), we rely on [nip.io](https://nip.io) for DNS switching, so tests will work everywhere without fiddling with `etc/hosts` locally.  +### Tips & Tricks:+Although it _should_ work in general, you may experience an exception like this:+```+java.lang.RuntimeException: java.net.UnknownHostException: keycloak.127.0.0.1.nip.io: nodename nor servname provided, +or not known at org.keycloak.testsuite.util.OAuthClient.doWellKnownRequest(OAuthClient.java:1032)+at org.keycloak.testsuite.url.DefaultHostnameTest.assertBackendForcedToFrontendWithMatchingHostname(+DefaultHostnameTest.java:226)+...+```+when running these tests on your local machine. This happens when something on your machine or network is blocking DNS queries to [nip.io](https://nip.io)",Can we use `--Djdk.net.hosts.file=${project.build.testOutputDirectory}/hosts_file` instead?Reference: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#resolving-dns-names-when-running-tests,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/19344,1151885322,2023-03-29T12:42:57Z,testsuite/integration-arquillian/HOW-TO-RUN.md,"@@ -826,6 +826,19 @@ because this is not UI testing). For debugging purposes you can override the hea For changing the hostname in the hostname tests (e.g. [DefaultHostnameTest](https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/url/DefaultHostnameTest.java)), we rely on [nip.io](https://nip.io) for DNS switching, so tests will work everywhere without fiddling with `etc/hosts` locally.  +### Tips & Tricks:+Although it _should_ work in general, you may experience an exception like this:+```+java.lang.RuntimeException: java.net.UnknownHostException: keycloak.127.0.0.1.nip.io: nodename nor servname provided, +or not known at org.keycloak.testsuite.util.OAuthClient.doWellKnownRequest(OAuthClient.java:1032)+at org.keycloak.testsuite.url.DefaultHostnameTest.assertBackendForcedToFrontendWithMatchingHostname(+DefaultHostnameTest.java:226)+...+```+when running these tests on your local machine. This happens when something on your machine or network is blocking DNS queries to [nip.io](https://nip.io)","Thanks, just noting that this section was moved here from: https://github.com/keycloak/keycloak/pull/19344/files/4cc9045cbfa1a45c6cbf700adaa1159c8a8f2027#diff-a24c7f89a12564e75ee5c8ea09a90ff9c37ea8848c830e34f81976b04cf59531L936-L947 as it seems we misplaced it by adding `## Running base testsuite with Map storage` in the past. Do I get it right that `java.net.UnknownHostException` could still occur when running tests locally, but instead of advising following ```One possible workaround is to add a commonly used public dns server (e.g. 8.8.8.8 for google dns server) to your local networks dns configuration and run the tests. ```we should point to the reference link you just posted?",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19387,1152073654,2023-03-29T14:52:22Z,integration/admin-client-jakarta/pom.xml,"@@ -31,7 +31,7 @@     <description/>      <properties>-        <resteasy.versions>6.0.0.Final</resteasy.versions>+        <resteasy.versions>6.2.3.Final</resteasy.versions>","Just a nitpick, maybe we could stop overriding it and use the version from the root POM?https://github.com/keycloak/keycloak/blob/851220507036a9169ee89f7386525cffdffe89a5/pom.xml#L109",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19420,1152222566,2023-03-29T16:42:14Z,js/libs/keycloak-admin-client/src/defs/requiredActionProviderRepresentation.ts,"@@ -7,7 +7,7 @@ export enum RequiredActionAlias {   UPDATE_PROFILE = ""UPDATE_PROFILE"",   CONFIGURE_TOTP = ""CONFIGURE_TOTP"",   UPDATE_PASSWORD = ""UPDATE_PASSWORD"",-  terms_and_conditions = ""terms_and_conditions"",+  TERMS_AND_CONDITIONS = ""TERMS_AND_CONDITIONS"",",We're still using the old repo for the 21 release (unfortunately). Starting version 22 this should no longer be required.,x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19387,1152367232,2023-03-29T19:00:59Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java,"@@ -27,7 +27,6 @@ public static PropertyMapper[] getDatabasePropertyMappers() {         return new PropertyMapper[] {                 fromOption(DatabaseOptions.DB_DIALECT)                         .mapFrom(""db"")-                        .to(""quarkus.hibernate-orm.dialect"")","@vmuzikar - when starting Quarkus with a `persistence.xml`, there is now the following message that points to this behavior, @mabartos already [commented here](https://github.com/keycloak/keycloak/pull/17664#issuecomment-1468620535).> A legacy persistence.xml file is present in the classpath. This file will be used to configure JPA/Hibernate ORM persistence units, and any configuration of the Hibernate ORM extension will be ignored. To ignore persistence.xml files instead, set the configuration property 'quarkus.hibernate-orm.persistence-xml.ignore' to 'true'.I assume this is ""the new way"" of Quarkus 3, and we can't use the options any more as long as we continue to use a variant of `persistence.xml`. See also the [migration guide](https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.0#using-persistence-xml-files-and-quarkus-hibernate-orm-configuration-properties-in-the-same-application-will-fail) for details. I'm not sure how or when we would migrate away from a persistence.xml.For this PR, I would merge it to the Q3 branch. For KC22 this should IMHO be on the list of things to figure out, as customers want to have custom user provider with their own persistence unit and its own entities. cc: @hmlnarik ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19387,1152376931,2023-03-29T19:11:34Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java,"@@ -27,7 +27,6 @@ public static PropertyMapper[] getDatabasePropertyMappers() {         return new PropertyMapper[] {                 fromOption(DatabaseOptions.DB_DIALECT)                         .mapFrom(""db"")-                        .to(""quarkus.hibernate-orm.dialect"")","UPDATE: Moving away from the persistence.xml should be possible when using instead of a list of classes in the persistence XML file the [quarkus.hibernate-orm.packages](https://quarkus.io/guides/hibernate-orm#quarkus-hibernate-orm_quarkus.hibernate-orm.packages) property which (from what I read) accepts a list of Java packages where it would pick up the entities. Still, this should be a separate PR.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/19420,1152796204,2023-03-30T06:37:18Z,js/libs/keycloak-admin-client/src/defs/requiredActionProviderRepresentation.ts,"@@ -7,7 +7,7 @@ export enum RequiredActionAlias {   UPDATE_PROFILE = ""UPDATE_PROFILE"",   CONFIGURE_TOTP = ""CONFIGURE_TOTP"",   UPDATE_PASSWORD = ""UPDATE_PASSWORD"",-  terms_and_conditions = ""terms_and_conditions"",+  TERMS_AND_CONDITIONS = ""TERMS_AND_CONDITIONS"",","@mhajas when we released 21 we had partially started moving the UI bits into the main repository, but looking at the [workflows](https://github.com/keycloak-rel/keycloak-rel/blob/release/21.0/.github/workflows/x-keycloak-nodejs-admin.yml) we are still releasing admin client from the keycloak-nodejs-admin-client repository for 21.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/19362,1153344208,2023-03-30T14:23:19Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/custom/CustomThemeTest.java,,"+1 to remove `CustomThemeTest` entirely. This also means that this PR should likely remove `address/account` theme from the testsuite https://github.com/keycloak/keycloak/tree/main/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/theme/address/account (and remove ""account"" from this file https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/keycloak-themes.json#L4 ).Same applies for the ""example"" theme though https://github.com/keycloak/keycloak/tree/main/examples/themes/src/main/resources/theme/address/account, but I guess this should be done as a follow-up as this PR focus only on the testsuite?",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/17399,1154180498,2023-03-31T08:25:01Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/HotRodMapStorage.java,"@@ -146,11 +151,15 @@ protected void rollbackImpl() {         }          // Obtain value from Infinispan-        E hotRodEntity = remoteCache.get(k);-        if (hotRodEntity == null) return null;+        MetadataValue<E> entityWithMetadata = remoteCache.getWithMetadata(k);+        if (entityWithMetadata == null) return null;++        // store entity version+        LOG.tracef(""Entity %s read in version %s"", key, entityWithMetadata.getVersion(), getShortStackTrace());+        entityVersionCache.put(k, entityWithMetadata.getVersion());          // Create delegate that implements Map*Entity-        return delegateProducer.apply(hotRodEntity);+        return delegateProducer.apply(entityWithMetadata.getValue());",Is it possible `entityWithMetadata.getValue()` is `null`?,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/17399,1154208378,2023-03-31T08:50:38Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/HotRodMapStorage.java,"@@ -216,17 +225,33 @@ private Stream<V> pessimisticQueryRead(QueryParameters<M> queryParameters) {             if (entity == null) {                 return Stream.empty();             }-            boolean fulfillsQueryCriteria = mapMcb.getKeyFilter().test(keyConverter.fromString(id)) && mapMcb.getEntityFilter().test(entity);+            K k = keyConverter.fromString(id);+            boolean fulfillsQueryCriteria = mapMcb.getKeyFilter().test(k) && mapMcb.getEntityFilter().test(entity);             if (!fulfillsQueryCriteria) {                 // entity does not fulfill whole criteria, we can release lock now-                HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, getLockName(id));+                if (LockObjectsForModification.isEnabled(session, storedEntityDescriptor.getModelTypeClass())) {+                    HotRodLocksUtils.removeWithInstanceIdentifier(locksCache, getLockName(id));+                    entityVersionCache.remove(k);+                }                 return Stream.empty();             }              return Stream.of(entity);         } -        // Criteria does not contain only one id, we need to read ids non-pessimistically and then read entities one by one pessimistically+        // workaround if the query contains us.clientId field, in which case don't read by id => read without optimistic locking.+        // See https://issues.redhat.com/browse/ISPN-14537+        if (dmc.partiallyEvaluate((field,  op, arg) -> field == UserSessionModel.SearchableFields.CLIENT_ID).toString().contains(""__TRUE__"")) {",This workaround can be also removed when we can project the object version within the query. Can you please create a follow-up issue for that? it should be depending on ISPN 14.0.8 - https://issues.redhat.com/browse/ISPN-14478,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19342,1156050758,2023-04-03T14:32:59Z,js/apps/admin-ui/public/resources/en/user-federation-help.json,"@@ -27,6 +27,7 @@   ""ldapSynchronizationSettingsDescription"": ""This section contains options related to synchronization of users from LDAP to the Keycloak database."",   ""syncRegistrations"": ""Should newly created users be created within LDAP store? Priority effects which provider is chosen to sync the new user. This setting is effectively appplied only with WRITABLE edit mode."",   ""importUsersHelp"": ""If true, LDAP users will be imported into the Keycloak DB and synced by the configured sync policies."",+  ""validateOnAccessHelp"": ""If on, import validation of a LDAP federation provider will be performed for each user every access. The validation checks if the user is still present and enabled in LDAP with dedicated LDAP queries. If off, then changes made in LDAP are only visible locally after explicit or periodic synchronization."",","This description might lack a word. I'm also not sure if it checks for enabled on validation; I think it checks just it it is present in LDAP. And then there is some logic in `LDAPStorageProvider#proxy()` which would need to be captured in this text. See below for a suggestion, wich might still be incomplete.```suggestion  ""validateOnAccessHelp"": ""If on, import validation of a LDAP federation provider will be performed for each user on every access. The validation checks if the user is still present in LDAP with dedicated LDAP queries, and depending on the configuration uses the data from LDAP instead of previously cached data. If off, then changes made in LDAP are only visible locally after explicit or periodic synchronization."",```",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/19342,1156050888,2023-04-03T14:33:06Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java,"@@ -168,6 +168,10 @@ public LDAPStorageUserManager getUserManager() {      @Override     public UserModel validate(RealmModel realm, UserModel local) {+        if(!this.model.isValidateOnAccess()) {+            return local;+        }","Returning `local` and not returning a proxy for the LDAP, thereby any write access to the entity is not propagated to LDAP. This violates IMHO the API of this method.Another possibility would be to wrap the local in `ReadOnlyUserModelDelegate`, which would avoid loosing any changes, but would still possibly violate some caller's expectations.The one thing that would probably match a caller's expectation reasonably well would be a lazy-loading of the LDAP element on the first write access. ",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/17399,1156961477,2023-04-04T09:12:16Z,model/map-hot-rod/src/main/java/org/keycloak/models/map/storage/hotRod/HotRodMapStorage.java,"@@ -146,11 +151,15 @@ protected void rollbackImpl() {         }          // Obtain value from Infinispan-        E hotRodEntity = remoteCache.get(k);-        if (hotRodEntity == null) return null;+        MetadataValue<E> entityWithMetadata = remoteCache.getWithMetadata(k);+        if (entityWithMetadata == null) return null;++        // store entity version+        LOG.tracef(""Entity %s read in version %s"", key, entityWithMetadata.getVersion(), getShortStackTrace());+        entityVersionCache.put(k, entityWithMetadata.getVersion());          // Create delegate that implements Map*Entity-        return delegateProducer.apply(hotRodEntity);+        return delegateProducer.apply(entityWithMetadata.getValue());",I don't think so. `getWithMetadata()` returns `null` if the value doesn't exist for the given key.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19522,1157059997,2023-04-04T10:39:42Z,themes/src/main/resources/theme/base/login/template.ftl,"@@ -151,4 +151,20 @@   </div> </body> </html>++<script>+    function preventDoubleClick(){+        const submitButtons = document.querySelectorAll('input[type=""submit""]');+        for (var i = 0; i < submitButtons.length; i++) {+            const submitButton = submitButtons[i];+            submitButton.disabled = true;+        }+        return true;+    }",The [`SubmitEvent`](https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent) has a special property called [`submitter`](https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/submitter) that can be used to determine the element that submitted the form. We can use this element instead of re-querying the DOM.```suggestion    function preventDoubleClick({ submitter }) {        if (submitter !== null) {            submitter.disabled = true;        }    }```Although this code only disables the submitted form I think that is enough for most cases where the user might accidentally 'double click'.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19522,1157064679,2023-04-04T10:43:56Z,themes/src/main/resources/theme/base/login/login.ftl,"@@ -6,7 +6,7 @@     <div id=""kc-form"">       <div id=""kc-form-wrapper"">         <#if realm.password>-            <form id=""kc-form-login"" onsubmit=""login.disabled = true; return true;"" action=""${url.loginAction}"" method=""post"">+            <form id=""kc-form-login"" action=""${url.loginAction}"" method=""post"">",Similar code for this exists in [`login-password.ftl`](https://github.com/keycloak/keycloak/blob/84e763b472cd6a3f4550e962d694cd0016660c24/themes/src/main/resources/theme/base/login/login-password.ftl#L8) and  [`login-username.ftl`](https://github.com/keycloak/keycloak/blob/84e763b472cd6a3f4550e962d694cd0016660c24/themes/src/main/resources/theme/base/login/login-username.ftl#L9) which should be removed there as well.,
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/16887,1158765283,2023-04-05T16:39:14Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileCrudOperations.java,"@@ -0,0 +1,367 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.models.map.storage.file;++import org.jboss.logging.Logger;+import org.keycloak.common.util.StackUtil;+import org.keycloak.models.ModelDuplicateException;+import org.keycloak.models.map.common.AbstractEntity;+import org.keycloak.models.map.common.ExpirationUtils;+import org.keycloak.models.map.common.HasRealmId;+import org.keycloak.models.map.common.StringKeyConverter;+import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.realm.MapRealmEntity;+import org.keycloak.models.map.storage.QueryParameters;+import org.keycloak.models.map.storage.CrudOperations;+import org.keycloak.models.map.storage.chm.MapFieldPredicates;+import org.keycloak.models.map.storage.chm.MapModelCriteriaBuilder;+import org.keycloak.models.map.storage.file.common.MapEntityContext;+import org.keycloak.models.map.storage.file.yaml.PathWriter;+import org.keycloak.models.map.storage.file.yaml.YamlParser;+import org.keycloak.models.map.storage.file.yaml.YamlWritingMechanism;+import org.keycloak.storage.SearchableModelField;+import org.snakeyaml.engine.v2.emitter.Emitter;++import java.io.IOException;+import java.io.UncheckedIOException;+import java.nio.file.FileAlreadyExistsException;+import java.nio.file.Files;+import java.nio.file.Path;+import java.util.Arrays;+import java.util.IdentityHashMap;+import java.util.List;+import java.util.Map;+import java.util.Objects;+import java.util.Optional;+import java.util.function.Function;+import java.util.function.Predicate;+import java.util.regex.Matcher;+import java.util.regex.Pattern;+import java.util.stream.Collectors;+import java.util.stream.Stream;++import static org.keycloak.models.map.storage.file.FileMapStorageProviderFactory.DUMP_SETTINGS;+import static org.keycloak.models.map.storage.file.FileMapStorageProviderFactory.FILE_SUFFIX;+import static org.keycloak.models.map.storage.file.FileMapStorageProviderFactory.SEARCHABLE_FIELD_REALM_ID_FIELD_NAME;+import static org.keycloak.utils.StreamsUtil.paginatedStream;++public abstract class FileCrudOperations<V extends AbstractEntity & UpdatableEntity, M> implements CrudOperations<V, M>, HasRealmId {++    private static final Logger LOG = Logger.getLogger(FileCrudOperations.class);+    private String defaultRealmId;+    private final Class<V> entityClass;+    private final Function<String, Path> dataDirectoryFunc;+    private final Function<V, String[]> suggestedPath;+    private final boolean isExpirableEntity;+    private final Map<SearchableModelField<? super M>, MapModelCriteriaBuilder.UpdatePredicatesFunc<String, V, M>> fieldPredicates;++    public FileCrudOperations(Class<V> entityClass,+                              Function<String, Path> dataDirectoryFunc,+                              Function<V, String[]> suggestedPath,+                              boolean isExpirableEntity,+                              Map<SearchableModelField<? super M>, MapModelCriteriaBuilder.UpdatePredicatesFunc<String, V, M>> fieldPredicates) {+        this.entityClass = entityClass;+        this.dataDirectoryFunc = dataDirectoryFunc;+        this.suggestedPath = suggestedPath;+        this.isExpirableEntity = isExpirableEntity;+        this.fieldPredicates = new IdentityHashMap<>(fieldPredicates);+        this.fieldPredicates.keySet().stream()   // Ignore realmId since this is treated in reading differently+                .filter(f -> Objects.equals(SEARCHABLE_FIELD_REALM_ID_FIELD_NAME, f.getName()))+                .findAny()+                .ifPresent(key -> this.fieldPredicates.replace(key, (builder, op, params) -> builder));+    }++    protected Path getPathForEscapedId(String[] escapedIdPathArray) {+        Path parentDirectory = getDataDirectory();+        Path targetPath = parentDirectory;+        for (String path : escapedIdPathArray) {+            targetPath = targetPath.resolve(path).normalize();",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2444),x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17076,1158937181,2023-04-05T19:38:02Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/i18n/AccountPageTest.java,"@@ -58,6 +62,33 @@ public void languageDropdown() {         accountUpdateProfilePage.logout();     } +    @Test",Is it possible to remove this test and revert all changes in class `AccountPageTest` from this PR?We're in the middle of removing account console and I think that `AccountPageTest` is going to be removed. Will be good to avoid any changes in this class to avoid potential merge conflicts etc.The test for new account console in the class `InternationalizationTest` is sufficient IMO.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19558,1158963912,2023-04-05T20:11:02Z,js/apps/admin-ui/src/realm-settings/RealmSettingsTabs.tsx,"@@ -350,50 +351,60 @@ export const RealmSettingsTabs = ({           >             <RealmSettingsTokensTab save={save} realm={realm} />           </Tab>-          <Tab-            title={-              <TabTitleText>{t(""realm-settings:clientPolicies"")}</TabTitleText>-            }-            data-testid=""rs-clientPolicies-tab""-            {...clientPoliciesTab}-          >-            <RoutableTabs-              mountOnEnter-              defaultLocation={toClientPolicies({-                realm: realmName,-                tab: ""profiles"",-              })}+          {!useServerInfo().profileInfo?.disabledFeatures?.includes(",It's best to call hooks on top and store the value it returns as it prevents accidentally violating the [rules of hooks](https://legacy.reactjs.org/docs/hooks-rules.html) if a condition if ever added to the component.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16887,1159387472,2023-04-06T07:26:28Z,model/map/src/main/java/org/keycloak/models/map/storage/MapStorageWithAuth.java,"@@ -17,28 +17,25 @@  package org.keycloak.models.map.storage; -import org.keycloak.credential.CredentialModel;-import org.keycloak.models.KeycloakSession;+import org.keycloak.credential.CredentialInput;+import org.keycloak.models.RealmModel; import org.keycloak.models.map.common.AbstractEntity;-import org.keycloak.models.map.common.UpdatableEntity;+import org.keycloak.models.map.user.MapCredentialValidationOutput;  /**- * Implementing this interface signals that the store can validate credentials.- * This will be implemented, for example, by a store that supports SPNEGO for Kerberos authentication.+ * A map store that can authenticate the credentials provided by a user.  *  * @author Alexander Schwartz  */-public interface MapStorageWithAuth<V extends AbstractEntity & UpdatableEntity, M> extends MapStorage<V, M> {+public interface MapStorageWithAuth<V extends AbstractEntity, M> extends MapStorage<V, M> {      /**-     * Determine which credential types a store supports.-     * This method should be a cheap way to query the store before creating a more expensive transaction and performing an authentication.-     *-     * @param type supported credential type by this store, for example {@link CredentialModel#KERBEROS}.-     * @return <code>true</code> if the credential type is supported by this storage+     * Authenticate a user with the provided input credentials. Use this, for example, for Kerberos SPNEGO+     * authentication, where the user will be determined at the end of the interaction with the client.+     * @param realm realm against which to authenticate against+     * @param input information provided by the user+     * @return Information on how to continue the conversion with the client, or a terminal result. For a successful+     * authentication, will also contain information about the user.      */-    boolean supportsCredentialType(String type);","This method was removed probably because of conflicting names after renaming. Not sure why IntelliJ didn't warn me about this I almost missed it. I see this method is never used, so I am not sure where to implement this whether on the factory/provider/MapStorage level. Any ideas? Should we leave it as is now and add it once we have a usage for it? ",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19298,1159610949,2023-04-06T10:31:31Z,js/libs/keycloak-admin-client/package.json,"@@ -40,7 +40,8 @@     ""camelize-ts"": ""^2.3.0"",     ""lodash-es"": ""^4.17.21"",     ""url-join"": ""^5.0.0"",-    ""url-template"": ""^3.1.0""+    ""url-template"": ""^3.1.0"",+    ""undici"": ""^5.21.0""","I don't feel comfortable adding `undici` as a dependency. I am worried this will bloat the size of the bundle on the client-side (browsers), where this dependency does basically nothing.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19574,1159983191,2023-04-06T15:52:33Z,.gitignore,"@@ -86,3 +86,4 @@ quarkus/data/*.db  # Node.js for frontend-maven-plugin # node+node_modules","There should be no need to add this, it's [already ignored](https://github.com/keycloak/keycloak/blob/ad3b264088e46aec927325ee9298509d7645e312/js/.gitignore#L11) in the `js` directory.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19574,1159987685,2023-04-06T15:56:08Z,js/apps/admin-ui/src/user/UsersSection.tsx,"@@ -68,13 +82,53 @@ export default function UsersSection() {   const [realm, setRealm] = useState<RealmRepresentation | undefined>();   const [kebabOpen, setKebabOpen] = useState(false);   const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);+  const [searchValue, setSearchValue] = useState<string>("""");+  const [searchType, setSearchType] = useState<SearchType>(""default"");+  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);+  const [selectAttributeKeyOpen, setSelectAttributeKeyOpen] = useState(false);+  const [activeFilters, setActiveFilters] = useState<UserAttribute[]>([]);+  const [profile, setProfile] = useState<UserProfileConfig>();+  const [userProfileEnabled, setUserProfileEnabled] = useState(false);+  const [q, setQ] = useState<string>("""");+   const { profileInfo } = useServerInfo();    const [key, setKey] = useState(0);   const refresh = () => setKey(key + 1);    const { hasAccess } = useAccess(); +  type UserAttribute = {","Ideally these types are defined outside of the component, can you move them to the top of the file (below the imports)?",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19559,1160033070,2023-04-06T16:42:19Z,pom.xml,"@@ -1465,6 +1465,11 @@                 <artifactId>keycloak-quarkus-server-app</artifactId>                 <version>${project.version}</version>             </dependency>+            <dependency>+                <groupId>org.keycloak</groupId>+                <artifactId>keycloak-junit5</artifactId>+                <version>${project.version}</version>+            </dependency>",```suggestion            <dependency>                <groupId>org.keycloak</groupId>                <artifactId>keycloak-junit5</artifactId>                <version>${project.version}</version>                <scope>test</scope>            </dependency>```,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/19559,1160610251,2023-04-07T10:24:41Z,quarkus/tests/junit5/src/main/java/org/keycloak/it/utils/DockerKeycloakDistribution.java,"@@ -90,9 +103,23 @@ public CLIResult run(List<String> arguments) {             LOGGER.warn(""Failed to start Keycloak container"", cause);         } +        trySetRestAssuredPort();+         return CLIResult.create(getOutputStream(), getErrorStream(), getExitCode());     } +    private void trySetRestAssuredPort() {+        try {+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();+            Class<?> restAssured = classLoader.loadClass(""io.restassured.RestAssured"");+            Field port = restAssured.getDeclaredField(""port"");+            port.set(null, keycloakContainer.getMappedPort(8080));+        } catch (Exception ignore) {+            // keeping the workaround to set the container port to restassured",@vmuzikar The module no longer depends on `restassured`. This code is kept as is but we should improve later to properly expose ports as a follow up.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19574,1160634235,2023-04-07T11:15:32Z,js/apps/admin-ui/src/user/UsersSection.tsx,"@@ -236,59 +306,425 @@ export default function UsersSection() {   //should *only* list users when no user federation is configured   const listUsers = !(userStorage.length > 0); -  const toolbar = (-    <>+  const onSearch = () => {+    if (searchValue !== """") {+      setSearchValue(searchValue);+    } else {+      setSearchValue("""");+    }",This condition is essentially moot as the following code does the exact same:```suggestion    setSearchValue(searchValue);```,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19574,1160638702,2023-04-07T11:24:41Z,js/apps/admin-ui/src/user/UsersSection.tsx,,"This file is getting way too big to be maintainable, it should be split out into multiple components.",x
7305571,mkrueger92,https://api.github.com/repos/keycloak/keycloak/pulls/17577,1162273670,2023-04-11T03:55:17Z,services/src/main/java/org/keycloak/services/resources/admin/ClientResource.java,"@@ -790,6 +794,9 @@ private void updateAuthorizationSettings(ClientRepresentation rep) {      */     private UserSessionRepresentation toUserSessionRepresentation(final UserSessionModel userSession) {         UserSessionRepresentation rep = ModelToRepresentation.toRepresentation(userSession);+        if (rep == null) {","I don't think that is a good idea. The interface of `UserLookupProvider.getUserById(RealmModel realm, String id) `states that `null` is a valid return value. That means, every call to this function might produce `null` as result. Unless `InfinispanUserSessionProvider` returns the UserModel somehow in its data structure a null check of the caller is required. Especially in such constructs as `session.users().getUserById(getRealm(), entity.getUserId())`. This is used quite often. There you never know how a the interface `UserLookupProvider` is implemented and which constrains are attached to the component.The main problem is that implementations of `UserSessionModel.getUser()` often rely on `session.users().getUserById(realm, entity.getUser())`. And this might return `null`. Javadoc is used rarely in `UserSessionModel`. But given the current implementation I would say that `UserSessionModel.getUser()` can also return `null`. What that means for the user session and how this is handled in the code, I can not tell right now. It might be a consistency issue.",x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/16887,1162429310,2023-04-11T07:49:43Z,model/map/src/main/java/org/keycloak/models/map/storage/tree/EmptyMapStorage.java,"@@ -27,18 +25,10 @@  *  * @author hmlnarik  */-public class EmptyMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class EmptyMapStorage {",I can see that prior this change it was always returned the same instance upon calling `getInstance()`. Now it seems it'll return new instance every time it's called. Is this change intentional?note: it seems this class is not used anywhere (yet).,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/17519,1162516434,2023-04-11T09:05:21Z,docs/guides/server/configuration.adoc,"@@ -74,145 +71,149 @@ export KC_DB_URL_HOST=mykeycloakdb db-url-host=mykeycloakdb ---- -=== Using environment variables for configuration values-It is possible to use placeholders to resolve an environment specific value from environment variables inside the keycloak.conf file by using the `${r""++${ENV_VAR}++""}` syntax:+=== Formats for command-line parameters++Keycloak is packed with many command line parameters for configuration. To see the available configuration formats, enter the following command:++<@kc.start parameters=""--help""/>++Alternatively, see <@links.server id=""all-config""/> for all server options.++=== Formats for environment variables+You can use placeholders to resolve an environment specific value from environment variables inside the `keycloak.conf` file by using the `${r""++${ENV_VAR}++""}` syntax:  [source] ---- db-url-host=${r""${MY_DB_HOST}""} ---- -To specify a fallback value in case the environment variable can not be resolved, use a `:`:+In case the environment variable cannot be resolved, you can specify a fallback value. Use a `:` (colon) as shown here before  `mydb`: [source, bash] ---- db-url-host=${r""${MY_DB_HOST:mydb}""} ---- -=== Configuring the server using a specific configuration file+=== Format to include a specific configuration file  By default, the server always fetches configuration options from the `conf/keycloak.conf` file. For a new installation, this file holds only commented settings as an idea of what you want to set when running in production. -You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by invoking the following command:+You can also specify an explicit configuration file location using the `[-cf|--config-file]` option by entering the following command:  <@kc.start rootParameters=""--config-file=/path/to/myconfig.conf""/> -=== Using the command-line help-Keycloak is packed with a CLI that helps you to configure Keycloak. To find out about the available configuration, invoke the following command:--<@kc.start parameters=""--help""/>--Alternatively, you can find all server options at <@links.server id=""all-config""/>.+=== Format for raw Quarkus properties+In most cases, the available configuration options should suffice to configure the server. +However, for a specific behavior or capability that is missing in the Keycloak configuration, you can use properties from the underlying Quarkus framework. -=== Using raw Quarkus properties-In most cases, the available configuration options should suffice to configure the server.-However, you might need to use properties directly from the underlying Quarkus framework to enable a specific behavior or capability that is missing in the keycloak configuration.+If possible, avoid using properties directly from Quarkus, because they are unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first.  This approach helps us improve the configuration of Keycloak to fit your needs. -If possible, avoid using properties directly from Quarkus. These are considered unsupported by Keycloak. If your need is essential, consider opening an https://github.com/keycloak/keycloak/issues/new?assignees=&labels=kind%2Fenhancement%2Cstatus%2Ftriage&template=enhancement.yml[enhancement request] first and help us-to improve Keycloak's configuration to fit your needs.+If an enhancement request is not possible, you can configure the server using raw Quarkus properties: -If that's not possible, you can configure the server using raw Quarkus properties:+. Create a `quarkus.properties` file in the `conf` directory.+. Define the required properties in that file.+++You can use only a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of the Quarkus extensions that are defined in the https://quarkus.io/guides/all-config[Quarkus documentation]. Also, note these differences for Quarkus properties: -* Create a `quarkus.properties` file in the `conf` directory and define any property you need.+* A lock icon for a Quarkus property in the https://quarkus.io/guides/all-config[Quarkus documentation] indicates a build time property.  You run the `build` command to apply this property. For details about the build command, see the subsequent sections on optimizing Keycloak.+* No lock icon for a property in the Quarkus guide indicates a runtime property for Quarkus and Keycloak.  -For a complete list of Quarkus properties, see the https://quarkus.io/guides/all-config[Quarkus documentation]. Be aware that Keycloak uses a https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/pom.xml#L17[subset] of quarkus extensions, so not all properties will be available.+. Use the `[-cf|--config-file]` command line parameter to include that file. -When a quarkus property is a runtime property (no lock icon shown in the quarkus guide), it is also handled as runtime property for Keycloak. When a quarkus property is a build time property, you have to invoke a `build` for the property to be applied. See the sections below for further information around the build command.--Note that some quarkus properties are mapped by the Keycloak configuration, for example `quarkus.http.port` and similar properties that are needed to configure Keycloak. If the property is used by Keycloak, defining the same underlying property key in  `quarkus.properties` will have no effect, as the keycloak configuration value takes precedence over the quarkus property value.+Note that some Quarkus properties are already mapped in the Keycloak configuration, such as `quarkus.http.port` and similar essential properties. If the property is used by Keycloak, defining that property key in `quarkus.properties` has no effect. The Keycloak configuration value takes precedence over the Quarkus property value.  == Starting Keycloak-Keycloak can be started in two operating modes, `development mode` and `production mode`. Both modes offer a different set of defaults for the environment they are intended to be used.+You can start Keycloak in `development mode` or `production mode`. Each mode offers different defaults for the intended environment.  === Starting Keycloak in development mode-The development mode is targeted for people trying out Keycloak the first time and get it up and running quickly. It also offers convenient defaults for developers, for example to develop a new Keycloak theme.+Use development mode to try out Keycloak for the first time to get it up and running quickly. This mode offers convenient defaults for developers, such as for developing a new Keycloak theme. -The development mode is started by invoking the following command:+To start in development mode, enter the following command:  <@kc.startdev parameters=""""/>  .Defaults-The development mode sets the following default configuration:+Development mode sets the following default configuration:  * HTTP is enabled * Strict hostname resolution is disabled * Cache is set to local (No distributed cache mechanism used for high availability)-* Theme- and Template-caching is disabled+* Theme-caching and template-caching is disabled  === Starting Keycloak in production mode-The production mode is targeted for deployments of Keycloak into production environments and follows a ""secure by default"" principle.+Use production mode for deployments of Keycloak in production environments. This mode follows a _secure by default_ principle. -The production mode is started by invoking the following command:+To start in production mode, enter the following command:  <@kc.start parameters=""""/> -Without further configuration, this command will not start Keycloak and show you an error instead. This is done on purpose, because Keycloak follows a ""secure by default"" principle in this mode and expects to have a hostname setup and a HTTPS/TLS setup available when started in production mode.+Without further configuration, this command will not start Keycloak and show you an error instead. This response is done on purpose, because Keycloak follows a _secure by default_ principle. Production mode expects a hostname to be set up and an HTTPS/TLS setup to be available when started.  .Defaults-The production mode sets the following defaults:+Production mode sets the following defaults:  * HTTP is disabled as transport layer security (HTTPS) is essential * Hostname configuration is expected * HTTPS/TLS configuration is expected -Make sure to follow the steps outlined in <@links.server id=""configuration-production""/> before deploying Keycloak to production environments.+Before deploying Keycloak in a production environment, make sure to follow the steps outlined in <@links.server id=""configuration-production""/>. -By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These give you an idea about the main configuration to consider when running Keycloak in production.+By default, example configuration options for the production mode are commented out in the default `conf/keycloak.conf` file. These options give you an idea about the main configuration to consider when running Keycloak in production. -== Setup of the initial admin user-The initial admin user can be added manually using the web frontend. It needs to be accessed using a local connection (localhost) or using environment variables:+== Creating the initial admin user+You can create the initial admin user by using the web frontend, which you access using a local connection (localhost). You can instead create this user by using environment variables. Set `KEYCLOAK_ADMIN=_<username>_` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=_<password>_` for the initial admin password. -To add the initial admin user using environment variables, set `KEYCLOAK_ADMIN=<username>` for the initial admin username and `KEYCLOAK_ADMIN_PASSWORD=<password>` for the initial admin password. Keycloak parses these values at first startup to create an initial user with administrative rights.-Once the first user with administrative rights exists, you can use the admin UI or the command line tool `kcadm.[sh|bat]` to create additional users.+Once the first user with administrative rights exists, you can use the Admin Console or the command line tool `kcadm.[sh|bat]` to create additional users.  If the initial administrator already exists and the environment variables are still present at startup, an error message stating the failed creation of the initial administrator is shown in the logs. Keycloak ignores the values and starts up correctly.  == Optimize the Keycloak startup-It is highly recommended to optimize Keycloak for better startup times and memory consumption before deploying into production environments. This section shows you how to apply a set of optimizations for Keycloak to get the best performance and runtime behavior possible.+We recommend optimizing Keycloak to provide faster startup and better memory consumption before deploying Keycloak in a production environment. This section describes how to apply Keycloak optimizations for the best performance and runtime behavior.++=== Creating an optimized Keycloak build+By default, when you use the `start` or `start-dev` command, Keycloak runs a `build` command under the covers for convenience reasons.   -=== Create an optimized Keycloak build-By default, when the `start` or `start-dev` commands are used, Keycloak runs a `build` command under the covers for convenience reasons.-This `build` command performs a set of optimizations to achieve an optimized startup- and runtime-behavior. The build process can take some time, usually a few seconds. Especially when running Keycloak in containerized environments like Kubernetes or OpenShift, startup time is important.-So in order to avoid the time that gets lost when running a `build` as part of Keycloaks first startup, it is possible and recommended to invoke a `build` explicitly before starting up, for example as a separate step in a CI/CD pipeline.+This `build` command performs a set of optimizations for the startup and runtime behavior. The build process can take a few seconds. Especially when running Keycloak in containerized environments such as Kubernetes or OpenShift, startup time is important. To avoid losing that time, run a `build` immediately before starting up, such as a separate step in a CI/CD pipeline.  ==== First step: Run a build explicitly-To run a `build`, invoke the following command:+To run a `build`, enter the following command:  <@kc.build parameters=""<build-options>""/> -As you may notice, the command above shows `build options` that should be invoked. Keycloak distinguishes between **build options**, that are usable when invoking the `build` command, and **configuration options**, that are usable when starting up the server.+This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when running the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect, but when a build is invoked beforehand, there's only a subset of Options available to the build command. The reason is, that build options get persisted into Keycloaks classpath, so configuration for e.g. credentials like `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build just before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into the Keycloak classpath. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.","@andymunro I believe this comment is still valid (mainly the difference between ""classpath"" and ""image"" – the latter is correct).",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/16887,1162621988,2023-04-11T10:33:05Z,model/map/src/main/java/org/keycloak/models/map/storage/tree/EmptyMapStorage.java,"@@ -27,18 +25,10 @@  *  * @author hmlnarik  */-public class EmptyMapStorage<V extends AbstractEntity, M> implements MapStorage<V, M> {+public class EmptyMapStorage {","This is intentional. Previously the `getInstance` returned `MapStorage`. Each call to `createTransaction` from the `INSTANCE` created a new transaction instance. After this PR `getInstance` returns the transaction (in old naming), and `MapStorage` does not exist. I know it is confusing because the transaction was renamed to `MapStorage` but the number of objects created should be the same",
117832791,opdt,https://api.github.com/repos/keycloak/keycloak/pulls/19298,1162656235,2023-04-11T11:08:32Z,js/libs/keycloak-admin-client/package.json,"@@ -40,7 +40,8 @@     ""camelize-ts"": ""^2.3.0"",     ""lodash-es"": ""^4.17.21"",     ""url-join"": ""^5.0.0"",-    ""url-template"": ""^3.1.0""+    ""url-template"": ""^3.1.0"",+    ""undici"": ""^5.21.0""","@jonkoops I would do all the needed stuff, if I know, that the change will be merged. Our usecase is running api tests with playwright against the keycloak. But if this library usage is only for frontend, than I understand that this functionality is not needed and I will have to patch the lib on my side.Pls write me a short answer if my patch would be useful or it is not needed ;)",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/17577,1162700439,2023-04-11T11:54:19Z,services/src/main/java/org/keycloak/services/resources/admin/ClientResource.java,"@@ -790,6 +794,9 @@ private void updateAuthorizationSettings(ClientRepresentation rep) {      */     private UserSessionRepresentation toUserSessionRepresentation(final UserSessionModel userSession) {         UserSessionRepresentation rep = ModelToRepresentation.toRepresentation(userSession);+        if (rep == null) {","As mentioned before, the places where the session is being used expect valid sessions, bound to a user.If that is true. There is no reason to duplicate code (filtering by user not null) everywhere.@mposolda Could confirm if my assumption is correct or not...",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1162980422,2023-04-11T15:18:33Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/VaultKeystorePropertyMappers.java,"@@ -0,0 +1,32 @@+package org.keycloak.quarkus.runtime.configuration.mappers;++import org.keycloak.config.VaultOptions;++import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;++final class VaultKeystorePropertyMappers {++    private VaultKeystorePropertyMappers() {+    }++    public static PropertyMapper[] getVaultPropertyMappers() {+        return new PropertyMapper[] {+                fromOption(VaultOptions.VAULT)+                        .paramLabel(""provider"")+                        .build(),+                fromOption(VaultOptions.VAULT_FILE)+                        .to(""kc.spi-vault-keystore-file"")+                        .paramLabel(""file"")+                        .build(),+                fromOption(VaultOptions.VAULT_PASS)+                        .to(""kc.spi-vault-keystore-pass"")+                        .paramLabel(""pass"")+                        .build(),+                fromOption(VaultOptions.VAULT_TYPE)",I think we should use it to resolve the type depending on how FIPS is enabled too. See https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java#L146.,
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/19050,1163077652,2023-04-11T16:38:26Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java,"@@ -434,6 +428,64 @@ public List<UserModel> loadUsersByUsernames(List<String> usernames, RealmModel r         return result;     } +    /**+     * Searches LDAP using logical conjunction of params. It supports +     * <ul>+     *     <li>{@link UserModel#FIRST_NAME}</li>+     *     <li>{@link UserModel#LAST_NAME}</li>+     *     <li>{@link UserModel#EMAIL}</li>+     *     <li>{@link UserModel#USERNAME}</li>+     * </ul>+     * +     * For zero or any other param it returns all users.+     */+    private List<LDAPObject> searchLDAPByAttributes(RealmModel realm, Map<String, String> attributes) {++        if (attributes.containsKey(UserModel.USERNAME) || +            attributes.containsKey(UserModel.EMAIL) || +            attributes.containsKey(UserModel.FIRST_NAME) || +            attributes.containsKey(UserModel.LAST_NAME)) {++            try (LDAPQuery ldapQuery = LDAPUtils.createQueryForUserSearch(this, realm)) {+                LDAPQueryConditionsBuilder conditionsBuilder = new LDAPQueryConditionsBuilder();++                // Mapper should replace parameter with correct LDAP mapped attributes+                if (attributes.containsKey(UserModel.USERNAME)) {+                    ldapQuery.addWhereCondition(conditionsBuilder.equal(UserModel.USERNAME, attributes.get(UserModel.USERNAME), EscapeStrategy.NON_ASCII_CHARS_ONLY));+                }+                if (attributes.containsKey(UserModel.EMAIL)) {+                    ldapQuery.addWhereCondition(conditionsBuilder.equal(UserModel.EMAIL, attributes.get(UserModel.EMAIL), EscapeStrategy.NON_ASCII_CHARS_ONLY));+                }+                if (attributes.containsKey(UserModel.FIRST_NAME)) {+                    ldapQuery.addWhereCondition(conditionsBuilder.equal(UserModel.FIRST_NAME, attributes.get(UserModel.FIRST_NAME), EscapeStrategy.NON_ASCII_CHARS_ONLY));+                }+                if (attributes.containsKey(UserModel.LAST_NAME)) {+                    ldapQuery.addWhereCondition(conditionsBuilder.equal(UserModel.LAST_NAME, attributes.get(UserModel.LAST_NAME), EscapeStrategy.NON_ASCII_CHARS_ONLY));+                }++                return ldapQuery.getResultList();+            }++        } else {+            // for all other searchable fields: Ignoring is the fallback option, since it may overestimate the results but does not ignore matches.+            // for empty params: all users are returned+            try (LDAPQuery ldapQuery = LDAPUtils.createQueryForUserSearch(this, realm)) {+                return ldapQuery.getResultList();","Thank you @mposolda, @mhajas!Current behavior seems to be following:- when federated provider is registered within realm and `Users` tab is accessed in admin console there is following message displayed: `This realm may have a federated provider. Viewing all users may cause the system to slow down, but it can be done by searching for ""*"". Please search for a user above.` and no query is performed. - LDAP import mode doesn't seem to have any affect whatsoever. So when searched for `*` users from LDAP are shown regardless of what the setting is- `Pagination` seems to a flag of the federation provider and it depends on LDAP server itself if the pagination is supported or not![Screenshot_2023-04-11_18-21-13](https://user-images.githubusercontent.com/1897897/231226655-23f5d8ae-3abe-4618-8c52-ee26d05fbcf7.png)- when `Pagination` config is set to true there has to be also set some positive limit for the query:https://github.com/keycloak/keycloak/blob/a08ffdd293b7e4334a92b4caa6b6003fd6a046e0/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java#L276-L280 When I search for usages of `LDAPQuery.setLimit()` I can see there is possibly non-zero limit set from  - `LDAPUtils.loadAllLDAPObjects`   - `LDAPStorageProviderFactory.syncImpl`None of the above seem to be used when querying by `searchForUsersStream` method.- Search in LDAP works only when searched for whole first name, last name, email or username. So e.g. if there is user with username `bwilson` and searched string is `bwils` the user is not found. From JPA such a user it's found and returned.cc @hmlnarik ",
7305571,mkrueger92,https://api.github.com/repos/keycloak/keycloak/pulls/17577,1163243418,2023-04-11T19:35:06Z,services/src/main/java/org/keycloak/services/resources/admin/ClientResource.java,"@@ -790,6 +794,9 @@ private void updateAuthorizationSettings(ClientRepresentation rep) {      */     private UserSessionRepresentation toUserSessionRepresentation(final UserSessionModel userSession) {         UserSessionRepresentation rep = ModelToRepresentation.toRepresentation(userSession);+        if (rep == null) {","And as I mentioned before, `session.users().getUserById(realm, entity.getUser())` may return `null` any time. As long as `org.keycloak.models.sessions.infinispan.UserSessionAdapter.getUser()` still calls `session.users().getUserById(realm, entity.getUser())` there is a chance that `getUser()` returns `null`. And this must be checked, regardless if it has been checked before. This function is called at `ModelToRepresentation.toRepresentation(UserSessionModel session)`.Also, in case the `InfinispanUserSessionProvider` checks the user for each element in the stream, this means that every time a lookup of the user is made (using a federated provider; LDAP, or a custom one, like in our case). And then again when the result is used, because `getUser()` makes the call again!This results in a lot of round-trips! Even from a performance point of view, I see this a bad design.In my opinion the first thing to be done is to define the expectations of the interfaces. Is there a design document somewhere?Please recall, I started this PR to fix some NPEs. This is still my goal. I do not want to redesign this whole thing. But with 150k+ concurrent sessions in our system I do not see that our infrastructure is pretty happy doubling the number of requests just because the check for a valid user is done deep down the stack. (Again, it needs to be done at every call of `session.users().getUserById(...)`!)",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/19645,1164008752,2023-04-12T11:39:16Z,docs/guides/server/importExport.adoc,"@@ -1,12 +1,25 @@ <#import ""/templates/guide.adoc"" as tmpl> <#import ""/templates/kc.adoc"" as kc>+<#import ""/templates/links.adoc"" as links>  <@tmpl.guide     title=""Importing and Exporting Realms""     summary=""An overview about how to import and export realms"">  In this guide, you are going to understand the different approaches for importing and exporting realms using JSON files. +== Providing options for database connection parameters++When using the `export` and the `import` commands below, Keycloak needs to know how to connect to the database where the information about realms, clients, users and other entities is stored.","I'm not sure if we need a section to explain how to use build options (E.g.: database).As part of the introduction, we could :```The `export` and `import` commands work very similarly to the `start` command except that it won't accept any incoming HTTP connection and once the export or importoperation is complete, the server will stop automatically. You are also able to use both build options and configuration options as per  <@links.server id=""configuration""/>.```",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/19667,1164065289,2023-04-12T12:30:31Z,docs/documentation/release_notes/topics/21_1_0.adoc,"@@ -0,0 +1,3 @@+= Old Account Console deprecated","The old account console has already been marked as deprecated, and should have been removed in Keycloak 19. See https://www.keycloak.org/2022/03/releases.htmlSo no need to include this.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/19645,1164200807,2023-04-12T14:13:26Z,quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.unix.approved.txt,"@@ -10,9 +10,27 @@ Options:  -h, --help           This help message. --help-all           This same help message but with additional options.+--optimized          Use this option to achieve an optimal startup time if you have previously+                       built a server image using the 'build' command.++Cache:","What I'm proposing is to:* Update the import/export profile (see https://github.com/keycloak/keycloak/blob/main/quarkus/runtime/src/main/resources/META-INF/keycloak.conf)* Remove cache options from CLI* Optionally, always resolve `cache=local` if running export/import. To avoid overriding this via other config sources.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17577,1164236859,2023-04-12T14:38:59Z,services/src/main/java/org/keycloak/services/resources/admin/ClientResource.java,"@@ -790,6 +794,9 @@ private void updateAuthorizationSettings(ClientRepresentation rep) {      */     private UserSessionRepresentation toUserSessionRepresentation(final UserSessionModel userSession) {         UserSessionRepresentation rep = ModelToRepresentation.toRepresentation(userSession);+        if (rep == null) {","I see both points.I agree that currently when `UserSessionProvider` returns some sessions, it doesn't check if user connected with the userSession exists. So we assume that it is responsibility of the caller to check if `userSession.getUser()` is null (and `userSession.getUser()` calls lookup of user in `UserProvider`).If we change this behaviour, that `UserSessionProvider` returns only sessions, where user was proved to exists. This has big advantage, that we won't need to check `if (userSession.getUser() == null)` on various places inside codebase, which would be very great. Basically all sessions returned by userSessionProvider would be guaranteed to be valid sessions with valid user.On the other hand, I am not sure about performance side-effect of this? As `UserSessionProvider` will need to verify existence of the user before the userSession is returned from `UserSessionProvider`. However performance side-effects may not be that big because we use Stream API?I think it may be good to involve store team for this discussion.@hmlnarik any opinion?Should we just go with the changes in this PR (so verify nulls on the caller) and then consider whether we want to improve implementation of userSessionProvider itself? In that case, I think we should do it for both old and new store.",
61745358,lhanusov,https://api.github.com/repos/keycloak/keycloak/pulls/19362,1165438719,2023-04-13T12:17:21Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/example/hal/ConsoleProtectionTest.java,"@@ -124,6 +120,7 @@ public void testUserCanAccessAccountService() throws InterruptedException {         testLogin();         appServerWelcomePage.navigateToAccessControl();         appServerWelcomePage.navigateManageProfile();-        assertTrue(accountUpdateProfilePage.isCurrent());++        Assert.assertFalse(loginPage.isCurrent());","@Aboullos I think the best way to test it is to use the TestAppHelper class like in this test, but without logout:https://github.com/keycloak/keycloak/blob/074e2ec723cf55b8711b7e2660f21d99f96feb63/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/BackwardsCompatibilityUserStorageTest.java#L110-L117",
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/19642,1165618025,2023-04-13T14:32:02Z,operator/src/main/resources/application.properties,"@@ -1,5 +1,5 @@ quarkus.operator-sdk.crd.apply=true-quarkus.container-image.builder=jib+quarkus.container-image.builder=docker quarkus.operator-sdk.crd.validate=false  # Operator config","I tried that, but the existence check for `src/main/docker` seems to be a separate to the Dockerfile path one. They might just have that option in case you want a different filename for your Dockerfile?The code is [here](https://github.com/quarkusio/quarkus/blob/3414e59da7d4340b98c0d85aa07637cefe88e520/extensions/container-image/container-image-docker/deployment/src/main/java/io/quarkus/container/image/docker/deployment/DockerProcessor.java#L434), I checked it to see if there was any way to bypass the error it throws, but it doesn't appear so.",
11198630,danielFesenmeyer,https://api.github.com/repos/keycloak/keycloak/pulls/17076,1165965065,2023-04-13T19:51:54Z,server-spi/src/main/java/org/keycloak/theme/Theme.java,"@@ -63,6 +64,19 @@ enum Type { LOGIN, ACCOUNT, ADMIN, EMAIL, WELCOME, COMMON };      */     Properties getMessages(String baseBundlename, Locale locale) throws IOException; +    /**+     * Retrieve localized messages from a message bundle named ""messages"".+     * <p>+     * Returns messages for all relevant locales grouped by locale. This is different from+     * {@link #getMessages(Locale)}, which returns already merged messages.+     * </p>+     * +     * @param locale The locale of the desired message bundle.+     * @return The localized messages from the bundle, grouped by locale.+     * @throws IOException If bundle can not be read.+     */+    Map<Locale, Properties> getGroupedMessages(Locale locale) throws IOException;","Thanks for the hint.Introduced a method Properties `getEnhancedMessages(RealmModel realm, Locale locale)` on the Theme interface and used it instead of `getGroupedMessage`. Makes the usage much simpler.However, I did not introduce a default implementation, because otherwise the Theme module (keycloak-server-spi) would need a dependency on keycloak-services (due to LocaleUtil). And that dependency would be circular.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/19718,1166838723,2023-04-14T13:29:56Z,docs/documentation/release_notes/topics/21_1_0.adoc,"@@ -9,3 +22,8 @@ The Account Console version 3 is now available as an experimental feature in Key ``` bin/kc.sh start-dev --features=account3 ```+","```suggestion= Changes to Keycloak Authorization Services support in Keycloak Java-based AdaptersAs part of the removal of the https://www.keycloak.org/2023/03/adapter-deprecation-update[deprecated] adapters, the Keycloak Policy Enforcer was extracted from the adapters code baseinto a separate dependency:<dependency>    <groupId>org.keycloak</groupId>    <artifactId>keycloak-policy-enforcer</artifactId>    <version>${version.keycloak}</version></dependency>By providing this dependency, we expect making it possible to integrate the policy enforcer with the Java stack of your preference.It also provides built-in support for enabling the policy enforcer to Jakarta applications protected with https://docs.wildfly.org/26/Admin_Guide.html#Elytron_OIDC_Client[Wildfly Elytron].For now, this dependency is not yet GA as we are still working on the quickstarts and documentation.This work should not impact existing applications using the deprecated adapters.```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19718,1166864818,2023-04-14T13:53:29Z,docs/documentation/release_notes/topics/21_1_0.adoc,"@@ -9,3 +22,25 @@ The Account Console version 3 is now available as an experimental feature in Key ``` bin/kc.sh start-dev --features=account3 ```+= Changes to Keycloak Authorization Services support in Keycloak Java-based Adapters++As part of the removal of the https://www.keycloak.org/2023/03/adapter-deprecation-update[deprecated] adapters, the Keycloak Policy Enforcer was extracted from the adapters code base+into a separate dependency:++<dependency>+    <groupId>org.keycloak</groupId>+    <artifactId>keycloak-policy-enforcer</artifactId>+    <version>${version.keycloak}</version>+</dependency>","I believe we can get some [syntax highlighting](https://docs.asciidoctor.org/asciidoctor/latest/syntax-highlighting/) with this as well:```suggestion[source,xml]----<dependency>    <groupId>org.keycloak</groupId>    <artifactId>keycloak-policy-enforcer</artifactId>    <version>${version.keycloak}</version></dependency>----```",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/19637,1168628484,2023-04-17T12:41:44Z,model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate19_0_0_DefaultPostLogoutRedirectUri.java,"@@ -17,32 +17,21 @@ package org.keycloak.connections.jpa.updater.liquibase.custom;  import liquibase.exception.CustomChangeException;-import liquibase.statement.core.InsertStatement;-import liquibase.structure.core.Table;--import java.sql.PreparedStatement;-import java.sql.ResultSet;+import liquibase.statement.core.RawSqlStatement;  public class JpaUpdate19_0_0_DefaultPostLogoutRedirectUri extends CustomKeycloakTask {      private static final String POST_LOGOUT_REDIRECT_URIS = ""post.logout.redirect.uris"";      @Override     protected void generateStatementsImpl() throws CustomChangeException {-        String sql = ""SELECT DISTINCT CLIENT_ID FROM "" + getTableName(""REDIRECT_URIS"");--        try (PreparedStatement statement = jdbcConnection.prepareStatement(sql); ResultSet rs = statement.executeQuery()) {-            while (rs.next()) {-                statements.add(-                        new InsertStatement(null, null, database.correctObjectName(""CLIENT_ATTRIBUTES"", Table.class))-                                .addColumnValue(""CLIENT_ID"", rs.getString(1))-                                .addColumnValue(""NAME"", POST_LOGOUT_REDIRECT_URIS)-                                .addColumnValue(""VALUE"", ""+"")-                );-            }-        } catch (Exception e) {-            throw new CustomChangeException(getTaskId() + "": Exception when extracting data from previous version"", e);-        }+        final String clientAttributesTable = getTableName(""CLIENT_ATTRIBUTES"");+        final String redirectUrisTable = getTableName(""REDIRECT_URIS"");+        statements.add(new RawSqlStatement(+                ""INSERT INTO "" + clientAttributesTable + "" (CLIENT_ID,NAME,VALUE) "" ++                ""SELECT DISTINCT CLIENT_ID, '"" + POST_LOGOUT_REDIRECT_URIS + ""', '+' FROM "" + redirectUrisTable + "" WHERE CLIENT_ID NOT IN "" ++                ""(SELECT CLIENT_ID FROM "" + clientAttributesTable + "" WHERE NAME = '"" + POST_LOGOUT_REDIRECT_URIS + ""')""",The intention of this command is correct.However the syntax may vary slightly per database vendor. Has this command been tried on all supported databases?,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/19748,1168642808,2023-04-17T12:52:56Z,services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java,"@@ -181,35 +179,26 @@ public AuthenticationSessionModel initialVerifyAuthSession() {          } -        // See if we are already authenticated and userSession with same ID exists.-        UserSessionModel userSession = authSessionManager.getUserSessionFromAuthCookie(realm);--        boolean authenticating = !CookieHelper.getCookieValue(session, AUTH_SESSION_ID).isEmpty();+        // Otherwise just try to restart from the cookie+        RootAuthenticationSessionModel existingRootAuthSession = authSessionManager.getCurrentRootAuthenticationSession(realm);+        response = restartAuthenticationSessionFromCookie(existingRootAuthSession); -        if (authenticating) {-            // if there is an auth session, make sure the user is not yet authenticated+        // if restart from cookie was not found check if the user is already authenticated+        if (response.getStatus() != Response.Status.FOUND.getStatusCode()) {","It looks more reliable than just checking the presence of auth cookie. However, I'll wait for @mposolda feedback to see if there is some corner case that we might be missing.It is not so nice to make the decision based on status code but I don't have a better idea other than refactoring more code and making the fix a bit more complex.",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/19637,1168655294,2023-04-17T12:59:49Z,model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate19_0_0_DefaultPostLogoutRedirectUri.java,"@@ -17,32 +17,21 @@ package org.keycloak.connections.jpa.updater.liquibase.custom;  import liquibase.exception.CustomChangeException;-import liquibase.statement.core.InsertStatement;-import liquibase.structure.core.Table;--import java.sql.PreparedStatement;-import java.sql.ResultSet;+import liquibase.statement.core.RawSqlStatement;  public class JpaUpdate19_0_0_DefaultPostLogoutRedirectUri extends CustomKeycloakTask {      private static final String POST_LOGOUT_REDIRECT_URIS = ""post.logout.redirect.uris"";      @Override     protected void generateStatementsImpl() throws CustomChangeException {-        String sql = ""SELECT DISTINCT CLIENT_ID FROM "" + getTableName(""REDIRECT_URIS"");--        try (PreparedStatement statement = jdbcConnection.prepareStatement(sql); ResultSet rs = statement.executeQuery()) {-            while (rs.next()) {-                statements.add(-                        new InsertStatement(null, null, database.correctObjectName(""CLIENT_ATTRIBUTES"", Table.class))-                                .addColumnValue(""CLIENT_ID"", rs.getString(1))-                                .addColumnValue(""NAME"", POST_LOGOUT_REDIRECT_URIS)-                                .addColumnValue(""VALUE"", ""+"")-                );-            }-        } catch (Exception e) {-            throw new CustomChangeException(getTaskId() + "": Exception when extracting data from previous version"", e);-        }+        final String clientAttributesTable = getTableName(""CLIENT_ATTRIBUTES"");+        final String redirectUrisTable = getTableName(""REDIRECT_URIS"");+        statements.add(new RawSqlStatement(+                ""INSERT INTO "" + clientAttributesTable + "" (CLIENT_ID,NAME,VALUE) "" ++                ""SELECT DISTINCT CLIENT_ID, '"" + POST_LOGOUT_REDIRECT_URIS + ""', '+' FROM "" + redirectUrisTable + "" WHERE CLIENT_ID NOT IN "" ++                ""(SELECT CLIENT_ID FROM "" + clientAttributesTable + "" WHERE NAME = '"" + POST_LOGOUT_REDIRECT_URIS + ""')""","@hmlnarik Not in all (I personally tested in H2, mariadb/mysql and postgresql), but I have checked there are similar SQLs in other upgrade classes like [here](https://github.com/keycloak/keycloak/blob/21.0.2/model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate13_0_0_MigrateDefaultRoles.java#L68-L71). I can check in MSSQL too but I cannot test in Oracle (but I'm almost sure this is going to work in both of them).",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/19050,1169724617,2023-04-18T08:59:40Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java,"@@ -858,4 +967,38 @@ public LDAPObject loadLDAPUserByUuid(RealmModel realm, String uuid) {         }     } +    private List<LDAPObject> paginatedSearchLDAP(LDAPQuery ldapQuery, Integer firstResult, Integer maxResults) {+        List<LDAPObject> ldapObjects;+        LDAPConfig ldapConfig = ldapQuery.getLdapProvider().getLdapIdentityStore().getConfig();+        if (ldapConfig.isPagination() && maxResults != null && maxResults > 0) {+            ldapObjects = new LinkedList<>();+            boolean nextPage = true;+            while (nextPage) {+                ldapQuery.setLimit(maxResults);+                if (firstResult != null) ldapQuery.setOffset(firstResult);","This is a little bit suspicious that we are setting the same `firstResult` and `limit` in this loop.Loading by pages, for example [here](https://github.com/keycloak/keycloak/blob/main/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java#L285-L300) is done in the way:I want to load all objects, but I don't want to load all at once but split the result by pages, so if the LDAP contains 100 users and the page size is equal to 20, we will do 5 requests to LDAP loading by 20.In the code above we need to load, for example, 10 users but skip the first 30. So we can set the page size to 10 and offset to 30, in this case, we should need no loop because the page is set to 10 and we don't want to load any other page.On the other hand, if the pagination is set to something big, it could make sense to use paging for loading the result, however, then we need to somehow decrease the limit when some amount of users is already loaded. For example, if `maxResult` is set to 56 and we want the page size to be 20, we need to do 3 requests with limits set to 20, 20 and 16. Not sure about the `firstResult` though, whether it is handled automatically, or we need to set it to 0, 20, 40.Sorry if I misunderstood how the paging works with LDAP, maybe we can create some tests in model testsuite to make sure we understand it correctly, WDYT? ",x
43821672,michalvavrik,https://api.github.com/repos/keycloak/keycloak/pulls/17383,1169954597,2023-04-18T12:23:16Z,authz/policy-enforcer/src/main/java/org/keycloak/adapters/authorization/PathConfigMatcher.java,"@@ -65,6 +65,20 @@ public class PathConfigMatcher extends PathMatcher<PathConfig> {         }     } +    public boolean isEnforcementDisabled(String targetUri) {+        PathConfig pathConfig = pathCache.get(targetUri);++        if (pathConfig == null && !pathCache.containsKey(targetUri)) {","`pathCache.containsKey(targetUri)` can be true even when `pathConfig == null` because even cases when path config wasn't found (`matches` does same check, `org.keycloak.adapters.authorization.PathCache#put`). Just by reading code, I guess this situation may happen when even any path config isn't matched (that's what code allows, not sure if application logic too).Therefore this condition can be useful to avoid matching when we already know it won't be successful.",x
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/19637,1170080917,2023-04-18T13:56:05Z,model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate19_0_0_DefaultPostLogoutRedirectUri.java,"@@ -17,32 +17,21 @@ package org.keycloak.connections.jpa.updater.liquibase.custom;  import liquibase.exception.CustomChangeException;-import liquibase.statement.core.InsertStatement;-import liquibase.structure.core.Table;--import java.sql.PreparedStatement;-import java.sql.ResultSet;+import liquibase.statement.core.RawSqlStatement;  public class JpaUpdate19_0_0_DefaultPostLogoutRedirectUri extends CustomKeycloakTask {      private static final String POST_LOGOUT_REDIRECT_URIS = ""post.logout.redirect.uris"";      @Override     protected void generateStatementsImpl() throws CustomChangeException {-        String sql = ""SELECT DISTINCT CLIENT_ID FROM "" + getTableName(""REDIRECT_URIS"");--        try (PreparedStatement statement = jdbcConnection.prepareStatement(sql); ResultSet rs = statement.executeQuery()) {-            while (rs.next()) {-                statements.add(-                        new InsertStatement(null, null, database.correctObjectName(""CLIENT_ATTRIBUTES"", Table.class))-                                .addColumnValue(""CLIENT_ID"", rs.getString(1))-                                .addColumnValue(""NAME"", POST_LOGOUT_REDIRECT_URIS)-                                .addColumnValue(""VALUE"", ""+"")-                );-            }-        } catch (Exception e) {-            throw new CustomChangeException(getTaskId() + "": Exception when extracting data from previous version"", e);-        }+        final String clientAttributesTable = getTableName(""CLIENT_ATTRIBUTES"");+        final String redirectUrisTable = getTableName(""REDIRECT_URIS"");+        statements.add(new RawSqlStatement(+                ""INSERT INTO "" + clientAttributesTable + "" (CLIENT_ID,NAME,VALUE) "" ++                ""SELECT DISTINCT CLIENT_ID, '"" + POST_LOGOUT_REDIRECT_URIS + ""', '+' FROM "" + redirectUrisTable + "" WHERE CLIENT_ID NOT IN "" ++                ""(SELECT CLIENT_ID FROM "" + clientAttributesTable + "" WHERE NAME = '"" + POST_LOGOUT_REDIRECT_URIS + ""')""","OK, Oracle tested manually and it works too! The query works for all the supported databases.@mposolda Yeah! I tried to test the migration tests as explained in [this link](https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#migration-test). But, as we commented the previous week in the meeting, it does not work. Besides I could perform the tests doing a hack and it did not test this problem either. IMHO the migration tests need a full rethink. I didn't want to do it for this little PR.Let me know what you think. :smile: ",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/19050,1171391939,2023-04-19T14:00:54Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java,"@@ -450,12 +523,20 @@ protected List<LDAPObject> searchLDAP(RealmModel realm, Map<String, String> attr                 Condition usernameCondition = conditionsBuilder.equal(UserModel.USERNAME, attributes.get(UserModel.USERNAME), EscapeStrategy.NON_ASCII_CHARS_ONLY);                 ldapQuery.addWhereCondition(usernameCondition); -                List<LDAPObject> ldapObjects = ldapQuery.getResultList();+                //need to handle offset manually as there has to be results collected first due to possible duplicate resutls from different fields+                List<LDAPObject> ldapObjects = paginatedSearchLDAP(ldapQuery, null, ldapMaxResult);+                                 results.addAll(ldapObjects);                 unique.addAll(ldapObjects);             }         } +        // if ldapMaxResult == null -> no pagination+        // if result has already enough values return+        if (ldapMaxResult != null && ldapMaxResult.compareTo(results.size()) <= 0) {+            return paginateResults(results, firstResult, maxResults);+        }","Theoretically it might be decreased. I'd say not exactly `ldapMaxResults` because it determines that there is collected enough objects to cover also for offset, but for this call https://github.com/keycloak/keycloak/pull/19050/files#diff-bb4ffa08fae23dc22710d174b81fadf5028b58a8742d9fba4035a2c916e92982R549 it might. But I decided not to due to a fact that some results could be duplicated in the results and it may lead to a situation when it ends up with less objects than required. ",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/19050,1171400600,2023-04-19T14:07:11Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java,"@@ -450,12 +523,20 @@ protected List<LDAPObject> searchLDAP(RealmModel realm, Map<String, String> attr                 Condition usernameCondition = conditionsBuilder.equal(UserModel.USERNAME, attributes.get(UserModel.USERNAME), EscapeStrategy.NON_ASCII_CHARS_ONLY);                 ldapQuery.addWhereCondition(usernameCondition); -                List<LDAPObject> ldapObjects = ldapQuery.getResultList();+                //need to handle offset manually as there has to be results collected first due to possible duplicate resutls from different fields+                List<LDAPObject> ldapObjects = paginatedSearchLDAP(ldapQuery, null, ldapMaxResult);+                                 results.addAll(ldapObjects);                 unique.addAll(ldapObjects);             }         } +        // if ldapMaxResult == null -> no pagination+        // if result has already enough values return+        if (ldapMaxResult != null && ldapMaxResult.compareTo(results.size()) <= 0) {+            return paginateResults(results, firstResult, maxResults);","Yes, I've had the `Stream` returned in one of my previous version, then I decided to switch it back due to a fact that it required concatenation of Streams from different calls (line 383) and more complex handling of `firstResult` and `maxResult` (as it's not easy to determine number of elements in the stream - line 380). But I may be missing something. ",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19760,1171529757,2023-04-19T15:40:45Z,.github/workflows/ci.yml,"@@ -101,11 +101,10 @@ jobs:         uses: ./.github/actions/integration-test-setup        - name: Run base tests-        # Temporarily use app-server-wildfly instead of Undertow         run: |           TESTS=`testsuite/integration-arquillian/tests/base/testsuites/base-suite.sh ${{ matrix.group }}`           echo ""Tests: $TESTS""-          ./mvnw test -Dsurefire.rerunFailingTestsCount=${{ env.SUREFIRE_RERUN_FAILING_COUNT }} -nsu -B -Pauth-server-quarkus,app-server-wildfly -Dtest=$TESTS -pl testsuite/integration-arquillian/tests/base | misc/log/trimmer.sh+          ./mvnw test -Dsurefire.rerunFailingTestsCount=${{ env.SUREFIRE_RERUN_FAILING_COUNT }} -nsu -B -Pauth-server-quarkus -Dtest=$TESTS -pl testsuite/integration-arquillian/tests/base | misc/log/trimmer.sh",👍  for resolving this tech debt,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19760,1171532117,2023-04-19T15:42:38Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/example/cors/CorsExampleAdapterTest.java,"@@ -75,21 +73,21 @@ public class CorsExampleAdapterTest extends AbstractExampleAdapterTest {     @ArquillianResource     private Deployer deployer; -    // Javascript browser needed KEYCLOAK-4703+    // Javascript browser needed, but not PhantomJS     @Drone-    @JavascriptBrowser+    @ChromeJavascriptBrowser     protected WebDriver jsDriver;      @Page-    @JavascriptBrowser+    @ChromeJavascriptBrowser     protected OIDCLogin jsDriverTestRealmLoginPage;      @Page-    @JavascriptBrowser+    @ChromeJavascriptBrowser     private AngularCorsProductTestApp jsDriverAngularCorsProductPage;      @Page-    @JavascriptBrowser+    @ChromeJavascriptBrowser","Just out of curiosity. I know we were planning to do this for a long time now, but why to do it now? :) Is PhantomJS more unstable now with Quarkus 3?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19810,1171548316,2023-04-19T15:55:46Z,js/apps/admin-ui/src/realm-settings/EmailTab.tsx,"@@ -66,21 +68,6 @@ export const RealmSettingsEmailTab = ({     defaultValue: """",   }); -  const save = async (form: RealmRepresentation) => {-    try {-      const savedRealm = { ...realm, ...form };--      // For default value, back end is expecting null instead of empty string-      if (savedRealm.smtpServer?.port === """") savedRealm.smtpServer.port = null;--      await adminClient.realms.update({ realm: realmName }, savedRealm);-      setRealm(savedRealm);","Looks like this is the only place `setRealm` was called, so it's no longer needed to keep it in a separate state. CAn you remove the `setState()` call that this originates from?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19804,1171555351,2023-04-19T16:01:19Z,js/libs/keycloak-masthead/src/Masthead.tsx,"@@ -12,6 +12,7 @@ import { } from ""@patternfly/react-core""; import Keycloak from ""keycloak-js""; import { ReactNode } from ""react"";+import imgAvatar from ""@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg"";","Hmmm, I don't know if this kind of import is a good idea. I doubt the 'examples' directory is meant for production use. Is this not available as a regular PatternFly component?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19804,1171556273,2023-04-19T16:02:06Z,js/libs/keycloak-masthead/package.json,"@@ -53,6 +53,7 @@     ""rollup-plugin-peer-deps-external"": ""^2.2.4"",     ""vite"": ""^4.2.2"",     ""vite-plugin-checker"": ""^0.5.6"",-    ""vite-plugin-dts"": ""^2.3.0""+    ""vite-plugin-dts"": ""^2.3.0"",+    ""vite-plugin-svgr"": ""^2.4.0""",Do we really need to add a plugin to do SVGs? I'd rather we use one of the pre-defined components from PatternFly.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19799,1171571127,2023-04-19T16:14:26Z,js/apps/account-ui/src/root/Root.tsx,"@@ -13,11 +13,28 @@ import { environment } from ""../environment""; import { keycloak } from ""../keycloak""; import { joinPath } from ""../utils/joinPath""; import { PageNav } from ""./PageNav"";+import { ExternalLinkAltIcon } from ""@patternfly/react-icons"";  import style from ""./Root.module.css""; +const ReferrerLink = () => {+  const { t } = useTranslation();+  const searchParams = new URLSearchParams(location.search);++  return searchParams.has(""referrer_uri"") ? (+    <a","I think this could be a PatternFly component instead, if you combine the [link variants](https://www.patternfly.org/v4/components/button#variant-examples) and [link as buttons](https://www.patternfly.org/v4/components/button#links-as-buttons) examples of the button component.Something like:```tsx<Button component=""a"" href={href} variant=""link"" icon={<ExternalLinkSquareAltIcon />} iconPosition=""right"" isInline>  {t(""backTo"", { app: searchParams.get(""referrer"") })}</Button>```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19594,1172567038,2023-04-20T13:11:15Z,js/apps/admin-ui/src/clients/authorization/policy/PolicyDetails.tsx,"@@ -164,9 +172,12 @@ export default function PolicyDetails() {     return <KeycloakSpinner />;   } -  const ComponentType = isValidComponentType(policyType)-    ? COMPONENTS[policyType]-    : COMPONENTS[""js""];+  let ComponentType = COMPONENTS[""js-disabled""];+  if (!IsDisabled) {+    ComponentType = isValidComponentType(policyType)+      ? COMPONENTS[policyType]+      : COMPONENTS[""js""];+  }","This seems to be getting a bit messy, perhaps we can extract this into a separate function so we can use an eager return pattern? For example:```tsfunction getComponentType(policyType: string, isDisabled: boolean) {  if (isDisabled) {    return COMPONENTS[""js-disabled""];  }  return isValidComponentType(policyType)    ? COMPONENTS[policyType]    : COMPONENTS[""js""];}```",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/17577,1173758036,2023-04-21T13:18:55Z,services/src/main/java/org/keycloak/services/resources/admin/ClientResource.java,"@@ -790,6 +794,9 @@ private void updateAuthorizationSettings(ClientRepresentation rep) {      */     private UserSessionRepresentation toUserSessionRepresentation(final UserSessionModel userSession) {         UserSessionRepresentation rep = ModelToRepresentation.toRepresentation(userSession);+        if (rep == null) {","Hello all, this is a tough decision to make. We had a call with @hmlnarik around this and we believe this needs to be considered case by case. In general, moving such integrity checks to the storage makes sense. It results in cleaner logical layer code as well as performance gain as we stop the processing for invalid entities sooner in the process chain. However, the latter doesn't need to be true in all cases. For example, if we will check all parent groups when obtaining a group from storage we can end up with a huge performance impact. For this specific use-case, I would lean towards the suggestion from @pedroigor and @mposolda. Sessions for not existing users are invalid and in a perfect world, they would be invisible to Keycloak (for example, if everything would be stored in one database, the sessions would be removed as part of some cascade removal). In cases such as this, where the user was removed from an external system we need to do our best to find this out as soon as possible and therefore I would add this check to the storage. Similarly, we are doing this for client sessions:https://github.com/keycloak/keycloak/blob/4f8d67c9fcbc1a50976128584369d9a1a9077ca2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/UserSessionAdapter.java#L110-L126Note: to avoid loading the user again and again from the LDAP, we can change the `getUser` getter to something like:```javapublic UserModel getUser() {    if (this.user == null) {        this.user = session.users().getUserById(realm, entity.getUser());    }    return this.user;}```CC: @hmlnarik ",
88367583,kaustubh-rh,https://api.github.com/repos/keycloak/keycloak/pulls/19594,1173825665,2023-04-21T14:18:46Z,js/apps/admin-ui/src/clients/authorization/policy/PolicyDetails.tsx,"@@ -101,6 +104,11 @@ export default function PolicyDetails() {     ({ policy, policies }) => {       reset({ ...policy, policies });       setPolicy(policy);+      if (policy !== undefined) {+        if (policy.name === ""Default Policy"") {","I think it originates from [ResourceServerService.java](https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/authorization/admin/ResourceServerService.java#L181)As it's hardcoded, I think, it should not be an issue.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19594,1173990277,2023-04-21T16:59:02Z,js/apps/admin-ui/src/clients/authorization/policy/PolicyDetails.tsx,"@@ -164,9 +167,17 @@ export default function PolicyDetails() {     return <KeycloakSpinner />;   } -  const ComponentType = isValidComponentType(policyType)-    ? COMPONENTS[policyType]-    : COMPONENTS[""js""];+  function getComponentType() {+    if (isDisabled) {+      return COMPONENTS[""js-disabled""];","I was thinking, rather than handling `js-disable` as an edge case like this. Perhaps we should add a `isDisabled` prop to the `COMPONENTS`? That way we can re-use the existing `JavaScript` component.",
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/19837,1174144524,2023-04-21T20:35:02Z,rest/admin-ui-ext/src/main/java/org/keycloak/admin/ui/rest/model/SessionRepresentation.java,"@@ -79,5 +80,18 @@ public Map<String, String> getClients() {     public void setClients(Map<String, String> clients) {         this.clients = clients;     }++    @Override+    public boolean equals(Object o) {+        if (this == o) return true;+        if (o == null || getClass() != o.getClass()) return false;","Joshua Bloch recommends to use `instanceof` instead of `getClass()` here.  That way, this method will still work if the class hierarchy changes.  (I always pull out my copy of Effective Java whenever I have to do this).",
88367583,kaustubh-rh,https://api.github.com/repos/keycloak/keycloak/pulls/19594,1174250355,2023-04-22T01:54:56Z,js/apps/admin-ui/src/clients/authorization/policy/PolicyDetails.tsx,"@@ -164,9 +167,17 @@ export default function PolicyDetails() {     return <KeycloakSpinner />;   } -  const ComponentType = isValidComponentType(policyType)-    ? COMPONENTS[policyType]-    : COMPONENTS[""js""];+  function getComponentType() {+    if (isDisabled) {+      return COMPONENTS[""js-disabled""];","Hi @jonkoops , we are just checking the above edge case in the `getComponentType() `function to assign a ComponentType . For other components like `NameDescription`,`LogicSelector` and `Button` we are passing `isDisabled` as a prop.",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/19861,1174917374,2023-04-24T07:57:18Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/SamlEncryptionTest.java,,"@mhajas Yep, you are right. I have moved the test to `services/src/test/java/org/keycloak/protocol/saml/SamlEncryptionTest.java`. It needs to be in `services` and not in `saml-core` because it needs classes on that sub-project and its dependencies.",
88367583,kaustubh-rh,https://api.github.com/repos/keycloak/keycloak/pulls/19594,1175116905,2023-04-24T10:53:27Z,js/apps/admin-ui/src/clients/authorization/policy/PolicyDetails.tsx,"@@ -164,9 +167,17 @@ export default function PolicyDetails() {     return <KeycloakSpinner />;   } -  const ComponentType = isValidComponentType(policyType)-    ? COMPONENTS[policyType]-    : COMPONENTS[""js""];+  function getComponentType() {+    if (isDisabled) {+      return COMPONENTS[""js-disabled""];","@jonkoops @ssilvert If we disable the JS component, then the user will not have the possibility to create a new JS based policy as the input box will always be disabled. As of `js` points to the `JavaScript` component and `js-disabled` points to the `JavaScriptDisabled` component which it seems to be working fine.",
61745358,lhanusov,https://api.github.com/repos/keycloak/keycloak/pulls/19815,1175132122,2023-04-24T11:09:36Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/AudienceTest.java,"@@ -74,7 +74,7 @@ public void configureTestRealm(RealmRepresentation testRealm) {          // Create sample user         UserRepresentation user = UserBuilder.create()-                .id(userId)+                .id(KeycloakModelUtils.generateId())",@hmlnarik Does this line differ then in the class: ResourceOwnerPasswordCredentialsGrantTest.java that id is not deleted but rather generated?,x
61745358,lhanusov,https://api.github.com/repos/keycloak/keycloak/pulls/19815,1175132584,2023-04-24T11:10:05Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/OIDCDynamicScopeTest.java,"@@ -55,13 +55,13 @@ @EnableFeature(value = Profile.Feature.DYNAMIC_SCOPES, skipRestart = true) public class OIDCDynamicScopeTest extends OIDCScopeTest { -    private static String userId = KeycloakModelUtils.generateId();+    private static String userId;      @Override     public void configureTestRealm(RealmRepresentation testRealm) {         super.configureTestRealm(testRealm);         UserRepresentation user = UserBuilder.create()-                .id(userId)+                .id(KeycloakModelUtils.generateId())",@hmlnarik Does this line differ then in the class: ResourceOwnerPasswordCredentialsGrantTest.java that id is not deleted but rather generated?,x
61745358,lhanusov,https://api.github.com/repos/keycloak/keycloak/pulls/19815,1175132825,2023-04-24T11:10:20Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/OIDCScopeTest.java,"@@ -68,12 +68,12 @@  */ public class OIDCScopeTest extends AbstractOIDCScopeTest { -    private static String userId = KeycloakModelUtils.generateId();+    private static String userId;      @Override     public void configureTestRealm(RealmRepresentation testRealm) {         UserRepresentation user = UserBuilder.create()-                .id(userId)+                .id(KeycloakModelUtils.generateId())",Does this line differ then in the class: ResourceOwnerPasswordCredentialsGrantTest.java that id is not deleted but rather generated?,x
51133,edewit,https://api.github.com/repos/keycloak/keycloak/pulls/19837,1175327255,2023-04-24T13:57:50Z,rest/admin-ui-ext/src/main/java/org/keycloak/admin/ui/rest/model/SessionRepresentation.java,"@@ -79,5 +80,18 @@ public Map<String, String> getClients() {     public void setClients(Map<String, String> clients) {         this.clients = clients;     }++    @Override+    public boolean equals(Object o) {+        if (this == o) return true;+        if (o == null || getClass() != o.getClass()) return false;",Well if it's not the same class it's not the same imo,
55846193,sjweixel,https://api.github.com/repos/keycloak/keycloak/pulls/17230,1175989690,2023-04-25T04:18:19Z,services/src/main/java/org/keycloak/services/managers/ApplianceBootstrap.java,"@@ -95,9 +95,15 @@ public boolean createMasterRealm() {     public void createMasterRealmUser(String username, String password) {         RealmModel realm = session.realms().getRealmByName(Config.getAdminRealm());         session.getContext().setRealm(realm);--        if (session.users().getUsersCount(realm) > 0) {","My PR was indented for issue #16961, which was closed as a duplicate of #15789 at the time the PR was created.  Issue #16961 has since been reopened and I will move my PR to that issue.  ENV vars should create an admin specified even if another admin exists.  It is the only way to recover if new admin deletes the initial admin account/revokes the initial user's admin role or if the initial admin username/password is somehow lost.   In older versions of Keycloak, the ENV would create a new admin user regardless of the existence of other admin users.   This was extremely helpful because it also made Keycloak recovery from backup database possible.  If a Keycloak instance is wiped out, but a database backup exists, you can recover without knowing initial admin credentials, because a new admin account could be created with ENVs.  I strongly believe there needs to be a way to create an admin account in the event that someone loses initial admin password.",x
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/19837,1176815898,2023-04-25T17:17:49Z,rest/admin-ui-ext/src/main/java/org/keycloak/admin/ui/rest/model/SessionRepresentation.java,"@@ -79,5 +80,18 @@ public Map<String, String> getClients() {     public void setClients(Map<String, String> clients) {         this.clients = clients;     }++    @Override+    public boolean equals(Object o) {+        if (this == o) return true;+        if (o == null || getClass() != o.getClass()) return false;","A distinct session is one that has the same start, userId, and type.  Let's say someone decides we need FooSessionRepresentation and BarSessionRepresentation that both extend SessionRepresentation:```FooSessionRepresentation extends SessionRepresentation {}BarSessionRepresentation extends SessionRepresentation {}```Now we would be back to having the same problem as in the issue.  There would be a possibility of duplicates with the same start, userId, and type.  They would differ only by class instance, but are really two representations of the same session. So how do you fix this problem?  Just override and call super();```FooSessionRepresentation extends SessionRepresentation {   @Override    public boolean equals(Object o) {         return super.equals(o);    }   @Override    public int hashCode() {        return super.hashCode();    }}```But with `getClass()`, `super.equals(o)` doesn't work.  `FooSessionRepresentation` and `BarSessionRepresentation` would not be considered equal, even though they are just two representations of the same session.  Nobody would notice the problem and we've just reintroduced the original bug.  With `instanceof`, it does work because both are an instance of `SessionRepresentation`.It's a pretty esoteric point.  But this is why Bloch recommends `instanceof`.  I think `instanceof` is slightly more correct.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19922,1177692447,2023-04-26T10:41:38Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/BuildAndStartDistTest.java,"@@ -63,4 +67,30 @@ void testBuildAndStart(KeycloakDistribution dist) {         cliResult.assertBuild();         cliResult.assertStarted();     }++    @Test+    @WithEnvVars({""KEYCLOAK_ADMIN"", ""admin123"", ""KEYCLOAK_ADMIN_PASSWORD"", ""admin123""})+    @Launch({""start-dev""})+    void testCreateAdmin(KeycloakDistribution dist, LaunchResult result) {+        assertAdminCreation(dist, result, ""admin123"", ""admin123"", ""admin123"");+    }++    @Test+    @WithEnvVars({""KEYCLOAK_ADMIN"", ""admin123"", ""KEYCLOAK_ADMIN_PASSWORD"", ""admin123""})+    @Launch({""start-dev""})+    void testCreateDifferentAdmin(KeycloakDistribution dist, LaunchResult result) {+        assertAdminCreation(dist, result, ""admin123"", ""new-admin"", ""new-admin"");+    }++    private void assertAdminCreation(KeycloakDistribution dist, LaunchResult result, String initialUsername, String nextUsername, String password) {+        assertTrue(result.getOutput().contains(""Added user '"" + initialUsername + ""' to realm 'master'""),+                () -> ""The Output:\n"" + result.getOutput() + ""doesn't contains the expected string."");++        dist.setEnvVar(""KEYCLOAK_ADMIN"", nextUsername);+        dist.setEnvVar(""KEYCLOAK_ADMIN_PASSWORD"", password);+        CLIResult cliResult = dist.run(""start-dev"", ""--log-level=debug"");++        cliResult.assertMessage(""Skipping create admin user. Admin already exists in realm 'master'."");+        cliResult.assertStartedDevMode();+    }","I think we might want to create a new test class for this as admin user tests don't really fit here. This test class is excluded from container tests, but there's no reason not to test initial admin creation with container, on the contrary. WDYT?",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20011,1180015163,2023-04-28T07:12:36Z,operator/pom.xml,"@@ -31,8 +31,8 @@         <maven.compiler.target>11</maven.compiler.target>         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>-        <quarkus.operator.sdk.version>6.0.0.CR1</quarkus.operator.sdk.version>-        <quarkus.version>3.0.0.CR1</quarkus.version>+        <quarkus.operator.sdk.version>6.0.1</quarkus.operator.sdk.version>+        <quarkus.version>3.0.1.Final</quarkus.version>",Operator SDK 6.0.1 [uses](https://github.com/quarkiverse/quarkus-operator-sdk/blob/6.0.1/pom.xml#L15) Quarkus 3.0.0.  This property is not overriding the Quarkus version that SDK uses. It is just for alignment of other dependencies so it needs to match whatever the SDK uses.```suggestion        <quarkus.version>3.0.0.Final</quarkus.version>```,
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/20011,1180488622,2023-04-28T14:32:49Z,pom.xml,"@@ -635,6 +623,11 @@                 <artifactId>jakarta.persistence-api</artifactId>                 <version>${jakarta.persistence.version}</version>             </dependency>+            <dependency>+                <groupId>jakarta.servlet</groupId>+                <artifactId>jakarta.servlet-api</artifactId>+                <version>${jakarta.servlet.jakarta-servlet-api.version}</version>+            </dependency>","@vmuzikar no need to be sorry, that's probably a bad conflict resolution from me. Let me look into this, and update the PR.",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/8895,1181292435,2023-04-30T20:47:07Z,services/src/main/java/org/keycloak/protocol/oidc/TokenManager.java,"@@ -391,26 +394,15 @@ public AccessTokenResponseBuilder refreshAccessToken(KeycloakSession session, Ur          AccessTokenResponseBuilder responseBuilder = responseBuilder(realm, authorizedClient, event, session,             validation.userSession, validation.clientSessionCtx).accessToken(validation.newToken);-        if (OIDCAdvancedConfigWrapper.fromClientModel(authorizedClient).isUseRefreshToken()) {+        if (clientConfig.isUseRefreshToken()) {             responseBuilder.generateRefreshToken();         }          if (validation.newToken.getAuthorization() != null-            && OIDCAdvancedConfigWrapper.fromClientModel(authorizedClient).isUseRefreshToken()) {+            && clientConfig.isUseRefreshToken()) {             responseBuilder.getRefreshToken().setAuthorization(validation.newToken.getAuthorization());         } -        // KEYCLOAK-6771 Certificate Bound Token","Instead of binding tokens with a certificate by OAuth MTLS or a public key by DPoP in `TokenEndpoint#refreshTokenGrant` where you added codes, it is better to do it here as usual.In `TokenEndpoint#refreshTokenGrant`, your adding method `checkMtlsHoKToken` is called. `checkMtlsHoKToken` looks up a certificate chain. However, `TokenManager#verifyRefreshToken` does the same thing before `checkMtlsHoKToken` is called. The same thing is done twice.`TokenManager#verifyRefreshToken` checks a certificate chains, here only copy ""cnf"" claim from old token to refreshed token, which eliminates costs for looking up a certificate chain twice.As the same as in OAuth MTLS, it is good to copy ""cnf"" claim of old tokens to refreshed token  in the case of DPoP.- `TokenManager#verifyRefreshToken` checks binding in OAuth MTLS or DPoP by looking up a certificate chain or DPoP proof.- `TokenManager#refreshAccessToken` binds tokens in OAuth MTLS or DPoP by copying ""cnf"" claim from old tokens to refreshed tokens.",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/8895,1181293225,2023-04-30T20:53:44Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java,"@@ -536,6 +576,9 @@ public Response refreshTokenGrant() {              session.clientPolicy().triggerOnEvent(new TokenRefreshResponseContext(formParams, responseBuilder)); +            checkMtlsHoKToken(responseBuilder, clientConfig.isUseRefreshToken());","As mentioned as comments in `TokenManager`, it seems not appropriate to do token binding here for token refresh.- TokenManager#verifyRefreshToken checks binding in OAuth MTLS or DPoP by looking up a certificate chain or DPoP proof.- TokenManager#refreshAccessToken binds tokens in OAuth MTLS or DPoP by copying ""cnf"" claim from old tokens to refreshed tokens.",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/8895,1181294101,2023-04-30T21:00:39Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java,"@@ -321,7 +327,21 @@ private void checkParameterDuplicated() {         }     } +    private void checkDPoP() {","It is better that logic of `checkDPoP` be move to `checkDPoPToken` and eliminate `chackDPoP`. By doing so, the class field `private DPoP dPoP` is not needed.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20062,1181882231,2023-05-01T20:50:01Z,js/apps/admin-ui/src/user/UserCredentials.tsx,"@@ -329,6 +331,28 @@ export const UserCredentials = ({ user }: UserCredentialsProps) => {     }   }; +  const useFederatedCredentials = user.federationLink || user.origin;+  const [credentialTypes, setCredentialTypes] = useState<string[]>([]);++  if (useFederatedCredentials) {+    useFetch(",Hook functions are [not allowed](https://react.dev/warnings/invalid-hook-call-warning#breaking-rules-of-hooks) to be called conditionally.,x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20062,1182322135,2023-05-02T09:37:05Z,js/apps/admin-ui/src/user/UserCredentials.tsx,"@@ -329,6 +330,26 @@ export const UserCredentials = ({ user }: UserCredentialsProps) => {     }   }; +  const useFederatedCredentials = user.federationLink || user.origin;+  const [credentialTypes, setCredentialTypes] = useState<string[]>([]);++  useFetch(+    () => adminClient.users.getUserStorageCredentialTypes({ id: user.id! }),+    setCredentialTypes,+    []","It's not likely to change, but since this fetch passes the user's id it should be a dependency here.```suggestion    [user.id]```",
11198630,danielFesenmeyer,https://api.github.com/repos/keycloak/keycloak/pulls/17076,1182884983,2023-05-02T18:09:38Z,js/apps/admin-ui/src/i18n.ts,"@@ -8,10 +8,78 @@ import { getAuthorizationHeaders } from ""./utils/getAuthorizationHeaders""; import { addTrailingSlash } from ""./util"";  export const DEFAULT_LOCALE = ""en"";+const OVERRIDES_NS = ""overrides"";++/**+ * A ResourceResult can actually be of ANY type.+ */+type ResourceResult = any;++/**+ * Helper type to define internal operations of ResourceStore, which we have to access.+ */+interface ResourceStoreInternal extends ResourceStore {+  getResource(+    lng: string,+    ns: string,+    key?: string | string[],+    originalOptions?: Pick<InitOptions, ""keySeparator"" | ""ignoreJSONStructure"">+  ): ResourceResult;+}  export async function initI18n(adminClient: KeycloakAdminClient) {   const options = await initOptions(adminClient);   await init(options);++  addInterceptorForGetResource();+}++/**+ * Intercept the ""getResource"" function of the resource store, in order to apply the ""overrides"" from realm localization.+ *+ * An alternative would be to use a postProcessor, but to make that work, almost all the default processing logic+ * would need to be re-implemented here.+ * Several functionality cannot be easily supported with a postProcessor:+ * <ul>+ *     <li>The key might or might not contain the namespace, thus key parsing would need to be re-implemented.</li>+ *     <li>In case of plurals, the key will not contain the ""_one"" or ""_other"" suffix - would need to be re-implemented</li>+ *     <li>For the ""overrides"", interpolation (replacing placeholders) would need to be applied.</li>+ *     <li>Probably more ...</li>+ * </ul>+ */+function addInterceptorForGetResource() {","I also thought of implementing such a fallback, but from my POV it is not possible (at least without a bigger refactoring of i18next):As far as I understand, the Backend fallback works a bit different as one might expect. It just tries a different (fallback) locale/namespace URL, when the first one cannot be loaded at all (e.g. returns status 404). Hence, it does not work when some message keys are translated and some are not.",x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20081,1183018072,2023-05-02T20:26:12Z,docs/documentation/securing_apps/topics/oidc/javascript-adapter.adoc,"@@ -170,20 +128,16 @@ WARNING: Session Status iframe functionality is limited in some modern browsers. [[_javascript_implicit_flow]] ==== Implicit and hybrid flow -By default, the JavaScript adapter uses the https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code] flow.+By default, the adapter uses the https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code] flow. -With this flow the {project_name} server returns an authorization code, not an authentication token, to the application. The JavaScript adapter exchanges-the `code` for an access token and a refresh token after the browser is redirected back to the application.+With this flow the {project_name} server returns an authorization code, not an authentication token, to the application. The JavaScript adapter exchanges the `code` for an access token and a refresh token after the browser is redirected back to the application. -{project_name} also supports the https://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth[Implicit] flow where an access token-is sent immediately after successful authentication with {project_name}. This may have better performance than standard flow, as there is no additional-request to exchange the code for tokens, but it has implications when the access token expires.+{project_name} also supports the https://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth[Implicit] flow where an access token is sent immediately after successful authentication with {project_name}. This may have better performance than standard flow, as there is no additional request to exchange the code for tokens, but it has implications when the access token expires.  However, sending the access token in the URL fragment can be a security vulnerability. For example the token could be leaked through web server logs and or browser history. -To enable implicit flow, you need to enable the `Implicit Flow Enabled` flag for the client in the {project_name} Admin Console.-You also need to pass the parameter `flow` with value `implicit` to `init` method:+To enable implicit flow, you need to enable the `Implicit Flow Enabled` flag for the client in the {project_name} Admin Console. You also need to pass the parameter `flow` with value `implicit` to `init` method:","```suggestionTo enable implicit flow, you enable the *Implicit Flow Enabled* flag for the client in the {project_name} Admin Console. You also pass the parameter `flow` with the value `implicit` to `init` method:```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20081,1183029678,2023-05-02T20:40:12Z,docs/documentation/securing_apps/topics/oidc/javascript-adapter.adoc,"@@ -211,16 +161,15 @@ For the Hybrid flow, you need to pass the parameter `flow` with value `hybrid` t ---- keycloak.init({     flow: 'hybrid'-})+}); ----  [#hybrid-apps-with-cordova] ==== Hybrid Apps with Cordova -Keycloak support hybrid mobile apps developed with https://cordova.apache.org/[Apache Cordova]. The JavaScript adapter has two modes for this: `cordova` and `cordova-native`:+Keycloak support hybrid mobile apps developed with https://cordova.apache.org/[Apache Cordova]. The adapter has two modes for this: `cordova` and `cordova-native`: -The default is cordova, which the adapter will automatically select if no adapter type has been configured and window.cordova is present.-When logging in, it will open an https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/[InApp Browser] that lets the user interact with {project_name} and afterwards returns to the app by redirecting to `http://localhost`. Because of this, you must whitelist this URL as a valid redirect-uri in the client configuration section of the Admin Console.+The default is `cordova`, which the adapter will automatically select if no adapter type has been explicitly configured and `window.cordova` is present. When logging in, it will open an https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/[InApp Browser] that lets the user interact with {project_name} and afterwards returns to the app by redirecting to `http://localhost`. Because of this, you must whitelist this URL as a valid redirect-uri in the client configuration section of the Admin Console.","```suggestionThe default is `cordova`, which the adapter automatically selects if no adapter type has been explicitly configured and `window.cordova` is present. When logging in, it opens an https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/[InApp Browser] that lets the user interact with {project_name} and afterwards returns to the app by redirecting to `http://localhost`. Because of this behavior, you whitelist this URL as a valid redirect-uri in the client configuration section of the Admin Console.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20081,1183066697,2023-05-02T21:26:05Z,docs/documentation/securing_apps/topics/oidc/javascript-adapter.adoc,"@@ -230,34 +179,28 @@ While this mode is easy to set up, it also has some disadvantages:  Use this example app to help you get started: https://github.com/keycloak/keycloak/tree/master/examples/cordova -The alternative mode `cordova-native` takes a different approach.-It opens the login page using the system's browser.-After the user has authenticated, the browser redirects back into the app using a special URL.-From there, the {project_name} adapter can finish the login by reading the code or token from the URL.+The alternative mode `cordova-native` takes a different approach as it opens the login page using the system's browser. After the user has authenticated, the browser redirects back into the app using a special URL. From there, the {project_name} adapter can finish the login by reading the code or token from the URL. -You can activate the native mode by passing the adapter type `cordova-native` to the `init` method:+You can activate the native mode by passing the adapter type `cordova-native` to the `init()` method:  [source,javascript] ---- keycloak.init({     adapter: 'cordova-native'-})+}); ---- -This adapter required two additional plugins:+This adapter requires two additional plugins:  * https://github.com/google/cordova-plugin-browsertab[cordova-plugin-browsertab]: allows the app to open webpages in the system's browser * https://github.com/e-imaxina/cordova-plugin-deeplinks[cordova-plugin-deeplinks]: allow the browser to redirect back to your app by special URLs  The technical details for linking to an app differ on each platform and special setup is needed. Please refer to the Android and iOS sections of the https://github.com/e-imaxina/cordova-plugin-deeplinks/blob/master/README.md[deeplinks plugin documentation] for further instructions. -There are different kinds of links for opening apps: custom schemes (i.e. `myapp://login` or `android-app://com.example.myapp/https/example.com/login`) and https://developer.apple.com/ios/universal-links/[Universal Links (iOS)]) / https://developer.android.com/training/app-links/deep-linking[Deep Links (Android)].-While the former are easier to set up and tend to work more reliably, the later offer extra security as they are unique and only the owner of a domain can register them.-Custom-URLs are deprecated on iOS.-We recommend that you use universal links, combined with a fallback site with a custom-url link on it for best reliability.+There are different kinds of links for opening apps: custom schemes (i.e. `myapp://login` or `android-app://com.example.myapp/https/example.com/login`) and https://developer.apple.com/ios/universal-links/[Universal Links (iOS)]) / https://developer.android.com/training/app-links/deep-linking[Deep Links (Android)]. While the former are easier to set up and tend to work more reliably, the later offer extra security as they are unique and only the owner of a domain can register them. Custom-URLs are deprecated on iOS. We recommend that you use universal links, combined with a fallback site with a custom-url link on it for best reliability.","```suggestionDifferent kinds of links exist for opening apps: * custom schemes, such as `myapp://login` or `android-app://com.example.myapp/https/example.com/login`* https://developer.apple.com/ios/universal-links/[Universal Links (iOS)]) / https://developer.android.com/training/app-links/deep-linking[Deep Links (Android)].While the former are easier to set up and tend to work more reliably, the latter offer extra security because they are unique and only the owner of a domain can register them. Custom-URLs are deprecated on iOS.  For best reliability, we recommend that you use universal links combined with a fallback site that uses a custom-url link.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20081,1183068879,2023-05-02T21:29:08Z,docs/documentation/securing_apps/topics/oidc/javascript-adapter.adoc,"@@ -272,7 +215,7 @@ There is an example app that shows how to use the native-mode: https://github.co [#custom-adapters] ==== Custom Adapters -Sometimes it's necessary to run the JavaScript client in environments that are not supported by default (such as Capacitor). To make it possible to use the JavasScript client in these kind of unknown environments is possible to pass a custom adapter. For example a 3rd party library could provide such an adapter to make it possible to run the JavaScript client without issues:+Sometimes it's necessary to run the adapter in environments that are not supported by default (such as Capacitor). To make it possible to use the JavasScript client in these kind of unknown environments is possible to pass a custom adapter. For example a 3rd party library could provide such an adapter to make it possible to run the adapter without issues:","```suggestionIn some situations, you may need to run the adapter in environments that are not supported by default, such as Capacitor. To use the JavasScript client in these environments, you can pass a custom adapter. For example, a third-party library could provide such an adapter to make it possible to reliably run the adapter:```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20081,1183072302,2023-05-02T21:34:01Z,docs/documentation/securing_apps/topics/oidc/javascript-adapter.adoc,"@@ -312,52 +255,25 @@ keycloak.init({  Naturally you can also do this without TypeScript by omitting the type information, but ensuring implementing the interface properly will then be left entirely up to you. -==== Earlier Browsers--The JavaScript adapter depends on Base64 (window.btoa and window.atob), HTML5 History API and optionally the Promise API.-If you need to support browsers that do not have these available (for example, IE9) you need to add polyfillers.--Example polyfill libraries:--* Base64 - https://github.com/davidchambers/Base64.js-* HTML5 History - https://github.com/devote/HTML5-History-API-* Promise - https://github.com/stefanpenner/es6-promise- [[_modern_browsers]] ==== Modern Browsers with Tracking Protection-In the latest versions of some browsers various cookies policies are applied to prevent tracking of the users by third-parties,-like SameSite in Chrome or completely blocked third-party cookies. It is expected that those policies will become even-more restrictive and adopted by other browsers over time, eventually leading to cookies in third-party contexts to be-completely unsupported and blocked by the browsers. The adapter features affected by this might get deprecated in the-future.+In the latest versions of some browsers various cookies policies are applied to prevent tracking of the users by third-parties, like SameSite in Chrome or completely blocked third-party cookies. It is expected that those policies will become even more restrictive and adopted by other browsers over time, eventually leading to cookies in third-party contexts to be completely unsupported and blocked by the browsers. The adapter features affected by this might get deprecated in the future.","```suggestionIn the latest versions of some browsers, various cookies policies are applied to prevent tracking of the users by third parties, such as SameSite in Chrome or completely blocked third-party cookies. Those policies are likely to become more restrictive and adopted by other browsers over time. Eventually cookies in third-party contexts may become completely unsupported and blocked by the browsers. As a result, the affected adapter features might ultimately be deprecated.```",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1183284759,2023-05-03T06:31:47Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/vault/KeycloakPlaintextVaultTest.java,"@@ -74,13 +74,24 @@ public void run(KeycloakSession session) {                 Assert.assertTrue(optional.isPresent());                 String secretString = optional.get();                 Assert.assertEquals(expectedSecret, secretString);+            } catch (IllegalArgumentException e) {+                // expected exception is thrown because of the keystore type mismatch.+                // TODO: generate a BCFKS keystore with PBE SecretKeyEntries.+                Assert.assertEquals(""malformed sequence"", e.getMessage());             }              // try obtaining a secret using a key that does not exist in the vault.             String invalidEntry = ""${vault.invalid_entry}"";             try (VaultStringSecret secret = transcriber.getStringSecret(invalidEntry)) {                 Optional<String> optional = secret.get();                 Assert.assertFalse(optional.isPresent());+            } catch (IllegalArgumentException e) {+                // expected exception is thrown because of the keystore type mismatch.+                // TODO: generate a BCFKS keystore with PBE SecretKeyEntries.+                Assert.assertEquals(""malformed sequence"", e.getMessage());+            } catch (RuntimeException e) {+                // expected exception is thrown.+                Assert.assertEquals(""Cannot invoke \""java.security.KeyStore$SecretKeyEntry.getSecretKey()\"" because \""ske\"" is null"", e.getMessage());","I might be missing something but why is plaintext test using a keystore? Is that correct? In any case, it doesn't seem correct to me that we expect exceptions for each Vault provider.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20091,1183392477,2023-05-03T08:35:14Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -11,4 +11,11 @@ In a previous release we started to actively log deprecation warnings when the K In previous releases, the `export` and `import` commands required a `build` command to be run first. Starting with this release, the `export` and `import` commands perform an automatic rebuild of Keycloak if a build time configuration has changed. -See the migration guide for details.\ No newline at end of file+See the migration guide for more details.++= Renamed Keycloak Admin client dependencies++After the upgrade to JakartaEE, dependencies for Keycloak Admin clients were renamed to describe the reality more accurately, with consideration for long-term maintainability.+We still provide two separate Keycloak Admin clients, one with JakartaEE and the other with JavaEE support.","```suggestionAfter the upgrade to Jakarta EE, dependencies for Keycloak Admin clients were renamed to describe the reality more accurately, with consideration for long-term maintainability.We still provide two separate Keycloak Admin clients, one with Jakarta EE and the other with Java EE support.```See e.g. https://jakarta.ee/, or [Wiki](https://en.wikipedia.org/wiki/Jakarta_EE).",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20091,1183394613,2023-05-03T08:37:19Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -11,4 +11,11 @@ In a previous release we started to actively log deprecation warnings when the K In previous releases, the `export` and `import` commands required a `build` command to be run first. Starting with this release, the `export` and `import` commands perform an automatic rebuild of Keycloak if a build time configuration has changed. -See the migration guide for details.\ No newline at end of file+See the migration guide for more details.++= Renamed Keycloak Admin client dependencies++After the upgrade to JakartaEE, dependencies for Keycloak Admin clients were renamed to describe the reality more accurately, with consideration for long-term maintainability.","```suggestionAfter the upgrade to JakartaEE, artifacts for Keycloak Admin clients were renamed to describe the reality more accurately, with consideration for long-term maintainability.```Maybe we should call it ""artifacts""? Not sure about that, but in any case I think dependency is not the right word for what we are distributing.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20091,1183396845,2023-05-03T08:39:33Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -74,3 +77,56 @@ NOTE:: When the auto-build runs, the build time options will be in effect for al In previous releases the `export` and `import` commands allowed runtime parameters like, for example, a database URL only in configuration files or environment variables. Starting with this release, those runtime parameters are now available on the command line as well. Use the `--help` option to find out about the supported parameters.++= Renamed Keycloak Admin client dependencies++After the upgrade to JakartaEE, dependencies for Keycloak Admin clients were renamed to describe the reality more accurately, with consideration for long-term maintainability.+We still provide two separate Keycloak Admin clients, one with JakartaEE and the other with JavaEE support.++We stopped releasing the `org.keycloak:keycloak-admin-client-jakarta` dependency.+The default one for Keycloak Admin client with JakartaEE support is `org.keycloak:keycloak-admin-client` (since version 22.0.0).++We will also release Keycloak Admin client with JavaEE support for some time, but it's recommended to migrate to JakartaEE as soon as possible.+The new dependency with JavaEE support is `org.keycloak:keycloak-admin-client-jee`.++=== JakartaEE support+[source,xml]+.Before migration:+----+<dependency>+    <groupId>org.keycloak</groupId>+    <artifactId>keycloak-admin-client-jakarta</artifactId>+    <version>21.0.0</version>+</dependency>+----++[source,xml]+.After migration:+----+<dependency>+    <groupId>org.keycloak</groupId>+    <artifactId>keycloak-admin-client</artifactId>+    <version>22.0.0</version>+</dependency>+----++=== JavaEE support _(only temporary support)_+[source,xml]+.Before migration:+----+<dependency>+    <groupId>org.keycloak</groupId>+    <artifactId>keycloak-admin-client</artifactId>+    <version>21.0.0</version>+</dependency>+----++[source,xml]+.After migration:+----+<dependency>+    <groupId>org.keycloak</groupId>+    <artifactId>keycloak-admin-client-jee</artifactId>+    <version>22.0.0</version>+</dependency>+----","JakartaEE --> Jakarta EEJavaEE --> Java EE```suggestion= Renamed Keycloak Admin client dependenciesAfter the upgrade to Jakarta EE, dependencies for Keycloak Admin clients were renamed to describe the reality more accurately, with consideration for long-term maintainability.We still provide two separate Keycloak Admin clients, one with Jakarta EE and the other with Java EE support.We stopped releasing the `org.keycloak:keycloak-admin-client-jakarta` dependency.The default one for Keycloak Admin client with Jakarta EE support is `org.keycloak:keycloak-admin-client` (since version 22.0.0).We will also release Keycloak Admin client with Java EE support for some time, but it's recommended to migrate to Jakarta EE as soon as possible.The new dependency with Java EE support is `org.keycloak:keycloak-admin-client-jee`.=== Jakarta EE support[source,xml].Before migration:----<dependency>    <groupId>org.keycloak</groupId>    <artifactId>keycloak-admin-client-jakarta</artifactId>    <version>21.0.0</version></dependency>----[source,xml].After migration:----<dependency>    <groupId>org.keycloak</groupId>    <artifactId>keycloak-admin-client</artifactId>    <version>22.0.0</version></dependency>----=== Java EE support _(only temporary support)_[source,xml].Before migration:----<dependency>    <groupId>org.keycloak</groupId>    <artifactId>keycloak-admin-client</artifactId>    <version>21.0.0</version></dependency>----[source,xml].After migration:----<dependency>    <groupId>org.keycloak</groupId>    <artifactId>keycloak-admin-client-jee</artifactId>    <version>22.0.0</version></dependency>----```",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19644,1183553574,2023-05-03T11:17:07Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,84 @@+package org.keycloak.vault;++import java.nio.ByteBuffer;+import java.security.*;+import java.security.spec.InvalidKeySpecException;+import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import javax.crypto.SecretKeyFactory;+import javax.crypto.spec.PBEKeySpec;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;+    private static final String encryptionAlgorithm = ""PBE"";++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        if (!Files.exists(keystorePath)) {+            logger.warnf(""Cannot find secret alias %s in %s"", alias, keystorePath);+            return DefaultVaultRawSecret.forBuffer(Optional.empty());+        }+        KeyStore ks;+        SecretKeyFactory factory;+        PBEKeySpec keySpec;+        try {+            ks = KeyStore.getInstance(keystoreType);+            ks.load(Files.newInputStream(keystorePath), keystorePass.toCharArray());",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2499),x
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/20113,1183627149,2023-05-03T12:35:53Z,pom.xml,"@@ -112,8 +112,8 @@         <resteasy.version>6.2.3.Final</resteasy.version>         <resteasy.undertow.version>${resteasy.version}</resteasy.undertow.version>         <owasp.html.sanitizer.version>20211018.2</owasp.html.sanitizer.version>-        <slf4j-api.version>2.0.6</slf4j-api.version>-        <slf4j.version>2.0.6</slf4j.version>+        <slf4j-api.version>2.0.7</slf4j-api.version>",@mabartos @vmuzikar I'm afraid that we need to keep those versions in sync wtih Quarkus - https://github.com/quarkusio/quarkus/blob/3.0.1.Final/bom/application/pom.xml#L116,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20091,1184204052,2023-05-03T20:07:28Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -11,4 +11,11 @@ In a previous release we started to actively log deprecation warnings when the K In previous releases, the `export` and `import` commands required a `build` command to be run first. Starting with this release, the `export` and `import` commands perform an automatic rebuild of Keycloak if a build time configuration has changed. -See the migration guide for details.\ No newline at end of file+See the migration guide for more details.++= Renamed Keycloak Admin client artifacts++After the upgrade to Jakarta EE, artifacts for Keycloak Admin clients were renamed to describe the reality more accurately, with consideration for long-term maintainability.+We still provide two separate Keycloak Admin clients, one with Jakarta EE and the other with Java EE support.","```suggestionAfter the upgrade to Jakarta EE, artifacts for Keycloak Admin Console were renamed to more descriptive names with consideration for long-term maintainability.We still provide two separate Keycloak Admin Consoles, one with Jakarta EE and the other with Java EE support.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20091,1184204791,2023-05-03T20:08:12Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -74,3 +77,56 @@ NOTE:: When the auto-build runs, the build time options will be in effect for al In previous releases the `export` and `import` commands allowed runtime parameters like, for example, a database URL only in configuration files or environment variables.",```suggestionIn previous releases the `export` and `import` commands allowed runtime parameters such as a database URL only in configuration files or environment variables.```,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20091,1184206038,2023-05-03T20:09:24Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -74,3 +77,56 @@ NOTE:: When the auto-build runs, the build time options will be in effect for al In previous releases the `export` and `import` commands allowed runtime parameters like, for example, a database URL only in configuration files or environment variables. Starting with this release, those runtime parameters are now available on the command line as well. Use the `--help` option to find out about the supported parameters.++= Renamed Keycloak Admin client artifacts++After the upgrade to Jakarta EE, artifacts for Keycloak Admin clients were renamed to describe the reality more accurately, with consideration for long-term maintainability.+We still provide two separate Keycloak Admin clients, one with Jakarta EE and the other with Java EE support.+","```suggestionAfter the upgrade to Jakarta EE, artifacts for Keycloak Admin Console were renamed to more descriptive names with consideration for long-term maintainability.We still provide two separate Keycloak Admin Consoles, one with Jakarta EE and the other with Java EE support.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/19898,1185895331,2023-05-05T09:42:02Z,docs/documentation/server_development/topics/user-storage/registration-query.adoc,"@@ -136,95 +136,55 @@ by our example provider. Let's look at implementing this interface.     }      @Override-    public List<UserModel> getUsers(RealmModel realm) {-        return getUsers(realm, 0, Integer.MAX_VALUE);-    }--    @Override-    public List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults) {-        List<UserModel> users = new LinkedList<>();-        int i = 0;-        for (Object obj : properties.keySet()) {-            if (i++ < firstResult) continue;-            String username = (String)obj;-            UserModel user = getUserByUsername(username, realm);-            users.add(user);-            if (users.size() >= maxResults) break;-        }-        return users;+    public Stream<UserModel> searchForUserStream(RealmModel realm, String search, Integer firstResult, Integer maxResults) {+        Predicate<String> predicate = ""*"".equals(search) ? username -> true : username -> username.contains(search);+        return properties.keySet().stream()+                .map(String.class::cast)+                .filter(predicate)+                .skip(firstResult)+                .map(username -> getUserByUsername(realm, username))+                .limit(maxResults);     } ---- -The `getUsers()` method iterates over the key set of the property file, delegating to `getUserByUsername()` to load a user.+The first declaration of `searchForUserStream()` takes a `String` parameter. In this example, it represents a username that you want to search by. This string can be a substring, which is why we use the `String.contains()`+method when doing our search. Notice that we use `*` to indicate we want to list all users.+The method iterates over the key set of the property file, delegating to `getUserByUsername()` to load a user.","```suggestionThe first declaration of `searchForUserStream()` takes a `String` parameter. In this example, the parameter represents a username that you want to search by. This string can be a substring, which explains the choice of the `String.contains()`method when doing the search. Notice the use of `*` to indicate to request a list all users.The method iterates over the key set of the property file, delegating to `getUserByUsername()` to load a user.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/19898,1185900094,2023-05-05T09:47:02Z,docs/documentation/server_development/topics/user-storage/registration-query.adoc,"@@ -136,95 +136,55 @@ by our example provider. Let's look at implementing this interface.     }      @Override-    public List<UserModel> getUsers(RealmModel realm) {-        return getUsers(realm, 0, Integer.MAX_VALUE);-    }--    @Override-    public List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults) {-        List<UserModel> users = new LinkedList<>();-        int i = 0;-        for (Object obj : properties.keySet()) {-            if (i++ < firstResult) continue;-            String username = (String)obj;-            UserModel user = getUserByUsername(username, realm);-            users.add(user);-            if (users.size() >= maxResults) break;-        }-        return users;+    public Stream<UserModel> searchForUserStream(RealmModel realm, String search, Integer firstResult, Integer maxResults) {+        Predicate<String> predicate = ""*"".equals(search) ? username -> true : username -> username.contains(search);+        return properties.keySet().stream()+                .map(String.class::cast)+                .filter(predicate)+                .skip(firstResult)+                .map(username -> getUserByUsername(realm, username))+                .limit(maxResults);     } ---- -The `getUsers()` method iterates over the key set of the property file, delegating to `getUserByUsername()` to load a user.+The first declaration of `searchForUserStream()` takes a `String` parameter. In this example, it represents a username that you want to search by. This string can be a substring, which is why we use the `String.contains()`+method when doing our search. Notice that we use `*` to indicate we want to list all users.+The method iterates over the key set of the property file, delegating to `getUserByUsername()` to load a user. Notice that we are indexing this call based on the `firstResult` and `maxResults` parameter. If your external store does not support pagination, you will have to do similar logic.  .PropertyFileUserStorageProvider [source,java] ----     @Override-    public List<UserModel> searchForUser(String search, RealmModel realm) {-        return searchForUser(search, realm, 0, Integer.MAX_VALUE);-    }--    @Override-    public List<UserModel> searchForUser(String search, RealmModel realm, int firstResult, int maxResults) {-        List<UserModel> users = new LinkedList<>();-        int i = 0;-        for (Object obj : properties.keySet()) {-            String username = (String)obj;-            if (!username.contains(search)) continue;-            if (i++ < firstResult) continue;-            UserModel user = getUserByUsername(username, realm);-            users.add(user);-            if (users.size() >= maxResults) break;-        }-        return users;-    }-------The first declaration of `searchForUser()` takes a `String` parameter. This is supposed to be a string that you use to-search username and email attributes to find the user. This string can be a substring, which is why we use the `String.contains()`-method when doing our search.--.PropertyFileUserStorageProvider-[source,java]------    @Override-    public List<UserModel> searchForUser(Map<String, String> params, RealmModel realm) {-        return searchForUser(params, realm, 0, Integer.MAX_VALUE);-    }--    @Override-    public List<UserModel> searchForUser(Map<String, String> params, RealmModel realm, int firstResult, int maxResults) {+    public Stream<UserModel> searchForUserStream(RealmModel realm, Map<String, String> params, Integer firstResult, Integer maxResults) {         // only support searching by username         String usernameSearchString = params.get(""username"");-        if (usernameSearchString == null) return Collections.EMPTY_LIST;-        return searchForUser(usernameSearchString, realm, firstResult, maxResults);+        if (usernameSearchString != null)+            return searchForUserStream(realm, usernameSearchString, firstResult, maxResults);++        // if we are not searching by username, return all users+        return searchForUserStream(realm, ""*"", firstResult, maxResults);     } ---- -The `searchForUser()` method that takes a `Map` parameter can search for a user based on first, last name, username, and email.-We only store usernames, so we only search based on usernames. We delegate to `searchForUser()` for this.+The `searchForUserStream()` method that takes a `Map` parameter can search for a user based on first, last name, username, and email.+We only store usernames, so we only search based on usernames. Only exception is when `Map` parameter doesn't contain `username` attribute+in which case we return all users. We delegate to `searchForUserStream(realm, search, firstResult, maxResults)` for this.","```suggestionOnly usernames are stored, so the search is based only on usernames except when the `Map` parameter does not contain the `username` attribute. In this case, all users are returned. In that situation,  use `searchForUserStream(realm, search, firstResult, maxResults)` .```",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19644,1188248274,2023-05-09T07:34:15Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,87 @@+package org.keycloak.vault;++import java.nio.ByteBuffer;+import java.security.KeyStore;+import java.security.KeyStoreException;+import java.security.NoSuchAlgorithmException;+import java.security.UnrecoverableEntryException;+import java.security.spec.InvalidKeySpecException;+import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import javax.crypto.SecretKeyFactory;+import javax.crypto.spec.PBEKeySpec;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;+    private static final String encryptionAlgorithm = ""PBE"";++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        if (!Files.exists(keystorePath)) {+            logger.warnf(""Cannot find secret alias %s in %s"", alias, keystorePath);+            return DefaultVaultRawSecret.forBuffer(Optional.empty());+        }+        KeyStore ks;+        SecretKeyFactory factory;+        PBEKeySpec keySpec;+        try {+            ks = KeyStore.getInstance(keystoreType);+            ks.load(Files.newInputStream(keystorePath.normalize()), keystorePass.toCharArray());",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2507),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19644,1188378422,2023-05-09T09:29:02Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,89 @@+package org.keycloak.vault;++import java.nio.ByteBuffer;+import java.nio.file.Paths;+import java.security.KeyStore;+import java.security.KeyStoreException;+import java.security.NoSuchAlgorithmException;+import java.security.UnrecoverableEntryException;+import java.security.spec.InvalidKeySpecException;+import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import javax.crypto.SecretKeyFactory;+import javax.crypto.spec.PBEKeySpec;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;+    private static final String encryptionAlgorithm = ""PBE"";++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        Path normalizedKsPath = Paths.get(keystorePath.toUri()).normalize();",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2508),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19644,1188378424,2023-05-09T09:29:02Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,89 @@+package org.keycloak.vault;++import java.nio.ByteBuffer;+import java.nio.file.Paths;+import java.security.KeyStore;+import java.security.KeyStoreException;+import java.security.NoSuchAlgorithmException;+import java.security.UnrecoverableEntryException;+import java.security.spec.InvalidKeySpecException;+import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import javax.crypto.SecretKeyFactory;+import javax.crypto.spec.PBEKeySpec;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;+    private static final String encryptionAlgorithm = ""PBE"";++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        Path normalizedKsPath = Paths.get(keystorePath.toUri()).normalize();+        if (!Files.exists(normalizedKsPath)) {+            logger.warnf(""Cannot find secret alias %s in %s"", alias, normalizedKsPath);+            return DefaultVaultRawSecret.forBuffer(Optional.empty());+        }+        KeyStore ks;+        SecretKeyFactory factory;+        PBEKeySpec keySpec;+        try {+            ks = KeyStore.getInstance(keystoreType);+            ks.load(Files.newInputStream(normalizedKsPath), keystorePass.toCharArray());",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2509),x
51133,edewit,https://api.github.com/repos/keycloak/keycloak/pulls/20188,1188440943,2023-05-09T10:16:20Z,js/apps/admin-ui/src/identity-providers/add/AdvancedSettings.tsx,"@@ -125,6 +136,87 @@ export const AdvancedSettings = ({ isOIDC, isSAML }: AdvancedSettingsProps) => {       />       <SwitchField field=""config.hideOnLoginPage"" label=""hideOnLoginPage"" /> +      <FormGroupField label=""filteredByClaim"">+        <Controller+          name=""config.filteredByClaim""+          defaultValue=""false""+          control={control}+          render={({ field }) => (+            <Switch+              id=""filteredByClaim""+              label={t(""common:on"")}+              labelOff={t(""common:off"")}+              isChecked={field.value === 'true'}+              onChange={(value) => {+                  const v=""""+value+                  field.onChange(v)+                  setFilteredByClaim(v)+                  setClaimFilterRequired(value)+                  console.debug('setFilteredByClaim ' + v)+                }+              }+              isDisabled={false}+              aria-label=""filteredByClaim""+            />+          )}+        />+      </FormGroupField>+      { claimFilterRequired && (+        <>+          <FormGroup+            label={t(""identity-providers:claimFilterName"")}+            labelIcon={+              <HelpItem+                helpText={t(""identity-providers-help:claimFilterName"")}+                fieldLabelId=""identity-providers:claimFilterName""+              />+            }+            fieldId=""kc-claim-filter-name""+            isRequired={claimFilterRequired}+            validated={+              errors.config?.claimFilterName+                ? ValidatedOptions.error+                : ValidatedOptions.default+            }+            helperTextInvalid={t(""common:required"")}+          >+            <KeycloakTextInput+              isRequired={claimFilterRequired}+              isReadOnly={!claimFilterRequired}+              type=""text""+              id=""kc-claim-filter-name""+              data-testid=""claimFilterName""+              {...register(""config.claimFilterName"", { required: claimFilterRequired })}+            />+          </FormGroup>+          <FormGroup+            label={t(""identity-providers:claimFilterValue"")}+            labelIcon={+              <HelpItem+                helpText={t(""identity-providers-help:claimFilterValue"")}+                fieldLabelId=""identity-providers:claimFilterName""+              />+            }+            fieldId=""kc-claim-filter-value""+            isRequired={claimFilterRequired}+            validated={+              errors.config?. claimFilterValue+                ? ValidatedOptions.error+                : ValidatedOptions.default+            }+            helperTextInvalid={t(""common:required"")}+          >+            <KeycloakTextInput+              isRequired={claimFilterRequired}+              isReadOnly={!claimFilterRequired}+              type=""text""+              id=""kc-claim-filter-value""+              data-testid=""claimFilterValue""+              {...register(""config.claimFilterValue"", { required: claimFilterRequired })}+            />+          </FormGroup>",this field has similar problems,x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20201,1188472382,2023-05-09T10:44:31Z,js/apps/admin-ui/pom.xml,"@@ -136,7 +136,9 @@       ""resourceUrl"": ""${resourceUrl}"",       ""masterRealm"": ""${masterRealm}"",       ""resourceVersion"": ""${resourceVersion}"",-      ""isRunningAsTheme"": true+      ""isRunningAsTheme"": true,+      ""logo"": ""${properties.logo!""""}"",+      ""logoUrl"": ""${properties.logoUrl!""""}""",Since this URL is used as a hypertext reference perhaps it would be more accurately named `logoHref`? This matches the naming convention of the [`href`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href) attribute and is well known amongst web devs.,x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19644,1188478584,2023-05-09T10:50:47Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,89 @@+package org.keycloak.vault;++import java.nio.ByteBuffer;+import java.nio.file.Paths;+import java.security.KeyStore;+import java.security.KeyStoreException;+import java.security.NoSuchAlgorithmException;+import java.security.UnrecoverableEntryException;+import java.security.spec.InvalidKeySpecException;+import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import javax.crypto.SecretKeyFactory;+import javax.crypto.spec.PBEKeySpec;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;+    private static final String encryptionAlgorithm = ""PBE"";++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        Path normalizedKsPath = Paths.get(keystorePath.toUri()).toAbsolutePath().normalize();",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2510),x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/20186,1188500915,2023-05-09T11:12:30Z,services/src/main/java/org/keycloak/protocol/ProtocolMapperUtils.java,"@@ -124,13 +124,12 @@ public static ProtocolMapperModel findLocaleMapper(KeycloakSession session) {     public static Stream<Entry<ProtocolMapperModel, ProtocolMapper>> getSortedProtocolMappers(KeycloakSession session, ClientSessionContext ctx) {         KeycloakSessionFactory sessionFactory = session.getKeycloakSessionFactory();         return ctx.getProtocolMappersStream()-                .flatMap(mapperModel -> {+                .<Entry<ProtocolMapperModel, ProtocolMapper>>map(mapperModel -> {                     ProtocolMapper mapper = (ProtocolMapper) sessionFactory.getProviderFactory(ProtocolMapper.class, mapperModel.getProtocolMapper());-                    if (mapper == null)+                    if (mapper == null) {                         return null;-                    Map<ProtocolMapperModel, ProtocolMapper> protocolMapperMap = new HashMap<>();-                    protocolMapperMap.put(mapperModel, mapper);-                    return protocolMapperMap.entrySet().stream();+                    }+                    return new MapEntry(mapperModel, mapper);","Can we user `new AbstractMap.SimpleImmutableEntry<>(mapperModel, mapper)` here to avoid creating our own Entry class?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20183,1188511773,2023-05-09T11:21:11Z,js/apps/admin-ui/src/i18n/OverridesBackend.ts,"@@ -0,0 +1,160 @@+import { CallbackError, ReadCallback, ResourceKey } from ""i18next"";+import HttpBackend from ""i18next-http-backend"";++import { adminClient } from ""../admin-client"";+import {+  DEFAULT_LOCALE,+  DEFAULT_NAMESPACE,+  KEY_SEPARATOR,+  NAMESPACE_SEPARATOR,+} from ""./i18n"";++type ParsedOverrides = { [namespace: string]: { [key: string]: string } };++/** A custom backend that merges the overrides the static labels with those defined by the user in the console. */+export class OverridesBackend extends HttpBackend {+  #overridesCache = new Map<string, Promise<ParsedOverrides>>();++  async loadUrl(+    url: string,+    callback: ReadCallback,+    languages?: string | string[],+    namespaces?: string | string[]+  ) {+    try {+      const [data, overrides] = await Promise.all([+        this.#loadUrlPromisified(url, languages, namespaces),+        this.#loadOverrides(languages),+      ]);++      const namespace = this.#determineNamespace(namespaces);+      const merged = this.#applyOverrides(namespace, data, overrides);++      callback(null, merged);+    } catch (error) {+      callback(error as CallbackError, null);+    }+  }++  #applyOverrides(+    namespace: string,+    data: ResourceKey,+    overrides: ParsedOverrides+  ) {+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition+    if (typeof data === ""string"" || !overrides[namespace]) {+      return data;+    }++    // Ensure we are operating on a cloned data structure to prevent in place mutations.+    const target = structuredClone(data);++    for (const [path, value] of Object.entries(overrides[namespace])) {+      this.#applyOverride(target, path, value);+    }++    return target;+  }++  /** Applies an override by converting path segments denoted with a key separator as nested objects and merging the result. */+  #applyOverride(target: Record<string, any>, path: string, value: string) {+    const trail = path.split(KEY_SEPARATOR);+    let pointer = target;++    trail.forEach((segment, index) => {+      const isLast = index === trail.length - 1;+      pointer = pointer[segment] = isLast ? value : pointer[segment] ?? {};+    });+  }++  #loadOverrides(languages?: string | string[]) {+    const locale = this.#determineLocale(languages);+    const cachedOverrides = this.#overridesCache.get(locale);++    if (cachedOverrides) {+      return cachedOverrides;+    }++    const overrides = adminClient.realms+      .getRealmLocalizationTexts({+        realm: adminClient.realmName,+        selectedLocale: locale,+      })+      .then((data) => this.#parseOverrides(data));++    this.#overridesCache.set(locale, overrides);++    // Evict cached request on failure.+    overrides.catch((error) => {+      this.#overridesCache.delete(locale);+      return Promise.reject(error);+    });++    return overrides;+  }++  #parseOverrides(data: Record<string, string>) {+    const parsed: ParsedOverrides = {};++    for (const [path, value] of Object.entries(data)) {+      const parts = path.split(NAMESPACE_SEPARATOR);+      const namespace = parts.length > 1 ? parts[0] : DEFAULT_NAMESPACE;+      const key = parts.length > 1 ? parts[1] : parts[0];++      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition+      if (!parsed[namespace]) {+        parsed[namespace] = {};+      }++      parsed[namespace][key] = value;+    }++    return parsed;+  }++  #determineLocale(languages?: string | string[]) {+    if (typeof languages === ""string"") {+      return languages;+    }++    return languages?.[0] ?? DEFAULT_LOCALE;+  }++  #determineNamespace(namespaces?: string | string[]) {+    if (typeof namespaces === ""string"") {+      return namespaces;+    }++    return namespaces?.[0] ?? DEFAULT_NAMESPACE;+  }++  #loadUrlPromisified(+    url: string,+    languages?: string | string[],+    namespaces?: string | string[]+  ) {+    return new Promise<ResourceKey>((resolve, reject) => {+      const callback: ReadCallback = (error, data) => {+        if (error) {+          return reject(error);","I see your use-case for this, but perhaps we should handle this in a separate issue/PR. Reason being that this behavior is already present in the standard `HttpBackend` we're overriding here.I'd also like to discuss this with the larger team, where an issue would help start that discussion.",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19644,1188631104,2023-05-09T13:48:40Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,90 @@+package org.keycloak.vault;++import java.nio.ByteBuffer;+import java.nio.file.Paths;+import java.security.KeyStore;+import java.security.KeyStoreException;+import java.security.NoSuchAlgorithmException;+import java.security.UnrecoverableEntryException;+import java.security.spec.InvalidKeySpecException;++import org.apache.commons.io.FilenameUtils;+import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import javax.crypto.SecretKeyFactory;+import javax.crypto.spec.PBEKeySpec;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;+    private static final String encryptionAlgorithm = ""PBE"";++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        if (!Files.exists(keystorePath)) {+            logger.warnf(""Cannot find secret alias %s in %s"", alias, keystorePath);+            return DefaultVaultRawSecret.forBuffer(Optional.empty());+        }+        KeyStore ks;+        SecretKeyFactory factory;+        PBEKeySpec keySpec;+        try {+            ks = KeyStore.getInstance(keystoreType);+            ks.load(Files.newInputStream(Paths.get(FilenameUtils.normalize(keystorePath.toString()))), keystorePass.toCharArray());",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2511),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19644,1188829868,2023-05-09T16:06:41Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,90 @@+package org.keycloak.vault;++import java.io.File;+import java.nio.ByteBuffer;+import java.security.KeyStore;+import java.security.KeyStoreException;+import java.security.NoSuchAlgorithmException;+import java.security.UnrecoverableEntryException;+import java.security.spec.InvalidKeySpecException;+import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import javax.crypto.SecretKeyFactory;+import javax.crypto.spec.PBEKeySpec;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;+    private static final String encryptionAlgorithm = ""PBE"";++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        KeyStore ks;+        SecretKeyFactory factory;+        PBEKeySpec keySpec;++        try {+            Path canonicalKeystorePath = new File(keystorePath.toUri()).getCanonicalFile().toPath();",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2512),x
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19644,1188829876,2023-05-09T16:06:42Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,90 @@+package org.keycloak.vault;++import java.io.File;+import java.nio.ByteBuffer;+import java.security.KeyStore;+import java.security.KeyStoreException;+import java.security.NoSuchAlgorithmException;+import java.security.UnrecoverableEntryException;+import java.security.spec.InvalidKeySpecException;+import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import javax.crypto.SecretKeyFactory;+import javax.crypto.spec.PBEKeySpec;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;+    private static final String encryptionAlgorithm = ""PBE"";++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        KeyStore ks;+        SecretKeyFactory factory;+        PBEKeySpec keySpec;++        try {+            Path canonicalKeystorePath = new File(keystorePath.toUri()).getCanonicalFile().toPath();+            if (!Files.exists(canonicalKeystorePath)) {+                logger.warnf(""Cannot find secret alias %s in %s"", alias, canonicalKeystorePath);+                return DefaultVaultRawSecret.forBuffer(Optional.empty());+            }+            ks = KeyStore.getInstance(keystoreType);+            ks.load(Files.newInputStream(canonicalKeystorePath), keystorePass.toCharArray());",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2513),x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/20186,1189352557,2023-05-10T04:43:23Z,services/src/main/java/org/keycloak/protocol/ProtocolMapperUtils.java,"@@ -83,25 +86,52 @@ public class ProtocolMapperUtils {     // Script mapper goes last, so it can access the roles in the token     public static final int PRIORITY_SCRIPT_MAPPER = 50; -    public static String getUserModelValue(UserModel user, String propertyName) {+    public static final String USER_PROPERTY_MAPPER_WRONG_PROPERTY = ""userPropertyMapperWrongProperty"";++    private static final Map<String, Method> USER_MODEL_METHODS = new HashMap<>();+    static {+        for (Method declaredMethod : UserModel.class.getDeclaredMethods()) {+            if (declaredMethod.getParameterCount() == 0 && !(declaredMethod.getReturnType().isAssignableFrom(Stream.class)) && !(declaredMethod.getReturnType().isAssignableFrom(Map.class))) {+                if (declaredMethod.getName().startsWith(""is"")) {+                    memorizedMethod(declaredMethod.getName().substring(2), declaredMethod);+                } else if (declaredMethod.getName().startsWith(""get"")) {+                    memorizedMethod(declaredMethod.getName().substring(3), declaredMethod);+                }+            }+        }+    } -        String methodName = ""get"" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);-        try {-            Method method = UserModel.class.getMethod(methodName);-            Object val = method.invoke(user);-            if (val != null) return val.toString();-        } catch (Exception ignore) {+    private static void memorizedMethod(String property, Method method) {+        property = property.substring(0, 1).toLowerCase() + property.substring(1);+        Method existingMethod = USER_MODEL_METHODS.put(property, method);","I'd like to keep a clean and efficient code in Keycloak. By supporting both, it will make the code harder to understand. I'd therefore suggest to move it to a migration so that at least data in a database is migrated automatically on a Keycloak upgrade.It seems that this change needs a bit more discussion, therefore I'll move it to a separate PR.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20264,1189683477,2023-05-10T10:10:38Z,operator/pom.xml,"@@ -36,7 +36,6 @@         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>         <quarkus.operator.sdk.version>6.0.1</quarkus.operator.sdk.version>-        <quarkus.version>3.0.0.Final</quarkus.version>","The Operator uses an independent Quarkus version from Keycloak. That's because the Operator uses [QOSDK](https://github.com/quarkiverse/quarkus-operator-sdk) which uses Quarkus as a transitive dependency. Hence, we should stick here to whatever Quarkus version does QOSDK [use](https://github.com/quarkiverse/quarkus-operator-sdk/blob/6.0.1/pom.xml#L15). Eventually, once we start using the LTS versions of Quarkus and QOSDK, they should be the same but that's not the case right now.",
1251974,miquelsi,https://api.github.com/repos/keycloak/keycloak/pulls/20274,1189703159,2023-05-10T10:27:09Z,testsuite/integration-arquillian/tests/base/pom.xml,"@@ -413,13 +413,13 @@                                              <!-- Oracle -->                                             <ORACLE_SID>${keycloak.connectionsJpa.database}</ORACLE_SID>-                                            <ORACLE_PASSWORD>sa</ORACLE_PASSWORD>+                                            <ORACLE_PWD>sa</ORACLE_PWD>                                         </env>                                         <cmd>${docker.database.cmd}</cmd>                                         <wait>                                             <!-- Do not use waiting for port since that is unreliable, sometimes port is listening before DB is ready to serve -->                                             <log>${docker.database.wait-for-log-regex}</log>-                                            <time>300000</time>+                                            <time>2000000</time>",I had to increase the timeout because Oracle 19c takes longer to start up.,
11198630,danielFesenmeyer,https://api.github.com/repos/keycloak/keycloak/pulls/19062,1190678469,2023-05-11T06:11:45Z,services/src/main/java/org/keycloak/broker/oidc/mappers/ClaimToUserSessionNoteMapper.java,"@@ -0,0 +1,123 @@+package org.keycloak.broker.oidc.mappers;++import org.keycloak.broker.oidc.KeycloakOIDCIdentityProviderFactory;+import org.keycloak.broker.oidc.OIDCIdentityProviderFactory;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.models.Constants;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.util.JsonSerialization;++import java.io.IOException;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.Collections;+import java.util.HashSet;+import java.util.List;+import java.util.Map;+import java.util.Set;++public class ClaimToUserSessionNoteMapper extends AbstractClaimMapper {++    private static final String CLAIM_PROPERTY_NAME = ""claims"";+    private static final String[] COMPATIBLE_PROVIDERS = {KeycloakOIDCIdentityProviderFactory.PROVIDER_ID,+            OIDCIdentityProviderFactory.PROVIDER_ID};++    private static final List<ProviderConfigProperty> CONFIG_PROPERTIES = new ArrayList<>();++    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES =+            new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty claimsProperty = new ProviderConfigProperty();+        claimsProperty.setName(CLAIM_PROPERTY_NAME);+        claimsProperty.setLabel(""Claims"");+        claimsProperty.setHelpText(+                ""Name of the claims to search for in the token. You can reference nested claims using a '.', i.e. 'address.locality'. To use dot (.) literally, escape it with backslash (\\.)"");","Yes, should be plural ""Names"".Multiple claims have to be separated by `##` in the storage, to be displayed as multiple list entries in the UI. In the UI, the double `##` won't be displayed. So the `##` is an API and storage detail - imho it does not make sense to add this to a UI help text.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/19062,1190789414,2023-05-11T08:07:39Z,services/src/main/java/org/keycloak/broker/oidc/mappers/ClaimToUserSessionNoteMapper.java,"@@ -0,0 +1,123 @@+package org.keycloak.broker.oidc.mappers;++import org.keycloak.broker.oidc.KeycloakOIDCIdentityProviderFactory;+import org.keycloak.broker.oidc.OIDCIdentityProviderFactory;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.models.Constants;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.util.JsonSerialization;++import java.io.IOException;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.Collections;+import java.util.HashSet;+import java.util.List;+import java.util.Map;+import java.util.Set;++public class ClaimToUserSessionNoteMapper extends AbstractClaimMapper {++    private static final String CLAIM_PROPERTY_NAME = ""claims"";+    private static final String[] COMPATIBLE_PROVIDERS = {KeycloakOIDCIdentityProviderFactory.PROVIDER_ID,+            OIDCIdentityProviderFactory.PROVIDER_ID};++    private static final List<ProviderConfigProperty> CONFIG_PROPERTIES = new ArrayList<>();++    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES =+            new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty claimsProperty = new ProviderConfigProperty();+        claimsProperty.setName(CLAIM_PROPERTY_NAME);+        claimsProperty.setLabel(""Claims"");+        claimsProperty.setHelpText(+                ""Name of the claims to search for in the token. You can reference nested claims using a '.', i.e. 'address.locality'. To use dot (.) literally, escape it with backslash (\\.)"");","One additional note: Is it possible to specify which `token` is meant here in this tooltip? For example something like:`...for in the ID Token (eventually UserInfo if applicable or eventually access token if the Identity Provider is Keycloak)`. (I hope I am correct here, not 100% sure actually...:-) ). Or is it too long text? WDYT guys?",
68421193,artur-baltabayev,https://api.github.com/repos/keycloak/keycloak/pulls/19062,1192345515,2023-05-12T13:04:45Z,services/src/main/java/org/keycloak/broker/oidc/mappers/ClaimToUserSessionNoteMapper.java,"@@ -0,0 +1,123 @@+package org.keycloak.broker.oidc.mappers;++import org.keycloak.broker.oidc.KeycloakOIDCIdentityProviderFactory;+import org.keycloak.broker.oidc.OIDCIdentityProviderFactory;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.models.Constants;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.util.JsonSerialization;++import java.io.IOException;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.Collections;+import java.util.HashSet;+import java.util.List;+import java.util.Map;+import java.util.Set;++public class ClaimToUserSessionNoteMapper extends AbstractClaimMapper {++    private static final String CLAIM_PROPERTY_NAME = ""claims"";+    private static final String[] COMPATIBLE_PROVIDERS = {KeycloakOIDCIdentityProviderFactory.PROVIDER_ID,+            OIDCIdentityProviderFactory.PROVIDER_ID};++    private static final List<ProviderConfigProperty> CONFIG_PROPERTIES = new ArrayList<>();++    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES =+            new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty claimsProperty = new ProviderConfigProperty();+        claimsProperty.setName(CLAIM_PROPERTY_NAME);+        claimsProperty.setLabel(""Claims"");+        claimsProperty.setHelpText(+                ""Name of the claims to search for in the token. You can reference nested claims using a '.', i.e. 'address.locality'. To use dot (.) literally, escape it with backslash (\\.)"");",@mposolda Well we mean whatever token comes along (as long as it has claims that can be mapped). Since the logic inside the mapper is indifferent to the token type i don't really know what else we could specify here.,
3833769,sschu,https://api.github.com/repos/keycloak/keycloak/pulls/19062,1192484220,2023-05-12T14:57:16Z,services/src/main/java/org/keycloak/broker/oidc/mappers/ClaimToUserSessionNoteMapper.java,"@@ -0,0 +1,123 @@+package org.keycloak.broker.oidc.mappers;++import org.keycloak.broker.oidc.KeycloakOIDCIdentityProviderFactory;+import org.keycloak.broker.oidc.OIDCIdentityProviderFactory;+import org.keycloak.broker.provider.BrokeredIdentityContext;+import org.keycloak.models.Constants;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.UserModel;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.util.JsonSerialization;++import java.io.IOException;+import java.util.ArrayList;+import java.util.Arrays;+import java.util.Collections;+import java.util.HashSet;+import java.util.List;+import java.util.Map;+import java.util.Set;++public class ClaimToUserSessionNoteMapper extends AbstractClaimMapper {++    private static final String CLAIM_PROPERTY_NAME = ""claims"";+    private static final String[] COMPATIBLE_PROVIDERS = {KeycloakOIDCIdentityProviderFactory.PROVIDER_ID,+            OIDCIdentityProviderFactory.PROVIDER_ID};++    private static final List<ProviderConfigProperty> CONFIG_PROPERTIES = new ArrayList<>();++    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES =+            new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty claimsProperty = new ProviderConfigProperty();+        claimsProperty.setName(CLAIM_PROPERTY_NAME);+        claimsProperty.setLabel(""Claims"");+        claimsProperty.setHelpText(+                ""Name of the claims to search for in the token. You can reference nested claims using a '.', i.e. 'address.locality'. To use dot (.) literally, escape it with backslash (\\.)"");","@mposolda I just had a look together together @artur-baltabayev. The real logic in https://github.com/keycloak/keycloak/blob/7b58783255fb4059c125b168c7ec0bd68cb17778/services/src/main/java/org/keycloak/broker/oidc/mappers/AbstractClaimMapper.java#L75 is to take claim from access token if IDP is Keycloak OIDC, then from ID token if not exists and then from userinfo endpoint if still not exists. That's pretty hard to get into a tooltip. Also, the current formulation is pretty much copy&paste from all other IDP mappers, they also just talk about the `token`. It might be good to improve the wording, but I would rather do it consistently.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20325,1193455693,2023-05-15T07:48:28Z,docs/documentation/server_admin/topics/user-federation/sssd.adoc,"@@ -114,83 +114,64 @@ This script makes the following changes to `/etc/sssd/sssd.conf`:   allowed_uids = root, yourOSUsername   user_attributes = +mail, +telephoneNumber, +givenname, +sn ----+++The `ifp` service is added to SSSD and configured to allow the OS user to interrogate the IPA server through this interface.+++The script also creates a new PAM service `/etc/pam.d/keycloak` to authenticate users via SSSD:+++[source,bash,subs=+attributes]+----+auth    required   pam_sss.so+account required   pam_sss.so+----  . Run `dbus-send` to ensure the setup is successful. + [source,bash,subs=+attributes] -----sudo dbus-send --print-reply --system --dest=org.freedesktop.sssd.infopipe /org/freedesktop/sssd/infopipe org.freedesktop.sssd.infopipe.GetUserGroups string:john+dbus-send --print-reply --system --dest=org.freedesktop.sssd.infopipe /org/freedesktop/sssd/infopipe org.freedesktop.sssd.infopipe.GetUserAttr string:<username> array:string:mail,givenname,sn,telephoneNumber++dbus-send --print-reply --system --dest=org.freedesktop.sssd.infopipe /org/freedesktop/sssd/infopipe org.freedesktop.sssd.infopipe.GetUserGroups string:<username> ---- +-If the setup is successful, you see the user's group. If this command returns a timeout or an error, the federation provider running on {project_name} cannot retrieve any data. This error usually happens because the server is not enrolled in the FreeIPA IdM server, or does not have permission to access the SSSD service.+If the setup is successful, each command displays the user's attributes and groups respectively. If there is a timeout or an error, the federation provider running on {project_name} cannot retrieve any data. This error usually happens because the server is not enrolled in the FreeIPA IdM server, or does not have permission to access the SSSD service. + If you do not have permission to access the SSSD service, ensure that the user running the {project_name} server is in the `/etc/sssd/sssd.conf` file in the following section: + [source,bash,subs=+attributes] ---- [ifp]-allowed_uids = root, your_username+allowed_uids = root, yourOSUsername ------==== Enabling the SSSD federation provider--{project_name} uses DBus-Java to communicate at a low level with D-Bus. D-Bus depends on the http://www.matthew.ath.cx/projects/java/[Unix Sockets Library].--ifeval::[{project_community}==true]--You can find an RPM for this library in https://github.com/keycloak/libunix-dbus-java/releases[the keycloak repository]. Before installing this RPM, check the RPM signature using this command:-+++And the `ipaapi` system user is created inside the host. This user is necessary for the `ifp` service. Check the user is created in the system.++ [source,bash,subs=+attributes] -----  $ rpm -K libunix-dbus-java-0.8.0-1.fc24.x86_64.rpm-  libunix-dbus-java-0.8.0-1.fc24.x86_64.rpm:-    Header V4 RSA/SHA256 Signature, key ID 84dc9914: OK-    Header SHA1 digest: OK (d17bb7ebaa7a5304c1856ee4357c8ba4ec9c0b89)-    V4 RSA/SHA256 Signature, key ID 84dc9914: OK-    MD5 digest: OK (770c2e68d052cb4a4473e1e9fd8818cf)+grep ipaapi /etc/passwd+ipaapi:x:992:988:IPA Framework User:/:/sbin/nologin ---- -Install the RPM using this command:+==== Enabling the SSSD federation provider -[source,bash,subs=+attributes]------$ sudo yum install libunix-dbus-java-0.8.0-1.fc24.x86_64.rpm-----+{project_name} uses https://github.com/hypfvieh/dbus-java[DBus-Java] project to communicate at a low level with D-Bus and https://github.com/java-native-access/jna[JNA] to authenticate via Operating System Pluggable Authentication Modules (PAM). +ifeval::[{project_community}==true]","One minor note: Do we need this `ifeval` or can we remove it and keep the note about Java 17 always in the docs?It seems the product would be supported just for Java 17, however in theory, you never know if something changes (or there are any support exceptions etc)? WDYT?",
34849594,y-tabata,https://api.github.com/repos/keycloak/keycloak/pulls/20237,1193466475,2023-05-15T07:57:25Z,services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java,"@@ -802,5 +806,100 @@ RealmModel getRealm() {         ClientConnection getClientConnection() {             return clientConnection;         }++        public void addPermissions(List<String> permissionList, String permissionResourceFormat) {+            if (permissionResourceFormat == null) {+                permissionResourceFormat = ""id"";+            }++            switch (permissionResourceFormat) {+                case ""id"":+                    addPermissionsById(permissionList);+                    break;+                case ""uri"":+                    addPermissionsByUri(permissionList);+                    break;+                default:","Not required. If parameter values other than the above two are specified, it's a bad request, so I was thinking of leaving room to incorporate some error handling in the future.I delete them.",x
34849594,y-tabata,https://api.github.com/repos/keycloak/keycloak/pulls/20237,1193472841,2023-05-15T08:01:52Z,services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java,"@@ -802,5 +806,100 @@ RealmModel getRealm() {         ClientConnection getClientConnection() {             return clientConnection;         }++        public void addPermissions(List<String> permissionList, String permissionResourceFormat) {+            if (permissionResourceFormat == null) {+                permissionResourceFormat = ""id"";+            }++            switch (permissionResourceFormat) {+                case ""id"":+                    addPermissionsById(permissionList);+                    break;+                case ""uri"":+                    addPermissionsByUri(permissionList);+                    break;+                default:+                    // return nothing+                    return;+            }++        }++        private void addPermissionsById(List<String> permissionList) {+            for (String permission : permissionList) {+                String[] parts = permission.split(""#"");+                String rsid = parts[0];++                if (parts.length == 1) {+                    addPermission(rsid);+                } else {+                    String[] scopes = parts[1].split("","");+                    addPermission(rsid, scopes);+                }+            }+        }++        private void addPermissionsByUri(List<String> permissionList) {+            StoreFactory storeFactory = authorization.getStoreFactory();++            for (String permission : permissionList) {+                String[] parts = permission.split(""#"");+                String uri = parts[0];++                List<Resource> resources = getResourceListByUri(uri, storeFactory);++                if (parts.length == 1) {+                    resources.stream().forEach(resource -> addPermission(resource.getId()));+                } else {+                    String[] scopes = parts[1].split("","");+                    resources.stream().forEach(resource -> addPermission(resource.getId(), scopes));+                }+            }+        }++        private List<Resource> getResourceListByUri(String uri, StoreFactory storeFactory) {+            Map<Resource.FilterOption, String[]> search = new EnumMap<>(Resource.FilterOption.class);+            search.put(Resource.FilterOption.URI, new String[] { uri });+            ResourceServer resourceServer = storeFactory.getResourceServerStore()+                .findByClient(getRealm().getClientByClientId(getAudience()));+            List<Resource> resources = storeFactory.getResourceStore().find(getRealm(), resourceServer, search, -1,+                Constants.DEFAULT_MAX_RESULTS);++            if (!resources.isEmpty()) {+                return resources;+            }+","Similar to ResourceSetService, we'd like to support pattern matching using wildcards.https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/authorization/admin/ResourceSetService.java#L423-L453",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20201,1193671330,2023-05-15T10:55:52Z,js/apps/admin-ui/src/PageHeader.tsx,"@@ -172,13 +172,18 @@ export const Header = () => {     );   }; +  const logo = environment.logo ? environment.logo : ""/logo.svg"";+  const logoUrl = environment.logoUrl+    ? environment.logoUrl+    : toDashboard({ realm });+   return (     <PageHeader       showNavToggle       logo={-        <Link to={toDashboard({ realm })}>+        <Link to={logoUrl}>",Is anyone doing or requiring this right now? I feel like being able to change this at least for the Admin Console would be a bit of an anti-feature to be honest.,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20188,1193750693,2023-05-15T12:14:33Z,js/apps/admin-ui/public/locales/en/identity-providers-help.json,"@@ -38,6 +38,9 @@   ""trustEmail"": ""If enabled, email provided by this provider is not verified even if verification is enabled for the realm."",   ""accountLinkingOnly"": ""If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider"",   ""hideOnLoginPage"": ""If hidden, login with this provider is possible only if requested explicitly, for example using the 'kc_idp_hint' parameter."",+  ""filteredByClaim"": ""If true, enables filter by claim, to reject authenticated users whose JWT claims do not include the configured claim filter"",",It will be good if the tooltip also contains the information that it is applicable just for ID Token in my opinion (similarly like you did for the documentation),
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20189,1193756603,2023-05-15T12:20:04Z,docs/documentation/server_admin/topics/authentication/conditions.adoc,"@@ -24,7 +24,7 @@ This checks if the other executions in the flow are configured for the user. The Execution requirements section includes an example of the OTP form.  `Condition - User Attribute`::-This checks if the user has set up the required attribute.+This checks if the user or any of the joined groups have set up the required attribute.","Shall we make clear that attributes are not inherited from parent groups but only those the user is a direct member of?I'm not 100% sure if the attributes should always be resolved from groups in case they are unavailable from the user.  It might end up with additional queries to the database even though you are not relying on attributes from groups or not using groups at all. It might happen that groups (and their attributes) are already being fetched before entering this authenticator, but I'm not sure.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20188,1193759227,2023-05-15T12:22:28Z,services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java,"@@ -389,6 +389,37 @@ public BrokeredIdentityContext getFederatedIdentity(String response) {                 throw new IdentityBrokerException(""Mismatch between the subject in the id_token and the subject from the user_info endpoint"");             } +            if (getConfig().isFilteredByClaims()) {+                String filterName = getConfig().getClaimFilterName();+                String filterValue = getConfig().getClaimFilterValue();++                logger.infof(""Filtering user %s by %s=%s"", idToken.getOtherClaims().get(getusernameClaimNameForIdToken()), filterName, filterValue);","Is it possible to use `tracef` instead of `infof` (in this place and also in all other in this class) and also use `debugf` instead of `warnf` (in this place and also in all other in this class). As AFAIK `info` and `warn` are usually for special messages or server-wide messages/issues, but not for regular ""user"" requests.",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/20072,1193850568,2023-05-15T13:36:56Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -129,4 +129,12 @@ The new artifact with Java EE support is `org.keycloak:keycloak-admin-client-jee     <artifactId>keycloak-admin-client-jee</artifactId>     <version>22.0.0</version> </dependency>-----\ No newline at end of file+----++= Passthrough proxy mode changes++Keycloak's proxy configuration setting for mode *passthrough* does now longer parse HTTP forwarding headers in the request, as when a proxy forwards an HTTPS connection in passthrough mode, a proxy is unable to add, remove or update HTTP headers.","@ahus1 Should be like this, right?```suggestionKeycloak's proxy configuration setting for mode *passthrough* does no longer parse HTTP forwarding headers in the request, as when a proxy forwards an HTTPS connection in passthrough mode, a proxy is unable to add, remove or update HTTP headers.```",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/20072,1193854846,2023-05-15T13:39:37Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -129,4 +129,12 @@ The new artifact with Java EE support is `org.keycloak:keycloak-admin-client-jee     <artifactId>keycloak-admin-client-jee</artifactId>     <version>22.0.0</version> </dependency>-----\ No newline at end of file+----++= Passthrough proxy mode changes++Keycloak's proxy configuration setting for mode *passthrough* does now longer parse HTTP forwarding headers in the request, as when a proxy forwards an HTTPS connection in passthrough mode, a proxy is unable to add, remove or update HTTP headers.",Or just `no longer parses`?,
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/20201,1193869206,2023-05-15T13:48:17Z,js/apps/admin-ui/src/PageHeader.tsx,"@@ -172,13 +172,18 @@ export const Header = () => {     );   }; +  const logo = environment.logo ? environment.logo : ""/logo.svg"";+  const logoUrl = environment.logoUrl+    ? environment.logoUrl+    : toDashboard({ realm });+   return (     <PageHeader       showNavToggle       logo={-        <Link to={toDashboard({ realm })}>+        <Link to={logoUrl}>","> Is anyone doing or requiring this right now? I feel like being able to change this at least for the Admin Console would be a bit of an anti-feature to be honest.I disagree.  It's very common for clicking on a logo to take you to the home page for whatever that logo represents.  That's what a user often expects.  So if someone wants that behavior we should let them do it.Also, customization should be as similar as possible between admin and account console.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19810,1193980323,2023-05-15T15:07:44Z,js/apps/admin-ui/src/realm-settings/EmailTab.tsx,"@@ -33,18 +33,20 @@ import ""./realm-settings-section.css"";  type RealmSettingsEmailTabProps = {   realm: RealmRepresentation;+  save: (realm: RealmRepresentation) => void; };  export const RealmSettingsEmailTab = ({   realm: initialRealm,","Since this is the only place we're getting the realm from there is no longer a need to keep calling it `initialRealm`.```suggestion  realm,```",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19810,1193982281,2023-05-15T15:09:19Z,js/apps/admin-ui/src/realm-settings/EmailTab.tsx,"@@ -33,18 +33,20 @@ import ""./realm-settings-section.css"";  type RealmSettingsEmailTabProps = {   realm: RealmRepresentation;+  save: (realm: RealmRepresentation) => void; };  export const RealmSettingsEmailTab = ({   realm: initialRealm,+  save, }: RealmSettingsEmailTabProps) => {   const { t } = useTranslation(""realm-settings"");   const { adminClient } = useAdminClient();   const { realm: realmName } = useRealm();   const { addAlert, addError } = useAlerts();   const currentUser = useCurrentUser();+  const [realm] = useState(initialRealm);",Since this value is always passed from higher up there is no need to keep it in a state any longer.```suggestion```,x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19810,1193989038,2023-05-15T15:14:39Z,js/apps/admin-ui/src/realm-settings/EmailTab.tsx,"@@ -113,14 +100,26 @@ export const RealmSettingsEmailTab = ({     toggleTest();   }; +  const saveForm = async (form: RealmRepresentation) => {+    try {+      const savedRealm = { ...realm, ...form };+      // For default value, back end is expecting null instead of empty string+      if (savedRealm.smtpServer?.port === """") savedRealm.smtpServer.port = null;","Instead of handling this here, perhaps we can handle this in the `save` function of the `RealmSettingsTabs` component?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19810,1193991675,2023-05-15T15:16:43Z,js/apps/admin-ui/src/realm-settings/EmailTab.tsx,"@@ -113,14 +100,26 @@ export const RealmSettingsEmailTab = ({     toggleTest();   }; +  const saveForm = async (form: RealmRepresentation) => {+    try {+      const savedRealm = { ...realm, ...form };+      // For default value, back end is expecting null instead of empty string+      if (savedRealm.smtpServer?.port === """") savedRealm.smtpServer.port = null;+      save(savedRealm);+      addAlert(t(""saveSuccess""), AlertVariant.success);+    } catch (error) {+      addError(""realm-settings:saveError"", error);",There should be no need to show any further messages as the `save` function in the `RealmSettingsTabs` component already handles this.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/20358,1194813154,2023-05-16T08:34:18Z,model/legacy-private/src/main/java/org/keycloak/migration/migrators/MigrateTo22_0_0.java,"@@ -0,0 +1,70 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.migration.migrators;++import org.keycloak.migration.ModelVersion;+import org.keycloak.models.ClientScopeModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.representations.idm.RealmRepresentation;++public class MigrateTo22_0_0 implements Migration {++    public static final ModelVersion VERSION = new ModelVersion(""22.0.0"");+    public static final String OIDC_USERMODEL_PROPERTY_MAPPER = ""oidc-usermodel-property-mapper"";+    public static final String SAML_USER_PROPERTY_MAPPER = ""saml-user-property-mapper"";+    public static final String OPENID_CONNECT = ""openid-connect"";+    public static final String SAML = ""saml"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";++    @Override+    public void migrate(KeycloakSession session) {+        session.realms().getRealmsStream()","Should we do the Liquibase migration for this instead? The advantage is that we don't need to load all realms and all client scopes, but we can update only those we are interested in. See for example this:https://github.com/keycloak/keycloak/blob/main/model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate21_0_2_TermsAndConditionsRequiredAction.java",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/20358,1194816580,2023-05-16T08:36:36Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/clientscope/ClientScopeModelTest.java,"@@ -97,4 +107,73 @@ public void testClientScopes() {             return null;         });     }++    @Test+    @RequireProvider(value=ClientScopeProvider.class, only=""jpa"")+    public void shouldMigrateUserPropertyMapperConfigInKeycloak22ForOIDC() {","I like the idea of having the tests like this, however, if we change the migration to Liquibase one, this would not work.If we decide to have the migration the current way, we should introduce a separate migration test class so it is in one place.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/20358,1195959766,2023-05-17T05:35:24Z,model/legacy-private/src/main/java/org/keycloak/migration/migrators/MigrateTo22_0_0.java,"@@ -0,0 +1,70 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.migration.migrators;++import org.keycloak.migration.ModelVersion;+import org.keycloak.models.ClientScopeModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.representations.idm.RealmRepresentation;++public class MigrateTo22_0_0 implements Migration {++    public static final ModelVersion VERSION = new ModelVersion(""22.0.0"");+    public static final String OIDC_USERMODEL_PROPERTY_MAPPER = ""oidc-usermodel-property-mapper"";+    public static final String SAML_USER_PROPERTY_MAPPER = ""saml-user-property-mapper"";+    public static final String OPENID_CONNECT = ""openid-connect"";+    public static final String SAML = ""saml"";+    public static final String USER_ATTRIBUTE = ""user.attribute"";++    @Override+    public void migrate(KeycloakSession session) {+        session.realms().getRealmsStream()","The Liquibase migration turned out to be complicated as it would manipulate a CLOB field which needs different in the various databases. Liquibase's Java API also didn't allow for calculated values. The updated version of the code now handles old and new values, and old values print a warning. ",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20419,1196577360,2023-05-17T14:04:09Z,docs/documentation/server_admin/topics/export-import.adoc,"@@ -98,6 +98,9 @@ You cannot use the `keycloak.import` parameter with `keycloak.migration.X` param  {project_name} imports most resources from the Admin Console as well as exporting most resources. {project_name} does not support the export of users. +Admin console import does not preserve IDs. When you import a resource, {project_name} generates a new ID for the resource.+This behavior is different from the export/import the full database mechanism described above.","```suggestionAdmin Console import does not preserve IDs. When you import a resource, {project_name} generates a new ID for the resource.This behavior is different from the export/import of the full database mechanism described previously.```",
7305571,mkrueger92,https://api.github.com/repos/keycloak/keycloak/pulls/17577,1196971931,2023-05-17T19:31:44Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanUserSessionProvider.java,"@@ -739,7 +740,17 @@ protected void removeUserSession(UserSessionEntity sessionEntity, boolean offlin     UserSessionAdapter wrap(RealmModel realm, UserSessionEntity entity, boolean offline) {         InfinispanChangelogBasedTransaction<String, UserSessionEntity> userSessionUpdateTx = getTransaction(offline);         InfinispanChangelogBasedTransaction<UUID, AuthenticatedClientSessionEntity> clientSessionUpdateTx = getClientSessionTransaction(offline);-        return entity != null ? new UserSessionAdapter(session, this, userSessionUpdateTx, clientSessionUpdateTx, realm, entity, offline) : null;++        if (entity == null) {+            return null;+        }++        UserModel user =  session.users().getUserById(realm, entity.getUser());+        if (user == null) {+            return null;","I think the session removal should not be done.I have the following reasons:- The session will time out sooner or later anyway.- Especially with federated users, it could be a temporary issue. A later lookup could return a user. With offline sessions not being invalidated here lots of users would not need to login again but just wait until the temporary issue is solved.",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20217,1197701785,2023-05-18T11:20:57Z,themes/src/main/resources/theme/base/login/login-config-totp.ftl,"@@ -18,7 +18,7 @@             <#if mode?? && mode = ""manual"">                 <li>                     <p>${msg(""loginTotpManualStep2"")}</p>-                    <p><span id=""kc-totp-secret-key"">${totp.totpSecretEncoded}</span></p>+                    <p><span id=""kc-totp-secret-key"">${totpSecretEncoded}</span></p>",Minor: Is it possible to revert this line (as well as the line 42) and keep using the `totpSecretEncoded` and `totpSecretQrCode` from the TotpBean? This may mean some slight refactoring of `org.keycloak.forms.login.freemarker.model.TotpBean` to read the stuff from authSession instead of what is currently used here.Also the `totpSecret` field won't be needed on `TotpBean` with your latest changes and can be hopefully cleaned?Also it will allow to few calls of `setAttribute` in the `UpdateTotp` class as attributes won't be needed to be set directly in the context.,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20375,1197933224,2023-05-18T14:58:39Z,docs/guides/server/configuration.adoc,"@@ -182,7 +199,9 @@ To run a `build`, enter the following command:  This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when running the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into an optimized Keycloak image. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into an optimized Keycloak image.+Therefore, we strongly do not recommend to specify any sensitive data (such as `db-password`) as the build options.+This applies across all the available configuration sources.","I'd rephrase a bit (as it's not fully accurate – `db-password` is never a build option).```suggestionFor a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into an optimized Keycloak image. For example, configuration for credentials such as `db-password` (which is a runtime option) must not get persisted for security reasons.[WARNING]All build options are persisted in plain text. Do not store any sensitive data as the build options. This applies across all the available configuration sources, including the KeyStore Config Source. Hence we also recommend not storing any build options in the KeyStore.```WDYT?",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20375,1197943487,2023-05-18T15:08:09Z,docs/guides/server/configuration.adoc,"@@ -101,6 +103,21 @@ You can also specify an explicit configuration file location using the `[-cf|--c  <@kc.start rootParameters=""--config-file=/path/to/myconfig.conf""/> +=== Format for loading properties from a Java KeyStore","Comment unrelated to this line.Could you also please add mentions of the KeyStore in the initial chapter?https://github.com/keycloak/keycloak/blob/9b937a487b0b6d35eb99cf66aa433226e6feb073/docs/guides/server/configuration.adoc?plain=1#L11-L40Also, similar mention to ""Format for raw Quarkus properties"":https://github.com/keycloak/keycloak/blob/9b937a487b0b6d35eb99cf66aa433226e6feb073/docs/guides/server/configuration.adoc?plain=1#L121-L139",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20375,1197953164,2023-05-18T15:17:06Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java,"@@ -165,4 +185,13 @@ public void accept(KeycloakDistribution distribution) {             distribution.setQuarkusProperty(QUARKUS_BUILDTIME_HIBERNATE_METRICS_KEY, ""true"");         }     }++    public static class UpdateSmallRyeKeystoreProps implements Consumer<KeycloakDistribution> {++        @Override+        public void accept(KeycloakDistribution distribution) {+            distribution.setProperty(""config-keystore"", Paths.get(""src/test/resources/keystore"").toAbsolutePath().normalize().toString());+            distribution.setProperty(""config-keystore-password"", ""secret"");+        }+    }",Maybe we could use `distribution.run()` instead of this workaround. See e.g.:https://github.com/keycloak/keycloak/blob/263e86e4342e37b5433d1910596a1a7ddfb630da/quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/HealthDistTest.java#L85,
61745358,lhanusov,https://api.github.com/repos/keycloak/keycloak/pulls/20080,1198678334,2023-05-19T08:14:38Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AccountLinkTest.java,"@@ -60,27 +59,27 @@ import static org.keycloak.testsuite.admin.ApiUtil.createUserWithAdminClient;  import org.keycloak.testsuite.runonserver.RunOnServer;+import org.keycloak.testsuite.util.AccountHelper; import org.keycloak.testsuite.util.FederatedIdentityBuilder;  /**  * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>  * @version $Revision: 1 $  */-@DisableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true) // TODO remove this (KEYCLOAK-16228) public class AccountLinkTest extends AbstractKeycloakTest {",@wojnarfilip @miquelsi @mhajas From my point of view this class can be deleted completely. Because it tests account console from the UI perspective and it doesn't make sense to have it more.,x
61745358,lhanusov,https://api.github.com/repos/keycloak/keycloak/pulls/20080,1198746794,2023-05-19T09:25:43Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AccountLinkTest.java,"@@ -60,27 +59,27 @@ import static org.keycloak.testsuite.admin.ApiUtil.createUserWithAdminClient;  import org.keycloak.testsuite.runonserver.RunOnServer;+import org.keycloak.testsuite.util.AccountHelper; import org.keycloak.testsuite.util.FederatedIdentityBuilder;  /**  * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>  * @version $Revision: 1 $  */-@DisableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true) // TODO remove this (KEYCLOAK-16228) public class AccountLinkTest extends AbstractKeycloakTest {","already discussed it with Filip and Miquel, it tests UserStorage provider so it makes sense to leave this test class as it is ",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1198899373,2023-05-19T12:23:22Z,docs/guides/server/vault.adoc,"@@ -46,6 +56,24 @@ sso__realm_ldap__credential ---- Note the doubled underscores between __sso__ and __realm__ and also between __ldap__ and __credential__. +== Configuring the Java KeyStore-based vault++In order to use the Java KeyStore-based vault, you need to create a KeyStore file first. You can use the following command for doing so:+[source, bash]+----+keytool -importpass -alias test_alias -keystore keystore.p12 -storepass keystorepassword+----+and then enter a value you want to store in the vault.+This by default results to storing the value in a form of generic PBEKey (password based encryption) within SecretKeyEntry.++You can then start Keycloak using the following runtime options:++<@kc.start parameters="" --vault-file=/path/to//keystore.p12 --vault-pass=<value> --vault-type=<value>""/>","Is the double slash intentional?```suggestion<@kc.start parameters="" --vault-file=/path/to/keystore.p12 --vault-pass=<value> --vault-type=<value>""/>```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1198900769,2023-05-19T12:24:57Z,docs/guides/server/vault.adoc,"@@ -46,6 +56,24 @@ sso__realm_ldap__credential ---- Note the doubled underscores between __sso__ and __realm__ and also between __ldap__ and __credential__. +== Configuring the Java KeyStore-based vault++In order to use the Java KeyStore-based vault, you need to create a KeyStore file first. You can use the following command for doing so:+[source, bash]+----+keytool -importpass -alias test_alias -keystore keystore.p12 -storepass keystorepassword+----+and then enter a value you want to store in the vault.+This by default results to storing the value in a form of generic PBEKey (password based encryption) within SecretKeyEntry.++You can then start Keycloak using the following runtime options:++<@kc.start parameters="" --vault-file=/path/to//keystore.p12 --vault-pass=<value> --vault-type=<value>""/>++_Note that the `--vault-type` parameter is optional and defaults to `PKCS12`. Also, if `fips-mode` build option is set to `non-strict`, `vault-type` will be automatically set to `BCFKS`._",```suggestionNote that the `--vault-type` parameter is optional and defaults to `PKCS12`.```,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1198913656,2023-05-19T12:40:05Z,services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java,"@@ -0,0 +1,81 @@+package org.keycloak.vault;++import java.nio.ByteBuffer;++import org.jboss.logging.Logger;++import javax.annotation.Nonnull;+import java.io.IOException;+import java.lang.invoke.MethodHandles;+import java.nio.file.Files;+import java.nio.file.Path;+import java.security.Key;+import java.security.KeyStore;+import java.security.KeyStoreException;+import java.security.NoSuchAlgorithmException;+import java.security.UnrecoverableEntryException;+import java.security.cert.CertificateException;+import java.util.List;+import java.util.Optional;++public class FilesKeystoreVaultProvider extends AbstractVaultProvider {++    private static final Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());++    private final Path keystorePath;+    private final String keystorePass;+    private final String keystoreType;++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystorePath A path to a vault. Can not be null.+     * @param keystorePass A password to a vault. Can not be null.+     * @param realmName    A realm name. Can not be null.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = ""PKCS12"";+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    /**+     * Creates a new {@link FilesKeystoreVaultProvider}.+     *+     * @param keystoreType Specifies a type of keystore. Can not be null. Default value is PKCS12.+     */+    public FilesKeystoreVaultProvider(@Nonnull Path keystorePath, @Nonnull String keystorePass, @Nonnull String keystoreType,+                                      @Nonnull String realmName, @Nonnull List<VaultKeyResolver> resolvers) {+        super(realmName, resolvers);+        this.keystorePath = keystorePath;+        this.keystorePass = keystorePass;+        this.keystoreType = keystoreType;+        logger.debugf(""KeystoreVaultProvider will operate in %s directory"", keystorePath.toAbsolutePath());+    }++    @Override+    protected VaultRawSecret obtainSecretInternal(String alias) {+        KeyStore ks;+        Key key;+        try {+            if (!Files.exists(keystorePath.toRealPath())) {+                logger.warnf(""Cannot find secret alias %s in %s"", alias, keystorePath.toRealPath());+                return DefaultVaultRawSecret.forBuffer(Optional.empty());","I think we might want to throw an exception here```suggestion                throw new VaultNotFoundException(""The keystore file for Keycloak Vault was not found"");```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1198936198,2023-05-19T13:04:44Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/vault/KeycloakVaultTest.java,"@@ -37,7 +37,7 @@  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-@EnableVault+@EnableVault(providerId = EnableVault.PROVIDER_ID.PLAINTEXT)",I think we should rather make the `KeycloakVaultTest` abstract and create two derived classes – `KeycloakPlaintextVaultTest` and `KeycloakKeystoreVaultTest` (we already have that one).,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1198956522,2023-05-19T13:25:38Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/vault/KeycloakVaultTest.java,"@@ -81,6 +81,9 @@ public void run(KeycloakSession session) {             try (VaultStringSecret secret = transcriber.getStringSecret(invalidEntry)) {                 Optional<String> optional = secret.get();                 Assert.assertFalse(optional.isPresent());+            } catch (RuntimeException e) {+                // expected exception is thrown.+                Assert.assertEquals(""Cannot invoke \""java.security.Key.getEncoded()\"" because \""key\"" is null"", e.getMessage());",Then we should probably have some switch or something to expect the exception only when relevant.,
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1199734317,2023-05-21T09:56:14Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/vault/KeycloakVaultTest.java,"@@ -37,7 +37,7 @@  *  * @author <a href=""mailto:sguilhen@redhat.com"">Stefan Guilhen</a>  */-@EnableVault+@EnableVault(providerId = EnableVault.PROVIDER_ID.PLAINTEXT)","I simplified and changed the structure in order to improve readability. So right now we have the abstract superclass `AbstractKeycloakVaultTest` with the common functionality for both `KeycloakKeystoreVaultTest` and `KeycloakKeystorePlaintextTest`. These two just start the server with necessary parameters while using a different provider (based on the `@EnableVault` annotation). All assertion is happening in the superclass.I think there is no need for overriding a method with specific functionality in the subclasses, since the code is still the same for both the subclasses (the annotation is the only difference). WDYT?",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/19644,1200597347,2023-05-22T14:28:52Z,services/src/test/java/org/keycloak/vault/KeystoreVaultProviderTest.java,"@@ -0,0 +1,74 @@+package org.keycloak.vault;++import org.junit.Assert;+import org.junit.Assume;+import org.junit.Before;+import org.junit.Test;+import org.keycloak.common.util.Environment;++import java.nio.file.Paths;+import java.util.Arrays;++import static org.junit.Assert.assertNotNull;+import static org.junit.Assert.assertThat;+import static org.keycloak.vault.SecretContains.secretContains;++/**+ * Tests for {@link FilesKeystoreVaultProvider}.+ *+ * @author Peter Zaoral+ */+public class KeystoreVaultProviderTest {++    @Before+    public void before() {+        // TODO: improve when the supported keystore types for FIPS will be unified across the codebase+        Assume.assumeFalse(""Java is in FIPS mode. Skipping the test."", Environment.isJavaInFipsMode());+    }++    @Test+    public void shouldObtainSecret() {+        //given+        // keytool -importpass -storetype pkcs12 -alias test_alias -keystore myks -storepass keystorepassword+        VaultProvider provider = new FilesKeystoreVaultProvider(Paths.get(Scenario.EXISTING.getAbsolutePathAsString() + ""/myks""), ""keystorepassword"", ""PKCS12"",""test"",+                Arrays.asList(AbstractVaultProviderFactory.AvailableResolvers.REALM_UNDERSCORE_KEY.getVaultKeyResolver()));++        //when+        VaultRawSecret secret1 = provider.obtainSecret(""alias"");++        //then+        assertNotNull(secret1);+        assertNotNull(secret1.get().get());+        assertThat(secret1, secretContains(""topsecret""));+    }++    @Test+    public void shouldObtainSecretFromDifferentKeystoreType() {+        //given+        VaultProvider provider = new FilesKeystoreVaultProvider(Paths.get(Scenario.EXISTING.getAbsolutePathAsString() + ""/myks.jceks""), ""keystorepassword"", ""JCEKS"", ""test"",+                Arrays.asList(AbstractVaultProviderFactory.AvailableResolvers.REALM_UNDERSCORE_KEY.getVaultKeyResolver()));++        //when+        VaultRawSecret secret1 = provider.obtainSecret(""alias"");++        //then+        assertNotNull(secret1);+        assertNotNull(secret1.get().get());+        assertThat(secret1, secretContains(""topsecret""));+    }++    @Test+    public void shouldFailBecauseOfTypeMismatch() {+        //given+        VaultProvider provider = new FilesKeystoreVaultProvider(Paths.get(Scenario.EXISTING.getAbsolutePathAsString() + ""/myks""), ""keystorepassword"", ""JCEKS"", ""test"",+                Arrays.asList(AbstractVaultProviderFactory.AvailableResolvers.REALM_UNDERSCORE_KEY.getVaultKeyResolver()));++        //when+        try {+            provider.obtainSecret(""alias"");+        } catch (RuntimeException e) {+            //then expected exception is thrown+            Assert.assertEquals(""java.io.IOException: Invalid keystore format"", e.getMessage());+        }","Sorry, I missed this before. There should be something like this to ensure the test fails if there's no exception thrown.```suggestion        assertThrows(""java.io.IOException: Invalid keystore format"", RuntimeException.class, () -> provider.obtainSecret(""alias""));```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20375,1200647724,2023-05-22T15:05:09Z,docs/guides/server/configuration.adoc,"@@ -101,6 +104,19 @@ You can also specify an explicit configuration file location using the `[-cf|--c  <@kc.start rootParameters=""--config-file=/path/to/myconfig.conf""/> +=== Format for loading properties from a Java KeyStore",Could you please also add the keystore in the example to be super explicit to users:https://github.com/keycloak/keycloak/blob/7fccb6ab797c5af8028d0e22fc0243d970d23b8d/docs/guides/server/configuration.adoc?plain=1#L22,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20504,1200929716,2023-05-22T19:11:15Z,docs/documentation/server_development/topics/themes.adoc,"@@ -114,6 +114,11 @@ You can do this either by logging in through your application or by opening the ==== Be sure to re-enable caching in production as it will significantly impact performance. ====+[NOTE]+====+If you want to manually delete the content of the themes cache, you can do so by delete directory `data/tmp/kc-gzip-cache` of the server distribution.+It can be good idea to do that for instance when you re-deployed custom providers or custom themes and you did not disable themes caching in the previous server executions.","```suggestionIf you want to manually delete the content of the themes cache, you can do so by deleting the `data/tmp/kc-gzip-cache directory of the server distribution.A good occasion to delete the themes cache is if you redeployed custom providers or custom themes without disabling themes caching in the previous server executions.```",
34849594,y-tabata,https://api.github.com/repos/keycloak/keycloak/pulls/20237,1201645674,2023-05-23T07:04:47Z,services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java,"@@ -802,5 +806,100 @@ RealmModel getRealm() {         ClientConnection getClientConnection() {             return clientConnection;         }++        public void addPermissions(List<String> permissionList, String permissionResourceFormat) {+            if (permissionResourceFormat == null) {+                permissionResourceFormat = ""id"";+            }++            switch (permissionResourceFormat) {+                case ""id"":+                    addPermissionsById(permissionList);+                    break;+                case ""uri"":+                    addPermissionsByUri(permissionList);+                    break;+                default:+                    // return nothing+                    return;+            }++        }++        private void addPermissionsById(List<String> permissionList) {+            for (String permission : permissionList) {+                String[] parts = permission.split(""#"");+                String rsid = parts[0];++                if (parts.length == 1) {+                    addPermission(rsid);+                } else {+                    String[] scopes = parts[1].split("","");+                    addPermission(rsid, scopes);+                }+            }+        }++        private void addPermissionsByUri(List<String> permissionList) {+            StoreFactory storeFactory = authorization.getStoreFactory();++            for (String permission : permissionList) {+                String[] parts = permission.split(""#"");+                String uri = parts[0];++                List<Resource> resources = getResourceListByUri(uri, storeFactory);++                if (parts.length == 1) {+                    resources.stream().forEach(resource -> addPermission(resource.getId()));+                } else {+                    String[] scopes = parts[1].split("","");+                    resources.stream().forEach(resource -> addPermission(resource.getId(), scopes));+                }+            }+        }++        private List<Resource> getResourceListByUri(String uri, StoreFactory storeFactory) {+            Map<Resource.FilterOption, String[]> search = new EnumMap<>(Resource.FilterOption.class);+            search.put(Resource.FilterOption.URI, new String[] { uri });+            ResourceServer resourceServer = storeFactory.getResourceServerStore()+                .findByClient(getRealm().getClientByClientId(getAudience()));+            List<Resource> resources = storeFactory.getResourceStore().find(getRealm(), resourceServer, search, -1,+                Constants.DEFAULT_MAX_RESULTS);++            if (!resources.isEmpty()) {+                return resources;+            }+","@tnorimat Thanks. Path matching is not for requests using a wildcard but for resources using a wildcard defined by the authorization service.BTW, we think it's better to be able to specify whether we'd like to use path matching or not the same as ResourceSetService, especially considering performance, I introduced the `permission_resource_matching_uri` parameter.",
314690,thomasdarimont,https://api.github.com/repos/keycloak/keycloak/pulls/20513,1202160349,2023-05-23T11:49:40Z,server-spi-private/src/main/java/org/keycloak/models/utils/ModelToRepresentation.java,"@@ -230,16 +230,28 @@ public static GroupRepresentation toGroupHierarchy(GroupModel group, boolean ful         return rep;     } -    private static boolean groupMatchesSearchOrIsPathElement(GroupModel group, String search, Boolean exact) {+    public static boolean groupMatchesSearchOrIsPathElement(GroupModel group, String search, Boolean exact) {","just keept to original signature, and used the optional ""exact"" parameter passed down from `org.keycloak.models.utils.ModelToRepresentation#searchForGroupByName(org.keycloak.models.KeycloakSession, org.keycloak.models.RealmModel, boolean, java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer)`I'd keep that parameter Boolean and use boolean downstream.",
314690,thomasdarimont,https://api.github.com/repos/keycloak/keycloak/pulls/20513,1202216476,2023-05-23T12:18:45Z,server-spi-private/src/main/java/org/keycloak/models/utils/ModelToRepresentation.java,"@@ -230,16 +230,28 @@ public static GroupRepresentation toGroupHierarchy(GroupModel group, boolean ful         return rep;     } -    private static boolean groupMatchesSearchOrIsPathElement(GroupModel group, String search, Boolean exact) {+    public static boolean groupMatchesSearchOrIsPathElement(GroupModel group, String search, Boolean exact) {",@pedroigor I also replaced the duplicate implemenetation of `groupMatchesSearchOrIsPathElement`  in `GroupsResource` with a call to `ModelToRepresentation#groupMatchesSearchOrIsPathElement.`Is this the right place?,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20512,1202273689,2023-05-23T12:51:55Z,docs/documentation/server_development/topics/user-storage/javaee.adoc,"@@ -1,87 +1,16 @@  === Leveraging Jakarta EE -The user storage providers can be packaged within any Jakarta EE component if you set up the `META-INF/services`-file correctly to point to your providers. For example, if your provider needs to use third-party libraries, you-can package up your provider within an EAR and store these third-party libraries in the `lib/` directory of the EAR.-Also note that provider JARs can make use of the `jboss-deployment-structure.xml` file that EJBs, WARS, and EARs-can use in a {appserver_name} environment. For more details on this file, see the {appserver_name} documentation. It-allows you to pull in external dependencies among other fine-grained actions.+Since its version 20, Keycloak relies only on Quarkus. And unlike WildFly, Quarkus is not an Application Server. Read more about this at https://www.keycloak.org/migration/migrating-to-quarkus#_quarkus_is_not_an_application_server . -Provider implementations are required to be plain java objects. But we also currently support-implementing `UserStorageProvider` classes as Stateful EJBs. This is especially useful if you want to use JPA-to connect to a relational store. This is how you would do it:+Therefore, the User Storage Providers cannot be packaged within any Jakarta EE component or make it an EJB, as it was possible when Keycloak ran over WildFly in the previous versions.","```suggestionTherefore, the User Storage Providers cannot be packaged within any Jakarta EE component or make it an EJB as was the case when Keycloak ran over WildFly in previous versions.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20512,1202276426,2023-05-23T12:53:35Z,docs/documentation/server_development/topics/user-storage/javaee.adoc,"@@ -1,87 +1,16 @@  === Leveraging Jakarta EE -The user storage providers can be packaged within any Jakarta EE component if you set up the `META-INF/services`-file correctly to point to your providers. For example, if your provider needs to use third-party libraries, you-can package up your provider within an EAR and store these third-party libraries in the `lib/` directory of the EAR.-Also note that provider JARs can make use of the `jboss-deployment-structure.xml` file that EJBs, WARS, and EARs-can use in a {appserver_name} environment. For more details on this file, see the {appserver_name} documentation. It-allows you to pull in external dependencies among other fine-grained actions.+Since its version 20, Keycloak relies only on Quarkus. And unlike WildFly, Quarkus is not an Application Server. Read more about this at https://www.keycloak.org/migration/migrating-to-quarkus#_quarkus_is_not_an_application_server . -Provider implementations are required to be plain java objects. But we also currently support-implementing `UserStorageProvider` classes as Stateful EJBs. This is especially useful if you want to use JPA-to connect to a relational store. This is how you would do it:+Therefore, the User Storage Providers cannot be packaged within any Jakarta EE component or make it an EJB, as it was possible when Keycloak ran over WildFly in the previous versions. -[source,java]------@Stateful-@Local(EjbExampleUserStorageProvider.class)-public class EjbExampleUserStorageProvider implements UserStorageProvider,-        UserLookupProvider,-        UserRegistrationProvider,-        UserQueryProvider,-        CredentialInputUpdater,-        CredentialInputValidator,-        OnUserCache-{-    @PersistenceContext-    protected EntityManager em;+Providers implementations are required to be plain java objects which implement the suitable User Storage SPI interfaces, as was explained in the previous sections. And they must be packaged and deployed as stated in this Migration Guide: -    protected ComponentModel model;-    protected KeycloakSession session;+  - https://www.keycloak.org/migration/migrating-to-quarkus#_migrating_custom_providers -    public void setModel(ComponentModel model) {-        this.model = model;-    }+But it is still feasible to implement your custom `UserStorageProvider` class which is able to integrate to an external database via JPA Entity Manager, as shown in this example:","```suggestionYou can still implement your custom `UserStorageProvider` class, which is able to integrate an external database by JPA Entity Manager, as shown in this example:```",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/20237,1203459998,2023-05-24T05:33:39Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/UmaGrantTypeTest.java,"@@ -371,6 +372,37 @@ public void testObtainRptUsingAccessToken() throws Exception {         assertTrue(permissions.isEmpty());     } +    @Test+    public void testObtainDecisionUsingAccessToken() throws Exception {+        AccessTokenResponse accessTokenResponse = getAuthzClient().obtainAccessToken(""marta"", ""password"");",The following test pattern is missing:[1]- machingUri: false- result: false[2]- `uri` is empty[3]- `uri` is empty- `scopes` exist,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20375,1204077575,2023-05-24T12:52:53Z,docs/guides/server/configuration.adoc,"@@ -182,7 +207,10 @@ To run a `build`, enter the following command:  This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when running the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into an optimized Keycloak image. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into an optimized Keycloak image. For example, configuration for credentials such as `db-password` (which is a runtime option) must not get persisted for security reasons.","We are not using `runtime option` along this guide but using `configuration option` (vs `build option`) to refer to runtime options.I think we should keep the same terminology.See https://www.keycloak.org/server/configuration#_create_an_optimized_keycloak_build:```As you may notice, the command above shows build options that should be invoked. Keycloak distinguishes between build options, that are usable when invoking the build command, and configuration options, that are usable when starting up the server.```I hope we don't enter into discussions because of this as it was extensively discussed in the past :)",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20375,1204082021,2023-05-24T12:55:45Z,docs/guides/server/configuration.adoc,"@@ -182,7 +207,10 @@ To run a `build`, enter the following command:  This command shows `build options` that you enter. Keycloak distinguishes between **build options**, that are usable when running the `build` command, and **configuration options**, that are usable when starting up the server. -For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into an optimized Keycloak image. For example, configuration for credentials such as `db-password` must not get persisted for security reasons.+For a non-optimized startup of Keycloak, this distinction has no effect. However, if you run a build before the startup,  only a subset of options is available to the build command. The restriction is due to the build options getting persisted into an optimized Keycloak image. For example, configuration for credentials such as `db-password` (which is a runtime option) must not get persisted for security reasons.++[WARNING]+All build options are persisted in a plain text. Do not store any sensitive data as the build options. This applies across all the available configuration sources, including the KeyStore Config Source. Hence we also do not recommend to store any build options in the KeyStore.",I would also make explicit that the keystore is meant for storing sensitive data and for any other option you should use other config sources.,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20375,1204098373,2023-05-24T13:05:23Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java,"@@ -132,6 +133,26 @@ void testUnknownQuarkusBuildTimePropertyApplied(LaunchResult result) {                 .body(containsString(""jvm_gc_""));     } +    @Test+    @Launch({ ""start"", ""--http-enabled=true"", ""--hostname-strict=false"", ""--config-keystore=keystore"" })+    @Order(10)+    void testMissingSmallRyeKeyStoreProperty(LaunchResult result) {+        CLIResult cliResult = (CLIResult) result;+        cliResult.assertError(""The config property smallrye.config.source.keystore.kc-default.password is required but it could not be found in any config source"");+        cliResult.assertNoBuild();+    }++    @Test+    @Order(11)+    void testSmallRyeKeyStoreConfigSource(KeycloakDistribution distribution) {",Is it actually covering loading the database credentials from the Keystore?,
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/20449,1204838587,2023-05-24T23:07:27Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -195,3 +190,36 @@ Up to this version, the resolving of fallback messages was inconsistent across t The implementation has now been unified for all themes. In general, the message for the most specific matching language tag has the highest priority. If there are both a realm localization message and a Theme 18n message, the realm localization message has the higher priority. Summarized, the priority of the messages is as follows  (RL = realm localization, T = Theme i18n files): `RL <variant> > T <variant> > RL <region> > T <region> > RL <language> > T <language> > RL en > T en`.  Probably this can be better explained with an example: When the variant `de-CH-1996` is requested and there is a realm localization message for the variant, this message will be used. If such a realm localization message does not exist, the Theme i18n files are searched for a corresponding message for that variant. If such a message does not exist, a realm localization message for the region (`de-CH`) will be searched. If such a realm localization message does not exist, the Theme i18n files are searched for a message for that region. If still no message is found, a realm localization message for the language (`de`) will be searched. If there is no matching realm localization message, the Theme i18n files are be searched for a message for that language. As last fallback, the English (`en`) translation is used: First, an English realm localization will be searched - if not found, the Theme 18n files are searched for an English message.++== Deprecation of Keycloak OpenID Connect Adapters++From this release, we are no longer investing our time on some of Keycloak OpenID Connect Adapters:++* Keycloak Wildfly OpenID Connect Adapter+* Keycloak JEE Servlet OpenID Connect Adapter+* Keycloak Spring Boot and Spring Security OpenID Connect Adapter++This move is already reflected in our documentation and in our quickstart repository. Please, consider look at the following+references for more information:++* link:https://github.com/keycloak/keycloak-quickstarts[Keycloak Quickstart GitHub Repository]+* link:https://www.keycloak.org/docs/latest/securing_apps/[Keycloak Securing Applications Documentation]++We recommend to start looking at migrating your applications to the alternatives available from the references above as those+adapters should not be available anymore from future releases.++== Deprecation of Keycloak JEE SAML Adapter++From this release, we are no longer investing our time on the Keycloak JEE SAML Adapter.++The official adapter is now based on Jakarta and should be used as soon as you migrate your applications to this technology.++This move is already reflected in our documentation and in our quickstart repository. Please, consider look at the following","Not an issue, only a suggestion:""The Keycloak JEE SAML Adapter has been discontinued, and we will no longer invest our time on its development following this release.The official adapter is now based on Jakarta and should be used as soon as you switch your applications to this technology.This change is already in our documentation and in our quickstart repository. For more information, please consider looking at the following references:""",
21758,abstractj,https://api.github.com/repos/keycloak/keycloak/pulls/20449,1204841169,2023-05-24T23:12:57Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -195,3 +190,36 @@ Up to this version, the resolving of fallback messages was inconsistent across t The implementation has now been unified for all themes. In general, the message for the most specific matching language tag has the highest priority. If there are both a realm localization message and a Theme 18n message, the realm localization message has the higher priority. Summarized, the priority of the messages is as follows  (RL = realm localization, T = Theme i18n files): `RL <variant> > T <variant> > RL <region> > T <region> > RL <language> > T <language> > RL en > T en`.  Probably this can be better explained with an example: When the variant `de-CH-1996` is requested and there is a realm localization message for the variant, this message will be used. If such a realm localization message does not exist, the Theme i18n files are searched for a corresponding message for that variant. If such a message does not exist, a realm localization message for the region (`de-CH`) will be searched. If such a realm localization message does not exist, the Theme i18n files are searched for a message for that region. If still no message is found, a realm localization message for the language (`de`) will be searched. If there is no matching realm localization message, the Theme i18n files are be searched for a message for that language. As last fallback, the English (`en`) translation is used: First, an English realm localization will be searched - if not found, the Theme 18n files are searched for an English message.++== Deprecation of Keycloak OpenID Connect Adapters++From this release, we are no longer investing our time on some of Keycloak OpenID Connect Adapters:","Not an issue, only a suggestion.""Starting with this release, we no longer will invest our time on the following Keycloak OpenID Connect Adapters:""",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20552,1205271125,2023-05-25T09:45:16Z,js/apps/admin-ui/src/user/UserGroups.tsx,"@@ -208,20 +128,20 @@ export const UserGroups = ({ user }: UserGroupsProps) => {   };    const addGroups = async (groups: GroupRepresentation[]): Promise<void> => {-    const newGroups = groups;--    newGroups.forEach(async (group) => {-      try {-        await adminClient.users.addToGroup({-          id: user.id!,-          groupId: group.id!,-        });-        refresh();-        addAlert(t(""addedGroupMembership""), AlertVariant.success);-      } catch (error) {-        addError(""users:addedGroupMembershipError"", error);-      }-    });+    try {+      await Promise.all(+        groups.map((group) =>+          adminClient.users.addToGroup({+            id: user.id!,+            groupId: group.id!,+          })+        )+      );+      refresh();",Some of these Promises could resolve successfully and mutate the data. Should we perhaps always call `refresh()`?,
314690,thomasdarimont,https://api.github.com/repos/keycloak/keycloak/pulls/20513,1205280378,2023-05-25T09:53:11Z,server-spi-private/src/main/java/org/keycloak/models/utils/ModelToRepresentation.java,"@@ -230,16 +230,28 @@ public static GroupRepresentation toGroupHierarchy(GroupModel group, boolean ful         return rep;     } -    private static boolean groupMatchesSearchOrIsPathElement(GroupModel group, String search, Boolean exact) {+    public static boolean groupMatchesSearchOrIsPathElement(GroupModel group, String search, boolean exact) {         if (StringUtil.isBlank(search)) {             return true;         }-        if(exact !=null && exact.equals(true)){-            if (group.getName().equals(search)){+        if (group == null) {+            return false;+        }++        String groupName = group.getName();+        if (exact) {+            // exact matching applies to the group name only+            if (groupName.equals(search)){                 return true;             }         } else {-            if (group.getName().contains(search)) {+            // fuzzy matching applies to the group name and the group path+            if (groupName.contains(search)) {+                return true;+            }++            String groupPath = ModelToRepresentation.buildGroupPath(group);","/Search by group pathThe search with partial paths like `a/b` is tricky, because the search input is passed down to the database query as is within a `...from GroupEntity u where u.realm = :realm and u.name like concat('%',:search,'%') ...` query `getGroupIdsByNameContaining` in `GroupEntity.java`.Btw. some queries use `lower(search)` for the comparison but others don't - that seems inconsistent and needs some attention, see: https://github.com/keycloak/keycloak/blob/main/model/jpa/src/main/java/org/keycloak/models/jpa/entities/GroupEntity.java#LL33C27-L33C54Therefore, if we pass a search query like `a/b` we will never get group results back, because the given `path` does not match a group name.A workaround for that could be to translate a search like `a/b` into a regex pattern like (a|b) and use some ""regex like"" or dbms specific function to match the group name.Because of this I would currently vote to leave out the support for searching by paths for now./Exact match with group path elementsFYI I extended the PR with support for exact matching in group names AND path elements.So with exact=truea search for ""Test"" for groups```1) /Test/Abc2) /Test2/Def3) /Test3/Test/Ghi```will match 1) and 3) but not 2).(need to add a test for the later)",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20590,1206482127,2023-05-26T09:19:42Z,js/apps/admin-ui/src/dashboard/ProviderInfo.tsx,"@@ -56,37 +55,39 @@ export const ProviderInfo = () => {                 <Td>{name}</Td>                 <Td>                   <ul>-                    {Object.entries(providers).map(([key]) => (-                      <li key={key}>{key}</li>-                    ))}+                    {Object.entries(providers).map(+                      ([key, { operationalInfo }]) => (+                        <>+                          <li key={key}>{key}</li>+                          {operationalInfo ? (","Semantically a `ul` is only allowed to have `li` as children, no other elements are allowed.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20585,1206690432,2023-05-26T12:09:35Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java,"@@ -543,4 +551,40 @@ private static boolean isRuntimeOption(String arg) {          return arg.startsWith(ImportRealmMixin.IMPORT_REALM);     }++    private static void checkChangesInBuildOptionsDuringAutoBuild() {+        if (Configuration.isOptimized()) {+            List<PropertyMapper> buildOptions = stream(Configuration.getPropertyNames(true).spliterator(), false)+                    .sorted()+                    .map(PropertyMappers::getMapper)+                    .filter(Objects::nonNull).collect(Collectors.toList());++            if (buildOptions.isEmpty()) {+                return;+            }++            StringBuilder output = new StringBuilder(""You run a 'build' before starting the server, the following build options will be overridden to new values. "" ++                    ""To avoid that, run the 'build' command again and start the server using the '"").append(OPTIMIZED_BUILD_OPTION_LONG).append(""' flag:"");++            for (PropertyMapper mapper : buildOptions) {+                String newValue = ofNullable(getCurrentBuiltTimeProperty(mapper.getFrom()))+                        .map(ConfigValue::getValue)+                        .orElse(""<unset>"");+                String currentValue = getRawPersistedProperty(mapper.getFrom()).get();++                if (newValue.equals(currentValue)) {+                    continue;","What if all `newValue` equals to `currentValue`? :) Then we print `You run a 'build' before starting the server, the following build options will be overridden to new values.` with empty list below it?",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/20585,1206711676,2023-05-26T12:28:57Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java,"@@ -543,4 +551,40 @@ private static boolean isRuntimeOption(String arg) {          return arg.startsWith(ImportRealmMixin.IMPORT_REALM);     }++    private static void checkChangesInBuildOptionsDuringAutoBuild() {+        if (Configuration.isOptimized()) {+            List<PropertyMapper> buildOptions = stream(Configuration.getPropertyNames(true).spliterator(), false)+                    .sorted()+                    .map(PropertyMappers::getMapper)+                    .filter(Objects::nonNull).collect(Collectors.toList());++            if (buildOptions.isEmpty()) {+                return;+            }++            StringBuilder output = new StringBuilder(""You run a 'build' before starting the server, the following build options will be overridden to new values. "" ++                    ""To avoid that, run the 'build' command again and start the server using the '"").append(OPTIMIZED_BUILD_OPTION_LONG).append(""' flag:"");","You run a.. is not the best English', and it's a bit lengthy.I suggest something along the lines of:Previous optimized build will be overridden  (use 'build', followed by 'start --optimized' to prevent this in the future)",
1492066,pruivo,https://api.github.com/repos/keycloak/keycloak/pulls/20577,1206743403,2023-05-26T12:58:14Z,operator/src/test/java/org/keycloak/operator/testsuite/unit/IngressLogicTest.java,"@@ -174,4 +181,15 @@ public void testHttpSpecWithoutTlsSecret() {         assertEquals(""HTTP"", reconciled.get().getMetadata().getAnnotations().get(""nginx.ingress.kubernetes.io/backend-protocol""));         assertEquals(""edge"", reconciled.get().getMetadata().getAnnotations().get(""route.openshift.io/termination""));     }++    @Test+    public void testCustomAnnotations() {",@vmuzikar added tests in `KeycloakIngressTest` because I'm not sure if the tests I wrote in this class are updating or just creating a new Ingress from scratch.,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20577,1206776202,2023-05-26T13:21:49Z,operator/src/test/java/org/keycloak/operator/testsuite/unit/IngressLogicTest.java,"@@ -174,4 +181,15 @@ public void testHttpSpecWithoutTlsSecret() {         assertEquals(""HTTP"", reconciled.get().getMetadata().getAnnotations().get(""nginx.ingress.kubernetes.io/backend-protocol""));         assertEquals(""edge"", reconciled.get().getMetadata().getAnnotations().get(""route.openshift.io/termination""));     }++    @Test+    public void testCustomAnnotations() {","@pruivo Thanks for the update.To properly test that existing annotations are updated, you need to update:https://github.com/keycloak/keycloak/blob/4741af7a40a7350bd3c4699c3e7728f93a8b6cf6/operator/src/test/java/org/keycloak/operator/testsuite/unit/IngressLogicTest.java#L105-L111Please add some existing dummy annotations here.",
23331885,yih-wang,https://api.github.com/repos/keycloak/keycloak/pulls/19927,1208997846,2023-05-29T07:17:17Z,js/apps/admin-ui/public/resources/zh-CN/realm-settings.json,"@@ -1,113 +1,900 @@ {+  ""createGroupText"": ""创建属性组"",+  ""editGroupText"": ""编辑属性组"",+  ""tableTitle"": ""属性组"",+  ""columnName"": ""名称"",+  ""columnDisplayName"": ""显示名称"",+  ""columnDisplayDescription"": ""显示说明"",+  ""emptyStateMessage"": ""没有属性组"",+  ""emptyStateInstructions"": ""如果你想添加一个属性组，请点击下面的按钮。"",+  ""deleteDialogTitle"": ""删除属性组？"",+  ""deleteDialogDescription"": ""您确定要永久删除属性组 <1>{{group}}}</1> 吗？"",+  ""deleteSuccess"": ""属性组已删除。"",+  ""deleteAttributeGroupError"": ""无法删除用户属性组：{{error}}"",+  ""nameField"": ""姓名"",+  ""nameHint"": ""组的唯一名称。在将属性绑定到组时，此名称将用于引用组。"",+  ""displayHeaderField"": ""显示名称"",+  ""displayHeaderHint"": ""在面向用户的表单中呈现一组属性时应该使用的组的用户友好名称。这也支持本地化值的键。例如：${profile.attribute.group.address} "",+  ""displayDescriptionField"": ""显示说明"",+  ""displayDescriptionHint"": ""在呈现面向用户的表单时应该用作工具提示的文本。"",+  ""annotationsText"": ""注解"",+  ""removeAnnotationText"": ""删除注释"",+  ""keyPlaceholder"": ""输入一个键"",+  ""keyLabel"": ""键"",+  ""valuePlaceholder"": ""输入一个值"",+  ""valueLabel"": ""数值"",+  ""realmSettingsExplain"": ""领域设置是控制当前领域中用户、应用程序、角色和群组的选项的设置。"",   ""partialImport"": ""部分导入"",-  ""general"": ""通用"",-  ""login"": ""login"",+  ""partialExport"": ""部分导出"",+  ""deleteRealm"": ""删除领域"",+  ""deleteConfirmTitle"": ""删除领域？"",+  ""dragInstruction"": ""通过点击并拖动从而改变优先级"",+  ""deleteConfirm"": ""如果你删除这个领域，所有关联的数据都将被删除。"",+  ""deleteProviderTitle"": ""删除密钥提供者？"",+  ""deleteProviderConfirm"": ""您确定要永久删除密钥提供者 {{provider}} 吗？"",+  ""deleteProviderSuccess"": ""成功。密钥提供者已被删除。"",+  ""deleteProviderError"": ""删除密钥提供者时出错"",+  ""deletedSuccess"": ""领域已被删除"",+  ""deleteError"": ""无法删除领域：{{error}}"",+  ""deleteConditionSuccess"": ""条件已删除"",+  ""disableConfirmTitle"": ""禁用领域？"",+  ""disableConfirm"": ""如果领域被禁用，用户和客户端将无法访问它。你确定要继续吗？"",+  ""disablePolicyConfirmTitle"": ""禁用策略？"",+  ""disablePolicyConfirm"": ""如果策略被禁用，用户和客户端将无法访问该策略。您确定要继续吗？"",+  ""editProvider"": ""编辑供应者"",+  ""editableRowsTable"": ""可编辑的行表"",+  ""saveSuccess"": ""领域更新成功"",+  ""saveProviderSuccess"": ""供应者已成功保存。"",+  ""saveProviderListSuccess"": ""提供者的优先级已成功更新。"",+  ""saveProviderError"": ""保存提供者出错：{{error}}"",+  ""saveError"": ""领域无法更新：{{error}}"",+  ""general"": ""常规设置"",+  ""login"": ""登录"",   ""themes"": ""主题"",   ""events"": ""事件"",   ""eventListeners"": ""事件监听器"",-  ""eventListenersHelpText"": ""配置什么侦听器接收领域的事件。"",-  ""adminEventsSettings"": ""管理事件设置"",+  ""eventListenersHelpText"": ""配置哪些侦听器接收该领域的事件。"",","```suggestion  ""eventListenersHelpText"": ""配置哪些监听器接收该领域的事件。"",```All the event listener should be ""事件监听器""",
7382506,EiriniGraonidou,https://api.github.com/repos/keycloak/keycloak/pulls/20190,1209042386,2023-05-29T08:08:32Z,themes/src/main/resources-community/theme/base/admin/messages/messages_el.properties,"@@ -0,0 +1,65 @@+# encoding: utf-8++error-invalid-date=Το χαρακτηριστικό {0} δεν είναι έγκυρη ημερομηνία.+error-invalid-length-too-long=Το χαρακτηριστικό {0} πρέπει να έχει μέγιστο μήκος {2}.",```suggestionerror-invalid-length-too-long=Το πεδίο {0} μπορεί να περιέχει το πολύ {2} χαρακτήρες .```,
7382506,EiriniGraonidou,https://api.github.com/repos/keycloak/keycloak/pulls/20190,1209127283,2023-05-29T09:35:20Z,themes/src/main/resources-community/theme/base/admin/messages/messages_el.properties,"@@ -0,0 +1,65 @@+# encoding: utf-8++error-invalid-date=Το χαρακτηριστικό {0} δεν είναι έγκυρη ημερομηνία.+error-invalid-length-too-long=Το χαρακτηριστικό {0} πρέπει να έχει μέγιστο μήκος {2}.","Although the usage of ""μέγιστο μήκος"" (maximum length) has been adopted in the technical vocabulary, I still find it strange as a Greek native speaker. Thus the above suggestion. The initial translation is valid, though.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1209203329,2023-05-29T11:08:24Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/error/UncaughtErrorPageTest.java,"@@ -250,12 +250,12 @@ public void jsonProcessingException() throws IOException {             try (CloseableHttpResponse response = client.execute(post)) {                 assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatusLine().getStatusCode()); -                Header header = response.getFirstHeader(""Content-Type"");-                assertThat(header, notNullValue());-                assertEquals(MediaType.APPLICATION_JSON, header.getValue());--                OAuth2ErrorRepresentation error = JsonSerialization.readValue(response.getEntity().getContent(), OAuth2ErrorRepresentation.class);-                assertEquals(""unknown_error"", error.getError());+//                Header header = response.getFirstHeader(""Content-Type"");",The https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/error/KeycloakErrorHandler.java is our main mapper.There is another one (https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/error/KcUnrecognizedPropertyExceptionHandler.java) but I don't think it is related to the test failure.Both are registered here https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java.,
23331885,yih-wang,https://api.github.com/repos/keycloak/keycloak/pulls/19927,1209219991,2023-05-29T11:28:00Z,js/apps/admin-ui/public/resources/zh-CN/realm-settings.json,"@@ -1,113 +1,900 @@ {+  ""createGroupText"": ""创建属性组"",+  ""editGroupText"": ""编辑属性组"",+  ""tableTitle"": ""属性组"",+  ""columnName"": ""名称"",+  ""columnDisplayName"": ""显示名称"",+  ""columnDisplayDescription"": ""显示说明"",+  ""emptyStateMessage"": ""没有属性组"",+  ""emptyStateInstructions"": ""如果你想添加一个属性组，请点击下面的按钮。"",+  ""deleteDialogTitle"": ""删除属性组？"",+  ""deleteDialogDescription"": ""您确定要永久删除属性组 <1>{{group}}}</1> 吗？"",+  ""deleteSuccess"": ""属性组已删除。"",+  ""deleteAttributeGroupError"": ""无法删除用户属性组：{{error}}"",+  ""nameField"": ""姓名"",+  ""nameHint"": ""组的唯一名称。在将属性绑定到组时，此名称将用于引用组。"",+  ""displayHeaderField"": ""显示名称"",+  ""displayHeaderHint"": ""在面向用户的表单中呈现一组属性时应该使用的组的用户友好名称。这也支持本地化值的键。例如：${profile.attribute.group.address} "",+  ""displayDescriptionField"": ""显示说明"",+  ""displayDescriptionHint"": ""在呈现面向用户的表单时应该用作工具提示的文本。"",+  ""annotationsText"": ""注解"",+  ""removeAnnotationText"": ""删除注释"",+  ""keyPlaceholder"": ""输入一个键"",+  ""keyLabel"": ""键"",+  ""valuePlaceholder"": ""输入一个值"",+  ""valueLabel"": ""数值"",+  ""realmSettingsExplain"": ""领域设置是控制当前领域中用户、应用程序、角色和群组的选项的设置。"",   ""partialImport"": ""部分导入"",-  ""general"": ""通用"",-  ""login"": ""login"",+  ""partialExport"": ""部分导出"",+  ""deleteRealm"": ""删除领域"",+  ""deleteConfirmTitle"": ""删除领域？"",+  ""dragInstruction"": ""通过点击并拖动从而改变优先级"",+  ""deleteConfirm"": ""如果你删除这个领域，所有关联的数据都将被删除。"",+  ""deleteProviderTitle"": ""删除密钥提供者？"",+  ""deleteProviderConfirm"": ""您确定要永久删除密钥提供者 {{provider}} 吗？"",+  ""deleteProviderSuccess"": ""成功。密钥提供者已被删除。"",+  ""deleteProviderError"": ""删除密钥提供者时出错"",+  ""deletedSuccess"": ""领域已被删除"",+  ""deleteError"": ""无法删除领域：{{error}}"",+  ""deleteConditionSuccess"": ""条件已删除"",+  ""disableConfirmTitle"": ""禁用领域？"",+  ""disableConfirm"": ""如果领域被禁用，用户和客户端将无法访问它。你确定要继续吗？"",+  ""disablePolicyConfirmTitle"": ""禁用策略？"",+  ""disablePolicyConfirm"": ""如果策略被禁用，用户和客户端将无法访问该策略。您确定要继续吗？"",+  ""editProvider"": ""编辑供应者"",+  ""editableRowsTable"": ""可编辑的行表"",+  ""saveSuccess"": ""领域更新成功"",+  ""saveProviderSuccess"": ""供应者已成功保存。"",+  ""saveProviderListSuccess"": ""提供者的优先级已成功更新。"",+  ""saveProviderError"": ""保存提供者出错：{{error}}"",+  ""saveError"": ""领域无法更新：{{error}}"",+  ""general"": ""常规设置"",+  ""login"": ""登录"",   ""themes"": ""主题"",   ""events"": ""事件"",   ""eventListeners"": ""事件监听器"",-  ""eventListenersHelpText"": ""配置什么侦听器接收领域的事件。"",-  ""adminEventsSettings"": ""管理事件设置"",+  ""eventListenersHelpText"": ""配置哪些侦听器接收该领域的事件。"",+  ""saveEventListeners"": ""保存事件监听器"",+  ""saveEventListenersSuccess"": ""事件侦听器已更新。"",+  ""saveEventListenersError"": ""保存事件侦听器时出错：{{error}}"",+  ""userEventsSettings"": ""用户事件的设置"",+  ""adminEventsSettings"": ""管理员事件设置"",   ""saveEvents"": ""保存事件"",-  ""expiration"": ""到期"",-  ""clearAdminEvents"": ""清除管理事件"",-  ""includeRepresentation"": ""包含表示"",-  ""email"": ""电子邮件"",+  ""expiration"": ""过期"",+  ""clearUserEvents"": ""清除用户事件"",+  ""clearAdminEvents"": ""清除管理员事件"",+  ""includeRepresentation"": ""包含表述"",+  ""email"": ""邮件"",+  ""template"": ""模版"",+  ""connectionAndAuthentication"": ""连接与认证"",   ""from"": ""来自"",+  ""fromDisplayName"": ""来自显示的名称"",+  ""replyTo"": ""回复"",+  ""replyToDisplayName"": ""回复的显示名称"",+  ""envelopeFrom"": ""信封来自"",   ""host"": ""主机"",-  ""port"": ""端口号"",-  ""authentication"": ""验证"",+  ""port"": ""端口"",+  ""encryption"": ""加密"",+  ""authentication"": ""身份验证"",   ""enableSSL"": ""启用 SSL"",   ""enableStartTLS"": ""启用 StartTLS"",   ""username"": ""用户名"",   ""password"": ""密码"",   ""keys"": ""秘钥"",-  ""keystore"": ""钥匙链"",-  ""keyAlias"": ""密钥别名"",+  ""keysList"": ""秘钥列表"",+  ""searchKey"": ""搜索秘钥"",+  ""keystore"": ""密钥库"",+  ""keystorePassword"": ""密钥库密码"",+  ""keyAlias"": ""秘钥别名"",   ""keyPassword"": ""密钥密码"",-  ""providers"": ""提供者"",-  ""uiDisplayName"": ""控制台显示名称"",+  ""providers"": ""供应者"",+  ""algorithm"": ""算法"",+  ""use"": ""使用"",+  ""aesGenerated"": ""aes-generated"",+  ""ecdsaGenerated"": ""ecdsca-generated"",+  ""hmacGenerated"": ""hmac-generated"",+  ""javaKeystore"": ""java-keystore"",+  ""RSA"": ""RSA"",+  ""rsaGenerated"": ""rsa-generated"",+  ""uiDisplayName"": ""界面显示名称"",+  ""AESKeySize"": ""AES 密钥大小"",   ""active"": ""活跃"",+  ""privateRSAKey"": ""私有 RSA 密钥"",+  ""filenamePlaceholder"": ""上传 PEM 文件或在下方粘贴密钥"",+  ""x509Certificate"": ""X509证书"",+  ""ellipticCurve"": ""椭圆曲线"",+  ""secretSize"": ""秘钥大小"",+  ""keySize"": ""秘钥大小"",   ""type"": ""类型"",-  ""providerId"": ""ID"",-  ""kid"": ""孩子"",-  ""provider"": ""提供程序"",+  ""name"": ""名称"",+  ""提供者 ID"": ""ID"",+  ""kid"": ""KID"",+  ""provider"": ""供应者"",+  ""providerDescription"": ""供应者描述"",+  ""addProvider"": ""添加供应者"",+  ""publicKeys"": ""公钥"",+  ""keysFilter"": {+    ""ACTIVE"": ""活跃的秘钥"",+    ""PASSIVE"": ""消极的秘钥"",+    ""DISABLED"": ""禁用的秘钥""+  },+  ""noKeys"": ""没有秘钥"",+  ""noKeysDescription"": ""您还没有创建任何活跃的密钥"",   ""certificate"": ""证书"",   ""userRegistration"": ""用户注册"",-  ""userRegistrationHelpText"": ""开启/关闭注册页面，注册页面的链接也会显示在登录页面"",+  ""loginScreenCustomization"": ""登录页面定制"",+  ""registrationAllowed"": ""用户注册"",+  ""userRegistrationHelpText"": ""启用/禁用注册页面。注册链接也会显示在登录页面上。"",+  ""resetPasswordAllowed"": ""忘记密码"",+  ""forgotPassword"": ""忘记密码"",+  ""forgotPasswordHelpText"": ""在登录页面显示一个链接，供用户在忘记凭据时单击使用。"",   ""rememberMe"": ""记住我"",-  ""rememberMeHelpText"": ""显示一个选择框来让用户在重启浏览器时仍然处于登录状态，直到会话过期。"",-  ""emailAsUsername"": ""Email当做用户名"",-  ""loginWithEmail"": ""使用电子邮件登录"",-  ""duplicateEmails"": ""重复的邮件"",-  ""verifyEmail"": ""验证email"",-  ""editUsername"": ""编辑用户名"",-  ""testConnection"": ""测试连接"",+  ""rememberMeHelpText"": ""在登录页面上显示复选框以允许用户在浏览器重新启动之前保持登录状态，直到会话过期。"",+  ""emailSettings"": ""电子邮件设置"",+  ""registrationEmailAsUsername"": ""以电子邮件作为用户名"",+  ""emailAsUsernameHelpText"": ""允许用户将电子邮件设置为用户名。"",+  ""loginWithEmailAllowed"": ""使用邮箱登录"",+  ""loginWithEmailHelpText"": ""允许用户使用他们的电子邮件地址登录。"",+  ""duplicateEmailsAllowed"": ""复用邮件"",","```suggestion  ""duplicateEmailsAllowed"": ""允许重复的电子邮件地址存在"",```",
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1209257912,2023-05-29T12:11:32Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/SessionTimeoutsTest.java,"@@ -0,0 +1,435 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.testsuite.model.session;++import java.util.Arrays;+import java.util.HashSet;+import java.util.Set;+import java.util.UUID;+import org.junit.Assert;+import org.junit.FixMethodOrder;+import org.junit.Test;+import org.junit.runners.MethodSorters;+import org.keycloak.common.util.Time;+import org.keycloak.connections.infinispan.InfinispanConnectionProvider;+import org.keycloak.models.AuthenticatedClientSessionModel;+import org.keycloak.models.ClientModel;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RealmProvider;+import org.keycloak.models.UserModel;+import org.keycloak.models.UserSessionModel;+import org.keycloak.models.UserProvider;+import org.keycloak.models.UserSessionProvider;+import org.keycloak.protocol.oidc.OIDCConfigAttributes;+import org.keycloak.protocol.oidc.OIDCLoginProtocol;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;+import org.keycloak.testsuite.model.infinispan.InfinispanTestUtil;++/**+ * <p>+ * Test that checks the Infinispan user session provider expires the sessions+ * correctly and does not remain client sessions in memory after user session+ * expiration.</p>+ *+ * @author rmartinc+ */+@FixMethodOrder(MethodSorters.NAME_ASCENDING)+@RequireProvider(UserSessionProvider.class)+@RequireProvider(UserProvider.class)+@RequireProvider(RealmProvider.class)+public class SessionTimeoutsTest extends KeycloakModelTest {++    private String realmId;++    @Override+    public void createEnvironment(KeycloakSession s) {+        RealmModel realm = createRealm(s, ""test"");+        realm.setDefaultRole(s.roles().addRealmRole(realm, Constants.DEFAULT_ROLES_ROLE_PREFIX + ""-"" + realm.getName()));+        this.realmId = realm.getId();++        s.users().addUser(realm, ""user1"").setEmail(""user1@localhost"");++        createClients(s, realm);+        InfinispanTestUtil.setTestingTimeService(s);+    }++    @Override+    public void cleanEnvironment(KeycloakSession s) {+        InfinispanTestUtil.revertTimeService(s);+        RealmModel realm = s.realms().getRealm(realmId);+        s.sessions().removeUserSessions(realm);++        s.realms().removeRealm(realmId);+    }++    protected static void createClients(KeycloakSession s, RealmModel realm) {+        ClientModel clientModel = s.clients().addClient(realm, ""test-app"");+        clientModel.setEnabled(true);+        clientModel.setBaseUrl(""http://localhost:8180/auth/realms/master/app/auth"");+        Set<String> redirects = new HashSet<>(Arrays.asList(""http://localhost:8180/auth/realms/master/app/auth/*"",+                ""https://localhost:8543/auth/realms/master/app/auth/*"",+                ""http://localhost:8180/auth/realms/test/app/auth/*"",+                ""https://localhost:8543/auth/realms/test/app/auth/*""));+        clientModel.setRedirectUris(redirects);+        clientModel.setSecret(""password"");++        clientModel = s.clients().addClient(realm, ""third-party"");+        clientModel.setEnabled(true);+        clientModel.setConsentRequired(true);+        clientModel.setBaseUrl(""http://localhost:8180/auth/realms/master/app/auth"");+        clientModel.setRedirectUris(redirects);+        clientModel.setSecret(""password"");+    }++    protected static RealmModel createRealm(KeycloakSession s, String name) {+        RealmModel realm = s.realms().getRealmByName(name);+        if (realm != null) {+            // The previous test didn't clean up the realm for some reason, cleanup now+            s.realms().removeRealm(realm.getId());+        }+        realm = s.realms().createRealm(name);+        return realm;+    }++    protected static UserSessionModel createUserSession(KeycloakSession session, RealmModel realm, UserModel user, boolean offline) {+        UserSessionModel userSession = session.sessions().createUserSession(UUID.randomUUID().toString(), realm, user, ""user1"", ""127.0.0.1"",+                ""form"", true, null, null, UserSessionModel.SessionPersistenceState.PERSISTENT);+        if (offline) {+            userSession = session.sessions().createOfflineUserSession(userSession);+        }+        return userSession;+    }++    protected static AuthenticatedClientSessionModel createClientSession(KeycloakSession session, String realmId, ClientModel client,+            UserSessionModel userSession, String redirect, String state) {+        RealmModel realm = session.realms().getRealm(realmId);+        AuthenticatedClientSessionModel clientSession = session.sessions().createClientSession(realm, client, userSession);+        if (userSession.isOffline()) {+            clientSession = session.sessions().createOfflineClientSession(clientSession, userSession);+        }+        clientSession.setRedirectUri(redirect);+        if (state != null) {+            clientSession.setNote(OIDCLoginProtocol.STATE_PARAM, state);+        }+        return clientSession;+    }++    protected static UserSessionModel getUserSession(KeycloakSession session, RealmModel realm, String id, boolean offline) {+        return offline+                ? session.sessions().getOfflineUserSession(realm, id)+                : session.sessions().getUserSession(realm, id);+    }++    protected static String cacheName(boolean user, boolean offline) {+        if (user) {+            return offline ? InfinispanConnectionProvider.OFFLINE_USER_SESSION_CACHE_NAME : InfinispanConnectionProvider.USER_SESSION_CACHE_NAME;+        } else {+            return offline ? InfinispanConnectionProvider.OFFLINE_CLIENT_SESSION_CACHE_NAME : InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME;+        }+    }++    protected void testUserClientMaxLifespanSmallerThanSession(boolean offline, boolean overrideInClient) {+        withRealm(realmId, (session, realm) -> {+            realm.setOfflineSessionMaxLifespanEnabled(true);",This part is duplicated bellow. Can you maybe extract it to a method?,x
3359545,martin-kanis,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1209259990,2023-05-29T12:14:49Z,testsuite/model/src/test/java/org/keycloak/testsuite/model/session/SessionTimeoutsTest.java,"@@ -0,0 +1,435 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.testsuite.model.session;++import java.util.Arrays;+import java.util.HashSet;+import java.util.Set;+import java.util.UUID;+import org.junit.Assert;+import org.junit.FixMethodOrder;+import org.junit.Test;+import org.junit.runners.MethodSorters;+import org.keycloak.common.util.Time;+import org.keycloak.connections.infinispan.InfinispanConnectionProvider;+import org.keycloak.models.AuthenticatedClientSessionModel;+import org.keycloak.models.ClientModel;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RealmProvider;+import org.keycloak.models.UserModel;+import org.keycloak.models.UserSessionModel;+import org.keycloak.models.UserProvider;+import org.keycloak.models.UserSessionProvider;+import org.keycloak.protocol.oidc.OIDCConfigAttributes;+import org.keycloak.protocol.oidc.OIDCLoginProtocol;+import org.keycloak.testsuite.model.KeycloakModelTest;+import org.keycloak.testsuite.model.RequireProvider;+import org.keycloak.testsuite.model.infinispan.InfinispanTestUtil;++/**+ * <p>+ * Test that checks the Infinispan user session provider expires the sessions+ * correctly and does not remain client sessions in memory after user session+ * expiration.</p>+ *+ * @author rmartinc+ */+@FixMethodOrder(MethodSorters.NAME_ASCENDING)+@RequireProvider(UserSessionProvider.class)+@RequireProvider(UserProvider.class)+@RequireProvider(RealmProvider.class)+public class SessionTimeoutsTest extends KeycloakModelTest {++    private String realmId;++    @Override+    public void createEnvironment(KeycloakSession s) {+        RealmModel realm = createRealm(s, ""test"");+        realm.setDefaultRole(s.roles().addRealmRole(realm, Constants.DEFAULT_ROLES_ROLE_PREFIX + ""-"" + realm.getName()));+        this.realmId = realm.getId();++        s.users().addUser(realm, ""user1"").setEmail(""user1@localhost"");++        createClients(s, realm);+        InfinispanTestUtil.setTestingTimeService(s);+    }++    @Override+    public void cleanEnvironment(KeycloakSession s) {+        InfinispanTestUtil.revertTimeService(s);+        RealmModel realm = s.realms().getRealm(realmId);+        s.sessions().removeUserSessions(realm);++        s.realms().removeRealm(realmId);+    }++    protected static void createClients(KeycloakSession s, RealmModel realm) {+        ClientModel clientModel = s.clients().addClient(realm, ""test-app"");+        clientModel.setEnabled(true);+        clientModel.setBaseUrl(""http://localhost:8180/auth/realms/master/app/auth"");+        Set<String> redirects = new HashSet<>(Arrays.asList(""http://localhost:8180/auth/realms/master/app/auth/*"",+                ""https://localhost:8543/auth/realms/master/app/auth/*"",+                ""http://localhost:8180/auth/realms/test/app/auth/*"",+                ""https://localhost:8543/auth/realms/test/app/auth/*""));+        clientModel.setRedirectUris(redirects);+        clientModel.setSecret(""password"");++        clientModel = s.clients().addClient(realm, ""third-party"");+        clientModel.setEnabled(true);+        clientModel.setConsentRequired(true);+        clientModel.setBaseUrl(""http://localhost:8180/auth/realms/master/app/auth"");+        clientModel.setRedirectUris(redirects);+        clientModel.setSecret(""password"");+    }++    protected static RealmModel createRealm(KeycloakSession s, String name) {+        RealmModel realm = s.realms().getRealmByName(name);+        if (realm != null) {+            // The previous test didn't clean up the realm for some reason, cleanup now+            s.realms().removeRealm(realm.getId());+        }+        realm = s.realms().createRealm(name);+        return realm;+    }++    protected static UserSessionModel createUserSession(KeycloakSession session, RealmModel realm, UserModel user, boolean offline) {+        UserSessionModel userSession = session.sessions().createUserSession(UUID.randomUUID().toString(), realm, user, ""user1"", ""127.0.0.1"",+                ""form"", true, null, null, UserSessionModel.SessionPersistenceState.PERSISTENT);+        if (offline) {+            userSession = session.sessions().createOfflineUserSession(userSession);+        }+        return userSession;+    }++    protected static AuthenticatedClientSessionModel createClientSession(KeycloakSession session, String realmId, ClientModel client,+            UserSessionModel userSession, String redirect, String state) {+        RealmModel realm = session.realms().getRealm(realmId);+        AuthenticatedClientSessionModel clientSession = session.sessions().createClientSession(realm, client, userSession);+        if (userSession.isOffline()) {+            clientSession = session.sessions().createOfflineClientSession(clientSession, userSession);+        }+        clientSession.setRedirectUri(redirect);+        if (state != null) {+            clientSession.setNote(OIDCLoginProtocol.STATE_PARAM, state);+        }+        return clientSession;+    }++    protected static UserSessionModel getUserSession(KeycloakSession session, RealmModel realm, String id, boolean offline) {+        return offline+                ? session.sessions().getOfflineUserSession(realm, id)+                : session.sessions().getUserSession(realm, id);+    }++    protected static String cacheName(boolean user, boolean offline) {+        if (user) {+            return offline ? InfinispanConnectionProvider.OFFLINE_USER_SESSION_CACHE_NAME : InfinispanConnectionProvider.USER_SESSION_CACHE_NAME;+        } else {+            return offline ? InfinispanConnectionProvider.OFFLINE_CLIENT_SESSION_CACHE_NAME : InfinispanConnectionProvider.CLIENT_SESSION_CACHE_NAME;+        }+    }++    protected void testUserClientMaxLifespanSmallerThanSession(boolean offline, boolean overrideInClient) {+        withRealm(realmId, (session, realm) -> {+            realm.setOfflineSessionMaxLifespanEnabled(true);+            realm.setOfflineSessionMaxLifespan(3000);+            realm.setOfflineSessionIdleTimeout(7200);+            realm.setClientOfflineSessionIdleTimeout(7200);+            realm.setSsoSessionMaxLifespan(3000);+            realm.setSsoSessionIdleTimeout(7200);+            realm.setClientSessionIdleTimeout(7200);++            // set client session max lifespan smaller at realm or client+            ClientModel client = realm.getClientByClientId(""test-app"");+            if (overrideInClient) {",These sections seems pretty similar. Can you maybe try to extract them to a method with parameters?,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/20447,1209270854,2023-05-29T12:29:36Z,docs/documentation/server_development/topics/user-storage/provider-capability-interfaces.adoc,"@@ -9,7 +9,9 @@ If you have examined the `UserStorageProvider` interface closely you might notic |SPI|Description  |`org.keycloak.storage.user.UserLookupProvider`|This interface is required if you want to be able to log in with users from this external store. Most (all?) providers implement this interface.-|`org.keycloak.storage.user.UserQueryProvider`|Defines complex queries that are used to locate one or more users. You must implement this interface if you want to view and manage users from the administration console.+|`org.keycloak.storage.user.UserQueryMethods`|Defines complex queries that are used to locate one or more users. You must implement this interface if you want to view and manage users from the administration console.+|`org.keycloak.storage.user.UserCountMethods`|Implement this interface if your provider supports count queries.",These interfaces should end in `Provider` similarly to the rest,x
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/20447,1210041924,2023-05-30T10:01:50Z,testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java,"@@ -225,10 +225,14 @@ public Stream<UserModel> searchForUserStream(RealmModel realm, String search, In     public Stream<UserModel> searchForUserStream(RealmModel realm, Map<String, String> attributes, Integer firstResult, Integer maxResults) {         String search = Optional.ofNullable(attributes.get(UserModel.USERNAME))                 .orElseGet(()-> attributes.get(UserModel.SEARCH));-        if (search == null) return Stream.empty();-        Predicate<String> p = Boolean.valueOf(attributes.getOrDefault(UserModel.EXACT, Boolean.FALSE.toString()))-                ? username -> username.equals(search)-                : username -> username.contains(search);+        Predicate<String> p;","Prior to this change the provider returned for empty `attributes` empty stream. Calling e.g.``` adminClient.realm(TEST_REALM_NAME).users().list();```returned 0 users from this provider. I used this call in a test (which by mistake I didn't include into a PR, but is there now :)).",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20592,1210088221,2023-05-30T10:44:40Z,.github/workflows/js-ci.yml,"@@ -194,13 +194,21 @@ jobs:     strategy:       matrix:         container: [1, 2, 3, 4, 5]+        browser: [chrome, firefox]     steps:       - uses: actions/checkout@v3        - name: Install Google Chrome         uses: browser-actions/setup-chrome@v1         with:           chrome-version: stable+        if: matrix.browser == 'chrome'","Just to keep things in line with other workflows stylistically, can we put the `if` after `name`? It makes it easier at a glance to see if a step is executed, rather than having to read all the way down.",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/20447,1210214699,2023-05-30T12:41:45Z,server-spi/src/main/java/org/keycloak/storage/user/UserQueryMethods.java,"@@ -0,0 +1,210 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.storage.user;++import org.keycloak.models.GroupModel;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RoleModel;+import org.keycloak.models.UserModel;++import java.util.Collections;+import java.util.Map;+import java.util.stream.Stream;++/**+ * This is an optional capability interface that is intended to be implemented by any+ * <code>UserStorageProvider</code> that supports complex user querying. You must+ * implement this interface if you want to view and manage users from the administration console.+ * <p/>+ * Note that all methods in this interface should limit search only to data available within the storage that is+ * represented by this provider. They should not lookup other storage providers for additional information.+ *+ * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>+ * @version $Revision: 1 $+ */+public interface UserQueryMethods {+    /**+     * Searches all users in the realm.+     *+     * @param realm a reference to the realm.+     * @return a non-null {@link Stream} of users.+     * @deprecated Use {@link #searchForUserStream(RealmModel, Map)} with an empty params map instead.+     */+    @Deprecated+    default Stream<UserModel> getUsersStream(RealmModel realm) {+        return searchForUserStream(realm, Collections.emptyMap());+    }",Should the deprecated methods be kept in the new interface or rather remove them?,x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1210259786,2023-05-30T13:17:33Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/RefreshTokenTest.java,"@@ -1132,6 +1285,79 @@ public void refreshTokenUserSessionMaxLifespanWithRememberMe() throws Exception         }     } +    @Test+    public void refreshTokenClientSessionMaxLifespan() throws Exception {+        RealmResource realm = adminClient.realm(""test"");+        RealmRepresentation rep = realm.toRepresentation();+        Integer originalSsoSessionMaxLifespan = rep.getSsoSessionMaxLifespan();++        ClientResource client = ApiUtil.findClientByClientId(adminClient.realm(""test""), ""test-app"");+        ClientRepresentation clientRepresentation = client.toRepresentation();++        getTestingClient().testing().setTestingInfinispanTimeService();++        try {+            rep.setSsoSessionMaxLifespan(10);","Is it possible to use bigger values for this test? For example 100 instead of 10 and also multiply all subsequent calls to `setTimeOffset` by 10? AFAIR in some slow environments, small times/timeout values can cause headaches and test instabilities. As in some environments, this test can easily take 3 seconds or more, which could result in the test failure.",
1897897,vramik,https://api.github.com/repos/keycloak/keycloak/pulls/20447,1210663295,2023-05-30T18:23:55Z,server-spi/src/main/java/org/keycloak/storage/user/UserQueryMethods.java,"@@ -0,0 +1,210 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.storage.user;++import org.keycloak.models.GroupModel;+import org.keycloak.models.RealmModel;+import org.keycloak.models.RoleModel;+import org.keycloak.models.UserModel;++import java.util.Collections;+import java.util.Map;+import java.util.stream.Stream;++/**+ * This is an optional capability interface that is intended to be implemented by any+ * <code>UserStorageProvider</code> that supports complex user querying. You must+ * implement this interface if you want to view and manage users from the administration console.+ * <p/>+ * Note that all methods in this interface should limit search only to data available within the storage that is+ * represented by this provider. They should not lookup other storage providers for additional information.+ *+ * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>+ * @version $Revision: 1 $+ */+public interface UserQueryMethods {+    /**+     * Searches all users in the realm.+     *+     * @param realm a reference to the realm.+     * @return a non-null {@link Stream} of users.+     * @deprecated Use {@link #searchForUserStream(RealmModel, Map)} with an empty params map instead.+     */+    @Deprecated+    default Stream<UserModel> getUsersStream(RealmModel realm) {+        return searchForUserStream(realm, Collections.emptyMap());+    }","I'd like to keep it here for the sake of this PR and remove deprecated methods in separate issue (https://github.com/keycloak/keycloak/issues/20438), which also has milestone 22.0.0. There is draft https://github.com/keycloak/keycloak/pull/20440 sent.",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/19068,1210704576,2023-05-30T19:01:34Z,model/map-file/src/main/java/org/keycloak/models/map/storage/file/FileCrudOperations.java,"@@ -179,7 +185,24 @@      protected V parse(Path fileName) {         getLastModifiedTime(fileName);-        final V parsedObject = YamlParser.parse(fileName, new MapEntityContext<>(entityClass));+        V parsedObject = null;+        Lock lock = FileLockManager.createLock(getModelName(getModelType(entityClass)), this.defaultRealmId, fileName)+                .acquire();+        try (InputStream is = Files.newInputStream(fileName)) {",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2517),x
5997854,daniel-brannon,https://api.github.com/repos/keycloak/keycloak/pulls/20624,1210808375,2023-05-30T20:47:50Z,js/apps/admin-ui/src/groups/components/MoveDialog.tsx,"@@ -12,23 +12,12 @@ type MoveDialogProps = { };  const moveToRoot = async (source: GroupRepresentation) => {-  await adminClient.groups.del({ id: source.id! });-  const { id } = await adminClient.groups.create({-    ...source,-    id: undefined,-  });-  if (source.subGroups) {-    await Promise.all(-      source.subGroups.map((s) =>-        adminClient.groups.setOrCreateChild(-          { id: id! },-          {-            ...s,-            id: undefined,-          }-        )-      )-    );+  try {+    await adminClient.groups.create(source);+  } catch (error: any) {","I just followed the pattern used in the related function ""moveToGroup"". If you would like me to fix this, should I change it in both places?",
5997854,daniel-brannon,https://api.github.com/repos/keycloak/keycloak/pulls/20624,1210817331,2023-05-30T20:57:43Z,js/apps/admin-ui/src/groups/components/MoveDialog.tsx,"@@ -12,23 +12,12 @@ type MoveDialogProps = { };  const moveToRoot = async (source: GroupRepresentation) => {-  await adminClient.groups.del({ id: source.id! });-  const { id } = await adminClient.groups.create({-    ...source,-    id: undefined,-  });-  if (source.subGroups) {-    await Promise.all(-      source.subGroups.map((s) =>-        adminClient.groups.setOrCreateChild(-          { id: id! },-          {-            ...s,-            id: undefined,-          }-        )-      )-    );+  try {+    await adminClient.groups.create(source);+  } catch (error: any) {+    if (error.response) {","The `adminClient.groups.create()` function call throws a `new Error('location header is not found in request: ${res.url}')` exception. Without the try-catch, this exception would be unhandled here resulting in an error shown to the user. The same exception is thrown in the functions called by the ""moveToGroup"" function, so I modeled the exception handling after it. I believe the intent is for that specific exception to be caught and ignored, while exceptions resulting from HTTP requests being caught and rethrown. In both cases, it does not matter that a location header is not present in the response, as that is only used to retrieve the created group Id, which doesn't really happen because the existing group resource is simply modified.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1211163090,2023-05-31T06:46:23Z,server-spi-private/src/main/java/org/keycloak/models/utils/SessionExpirationUtils.java,"@@ -0,0 +1,203 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.models.utils;++import java.util.concurrent.TimeUnit;+import org.keycloak.models.ClientModel;+import org.keycloak.models.Constants;+import org.keycloak.models.RealmModel;+import org.keycloak.protocol.oidc.OIDCConfigAttributes;++/**+ * <p>Shared methods to calculate the session expiration and idle.</p>+ *+ * @author rmartinc+ */+public class SessionExpirationUtils {++    /**+     * Calculates the time in which the session is expired via max lifetime+     * configuration.+     * @param offline is the session offline?+     * @param isRememberMe is the session remember me?+     * @param created timestamp when the session was created+     * @param realm The realm model+     * @return The time when the user session is expired or -1 if does not expire+     */+    public static long calculateUserSessionMaxLifespanTimestamp(boolean offline, boolean isRememberMe, long created, RealmModel realm) {+        long timestamp = -1;+        if (offline) {+            if (realm.isOfflineSessionMaxLifespanEnabled()) {+                timestamp = created + TimeUnit.SECONDS.toMillis(getOfflineSessionMaxLifespan(realm));+            }+        } else {+            long userSessionMaxLifespan =  TimeUnit.SECONDS.toMillis(getSsoSessionMaxLifespan(realm));+            if (isRememberMe) {+                userSessionMaxLifespan = Math.max(userSessionMaxLifespan, TimeUnit.SECONDS.toMillis(realm.getSsoSessionMaxLifespanRememberMe()));+            }+            timestamp = created + userSessionMaxLifespan;+        }+        return timestamp;+    }++    /**+     * Calculates the time in which the user session is expired via the idle+     * configuration.+     * @param offline is the session offline?+     * @param isRememberMe is the session remember me?+     * @param lastRefreshed The last time the session was refreshed+     * @param realm The realm model+     * @return The time in which the user session is expired by idle timeout+     */+    public static long calculateUserSessionIdleTimestamp(boolean offline, boolean isRememberMe, long lastRefreshed, RealmModel realm) {+        long timestamp;+        if (offline) {+            timestamp = lastRefreshed + TimeUnit.SECONDS.toMillis(getOfflineSessionIdleTimeout(realm));+        } else {+            long userSessionIdleTimeout = TimeUnit.SECONDS.toMillis(getSsoSessionIdleTimeout(realm));+            if (isRememberMe) {+                userSessionIdleTimeout = Math.max(userSessionIdleTimeout, TimeUnit.SECONDS.toMillis(realm.getSsoSessionIdleTimeoutRememberMe()));+            }+            timestamp = lastRefreshed + userSessionIdleTimeout;+        }+        return timestamp;+    }++    /**+     * Calculates the time in which the client session is expired via lifespan+     * configuration in the realm and client.+     * @param offline is the session offline?+     * @param isRememberMe is the session remember me?+     * @param clientSessionCreated timestamp when the client session was created+     * @param userSessionCreated timestamp when the user session was created+     * @param realm The realm model+     * @param client The client model+     * @return The time when the client session is expired or -1 if does not expire+     */+    public static long calculateClientSessionMaxLifespanTimestamp(boolean offline, boolean isRememberMe,+            long clientSessionCreated, long userSessionCreated, RealmModel realm, ClientModel client) {+        long timestamp = -1;+        if (offline) {+            if (realm.isOfflineSessionMaxLifespanEnabled()) {","Yes, that works for me.However it will be good to improve the usability around this IMO, but that can be done as a follow-up. Currently if I configure the things in the admin console as I've mentioned above (`Offline Session Max Lifespan` disabled for the realm, but `Client Offline Token Max` overriden to 1 day for client `foo`), I would expect that offline client session for my client `foo` would expire in 1 day.The possibility here is maybe to completely hide the `Client Offline Token Max` switch for the clients in case that realm `Offline Session Max Lifespan` is disabled. As the `Client Offline Token Max` client switch in-fact doesn't have any effect in this case and hence exposing it in the admin console is confusing IMO. But I see that as a possible follow-up...",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20624,1211321886,2023-05-31T08:55:48Z,js/apps/admin-ui/src/groups/components/MoveDialog.tsx,"@@ -12,23 +12,12 @@ type MoveDialogProps = { };  const moveToRoot = async (source: GroupRepresentation) => {-  await adminClient.groups.del({ id: source.id! });-  const { id } = await adminClient.groups.create({-    ...source,-    id: undefined,-  });-  if (source.subGroups) {-    await Promise.all(-      source.subGroups.map((s) =>-        adminClient.groups.setOrCreateChild(-          { id: id! },-          {-            ...s,-            id: undefined,-          }-        )-      )-    );+  try {+    await adminClient.groups.create(source);+  } catch (error: any) {+    if (error.response) {","@edewit I believe you wrote this code originally, there must be a better way to handle this, no? I feel like this exception should not be thrown in the first place if the request does complete with the intended effect.",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/20659,1211541712,2023-05-31T11:11:21Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -243,3 +243,78 @@ The removal of openshift-integration allows us to remove few thirdparty dependen any of these libraries as dependencies of your own providers deployed to Keycloak server, you may also need to copy those `jar` files explicitly to the Keycloak distribution `providers` directory as well. += Context and dependency injection no longer enabled to JAX-RS Resources++In order to provide a better runtime and leverage as much as possible the underlying stack,+all injection points for contextual data using the `javax.ws.rs.core.Context` annotation were removed. The expected improvement+in performance involves no longer creating proxies instances multiple times during the request lifecycle, and drastically reducing the amount of reflection code at runtime.++If you are extending one of the following SPIs:++* `PolicySpi`+* `AdminRealmResourceSpi`+* `IdentityProviderSpi`+* `RealmResourceProvider`++You should review your custom JAX-RS (sub)resources in order to obtain any contextual data from a `org.keycloak.common.util.ResteasyProvider`+instance as follows:",```suggestionYou should review your custom JAX-RS (sub)resources in order to obtain any contextual data from a `org.keycloak.common.util.Resteasy` provider as follows:```I'd specify the `org.keycloak.common.util.Resteasy` as the developer directly accessing that point. The first version seems to me a little bit misleading. WDYT?,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20450,1212231698,2023-05-31T19:46:47Z,js/apps/account-ui/src/root/Root.tsx,"@@ -37,7 +37,11 @@ const ReferrerLink = () => {  export const Root = () => {   const { t } = useTranslation();-  const indexHref = useHref(""/"");+  const brandImage = environment.logo ? environment.logo : ""logo.svg"";+  const logoUrl = environment.logoUrl ? environment.logoUrl : ""/"";++  // User can indicate that he wants an internal URL by starting it with ""/""+  const indexHref = logoUrl.startsWith(""/"") ? useHref(logoUrl) : logoUrl;",Hooks cannot be ran conditionally as this violates the [Rules of Hooks](https://react.dev/warnings/invalid-hook-call-warning#breaking-rules-of-hooks).,x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20450,1212407600,2023-05-31T23:17:32Z,js/apps/account-ui/src/root/Root.tsx,"@@ -35,9 +35,15 @@ const ReferrerLink = () => {   ) : null; }; +const logoUrl = environment.logoUrl ? environment.logoUrl : ""/"";+const internalLogoHref = useHref(logoUrl);","I am not quite sure how this is works, as this also breaks the [Rules of Hooks](https://react.dev/warnings/invalid-hook-call-warning#breaking-rules-of-hooks), specifically:> **Don’t call Hooks inside loops, conditions, or nested functions.** Instead, always use Hooks at the top level of your React function, before any early returns. <ins>You can only call Hooks while React is rendering a function component</ins>:> > - ✅ Call them at the top level in the body of a function component.> - ✅ Call them at the top level in the body of a custom Hook.Since this call has been placed outside of a function component it violates these rules.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20709,1212480270,2023-06-01T01:54:06Z,services/src/main/java/org/keycloak/services/resources/admin/AuthenticationManagementResource.java,"@@ -392,6 +392,26 @@ public static void copy(RealmModel realm, String newName, AuthenticationFlowMode                 execution.setFlowId(copy.getId());                 copy(realm, newName, subFlow, copy);             }++            if (execution.getAuthenticatorConfig() != null) {+                AuthenticatorConfigModel config = realm.getAuthenticatorConfigById(execution.getAuthenticatorConfig());++                if (config == null) {+                    logger.debugf(""Authentication execution with id [%s] not found"", config.getId());+                    throw new IllegalStateException(""Authentication execution configuration not found"");+                }++                config.setId(null);",It is not very nice to duplicate objects like that but changing it would introduce more changes to this PR. Looks like this pattern is being used alot.,x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20699,1212943787,2023-06-01T10:28:37Z,js/apps/admin-ui/cypress/support/pages/admin-ui/manage/identity_providers/social/ProviderMicrosoftGeneralSettings.ts,"@@ -0,0 +1,29 @@+import ProviderBaseGeneralSettingsPage from ""../ProviderBaseGeneralSettingsPage"";++const tenant_id_input_test_value = ""tenant_id_input_test_value"";","Let's use a constant case style here. Also, I don't think the name needs to be this long, considering the context it's used in.```suggestionconst TENANT_ID_VALUE = ""tenant_id_input_test_value"";```",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20699,1212948873,2023-06-01T10:32:06Z,js/apps/admin-ui/cypress/support/pages/admin-ui/manage/identity_providers/social/ProviderMicrosoftGeneralSettings.ts,"@@ -0,0 +1,29 @@+import ProviderBaseGeneralSettingsPage from ""../ProviderBaseGeneralSettingsPage"";++const tenant_id_input_test_value = ""tenant_id_input_test_value"";++export default class ProviderMicrosoftGeneralSettings extends ProviderBaseGeneralSettingsPage {+  private tenantIdInput = ""#microsoftTenantId"";","If possible we prefer to use test id's to retrieve elements during test, for more information see the [Cypress Testing Library documentation](https://testing-library.com/docs/cypress-testing-library/intro/).",
120108,Tasssadar,https://api.github.com/repos/keycloak/keycloak/pulls/20699,1212986052,2023-06-01T11:04:54Z,js/apps/admin-ui/cypress/support/pages/admin-ui/manage/identity_providers/social/ProviderMicrosoftGeneralSettings.ts,"@@ -0,0 +1,29 @@+import ProviderBaseGeneralSettingsPage from ""../ProviderBaseGeneralSettingsPage"";++const tenant_id_input_test_value = ""tenant_id_input_test_value"";++export default class ProviderMicrosoftGeneralSettings extends ProviderBaseGeneralSettingsPage {+  private tenantIdInput = ""#microsoftTenantId"";","Hi, not sure what you mean here - this file is pretty much copypasted from [ProviderGoogleGeneralSettings](https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/cypress/support/pages/admin-ui/manage/identity_providers/social/ProviderGoogleGeneralSettings.ts) verbatim, and all the Provider tests use this method to get the input element.",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1213128595,2023-06-01T13:07:46Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticatedClientSessionEntity.java,"@@ -83,6 +85,28 @@ public void setTimestamp(int timestamp) {         this.timestamp = timestamp;     } +    public int getUserSessionStarted() {+        String started = getNotes().get(AuthenticatedClientSessionModel.USER_SESSION_STARTED_AT_NOTE);+        return started == null ? timestamp : Integer.parseInt(started);","Yes, it's correct. Previously `getTimestamp` was always used. So this is maintaining the same behavior just in case. If we use 0 all the session without the note would be expired. Note that we are doing the same in the map part ([here](https://github.com/keycloak/keycloak/blob/510cc404c531b9faa4f7dacc5817e6e7d38971ef/model/map/src/main/java/org/keycloak/models/map/userSession/SessionExpiration.java#L32)).",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1213178275,2023-06-01T13:43:23Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticatedClientSessionEntity.java,"@@ -83,6 +85,28 @@ public void setTimestamp(int timestamp) {         this.timestamp = timestamp;     } +    public int getUserSessionStarted() {+        String started = getNotes().get(AuthenticatedClientSessionModel.USER_SESSION_STARTED_AT_NOTE);+        return started == null ? timestamp : Integer.parseInt(started);","We can do it, but I really don't know if it can be problematic. In `AuthenticatedClientSessionEntity` I simply created `getUserSessionStarted` following the same idea that was in `getStarted` (so I returned 0).For the PR the classes that are really used are `AuthenticatedClientSessionEntity` and `MapAuthenticatedClientSessionEntity` (which don't implement `AuthenticatedClientSessionEntity` and re-implement the access to notes).",
568962,estliberitas,https://api.github.com/repos/keycloak/keycloak/pulls/20722,1213677649,2023-06-01T21:03:05Z,docs/documentation/securing_apps/topics/oidc/javascript-adapter.adoc,"@@ -349,6 +351,8 @@ responseType::  Called to initialize the adapter. +WARNING: if you are calling this method with `onLoad: 'login-required'` make sure to call it once because it sets authenticated state to `false` and you may end up in the redirect loop.",Removed this condition from the warning. 😉,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/17525,1214142761,2023-06-02T09:28:00Z,model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticatedClientSessionEntity.java,"@@ -83,6 +85,28 @@ public void setTimestamp(int timestamp) {         this.timestamp = timestamp;     } +    public int getUserSessionStarted() {+        String started = getNotes().get(AuthenticatedClientSessionModel.USER_SESSION_STARTED_AT_NOTE);+        return started == null ? timestamp : Integer.parseInt(started);","@martin-kanis @rmartinc This is good catch!I recall this was added in this commit https://github.com/keycloak/keycloak/pull/8130/files#diff-b4014a5e9c73d54dc98153e6fa64803e21ab0646a75566cf74ca9a02abbb18db . And some related story behind that is described in this JIRA description https://issues.redhat.com/browse/KEYCLOAK-18368 .The 0 was just a fallback, which was only used for ""offline client sessions"" migrated from previous version (As those offline client sessions didn't have ""startedAt"" note on them). In other words when it would use timestamp instead of 0 in that PR, we wouldn't be able to refresh offline tokens from previous version due this possible scenario:- Offline token issued on old server (before KEYCLOAK-18368) at time 1000- Keycloak server stopped and started with new Keycloak version (with KEYCLOAK-18368 applied)- Refresh of the offline token at time 2000 would fail due this check https://github.com/keycloak/keycloak/blob/21.1.1/services/src/main/java/org/keycloak/protocol/oidc/TokenManager.java#L186-L189Note that this check is needed exactly because of the scenario described in https://issues.redhat.com/browse/KEYCLOAK-18368. But at the same time, we should make sure that offline tokens from previous version must be possible to refresh. So that's the story of why it was originally added :-)Now some thoughts for this PR:IMO the ideal is, if this fallback to 0 (or timestamp) is effectively not needed anywhere.  It looks that the only case how the USER_SESSION_STARTED_AT_NOTE note won't be present is (again) the offline sessions migrated from previous version?AFAIK we don't need to care about new store as we don't support migrating of offline sessions created with the new store in previous versions. Is it correct @martin-kanis ? So we likely need to care just about old store and the offline sessions coming from `UserSessionPersister`.So as long as all client sessions returned by `JpaUserSessionPersisterProvider` have this note on them, we should be good. If we always have corresponding UserSession (which AFAIK we have), we can just use `userSession.getStarted()` to fill that note before saving those persisted sessions in infinispan?Also I wonder if `AuthenticatedClientSessionModel.getUserSessionStarted()` could be updated like this in this PR?```    default int getUserSessionStarted() {        String started = getNote(USER_SESSION_STARTED_AT_NOTE);        return started == null ? getUserSession().getStarted() : Integer.parseInt(started);    }```In other words, fallback to look at `userSession.getStarted()` instead of using hardcoded value of 0 (or timestamp). Ideal is if AuthenticatedClientSessionEntity also has access to userSession, so it can look into it, but I suppose this would require some bigger refactoring, which we don't want to do in this PR?In shortcut: In `MigrationTest` we have scenario for testing refresh of the offline-token from previous version. So it seems that this PR should be tested with `MigrationTest` to make sure it works. AFAIK `MigrationTest` is not yet in GH actions, so this may need to be done manually.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20731,1214235809,2023-06-02T11:07:43Z,model/legacy-private/src/main/java/org/keycloak/migration/migrators/MigrateTo22_0_0.java,"@@ -0,0 +1,81 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ *  and other contributors as indicated by the @author tags.+ *+ *  Licensed under the Apache License, Version 2.0 (the ""License"");+ *  you may not use this file except in compliance with the License.+ *  You may obtain a copy of the License at+ *+ *  http://www.apache.org/licenses/LICENSE-2.0+ *+ *  Unless required by applicable law or agreed to in writing, software+ *  distributed under the License is distributed on an ""AS IS"" BASIS,+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ *+ *  See the License for the specific language governing permissions and+ *  limitations under the License.+ *+ */++package org.keycloak.migration.migrators;++import org.jboss.logging.Logger;+import org.keycloak.migration.ModelVersion;+import org.keycloak.models.AuthenticationFlowModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ModelException;+import org.keycloak.models.RealmModel;+import org.keycloak.representations.idm.RealmRepresentation;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class MigrateTo22_0_0 implements Migration {++    public static final ModelVersion VERSION = new ModelVersion(""22.0.0"");++    public static final String HTTP_CHALLENGE_FLOW = ""http challenge"";++    private static final Logger LOG = Logger.getLogger(MigrateTo22_0_0.class);++    @Override+    public void migrate(KeycloakSession session) {+        session.realms().getRealmsStream().forEach(this::removeHttpChallengeFlow);+    }++    @Override+    public void migrateImport(KeycloakSession session, RealmModel realm, RealmRepresentation rep, boolean skipUserDependent) {+        removeHttpChallengeFlow(realm);+    }++    private void removeHttpChallengeFlow(RealmModel realm) {+        AuthenticationFlowModel httpChallenge = realm.getFlowByAlias(HTTP_CHALLENGE_FLOW);+        if (httpChallenge == null) return;++        try {+            realm.removeAuthenticationFlow(httpChallenge);++            // Builtin ""Http challenge"" flow had subflow of this name, which should be removed as well+            AuthenticationFlowModel subflow = realm.getFlowByAlias(""Authentication Options"");+            if (subflow != null && subflow.isBuiltIn()) {+                realm.removeAuthenticationFlow(subflow);+            }+            LOG.debugf(""Removed '%s' authentication flow in realm '%s'"", HTTP_CHALLENGE_FLOW, realm.getName());+        } catch (ModelException me) {+            if (me.getMessage().endsWith(""it is currently in use"")) {","I'm wondering if we should also consider failing to start the server when we can't migrate the database automatically but it needs manual intervention.I think this will make it very explicit that you can't upgrade until you change your realms manually.For instance, in this case, we really don't want to have the `openshift-extension` mentioned and recommend deploying it. We know that extension is outdated and its current state is unknown.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20731,1214453300,2023-06-02T14:27:59Z,model/legacy-private/src/main/java/org/keycloak/migration/migrators/MigrateTo22_0_0.java,"@@ -0,0 +1,81 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ *  and other contributors as indicated by the @author tags.+ *+ *  Licensed under the Apache License, Version 2.0 (the ""License"");+ *  you may not use this file except in compliance with the License.+ *  You may obtain a copy of the License at+ *+ *  http://www.apache.org/licenses/LICENSE-2.0+ *+ *  Unless required by applicable law or agreed to in writing, software+ *  distributed under the License is distributed on an ""AS IS"" BASIS,+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ *+ *  See the License for the specific language governing permissions and+ *  limitations under the License.+ *+ */++package org.keycloak.migration.migrators;++import org.jboss.logging.Logger;+import org.keycloak.migration.ModelVersion;+import org.keycloak.models.AuthenticationFlowModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ModelException;+import org.keycloak.models.RealmModel;+import org.keycloak.representations.idm.RealmRepresentation;++/**+ * @author <a href=""mailto:mposolda@redhat.com"">Marek Posolda</a>+ */+public class MigrateTo22_0_0 implements Migration {++    public static final ModelVersion VERSION = new ModelVersion(""22.0.0"");++    public static final String HTTP_CHALLENGE_FLOW = ""http challenge"";++    private static final Logger LOG = Logger.getLogger(MigrateTo22_0_0.class);++    @Override+    public void migrate(KeycloakSession session) {+        session.realms().getRealmsStream().forEach(this::removeHttpChallengeFlow);+    }++    @Override+    public void migrateImport(KeycloakSession session, RealmModel realm, RealmRepresentation rep, boolean skipUserDependent) {+        removeHttpChallengeFlow(realm);+    }++    private void removeHttpChallengeFlow(RealmModel realm) {+        AuthenticationFlowModel httpChallenge = realm.getFlowByAlias(HTTP_CHALLENGE_FLOW);+        if (httpChallenge == null) return;++        try {+            realm.removeAuthenticationFlow(httpChallenge);++            // Builtin ""Http challenge"" flow had subflow of this name, which should be removed as well+            AuthenticationFlowModel subflow = realm.getFlowByAlias(""Authentication Options"");","Well, I think that we definitely should have migration as otherwise people migrating from previous version will have `Http Challenge` flow in their realm, which would be just broken (as corresponding authenticators doesn't exists) and after click on this flow in the admin console, the error page would be shown. This looks like quite a buggy behaviour. The unused mess should be just removed IMO :-)",x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20731,1214557357,2023-06-02T15:59:42Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -244,6 +244,19 @@ If you used this feature, you should not use the `openshift-integration` feature the JAR file from custom extension. You can check the https://github.com/keycloak-extensions/keycloak-openshift-ext/[Openshift extension] and the instructions in it's README file for how to deploy the extension to your Keycloak server. +NOTE: The Openshift extension is not officially supported and maintained by Keycloak team. You can use it only at your own risk.++== Http Challenge flow removed++The builtin authentication flow `http challenge` was removed. Same applies for the authenticator implementations `no-cookie-redirect`, `basic-auth` and `basic-auth-otp`.","```suggestionThe built-in authentication flow `http challenge` was removed along with the authenticator implementations `no-cookie-redirect`, `basic-auth`, and `basic-auth-otp`.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20731,1214558500,2023-06-02T16:00:59Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -244,6 +244,19 @@ If you used this feature, you should not use the `openshift-integration` feature the JAR file from custom extension. You can check the https://github.com/keycloak-extensions/keycloak-openshift-ext/[Openshift extension] and the instructions in it's README file for how to deploy the extension to your Keycloak server. +NOTE: The Openshift extension is not officially supported and maintained by Keycloak team. You can use it only at your own risk.++== Http Challenge flow removed++The builtin authentication flow `http challenge` was removed. Same applies for the authenticator implementations `no-cookie-redirect`, `basic-auth` and `basic-auth-otp`.+The `http challenge` authentication flow was also supposed to be used for Openshift integration and hence it was removed together with other related things as described above.",```suggestionThe `http challenge` authentication flow was also intended for Openshift integration and therefore it was removed along with other related capabilities as described above.```,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20731,1214565100,2023-06-02T16:08:13Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -244,6 +244,19 @@ If you used this feature, you should not use the `openshift-integration` feature the JAR file from custom extension. You can check the https://github.com/keycloak-extensions/keycloak-openshift-ext/[Openshift extension] and the instructions in it's README file for how to deploy the extension to your Keycloak server. +NOTE: The Openshift extension is not officially supported and maintained by Keycloak team. You can use it only at your own risk.++== Http Challenge flow removed++The builtin authentication flow `http challenge` was removed. Same applies for the authenticator implementations `no-cookie-redirect`, `basic-auth` and `basic-auth-otp`.+The `http challenge` authentication flow was also supposed to be used for Openshift integration and hence it was removed together with other related things as described above.+Authenticator implementations were moved to Openshift extension described in the previous paragraph.++If you use the `http challenge` flow as realm flow or as `First Broker Login` or `Post Broker Login` flow of some of your identity providers, the migration won't be possible. So please update+your realm configuration before migration to not using `http challenge` flow.+If you use the `http challenge` flow for any of your clients as `Authentication Flow Binding Override`, the migration would be possible, but you won't be able to login to that particular client.+You may need to re-create the flow again after the migration to Keycloak 22 and update configuration of your clients to use the new/differentJson flow.","```suggestionIf you use the `http challenge` flow  as `Authentication Flow Binding Override` for any client, the migration would complete, but you could no longer log in to that client.After the migration, you would need to re-create the flow and update the configuration of your clients to use the new/differentJson flow.```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20754,1214629653,2023-06-02T17:20:04Z,testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/WaitUtils.java,"@@ -149,31 +148,11 @@ public static void waitForPageToLoad() {             }         } -        WebDriverWait wait = new WebDriverWait(getCurrentDriver(), PAGELOAD_TIMEOUT_MILLIS / 1000);-        ExpectedCondition waitCondition = null;--        // Different wait strategies for Admin and Account Consoles-        if (currentUrl.matches(""^[^\\/]+:\\/\\/[^\\/]+\\/auth\\/admin\\/.*$"")) { // Admin Console","Considering this regex was matching `/auth` (which has been gone since a couple of releases), I believe this code path was probably dead since a while.",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20774,1217785237,2023-06-05T09:21:48Z,js/libs/keycloak-admin-client/src/resources/identityProviders.ts,"@@ -116,10 +116,11 @@ export class IdentityProviders extends Resource<{ realm?: string }> {   });    public importFromUrl = this.makeRequest<-    {-      fromUrl: string;-      providerId: string;-    },+    | {+        fromUrl: string;+        providerId: string;+      }+    | FormData,",The `FormData` type can be anything. Are we doing this in other places as well? Seems kinda counterintuitive to go from a well typed API to a generic map of data.,x
68421193,artur-baltabayev,https://api.github.com/repos/keycloak/keycloak/pulls/20572,1217948551,2023-06-05T11:40:42Z,services/src/main/java/org/keycloak/authentication/authenticators/resetcred/ResetOTP.java,"@@ -56,7 +156,7 @@ public String getDisplayType() {      @Override     public String getHelpText() {-        return ""Sets the Configure OTP required action."";+        return ""Removes existing OTP configurations (if chosen) and sets the 'Configure OTP' required action."";",@pedroigor I looked around in the code and couldn't see a single place where internationalization is applied at the help text. But i guess it would be technically possible.,
68421193,artur-baltabayev,https://api.github.com/repos/keycloak/keycloak/pulls/20572,1218216892,2023-06-05T15:11:03Z,services/src/main/java/org/keycloak/authentication/authenticators/resetcred/ResetOTP.java,"@@ -56,7 +156,7 @@ public String getDisplayType() {      @Override     public String getHelpText() {-        return ""Sets the Configure OTP required action."";+        return ""Removes existing OTP configurations (if chosen) and sets the 'Configure OTP' required action."";",@pedroigor Unfortunately i am not able to get the texts localized. Maybe it's due to the new React based UI ? I tried the usual raw message keys and also embedded inside a ${msg(...)} syntax. I also wasn't able to find any examples of a config property using internationalization. Can you maybe tell me the specific class that does it ?,
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/20793,1219026777,2023-06-06T06:57:59Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/events/EventStoreProviderTest.java,"@@ -171,6 +174,32 @@ public void query() {         Assert.assertEquals(0, testing().queryEvents(realmId2, null, null, null, d08, d10, null, null, null).size());     } +    @Test+    public void testEventBuilder() {+        testingClient.server(REALM_NAME_1).run(session -> {+            RealmModel realm = session.realms().getRealm(realmId);++            EventBuilder event = new EventBuilder(realm, session)+                    .event(EventType.LOGIN)+                    .user(""user1"")+                    .client(""client1"");+            event.error(Errors.USER_NOT_FOUND);","This line uses a separate transaction for storing the event, not the one created above on line 179.See https://github.com/hmlnarik/keycloak/blob/097638a37a29272488e2b80f5bca750dc50b37ff/server-spi-private/src/main/java/org/keycloak/events/EventBuilder.java#L237-L242",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/20793,1219028375,2023-06-06T06:59:14Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/events/EventStoreProviderTest.java,"@@ -171,6 +174,32 @@ public void query() {         Assert.assertEquals(0, testing().queryEvents(realmId2, null, null, null, d08, d10, null, null, null).size());     } +    @Test+    public void testEventBuilder() {+        testingClient.server(REALM_NAME_1).run(session -> {+            RealmModel realm = session.realms().getRealm(realmId);++            EventBuilder event = new EventBuilder(realm, session)+                    .event(EventType.LOGIN)+                    .user(""user1"")+                    .client(""client1"");+            event.error(Errors.USER_NOT_FOUND);++            event.clone().event(EventType.LOGIN).success();",This line uses the default transaction initiated in 179.See https://github.com/hmlnarik/keycloak/blob/097638a37a29272488e2b80f5bca750dc50b37ff/server-spi-private/src/main/java/org/keycloak/events/EventBuilder.java#L244,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20793,1219045498,2023-06-06T07:09:19Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/events/AbstractEventsTest.java,"@@ -23,14 +23,15 @@ import org.keycloak.testsuite.client.resources.TestingResource; import org.keycloak.testsuite.util.RealmBuilder; +import java.io.Serializable; import java.util.ArrayList; import java.util.List;  /**  *  * @author Stan Silvert ssilvert@redhat.com (C) 2016 Red Hat Inc.  */-public abstract class AbstractEventsTest extends AbstractKeycloakTest {+public abstract class AbstractEventsTest extends AbstractKeycloakTest implements Serializable {","Is it needed to use `Serializable` here? It is quite strange to me as none of our other tests need this...I guess it is because of `testingClient.server(REALM_NAME1).run` block? In that case it can be possibility to either:- Use the real operations (to simulate real events) instead of ""faking"" them with testingClient- Use the `final` local variable. Something like for example this should work AFAIK (based on some other classes):```final String localRealmId = this.realmId;        testingClient.server(REALM_NAME_1).run(session -> {            RealmModel realm = session.realms().getRealm(myRealmId);```WDYT?",x
51133,edewit,https://api.github.com/repos/keycloak/keycloak/pulls/20774,1219421854,2023-06-06T10:59:12Z,js/libs/keycloak-admin-client/src/resources/identityProviders.ts,"@@ -116,10 +116,11 @@ export class IdentityProviders extends Resource<{ realm?: string }> {   });    public importFromUrl = this.makeRequest<-    {-      fromUrl: string;-      providerId: string;-    },+    | {+        fromUrl: string;+        providerId: string;+      }+    | FormData,","right, it's what the api expects a post with form data",
5997854,daniel-brannon,https://api.github.com/repos/keycloak/keycloak/pulls/20820,1219940520,2023-06-06T16:16:18Z,js/apps/admin-ui/src/groups/components/MoveDialog.tsx,"@@ -11,39 +11,13 @@ type MoveDialogProps = {   refresh: () => void; }; -const moveToRoot = async (source: GroupRepresentation) => {-  await adminClient.groups.del({ id: source.id! });-  const { id } = await adminClient.groups.create({-    ...source,-    id: undefined,-  });-  if (source.subGroups) {-    await Promise.all(-      source.subGroups.map((s) =>-        adminClient.groups.setOrCreateChild(-          { id: id! },-          {-            ...s,-            id: undefined,-          }-        )-      )-    );-  }-};+const moveToRoot = (source: GroupRepresentation) =>+  adminClient.groups.create(source);  const moveToGroup = async (   source: GroupRepresentation,   dest: GroupRepresentation-) => {-  try {-    await adminClient.groups.setOrCreateChild({ id: dest.id! }, source);-  } catch (error: any) {-    if (error.response) {-      throw error;-    }-  }-};+) => adminClient.groups.setOrCreateChild({ id: dest.id! }, source);","Removing the try catch here will cause the exception to be caught on line 31 below, which ""handles"" all exceptions by displaying an error in the UI. This is not desirable, since the operation actually succeeds. The problem originates in the file js/libs/keycloak-admin-client/src/resources/agent.ts, requestWithParams function. If the returnResourceIdInLocationHeader is set in that function, it expects the HTTP response to include a Location header, from which it can extract the generated resource Id. The adminClient.groups.create(...) and adminClient.groups.setOrCreateChild(...) methods, which are implemented in js/libs/keycloak-admin-client/src/resources/groups.ts, both set the returnResourceIdInLocationHeader parameter, because a new resource is created in some cases, and thus the Id needs to be retrieved. If you want to avoid an exception being thrown in the case where a new resource is not to be created, such as when an existing resource is passed in to these methods to be updated, then the code in the requestWithParams method should be modified to check for this condition. Unless that change is made, the original try-catch in this file should be kept to avoid displaying an error when there is none.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20828,1221025728,2023-06-07T07:17:41Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakController.java,"@@ -127,6 +127,7 @@ public UpdateControl<Keycloak> reconcile(Keycloak kc, Context context) {         kcIngress.createOrUpdateReconciled();          var status = statusBuilder.build();+        status.setInstances(kcDeployment.getReadyReplicas());","I'd like to keep the builder pattern here to make it consistent with how we set conditions, the status shouldn't be modified directly.Also, I think we should set this inside `KeycloakDeployment.updateStatus`, not in controller, to make it consistent as well.",
7382506,EiriniGraonidou,https://api.github.com/repos/keycloak/keycloak/pulls/20190,1221103089,2023-06-07T08:00:20Z,themes/src/main/resources-community/theme/base/admin/messages/messages_el.properties,"@@ -0,0 +1,65 @@+# encoding: utf-8++error-invalid-date=Το πεδίο {0} δεν αποτελεί έγκυρη ημερομηνία.+error-invalid-length-too-long=Το πεδίο {0} μπορεί να περιέχει το πολύ {2} χαρακτήρες .+error-person-name-invalid-character=Το {0} περιέχει ένα μη έγκυρο χαρακτήρα.+error-username-invalid-character=Το {0} περιέχει ένα μη έγκυρο χαρακτήρα.+error-user-attribute-read-only=Το χαρακτηριστικό {0} είναι για ανάγνωση μόνο.+error-user-attribute-required=Παρακαλώ ορίστε το χαρακτηριστικό {0}.+error-invalid-uri-fragment=Μη έγκυρο κομμάτι URL.+error-invalid-uri-scheme=Μη έγκυρο σχήμα URL.+error-invalid-uri=Μη έγκυρο URL.+error-pattern-no-match=Μη έγκυρη τιμή.+error-number-out-of-range-too-big=Το χαρακτηριστικό {0} πρέπει να έχει μέγιστη τιμή {2}.",```suggestionerror-number-out-of-range-too-big=Το πεδίο {0} μπορεί να έχει μέγιστη τιμή {2}.```,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20825,1221410405,2023-06-07T11:19:55Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/ValueOrSecret.java,"@@ -21,9 +21,12 @@  import java.util.Objects; +import com.fasterxml.jackson.annotation.JsonInclude;+ /**  * @author Vaclav Muzikar <vmuzikar@redhat.com>  */+@JsonInclude(JsonInclude.Include.NON_NULL)","I'm fine with fixing it on the Operator level as a temporary solution but it feels a bit weird in long run.If `null` values are prohibited by K8s in some use cases, maybe we should rather have some global mapper settings for it at SDK/Fabric8 level. But that will be discussed in https://github.com/fabric8io/kubernetes-client/discussions/5214",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20248,1221471900,2023-06-07T12:08:53Z,services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java,"@@ -974,6 +974,8 @@ private Response performAccountLinking(AuthenticationSessionModel authSession, U             userSession.setNote(Details.IDENTITY_PROVIDER_USERNAME, context.getUsername());         } +        updateFederatedIdentity(context, federatedUser);",@toddkazakov I think calling this method here will cause errors when linking existing accounts. Could you please try to add the call at https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java#L942?,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/7938,1221750143,2023-06-07T14:59:36Z,docs/documentation/server_admin/topics/users/proc-requiring-tac-agreement-at-registration.adoc,"@@ -0,0 +1,24 @@+// Module included in the following assemblies:+//+// con-user-registration.adoc++[id=""proc-requiring-tac-agreement-at-registration_{context}""]+= Requiring user to agree to terms and conditions during registration++[role=""_abstract""]+You can condition a user registration to his agreement to your terms and conditions.","```suggestionFor a user to register, you can require agreement to your terms and conditions.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/7938,1221750595,2023-06-07T14:59:57Z,docs/documentation/server_admin/topics/users/proc-requiring-tac-agreement-at-registration.adoc,"@@ -0,0 +1,24 @@+// Module included in the following assemblies:+//+// con-user-registration.adoc++[id=""proc-requiring-tac-agreement-at-registration_{context}""]+= Requiring user to agree to terms and conditions during registration++[role=""_abstract""]+You can condition a user registration to his agreement to your terms and conditions.++.Registration form with required terms and conditions agreement+image:images/registration-form-with-required-tac.png[]++.Prerequisite+* User registration is enabled.+* Terms and conditions required action is enabled",```suggestion* Terms and conditions required action is enabled.```,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20856,1222692330,2023-06-08T09:10:15Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/KeycloakStatusAggregator.java,"@@ -85,10 +105,57 @@ public KeycloakStatusAggregator apply(Consumer<KeycloakStatusBuilder> toApply) {     }      public KeycloakStatus build() {-        readyCondition.setMessage(String.join(""\n"", notReadyMessages));-        hasErrorsCondition.setMessage(String.join(""\n"", errorMessages));-        rollingUpdate.setMessage(String.join(""\n"", rollingUpdateMessages));-        +        // conditions are only updated in one direction - the following determines if it's appropriate to observe the default / other direction+        if (readyCondition.getStatus() == null && !Boolean.TRUE.equals(hasErrorsCondition.getStatus())) {+            readyCondition.setStatus(true);+            readyCondition.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (readyCondition.getObservedGeneration() != null) {+            readyCondition.setMessage(String.join(""\n"", notReadyMessages));+        }++        if (hasErrorsCondition.getStatus() == null && readyCondition.getObservedGeneration() != null) {+            hasErrorsCondition.setStatus(false);+            hasErrorsCondition.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (hasErrorsCondition.getObservedGeneration() != null) {+            hasErrorsCondition.setMessage(String.join(""\n"", errorMessages));+        }++        if (rollingUpdate.getStatus() == null && readyCondition.getObservedGeneration() != null) {+            rollingUpdate.setStatus(false);+            rollingUpdate.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (rollingUpdate.getObservedGeneration() != null) {+            rollingUpdate.setMessage(String.join(""\n"", rollingUpdateMessages));+        }","This feels to me maybe a bit too complex and hard to read. But I don't have currently anything in mind how to make it more simple, the logic is correct. But that's subjective so not a blocker for me.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20856,1222694747,2023-06-08T09:12:33Z,operator/src/test/java/org/keycloak/operator/testsuite/unit/KeycloakStatusTest.java,"@@ -17,21 +17,137 @@  package org.keycloak.operator.testsuite.unit; -import static org.junit.jupiter.api.Assertions.assertNotEquals;- import org.junit.jupiter.api.Test; import org.keycloak.operator.crds.v2alpha1.deployment.KeycloakStatus; import org.keycloak.operator.crds.v2alpha1.deployment.KeycloakStatusAggregator;+import org.keycloak.operator.crds.v2alpha1.deployment.KeycloakStatusCondition;++import static org.junit.jupiter.api.Assertions.assertEquals;+import static org.junit.jupiter.api.Assertions.assertNotEquals;+import static org.junit.jupiter.api.Assertions.assertNotNull;  public class KeycloakStatusTest {-    +     @Test     public void testEqualityWithScale() {-        KeycloakStatus status1 = new KeycloakStatusAggregator().apply(b -> b.withInstances(1)).build();-        -        KeycloakStatus status2 = new KeycloakStatusAggregator().apply(b -> b.withInstances(2)).build();-        +        KeycloakStatus status1 = new KeycloakStatusAggregator(0L).apply(b -> b.withInstances(1)).build();++        KeycloakStatus status2 = new KeycloakStatusAggregator(0L).apply(b -> b.withInstances(2)).build();+         assertNotEquals(status1, status2);     } +    @Test+    public void testDefaults() {+        KeycloakStatus status = new KeycloakStatusAggregator(1L).build();+        KeycloakStatusCondition ready = status.findCondition(KeycloakStatusCondition.READY).orElseThrow();+        assertCondition(ready, true, 1L, """");++        KeycloakStatusCondition rolling = status.findCondition(KeycloakStatusCondition.ROLLING_UPDATE).orElseThrow();+        assertCondition(rolling, false, 1L, """");++        KeycloakStatusCondition errors = status.findCondition(KeycloakStatusCondition.HAS_ERRORS).orElseThrow();+        assertCondition(errors, false, 1L, """");+    }++    @Test+    public void testReadyWithWarning() {+        KeycloakStatus status = new KeycloakStatusAggregator(1L).addWarningMessage(""something's not right"").build();+        KeycloakStatusCondition ready = status.findCondition(KeycloakStatusCondition.READY).orElseThrow();+        assertCondition(ready, true, 1L, """");++        KeycloakStatusCondition errors = status.findCondition(KeycloakStatusCondition.HAS_ERRORS).orElseThrow();+        assertCondition(errors, false, 1L, ""warning: something's not right""); // could also be unknown+    }++    @Test+    public void testNotReady() {+        KeycloakStatus status = new KeycloakStatusAggregator(1L).addNotReadyMessage(""waiting"").build();+        KeycloakStatusCondition ready = status.findCondition(KeycloakStatusCondition.READY).orElseThrow();+        assertCondition(ready, false, 1L, ""waiting"");++        KeycloakStatusCondition errors = status.findCondition(KeycloakStatusCondition.HAS_ERRORS).orElseThrow();+        assertCondition(errors, false, 1L, """");+    }++    @Test+    public void testReadyRolling() {+        KeycloakStatus status = new KeycloakStatusAggregator(1L).addRollingUpdateMessage(""rolling"").build();+        KeycloakStatusCondition ready = status.findCondition(KeycloakStatusCondition.READY).orElseThrow();+        assertCondition(ready, true, 1L, """");++        KeycloakStatusCondition rolling = status.findCondition(KeycloakStatusCondition.ROLLING_UPDATE).orElseThrow();+        assertCondition(rolling, true, 1L, ""rolling"");+    }++    @Test+    public void testError() {+        // without prior status, ready and rolling are unknown+        KeycloakStatus status = new KeycloakStatusAggregator(1L).addErrorMessage(""this is bad"").build();+        KeycloakStatusCondition ready = status.findCondition(KeycloakStatusCondition.READY).orElseThrow();+        assertCondition(ready, null, null, null);++        KeycloakStatusCondition errors = status.findCondition(KeycloakStatusCondition.HAS_ERRORS).orElseThrow();+        assertCondition(errors, true, 1L, ""this is bad"");++        KeycloakStatusCondition rolling = status.findCondition(KeycloakStatusCondition.ROLLING_UPDATE).orElseThrow();+        assertCondition(rolling, null, null, null);+    }++    @Test+    public void testErrorWithPriorStatus() {+        // with prior status, ready and rolling are preserved+        KeycloakStatus prior = new KeycloakStatusAggregator(1L).build();+        prior.getConditions().stream().forEach(c -> c.setLastTransitionTime(""prior""));++        KeycloakStatus status = new KeycloakStatusAggregator(prior, 2L).addErrorMessage(""this is bad"").build();+        KeycloakStatusCondition ready = status.findCondition(KeycloakStatusCondition.READY).orElseThrow();+        assertCondition(ready, true, 1L, """");+        assertEquals(""prior"", ready.getLastTransitionTime());++        KeycloakStatusCondition errors = status.findCondition(KeycloakStatusCondition.HAS_ERRORS).orElseThrow();+        assertCondition(errors, true, 2L, ""this is bad"");+        assertNotEquals(""prior"", errors.getLastTransitionTime());++        KeycloakStatusCondition rolling = status.findCondition(KeycloakStatusCondition.ROLLING_UPDATE).orElseThrow();+        assertCondition(rolling, false, 1L, """");+    }++    @Test+    public void testReadyWithPriorStatus() {+        // without prior status, ready and rolling are known and keep the transition time+        KeycloakStatus prior = new KeycloakStatusAggregator(1L).build();+        prior.getConditions().stream().forEach(c -> c.setLastTransitionTime(""prior""));++        KeycloakStatus status = new KeycloakStatusAggregator(prior, 2L).build();+        KeycloakStatusCondition ready = status.findCondition(KeycloakStatusCondition.READY).orElseThrow();+        assertCondition(ready, true, 2L, """");+        assertEquals(""prior"", ready.getLastTransitionTime());++        KeycloakStatusCondition errors = status.findCondition(KeycloakStatusCondition.HAS_ERRORS).orElseThrow();+        assertCondition(errors, false, 2L, """");++        KeycloakStatusCondition rolling = status.findCondition(KeycloakStatusCondition.ROLLING_UPDATE).orElseThrow();+        assertCondition(rolling, false, 2L, """");+    }++    @Test+    public void testPreservesScale() {+        KeycloakStatus prior = new KeycloakStatusAggregator(1L).apply(b -> b.withObservedGeneration(1L).withInstances(3)).build();+        prior.getConditions().stream().forEach(c -> c.setLastTransitionTime(""prior""));++        KeycloakStatus status = new KeycloakStatusAggregator(prior, 2L).apply(b -> b.withObservedGeneration(2L)).build();+        assertEquals(2, status.getObservedGeneration());+        assertEquals(3, status.getInstances());+    }++    private void assertCondition(KeycloakStatusCondition condition, Boolean status, Long observedGeneration, String message) {+        assertEquals(status, condition.getStatus());+        assertEquals(observedGeneration, condition.getObservedGeneration());+        assertEquals(message, condition.getMessage());+        if (status != null) {+            assertNotNull(condition.getLastTransitionTime());+        }+    }",Maybe we could extend/reuse the existing asserts?https://github.com/keycloak/keycloak/blob/19ee00ff545d0c6cb68079849b5f18188f38928c/operator/src/test/java/org/keycloak/operator/testsuite/utils/CRAssert.java#L33-L56,
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/20856,1222852852,2023-06-08T10:38:51Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/KeycloakStatusAggregator.java,"@@ -85,10 +105,57 @@ public KeycloakStatusAggregator apply(Consumer<KeycloakStatusBuilder> toApply) {     }      public KeycloakStatus build() {-        readyCondition.setMessage(String.join(""\n"", notReadyMessages));-        hasErrorsCondition.setMessage(String.join(""\n"", errorMessages));-        rollingUpdate.setMessage(String.join(""\n"", rollingUpdateMessages));-        +        // conditions are only updated in one direction - the following determines if it's appropriate to observe the default / other direction+        if (readyCondition.getStatus() == null && !Boolean.TRUE.equals(hasErrorsCondition.getStatus())) {+            readyCondition.setStatus(true);+            readyCondition.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (readyCondition.getObservedGeneration() != null) {+            readyCondition.setMessage(String.join(""\n"", notReadyMessages));+        }++        if (hasErrorsCondition.getStatus() == null && readyCondition.getObservedGeneration() != null) {+            hasErrorsCondition.setStatus(false);+            hasErrorsCondition.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (hasErrorsCondition.getObservedGeneration() != null) {+            hasErrorsCondition.setMessage(String.join(""\n"", errorMessages));+        }++        if (rollingUpdate.getStatus() == null && readyCondition.getObservedGeneration() != null) {+            rollingUpdate.setStatus(false);+            rollingUpdate.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (rollingUpdate.getObservedGeneration() != null) {+            rollingUpdate.setMessage(String.join(""\n"", rollingUpdateMessages));+        }","Right, this is the messiness mentioned in the description.  I couldn't think of a better way to preserve the existing calling code.  There will always be a bit of reasoning over the aggregation step, here's what we did in managed kafka https://github.com/bf2fc6cc711aee1a0c2a/kas-fleetshard/blob/d2122a64dafb6db6aba90fa14002de077dc300ff/operator/src/main/java/org/bf2/operator/operands/KafkaInstance.java#L114 and then you have to account for the overlay onto the old.",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/20856,1222866619,2023-06-08T10:52:17Z,operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/KeycloakStatusAggregator.java,"@@ -85,10 +105,57 @@ public KeycloakStatusAggregator apply(Consumer<KeycloakStatusBuilder> toApply) {     }      public KeycloakStatus build() {-        readyCondition.setMessage(String.join(""\n"", notReadyMessages));-        hasErrorsCondition.setMessage(String.join(""\n"", errorMessages));-        rollingUpdate.setMessage(String.join(""\n"", rollingUpdateMessages));-        +        // conditions are only updated in one direction - the following determines if it's appropriate to observe the default / other direction+        if (readyCondition.getStatus() == null && !Boolean.TRUE.equals(hasErrorsCondition.getStatus())) {+            readyCondition.setStatus(true);+            readyCondition.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (readyCondition.getObservedGeneration() != null) {+            readyCondition.setMessage(String.join(""\n"", notReadyMessages));+        }++        if (hasErrorsCondition.getStatus() == null && readyCondition.getObservedGeneration() != null) {+            hasErrorsCondition.setStatus(false);+            hasErrorsCondition.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (hasErrorsCondition.getObservedGeneration() != null) {+            hasErrorsCondition.setMessage(String.join(""\n"", errorMessages));+        }++        if (rollingUpdate.getStatus() == null && readyCondition.getObservedGeneration() != null) {+            rollingUpdate.setStatus(false);+            rollingUpdate.setObservedGeneration(statusBuilder.getObservedGeneration());+        }+        if (rollingUpdate.getObservedGeneration() != null) {+            rollingUpdate.setMessage(String.join(""\n"", rollingUpdateMessages));+        }++        String now = Utils.iso8601Now();+        updateConditionFromExisting(readyCondition, existingConditions, now);+        updateConditionFromExisting(hasErrorsCondition, existingConditions, now);+        updateConditionFromExisting(rollingUpdate, existingConditions, now);+         return statusBuilder.withConditions(List.of(readyCondition, hasErrorsCondition, rollingUpdate)).build();     }++    static void updateConditionFromExisting(KeycloakStatusCondition condition, Map<String, KeycloakStatusCondition> existingConditions, String now) {+        var existing = existingConditions.get(condition.getType());+        if (existing == null) {+            if (condition.getObservedGeneration() != null) {+                condition.setLastTransitionTime(now);+            }+        } else if (condition.getObservedGeneration() == null) {+            // carry the old forward+            condition.setLastTransitionTime(existing.getLastTransitionTime());+            condition.setObservedGeneration(existing.getObservedGeneration());+            condition.setStatus(existing.getStatus());+            if (condition.getMessage() == null) {+                condition.setMessage(existing.getMessage());+            }+        } else if (Objects.equals(existing.getStatus(), condition.getStatus())) {","The go logic doesn't look at the message when determining the transition.  We had a similar situation with aggregating status in managed kafka, so it did expand things to check the reason as well: https://github.com/bf2fc6cc711aee1a0c2a/kas-fleetshard/blob/d2122a64dafb6db6aba90fa14002de077dc300ff/common/src/main/java/org/bf2/common/ConditionUtils.java#L52My follow-up question would be - do you want a reason field, or just to change the aggregator to base the transition off of the message as well?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20883,1224164319,2023-06-09T11:02:24Z,adapters/oidc/js/pom.xml,"@@ -18,6 +18,22 @@         <js.projectDir>../../../js</js.projectDir>         <js.adapter.projectDir>${js.projectDir}/libs/keycloak-js</js.adapter.projectDir>         <js.adapter.distDir>${js.adapter.projectDir}/dist</js.adapter.distDir>+        <!-- as the frontend-maven-plugin depends on js.projectDir, list all parts with should be ignored from the checksum -->",This seems rather unmaintainable in the long term as we continue to expand the `js` directory.,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20824,1224212425,2023-06-09T11:58:53Z,model/legacy/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapterFederatedStorage.java,"@@ -459,101 +418,14 @@ public int hashCode() {     }      /**-     * The {@link Streams} interface makes all collection-based methods in {@link AbstractUserAdapterFederatedStorage} default by providing-     * implementations that delegate to the {@link Stream}-based variants instead of the other way around.-     * <p/>-     * It allows for implementations to focus on the {@link Stream}-based approach for processing sets of data and benefit-     * from the potential memory and performance optimizations of that approach.+     * @deprecated This interface is no longer necessary, collection-based methods were removed from the parent interface+     * and therefore the parent interface can be used directly",```suggestion     * @deprecated This interface is no longer necessary; collection-based methods were removed from the parent interface     * and therefore the parent interface can be used directly```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20824,1224212827,2023-06-09T11:59:24Z,model/legacy/src/main/java/org/keycloak/storage/federated/UserAttributeFederatedStorage.java,"@@ -47,27 +40,13 @@ public interface UserAttributeFederatedStorage {      * @param value the attribute value.      * @return a non-null {@link Stream} of users that match the search criteria.      */-    default Stream<String> getUsersByUserAttributeStream(RealmModel realm, String name, String value) {-        List<String> users = this.getUsersByUserAttribute(realm, name, value);-        return users != null ? users.stream() : Stream.empty();-    }+    Stream<String> getUsersByUserAttributeStream(RealmModel realm, String name, String value);      /**-     * The {@link Streams} interface makes all collection-based methods in {@link UserAttributeFederatedStorage}-     * default by providing implementations that delegate to the {@link Stream}-based variants instead of the other way-     * around.-     * <p/>-     * It allows for implementations to focus on the {@link Stream}-based approach for processing sets of data and benefit-     * from the potential memory and performance optimizations of that approach.+     * @deprecated This interface is no longer necessary, collection-based methods were removed from the parent interface+     * and therefore the parent interface can be used directly",```suggestion     * @deprecated This interface is no longer necessary; collection-based methods were removed from the parent interface     * and therefore the parent interface can be used directly```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20824,1224213115,2023-06-09T11:59:45Z,model/legacy/src/main/java/org/keycloak/storage/federated/UserBrokerLinkFederatedStorage.java,"@@ -35,41 +33,22 @@ public interface UserBrokerLinkFederatedStorage {     void preRemove(RealmModel realm, IdentityProviderModel provider);     void updateFederatedIdentity(RealmModel realm, String userId, FederatedIdentityModel federatedIdentityModel); -    /**-     * @deprecated Use {@link #getFederatedIdentitiesStream(String, RealmModel) getFederatedIdentitiesStream} instead.-     */-    @Deprecated-    Set<FederatedIdentityModel> getFederatedIdentities(String userId, RealmModel realm);-     /**      * Obtains the identities of the federated user identified by {@code userId}.      *      * @param userId the user identifier.      * @param realm a reference to the realm.      * @return a non-null {@link Stream} of federated identities associated with the user.      */-    default Stream<FederatedIdentityModel> getFederatedIdentitiesStream(String userId, RealmModel realm) {-        Set<FederatedIdentityModel> value = this.getFederatedIdentities(userId, realm);-        return value != null ? value.stream() : Stream.empty();-    }+    Stream<FederatedIdentityModel> getFederatedIdentitiesStream(String userId, RealmModel realm);      FederatedIdentityModel getFederatedIdentity(String userId, String socialProvider, RealmModel realm);      /**-     * The {@link Streams} interface makes all collection-based methods in {@link UserBrokerLinkFederatedStorage}-     * default by providing implementations that delegate to the {@link Stream}-based variants instead of the other way-     * around.-     * <p/>-     * It allows for implementations to focus on the {@link Stream}-based approach for processing sets of data and benefit-     * from the potential memory and performance optimizations of that approach.+     * @deprecated This interface is no longer necessary, collection-based methods were removed from the parent interface+     * and therefore the parent interface can be used directly",```suggestion     * @deprecated This interface is no longer necessary; collection-based methods were removed from the parent interface     * and therefore the parent interface can be used directly```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20824,1224213387,2023-06-09T12:00:07Z,model/legacy/src/main/java/org/keycloak/storage/federated/UserFederatedStorageProvider.java,"@@ -83,13 +72,10 @@ default Stream<String> getStoredUsersStream(RealmModel realm, Integer first, Int     void preRemove(RealmModel realm, ComponentModel model);      /**-     * The {@link UserFederatedStorageProvider.Streams} interface makes all collection-based methods in {@link UserFederatedStorageProvider}-     * default by providing implementations that delegate to the {@link Stream}-based variants instead of the other way-     * around.-     * <p/>-     * It allows for implementations to focus on the {@link Stream}-based approach for processing sets of data and benefit-     * from the potential memory and performance optimizations of that approach.+     * @deprecated This interface is no longer necessary, collection-based methods were removed from the parent interface",```suggestion     * @deprecated This interface is no longer necessary; collection-based methods were removed from the parent interface```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20824,1224213620,2023-06-09T12:00:26Z,model/legacy/src/main/java/org/keycloak/storage/federated/UserFederatedUserCredentialStore.java,"@@ -66,36 +49,15 @@ default Stream<CredentialModel> getStoredCredentialsStream(RealmModel realm, Str      * @param type the credential type.      * @return a non-null {@link Stream} of credentials.      */-    default Stream<CredentialModel> getStoredCredentialsByTypeStream(RealmModel realm, String userId, String type) {-        List<CredentialModel> value = this.getStoredCredentialsByType(realm, userId, type);-        return value != null ? value.stream() : Stream.empty();-    }+    Stream<CredentialModel> getStoredCredentialsByTypeStream(RealmModel realm, String userId, String type);      CredentialModel getStoredCredentialByNameAndType(RealmModel realm, String userId, String name, String type);      /**-     * The {@link Streams} interface makes all collection-based methods in {@link UserFederatedUserCredentialStore}-     * default by providing implementations that delegate to the {@link Stream}-based variants instead of the other way-     * around.-     * <p/>-     * It allows for implementations to focus on the {@link Stream}-based approach for processing sets of data and benefit-     * from the potential memory and performance optimizations of that approach.+     * @deprecated This interface is no longer necessary, collection-based methods were removed from the parent interface",```suggestion     * @deprecated This interface is no longer necessary; collection-based methods were removed from the parent interface```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20824,1224213873,2023-06-09T12:00:44Z,model/legacy/src/main/java/org/keycloak/storage/federated/UserGroupMembershipFederatedStorage.java,"@@ -66,34 +48,13 @@ default Stream<GroupModel> getGroupsStream(RealmModel realm, String userId) {      * @param max maximum number of results to return. Ignored if negative or {@code null}.      * @return a non-null {@code Stream} of federated user ids that are members of the group in the realm.      */-    default Stream<String> getMembershipStream(RealmModel realm, GroupModel group, Integer firstResult, Integer max) {-        List<String> value = this.getMembership(realm, group, firstResult, max);-        return value != null ? value.stream() : Stream.empty();-    }+    Stream<String> getMembershipStream(RealmModel realm, GroupModel group, Integer firstResult, Integer max);      /**-     * The {@link Streams} interface makes all collection-based methods in {@link UserGroupMembershipFederatedStorage}-     * default by providing implementations that delegate to the {@link Stream}-based variants instead of the other way-     * around.-     * <p/>-     * It allows for implementations to focus on the {@link Stream}-based approach for processing sets of data and benefit-     * from the potential memory and performance optimizations of that approach.+     * @deprecated This interface is no longer necessary, collection-based methods were removed from the parent interface",```suggestion     * @deprecated This interface is no longer necessary; collection-based methods were removed from the parent interface```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20824,1224214084,2023-06-09T12:00:58Z,model/legacy/src/main/java/org/keycloak/storage/federated/UserRequiredActionsFederatedStorage.java,"@@ -28,42 +26,23 @@  */ public interface UserRequiredActionsFederatedStorage { -    /**-     * @deprecated Use {@link #getRequiredActionsStream(RealmModel, String) getRequiredActionsStream} instead.-     */-    @Deprecated-    Set<String> getRequiredActions(RealmModel realm, String userId);-     /**      * Obtains the names of required actions associated with the federated user identified by {@code userId}.      *      * @param realm a reference to the realm.      * @param userId the user identifier.      * @return a non-null {@link Stream} of required action names.      */-    default Stream<String> getRequiredActionsStream(RealmModel realm, String userId) {-        Set<String> value = this.getRequiredActions(realm, userId);-        return value != null ? value.stream() : Stream.empty();-    }+    Stream<String> getRequiredActionsStream(RealmModel realm, String userId);      void addRequiredAction(RealmModel realm, String userId, String action);     void removeRequiredAction(RealmModel realm, String userId, String action);      /**-     * The {@link Streams} interface makes all collection-based methods in {@link UserRequiredActionsFederatedStorage}-     * default by providing implementations that delegate to the {@link Stream}-based variants instead of the other way-     * around.-     * <p/>-     * It allows for implementations to focus on the {@link Stream}-based approach for processing sets of data and benefit-     * from the potential memory and performance optimizations of that approach.+     * @deprecated This interface is no longer necessary, collection-based methods were removed from the parent interface",```suggestion     * @deprecated This interface is no longer necessary; collection-based methods were removed from the parent interface```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20824,1224214327,2023-06-09T12:01:16Z,model/legacy/src/main/java/org/keycloak/storage/federated/UserRoleMappingsFederatedStorage.java,"@@ -44,28 +36,15 @@ public interface UserRoleMappingsFederatedStorage {      * @param userId the user identifier.      * @return a non-null {@code Stream} of roles.      */-    default Stream<RoleModel> getRoleMappingsStream(RealmModel realm, String userId) {-        Set<RoleModel> value = this.getRoleMappings(realm, userId);-        return value != null ? value.stream() : Stream.empty();-    }+    Stream<RoleModel> getRoleMappingsStream(RealmModel realm, String userId);      void deleteRoleMapping(RealmModel realm, String userId, RoleModel role);      /**-     * The {@link Streams} interface makes all collection-based methods in {@link UserRoleMappingsFederatedStorage}-     * default by providing implementations that delegate to the {@link Stream}-based variants instead of the other way-     * around.-     * <p/>-     * It allows for implementations to focus on the {@link Stream}-based approach for processing sets of data and benefit-     * from the potential memory and performance optimizations of that approach.+     * @deprecated This interface is no longer necessary, collection-based methods were removed from the parent interface",```suggestion     * @deprecated This interface is no longer necessary; collection-based methods were removed from the parent interface```,x
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/20890,1224501244,2023-06-09T16:12:56Z,server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java,"@@ -275,14 +277,72 @@ public static void runJobInTransaction(KeycloakSessionFactory factory, KeycloakC     }      /**-     * Copy all the objects in the context to the session.-     * @param session The session-     * @param context The context+     * Sets up the context for the specified session with the RealmModel.+     *+     * @param origContext The original context to propagate+     * @param targetSession The new target session to propagate the context to+     */+    public static void cloneContextRealmClientToSession(final KeycloakContext origContext, final KeycloakSession targetSession) {+        cloneContextToSession(origContext, targetSession, false);+    }++    /**+     * Sets up the context for the specified session with the RealmModel, clientModel and+     * AuthenticatedSessionModel.+     *+     * @param origContext The original context to propagate+     * @param targetSession The new target session to propagate the context to      */-    public static void propagateContext(KeycloakSession session, KeycloakContext context) {-        session.getContext().setRealm(context.getRealm());-        session.getContext().setClient(context.getClient());-        session.getContext().setAuthenticationSession(context.getAuthenticationSession());+    public static void cloneContextRealmClientSessionToSession(final KeycloakContext origContext, final KeycloakSession targetSession) {+        cloneContextToSession(origContext, targetSession, true);+    }++    /**+     * Sets up the context for the specified session.The original realm's context is used to+     * determine what models need to be re-loaded using the current session. The models+     * in the context are re-read from the new session via the IDs.+     */+    private static void cloneContextToSession(final KeycloakContext origContext, final KeycloakSession targetSession,+            final boolean includeAuthenticatedSessionModel) {+        if (origContext == null) {+            return;+        }++        // setup realm model if necessary.+        if (origContext.getRealm() == null) {+            return;",Done! Now the three model objects are read dependently.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20896,1224514792,2023-06-09T16:28:05Z,js/libs/keycloak-admin-client/src/utils/auth.ts,"@@ -77,9 +80,10 @@ export const getToken = async (settings: Settings): Promise<TokenResponse> => {   const headers = new Headers(options.headers);    if (credentials.clientSecret) {+    // See: https://datatracker.ietf.org/doc/html/rfc2617#section-2     headers.set(       ""Authorization"",-      `Basic ${btoa(`${credentials.clientId}:${credentials.clientSecret}`)}`+      `Basic ${toBase64(`${credentials.clientId}:${credentials.clientSecret}`)}`",@sschu from what I could find in [the spec](https://datatracker.ietf.org/doc/html/rfc2617#section-2) this whole string should be encoded.,
3833769,sschu,https://api.github.com/repos/keycloak/keycloak/pulls/20896,1224523456,2023-06-09T16:38:48Z,js/libs/keycloak-admin-client/src/utils/auth.ts,"@@ -77,9 +80,10 @@ export const getToken = async (settings: Settings): Promise<TokenResponse> => {   const headers = new Headers(options.headers);    if (credentials.clientSecret) {+    // See: https://datatracker.ietf.org/doc/html/rfc2617#section-2     headers.set(       ""Authorization"",-      `Basic ${btoa(`${credentials.clientId}:${credentials.clientSecret}`)}`+      `Basic ${toBase64(`${credentials.clientId}:${credentials.clientSecret}`)}`","Exactly, but clientId and clientSecret also have to be URL-encoded according to https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20896,1224566446,2023-06-09T17:22:35Z,js/libs/keycloak-admin-client/src/utils/auth.ts,"@@ -77,9 +80,10 @@ export const getToken = async (settings: Settings): Promise<TokenResponse> => {   const headers = new Headers(options.headers);    if (credentials.clientSecret) {+    // See: https://datatracker.ietf.org/doc/html/rfc2617#section-2     headers.set(       ""Authorization"",-      `Basic ${btoa(`${credentials.clientId}:${credentials.clientSecret}`)}`+      `Basic ${toBase64(`${credentials.clientId}:${credentials.clientSecret}`)}`","I am having a hard time understanding this spec, so let's break this down:> Clients in possession of a client password MAY use the HTTP Basic authentication scheme as defined in [[RFC2617](https://datatracker.ietf.org/doc/html/rfc2617)] to authenticate with the authorization server.So this seems to be correct so far. > The client identifier is encoded using the ""application/x-www-form-urlencoded"" encoding algorithm per [Appendix B](https://datatracker.ietf.org/doc/html/rfc6749#appendix-B), and the encoded value is used as the username; The client password is encoded using the same algorithm and used as the password.So this pertains to `credentials.clientId` and `credentials.clientSecret` in our code. And here is where we get buried in a bunch of specs that stipulate it's encoding:> To address this shortcoming when generating payloads using this media type, names and values MUST be encoded using the UTF-8 character encoding scheme [[RFC3629](https://datatracker.ietf.org/doc/html/rfc3629)] first; the resulting octet sequence then needs to be further encoded using the escaping rules defined in [[W3C.REC-html401-19991224](https://datatracker.ietf.org/doc/html/rfc6749#ref-W3C.REC-html401-19991224)].So this is where it breaks down for me, looking at the [Java code](https://github.com/keycloak/keycloak/blob/fbfdb547459dfa4f82256a60aef03f6b32dba1dd/core/src/main/java/org/keycloak/util/BasicAuthHelper.java#L73-L76), I would expect something as follows:```ts// See: https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1const username = encodeURIComponent(credentials.clientId);const password = encodeURIComponent(credentials.clientSecret);// See: https://datatracker.ietf.org/doc/html/rfc2617#section-2headers.set(  ""authorization"",  `Basic ${toBase64(`${username}:${password}`)}`);```This does seem to cover the UTF-8 conversion according to MDN:> The `encodeURIComponent()` function encodes a [URI](https://developer.mozilla.org/en-US/docs/Glossary/URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the [UTF-8](https://developer.mozilla.org/en-US/docs/Glossary/UTF-8) encoding of the character (will only be four escape sequences for characters composed of two surrogate characters).However, it looks like there are [some implementation differences](https://stackoverflow.com/questions/607176/java-equivalent-to-javascripts-encodeuricomponent-that-produces-identical-outpu#answer-607403) with the Java code. Which leaves me wondering, which one of these conforms to the aforementioned specs?WDYT @sschu?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/20897,1226314940,2023-06-12T08:53:00Z,services/src/main/java/org/keycloak/connections/httpclient/DefaultHttpClientFactory.java,"@@ -110,8 +110,15 @@ public int postText(String uri, String text) throws IOException {             public InputStream get(String uri) throws IOException {                 HttpGet request = new HttpGet(uri);                 HttpResponse response = httpClient.execute(request);+                int statusCode = response.getStatusLine().getStatusCode();                 HttpEntity entity = response.getEntity();-                if (entity == null) return null;+                if (statusCode < 200 || statusCode >= 300) {","@mposolda - HttpClient will already to an automatic redirect on GET, see https://hc.apache.org/httpcomponents-client-4.5.x/current/httpclient/apidocs/org/apache/http/impl/client/DefaultRedirectStrategy.html. If we would end up with a 301 here, the body would be empty anyway, and the current code can't continue. The code I added here is similar to https://github.com/apache/httpcomponents-client/blob/4.5.x/httpclient/src/main/java/org/apache/http/impl/client/AbstractResponseHandler.java#L64-L74 which I'll use in a follow-up PR listed above. ",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20871,1226861060,2023-06-12T15:35:20Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/TransactionalResponseInterceptor.java,"@@ -34,13 +35,21 @@ @ConstrainedTo(RuntimeType.SERVER) @Priority(10000) public class TransactionalResponseInterceptor implements WriterInterceptor, TransactionalSessionHandler {+     @Override-    public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {+    public void aroundWriteTo(WriterInterceptorContext context) {         KeycloakSession session = Resteasy.getContextData(KeycloakSession.class);+        OutputStream outputStream = context.getOutputStream(); -        try {+        // see https://github.com/keycloak/keycloak/issues/20451+        try (ByteArrayOutputStream buffer = new ByteArrayOutputStream(8192)) {","`BufferedInputStream` uses `8192` as the default. I think it is a reasonable default (perhaps even lower) considering how much data we expect in Keycloak responses.We are still discussing the proper solution though. Please, see the issue.",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20969,1228392776,2023-06-13T16:16:50Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -84,4 +84,8 @@ The previous and now removed WildFly distribution provided a built-in vault prov  = KeyStore Config Source added -In relation to the KeyStore Vault news, we also integrated Quarkus's recently released feature called KeyStore Config Source. This means that among the already existing configuration sources (CLI parameters, environment variables and files), you can now configure your Keycloak server via configuration properties stored in a Java keystore file. You can learn more about this feature in the https://www.keycloak.org/server/configuration[Configuration guide].\ No newline at end of file+In relation to the KeyStore Vault news, we also integrated Quarkus's recently released feature called KeyStore Config Source. This means that among the already existing configuration sources (CLI parameters, environment variables and files), you can now configure your Keycloak server via configuration properties stored in a Java keystore file. You can learn more about this feature in the https://www.keycloak.org/server/configuration[Configuration guide].","```suggestionIn relation to the KeyStore Vault news, we also integrated Quarkus' recently released feature _KeyStore Config Source_. Therefore, in addition to the existing configuration sources (CLI parameters, environment variables, and files), you can now configure your Keycloak server by configuration properties stored in a Java keystore file. For more details about this feature, see the https://www.keycloak.org/server/configuration[Configuration guide].```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20967,1228584305,2023-06-13T19:08:25Z,docs/documentation/server_admin/topics/sessions/timeouts.adoc,"@@ -24,18 +24,18 @@ image:images/sessions-tab.png[Sessions Tab] |This setting is similar to the standard SSO Session Max but specific to *Remember Me* logins. Users can specify longer sessions when they click *Remember Me* when logging in. This setting is an optional configuration and, if its value is not greater than zero, it uses the same session lifespan as the SSO Session Max configuration.  |Client Session Idle-|If the user is inactive for longer than this timeout, refresh token requests bump the idle timeout. This setting specifies a shorter idle timeout of refresh tokens than the session idle timeout, but users can override it for individual clients. This setting is an optional configuration and, when set to zero, uses the same idle timeout in the SSO Session Idle configuration.+|Idle timeout for the client session. If the user is inactive for longer than this timeout, the client session is invalidated and the refresh token requests bump the idle timeout. This setting never affects the general SSO user session, which is unique. A SSO user session has zero or more client sessions, apps the user has requested access/tokens to. This value should specify a shorter idle timeout than the *SSO Session Idle*. Users can override it for individual clients in the *Advanced Settings* client tab. This setting is an optional configuration and, when set to zero, uses the same idle timeout in the SSO Session Idle configuration.","```suggestion|Idle timeout for the client session. If the user is inactive for longer than this timeout, the client session is invalidated and the refresh token requests bump the idle timeout. This setting never affects the general SSO user session, which is unique. An SSO user session has zero or more client sessions, apps the user has requested access/tokens to. This value should specify a shorter idle timeout than the *SSO Session Idle*. Users can override it for individual clients in the *Advanced Settings* client tab. This setting is an optional configuration and, when set to zero, uses the same idle timeout in the SSO Session Idle configuration.```",x
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/20967,1229119720,2023-06-14T07:07:37Z,docs/documentation/server_admin/topics/sessions/timeouts.adoc,"@@ -24,18 +24,18 @@ image:images/sessions-tab.png[Sessions Tab] |This setting is similar to the standard SSO Session Max but specific to *Remember Me* logins. Users can specify longer sessions when they click *Remember Me* when logging in. This setting is an optional configuration and, if its value is not greater than zero, it uses the same session lifespan as the SSO Session Max configuration.  |Client Session Idle-|If the user is inactive for longer than this timeout, refresh token requests bump the idle timeout. This setting specifies a shorter idle timeout of refresh tokens than the session idle timeout, but users can override it for individual clients. This setting is an optional configuration and, when set to zero, uses the same idle timeout in the SSO Session Idle configuration.+|Idle timeout for the client session. If the user is inactive for longer than this timeout, the client session is invalidated and the refresh token requests bump the idle timeout. This setting never affects the general SSO user session, which is unique. A SSO user session has zero or more client sessions, apps the user has requested access/tokens to. This value should specify a shorter idle timeout than the *SSO Session Idle*. Users can override it for individual clients in the *Advanced Settings* client tab. This setting is an optional configuration and, when set to zero, uses the same idle timeout in the SSO Session Idle configuration.","I'm just trying to explain that the user session is parent of several client sessions. One client session is created for every different client app the user logs in. This `Client Session Idle` option is only for the child/client session, not for the parent user session. So the client session will disappear sooner than the user session if we use a shorter value here. And that's the reason it should be  shorter, because a larger value in this option is meaningless, when the parent user session disappears, all the client sessions attached to it are also inaccessible.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20995,1229432885,2023-06-14T11:18:00Z,docs/documentation/securing_apps/topics/oidc/java/jboss-adapter.adoc,"@@ -17,6 +17,11 @@ You can install this adapter from a ZIP file or from an RPM. endif::[]  ifeval::[{project_community}==true]++WARNING: We do not regularly test and maintain WildFly/EAP adapters. They may work only with WildFly version of 23 or earlier or with JBoss EAP 7. Also note+that they may work only with JEE applications, but not with Jakarta applications. It is recommended to switch to Elytron OIDC Java adapter to+secure your applications. It has very similar configuration to Keycloak Java adapters and migration your applications to it should be smooth.",```suggestionsecure your applications. It has very similar configuration to Keycloak Java adapters and migrating your applications to it should be smooth.```,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20995,1230204600,2023-06-14T21:48:04Z,docs/documentation/securing_apps/topics/oidc/java/jboss-adapter.adoc,"@@ -17,6 +17,11 @@ You can install this adapter from a ZIP file or from an RPM. endif::[]  ifeval::[{project_community}==true]++WARNING: We do not regularly test and maintain WildFly/EAP adapters. They may work only with WildFly version of 23 or earlier or with JBoss EAP 7. Also note+that they may work only with JEE applications, but not with Jakarta applications. It is recommended to switch to Elytron OIDC Java adapter to+secure your applications. It has very similar configuration to Keycloak Java adapters and migrating your applications to it should be smooth.","```suggestionthat they may work only with JEE applications, but not with Jakarta applications. We recommend that you switch to Elytron OIDC Java adapter tosecure your applications. This adapter has a similar configuration to Keycloak Java adapters and migrating your applications to it should be smooth.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20995,1230205130,2023-06-14T21:48:56Z,docs/documentation/securing_apps/topics/saml/java/jetty-adapter.adoc,"@@ -2,6 +2,8 @@  ==== Jetty SAML adapters +WARNING: {project_name} Jetty SAML adapter is deprecated. It is recommended to use other client adapter if possible.",```suggestionWARNING: The {project_name} Jetty SAML adapter is deprecated. We recommend that you use another client adapter if possible.```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/20995,1230205714,2023-06-14T21:49:45Z,docs/documentation/securing_apps/topics/saml/java/tomcat-adapter.adoc,"@@ -2,6 +2,8 @@  ==== Tomcat SAML adapters +WARNING: {project_name} Tomcat SAML adapter is deprecated. It is recommended to use other client adapter if possible.",```suggestionWARNING: The {project_name} Tomcat SAML adapter is deprecated. We recommend that you use another client adapter if possible.```,x
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/21013,1230763893,2023-06-15T09:59:09Z,federation/ldap/src/main/java/org/keycloak/services/resources/admin/TestLdapConnectionResource.java,"@@ -72,10 +73,13 @@ public Response testLDAPConnection(@FormParam(""action"") String action, @FormPara          TestLdapConnectionRepresentation config = new TestLdapConnectionRepresentation(action, connectionUrl, bindDn, bindCredential, useTruststoreSpi, connectionTimeout, startTls, LDAPConstants.AUTH_TYPE_SIMPLE);         config.setComponentId(componentId);-        if (! LDAPServerCapabilitiesManager.testLDAP(config, session, realm)) {-            throw ErrorResponse.error(""LDAP test error"", Response.Status.BAD_REQUEST);+        try {+            LDAPServerCapabilitiesManager.testLDAP(config, session, realm);+            return Response.noContent().build();+        } catch(Exception e) {+            String errorMsg = KeycloakErrorHandler.getErrorCode(e);","`KeycloakErrorHandler` is used by all the services and can lead to unintentional leaking of the internals of the server. Therefore the exception handling code should be here, not in the `KeycloakErrorHandler`.",x
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/20973,1231255899,2023-06-15T16:16:45Z,docs/guides/server/hostname.adoc,"@@ -85,19 +85,373 @@ To reduce attack surface, the administration endpoints for Keycloak and the Admi Therefore, you can secure them by using a reverse proxy. For more information about which paths to expose using a reverse proxy, see <@links.server id=""reverseproxy""/>. -== Example Scenarios-The following are more example scenarios and the corresponding commands for setting up a hostname. -Note that the `start` command requires setting up TLS. The corresponding options are not shown for example purposes. For more details, see <@links.server id=""enabletls""/>.+== Configuration Examples by Different Scenarios -=== Exposing the server behind a TLS termination proxy++Through this set of hostname configuration options, Keycloak aims to provide a flexible way to adapt to the characteristics of different environments.++Misconfiguration of the Hostname and/or its Reverse Proxy options can lead to unusual and unpleasant behavior, such as Keycloak's Administration Console not loading correctly.++In an attempt to further improve the user experience and minimize the occurrence of misconfigurations, see the list of sample Hostname and Proxy configurations below, which is oriented to possible scenarios that may exist in different computing environments.++The following are more example scenarios and the corresponding commands for setting up the `Hostname` and/or `Proxy` options.++> Note that the `start` command requires setting up TLS. The corresponding options are not shown for example purposes. For more details, see <@links.server id=""enabletls""/>.++++.{empty}+[caption=""Scenario/Example 01 - Beginner/Quick Test in Localhost :: HTTP only""]+|===+|Scenario Name/Description:|Recommended Settings:|Expected Behavior:++<.^s|Beginner/Quick Test in Localhost :: HTTP only+.2+<.^m|++.Keycloak configuration:+<@kc.startdev parameters="""" />++.2+<.^m|++- Frontend/Backend + Admin Console: http://localhost:8080+m| * The most basic option to run, in localhost, all default values.++|===++.{empty}","@Pepo48 ,I always prefer table format to organize and aggregate information. But this is a matter of individual taste. For me, it is clearer with one table per scenario.However, in order to avoid the command brokenness, I changed the layout to simple text with topics and indentation. See If you feel more comfortable like this way.Regarding the commands' description, I just keep as it was being used, in this form:`<@kc.start parameters=""--hostname=mykeycloak --hostname-strict-backchannel=true""/>`I believe this is a kind of macro implemented in our Asciidoc structure which produces a command line like this:`bin/kc.[sh|bat] start --hostname=mykeycloak --hostname-strict-backchannel=true`I kept and followed the same pattern.",
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/20973,1232100695,2023-06-16T10:59:14Z,docs/guides/server/hostname.adoc,"@@ -85,42 +85,276 @@ To reduce attack surface, the administration endpoints for Keycloak and the Admi Therefore, you can secure them by using a reverse proxy. For more information about which paths to expose using a reverse proxy, see <@links.server id=""reverseproxy""/>. -== Example Scenarios-The following are more example scenarios and the corresponding commands for setting up a hostname. -Note that the `start` command requires setting up TLS. The corresponding options are not shown for example purposes. For more details, see <@links.server id=""enabletls""/>.+== Configuration Examples by Different Scenarios -=== Exposing the server behind a TLS termination proxy -In this example, the server is running behind a TLS termination proxy and publicly available from `https://mykeycloak`.+Through this set of hostname configuration options, Keycloak aims to provide a flexible way to adapt to the characteristics of different environments. -.Configuration:-<@kc.start parameters=""--hostname=mykeycloak --proxy=edge""/>+Misconfiguration of the Hostname and/or its Reverse Proxy options can lead to unusual and unpleasant behavior, such as Keycloak's Administration Console not loading correctly. -=== Exposing the server without a proxy+In an attempt to further improve the user experience and minimize the occurrence of misconfigurations, see the list of sample Hostname and Proxy configurations below, which is oriented to possible scenarios that may exist in different computing environments. -In this example, the server is running without a proxy and exposed using a URL using HTTPS.+The following are more example scenarios and the corresponding commands for setting up the `Hostname` and/or `Proxy` options. -.Keycloak configuration:-<@kc.start parameters=""--hostname-url=https://mykeycloak""/>+> Note that the `start` command requires setting up TLS. The corresponding options are not shown for example purposes. For more details, see <@links.server id=""enabletls""/>.+++=== Scenario 01 - Beginner/Quick Test in Localhost with HTTP only++* __**Description**__:+  ** The most basic option to run, in localhost, all default values.+* __**Recommended Settings / Keycloak configuration**__:++  <@kc.startdev parameters="""" />++* __**Expected Behavior**__:+  ** Both Frontend/Backend and Admin Console at: http://localhost:8080++---","Just nitpicks, but I think that there is still room for simplifying the structure and improving the readability.I'm suggesting the following:* remove the slash from every place, where it doesn't fulfil the role of an alternative - scenario/example; recommended settings/keycloak configuration;  beginner/quick - all have very similar meaning in this context,* on the other hand, let's add more precise, more detailed descriptions; use rather full sentence instead of collocations separated by commas,* remove the bullet points - if you need, break the line instead,* use either bold or italic text (not both at the same time). Here's what I mean by that:```suggestion=== Scenario 01 - Exposing the server on localhost using HTTP.Description:Running the server on localhost using HTTP with the default settings..Keycloak configuration:<@kc.startdev parameters="""" />All 3 endpoint categories are available at: http://localhost:8080---```Regardless, I'm not sure, whether it's worth to mention this particular scenario, as it doesn't provide any additional information regarding the hostname setup (compared to others bellow). But it's up to a discussion, I used it as a reference example of how the format could be potentially improved.",x
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/20973,1232133709,2023-06-16T11:37:42Z,docs/guides/server/hostname.adoc,"@@ -85,42 +85,276 @@ To reduce attack surface, the administration endpoints for Keycloak and the Admi Therefore, you can secure them by using a reverse proxy. For more information about which paths to expose using a reverse proxy, see <@links.server id=""reverseproxy""/>. -== Example Scenarios-The following are more example scenarios and the corresponding commands for setting up a hostname. -Note that the `start` command requires setting up TLS. The corresponding options are not shown for example purposes. For more details, see <@links.server id=""enabletls""/>.+== Configuration Examples by Different Scenarios -=== Exposing the server behind a TLS termination proxy -In this example, the server is running behind a TLS termination proxy and publicly available from `https://mykeycloak`.+Through this set of hostname configuration options, Keycloak aims to provide a flexible way to adapt to the characteristics of different environments. -.Configuration:-<@kc.start parameters=""--hostname=mykeycloak --proxy=edge""/>+Misconfiguration of the Hostname and/or its Reverse Proxy options can lead to unusual and unpleasant behavior, such as Keycloak's Administration Console not loading correctly. -=== Exposing the server without a proxy+In an attempt to further improve the user experience and minimize the occurrence of misconfigurations, see the list of sample Hostname and Proxy configurations below, which is oriented to possible scenarios that may exist in different computing environments. -In this example, the server is running without a proxy and exposed using a URL using HTTPS.+The following are more example scenarios and the corresponding commands for setting up the `Hostname` and/or `Proxy` options. -.Keycloak configuration:-<@kc.start parameters=""--hostname-url=https://mykeycloak""/>+> Note that the `start` command requires setting up TLS. The corresponding options are not shown for example purposes. For more details, see <@links.server id=""enabletls""/>.+++=== Scenario 01 - Beginner/Quick Test in Localhost with HTTP only++* __**Description**__:+  ** The most basic option to run, in localhost, all default values.+* __**Recommended Settings / Keycloak configuration**__:++  <@kc.startdev parameters="""" />++* __**Expected Behavior**__:+  ** Both Frontend/Backend and Admin Console at: http://localhost:8080++---+++=== Scenario 02 - Custom Hostname with HTTP only++* __**Description**__:+** Just setting a custom Hostname to be reachable via HTTP only.+* __**Recommended Settings / Keycloak configuration**__:++  <@kc.start parameters=""--hostname=mykeycloak.com --http-enabled=true --hostname-strict-https=false"" />++* __**Expected Behavior**__:+  ** Both Frontend/Backend and Admin Console at: http://mykeycloak.com:8080++---+++=== Scenario 03 - Custom Hostname over HTTPS++* __**Description**__:+** Setting a custom Hostname to be reachable via HTTPS and exposing the server without a proxy. In this example, the server is running without a proxy and exposed using a URL using HTTPS.+* __**Recommended Settings / Keycloak configuration**__:++** Set the HTTPS/TLS Certificates in Keycloak. For more details, see <@links.server id=""enabletls""/>.++  <@kc.start parameters=""-hostname=mykeycloak.com --https-certificate-file=/path-to-file/the-cert.pem --https-certificate-key-file=/path-to-file/the-cert-key.pem"" />++* __**Expected Behavior**__:+** Both Frontend/Backend and Admin Console at: https://mykeycloak.com:8443++---+++=== Scenario 04 - Custom Hostname + Diff. AdminConsole URL with HTTP only","> Custom Hostname + Diff. AdminConsole URL with HTTP onlyAgain, this is something, what I would definitely rephrase, ""+ Diff. AdninConsole"" doesn't seem right to me and I think we don't use similar structure anywhere else. I would stick with the format that we already use all over the guides.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20976,1232201067,2023-06-16T12:41:31Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/storage/legacy/infinispan/CacheManagerFactory.java,,The idea is to completely remove the new store from the runtime so we don't have classes available from the classloader. We need that to avoid Infinispan from loading service files when bootstrapping the cache manager. It is one of the hacks related to how Quarkus handles the build classloader.,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20976,1232202701,2023-06-16T12:43:09Z,quarkus/runtime/src/main/java/org/keycloak/models/map/storage/jpa/EventListenerIntegrator.java,,This duplication is to avoid CNFE when starting the server. As you can see tests are passing and that means we are running legacy without any code from map-jpa.,x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/20672,1232272431,2023-06-16T13:43:20Z,operator/olm-base/manifests/clusterserviceversion.yaml,"@@ -1,143 +0,0 @@-apiVersion: operators.coreos.com/v1alpha1-kind: ClusterServiceVersion-metadata:-  annotations:-    capabilities: Deep Insights-    categories: Security-    certified: 'False'-    containerImage: 'quay.io/keycloak/keycloak-operator:REPLACE_ME_VERSION'-    createdAt: REPLACE_ME_CREATED_AT-    description: 'An Operator for installing and managing Keycloak'-    repository: 'https://github.com/keycloak/keycloak'-    support: Red Hat-    alm-examples: |--      [-        {-          ""apiVersion"": ""k8s.keycloak.org/v2alpha1"",-          ""kind"": ""Keycloak"",-          ""metadata"": {-            ""name"": ""example-keycloak"",-            ""labels"": {-              ""app"": ""sso""-            }-          },-          ""spec"": {-            ""instances"": 1,-            ""hostname"": ""example.org"",-            ""tlsSecret"": ""my-tls-secret""-          }-        },-        {-          ""apiVersion"": ""k8s.keycloak.org/v2alpha1"",-          ""kind"": ""KeycloakRealmImport"",-          ""metadata"": {-            ""name"": ""example-keycloak-realm-import"",-            ""labels"": {-              ""app"": ""sso""-            }-          },-          ""spec"": {-            ""keycloakCRName"": ""example-keycloak"",-            ""realm"": {}-          }-        }-      ]-  name: keycloak-operator.vREPLACE_ME_VERSION-  namespace: placeholder-spec:-  apiservicedefinitions: {}-  customresourcedefinitions:-    owned:-      - description: ""Represents a Keycloak Instance""-        displayName: ""Keycloak""-        kind: Keycloak-        name: keycloaks.k8s.keycloak.org-        version: v2alpha1-      - description: ""Represents a Keycloak Realm Import""-        displayName: ""KeycloakRealmImport""-        kind: KeycloakRealmImport-        name: keycloakrealmimports.k8s.keycloak.org-        version: v2alpha1-  description: |-    A Kubernetes Operator based on the Operator SDK for installing and managing Keycloak.--    Keycloak lets you add authentication to applications and secure services with minimum fuss. No need to deal with storing users or authenticating users. It's all available out of the box.--    The operator can deploy and manage Keycloak instances on Kubernetes and OpenShift.-    The following features are supported:--    * Install Keycloak to a namespace-    * Import Keycloak Realms-  displayName: Keycloak Operator-  icon:-    - base64data: -      mediatype: image/png-  install:-    spec:-      deployments:-        - name: keycloak-operator-          spec:-            replicas: 1-            selector:-              matchLabels:-                name: keycloak-operator-            strategy: {}-            template:-              metadata:-                labels:-                  name: keycloak-operator-              spec:-                containers:-                  - command:-                      - java-                      - -Djava.util.logging.manager=org.jboss.logmanager.LogManager-                      - -jar-                      - quarkus-run.jar-                    env:-                      - name: QUARKUS_OPERATOR_SDK_NAMESPACES-                        valueFrom:-                          fieldRef:-                            fieldPath: metadata.annotations['olm.targetNamespaces']","<img width=""400"" src=""https://github.com/keycloak/keycloak/assets/38039883/1e8de0f1-5748-40bc-ba67-8283076720b3""/>I've noticed the `QUARKUS_OPERATOR_SDK_NAMESPACES` env var was renamed to `KUBERNETES_NAMESPACE`. Can be like that? Also the value for the namespace is getting directly from the `metadata.namespace`, which I assume is directly specified in the `template.metadata.namespace` a few lines above with value 'placeholder', right? Does this [line](https://github.com/keycloak/keycloak/pull/20672/files#diff-f53c77df31edb884b75c19bd62de359748d617a94909dbafece4bbc435c0ee23R18) have any effect on this?",
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/20672,1232330129,2023-06-16T14:29:41Z,operator/olm-base/manifests/clusterserviceversion.yaml,"@@ -1,143 +0,0 @@-apiVersion: operators.coreos.com/v1alpha1-kind: ClusterServiceVersion-metadata:-  annotations:-    capabilities: Deep Insights-    categories: Security-    certified: 'False'-    containerImage: 'quay.io/keycloak/keycloak-operator:REPLACE_ME_VERSION'-    createdAt: REPLACE_ME_CREATED_AT-    description: 'An Operator for installing and managing Keycloak'-    repository: 'https://github.com/keycloak/keycloak'-    support: Red Hat-    alm-examples: |--      [-        {-          ""apiVersion"": ""k8s.keycloak.org/v2alpha1"",-          ""kind"": ""Keycloak"",-          ""metadata"": {-            ""name"": ""example-keycloak"",-            ""labels"": {-              ""app"": ""sso""-            }-          },-          ""spec"": {-            ""instances"": 1,-            ""hostname"": ""example.org"",-            ""tlsSecret"": ""my-tls-secret""-          }-        },-        {-          ""apiVersion"": ""k8s.keycloak.org/v2alpha1"",-          ""kind"": ""KeycloakRealmImport"",-          ""metadata"": {-            ""name"": ""example-keycloak-realm-import"",-            ""labels"": {-              ""app"": ""sso""-            }-          },-          ""spec"": {-            ""keycloakCRName"": ""example-keycloak"",-            ""realm"": {}-          }-        }-      ]-  name: keycloak-operator.vREPLACE_ME_VERSION-  namespace: placeholder-spec:-  apiservicedefinitions: {}-  customresourcedefinitions:-    owned:-      - description: ""Represents a Keycloak Instance""-        displayName: ""Keycloak""-        kind: Keycloak-        name: keycloaks.k8s.keycloak.org-        version: v2alpha1-      - description: ""Represents a Keycloak Realm Import""-        displayName: ""KeycloakRealmImport""-        kind: KeycloakRealmImport-        name: keycloakrealmimports.k8s.keycloak.org-        version: v2alpha1-  description: |-    A Kubernetes Operator based on the Operator SDK for installing and managing Keycloak.--    Keycloak lets you add authentication to applications and secure services with minimum fuss. No need to deal with storing users or authenticating users. It's all available out of the box.--    The operator can deploy and manage Keycloak instances on Kubernetes and OpenShift.-    The following features are supported:--    * Install Keycloak to a namespace-    * Import Keycloak Realms-  displayName: Keycloak Operator-  icon:-    - base64data: -      mediatype: image/png-  install:-    spec:-      deployments:-        - name: keycloak-operator-          spec:-            replicas: 1-            selector:-              matchLabels:-                name: keycloak-operator-            strategy: {}-            template:-              metadata:-                labels:-                  name: keycloak-operator-              spec:-                containers:-                  - command:-                      - java-                      - -Djava.util.logging.manager=org.jboss.logmanager.LogManager-                      - -jar-                      - quarkus-run.jar-                    env:-                      - name: QUARKUS_OPERATOR_SDK_NAMESPACES-                        valueFrom:-                          fieldRef:-                            fieldPath: metadata.annotations['olm.targetNamespaces']","That change is one of the things that the bundle extension does that I can't configure. I assume that it's correct, but I don't know enough to say for sure. I did add the old value of `metadata.annotations['olm.targetNamespaces']` into application.properties to try to preserve it. Honestly I was expecting it to show up in the CSV once I did that, but it didn't. If you think that there is a reference to that value though, then that may work?",
90404766,andre-nascimento6791,https://api.github.com/repos/keycloak/keycloak/pulls/20973,1232470987,2023-06-16T16:23:05Z,docs/guides/server/hostname.adoc,"@@ -85,42 +85,276 @@ To reduce attack surface, the administration endpoints for Keycloak and the Admi Therefore, you can secure them by using a reverse proxy. For more information about which paths to expose using a reverse proxy, see <@links.server id=""reverseproxy""/>. -== Example Scenarios-The following are more example scenarios and the corresponding commands for setting up a hostname. -Note that the `start` command requires setting up TLS. The corresponding options are not shown for example purposes. For more details, see <@links.server id=""enabletls""/>.+== Configuration Examples by Different Scenarios -=== Exposing the server behind a TLS termination proxy -In this example, the server is running behind a TLS termination proxy and publicly available from `https://mykeycloak`.+Through this set of hostname configuration options, Keycloak aims to provide a flexible way to adapt to the characteristics of different environments. -.Configuration:-<@kc.start parameters=""--hostname=mykeycloak --proxy=edge""/>+Misconfiguration of the Hostname and/or its Reverse Proxy options can lead to unusual and unpleasant behavior, such as Keycloak's Administration Console not loading correctly. -=== Exposing the server without a proxy+In an attempt to further improve the user experience and minimize the occurrence of misconfigurations, see the list of sample Hostname and Proxy configurations below, which is oriented to possible scenarios that may exist in different computing environments. -In this example, the server is running without a proxy and exposed using a URL using HTTPS.+The following are more example scenarios and the corresponding commands for setting up the `Hostname` and/or `Proxy` options. -.Keycloak configuration:-<@kc.start parameters=""--hostname-url=https://mykeycloak""/>+> Note that the `start` command requires setting up TLS. The corresponding options are not shown for example purposes. For more details, see <@links.server id=""enabletls""/>.+++=== Scenario 01 - Beginner/Quick Test in Localhost with HTTP only++* __**Description**__:+  ** The most basic option to run, in localhost, all default values.+* __**Recommended Settings / Keycloak configuration**__:++  <@kc.startdev parameters="""" />++* __**Expected Behavior**__:+  ** Both Frontend/Backend and Admin Console at: http://localhost:8080++---","Ok. In the regard of simplifying the format, suggestions accepted and applied. Thanks.- `remove the slash from every place, where it doesn't fulfil the role of an alternative - scenario/example; recommended settings/keycloak configuration; beginner/quick - all have very similar meaning in this context,`  - Done. Please review again If it is better this way.  - `on the other hand, let's add more precise, more detailed descriptions; use rather full sentence instead of collocations separated by commas`   - What is your suggestion of full sentence, where do you think it is not good?- `remove the bullet points - if you need, break the line instead`  - Done.  - `use either bold or italic text (not both at the same time).`  - Done.  - `Regardless, I'm not sure, whether it's worth to mention this particular scenario, as it doesn't provide any additional information regarding the hostname setup (compared to others bellow). But it's up to a discussion, I used it as a reference example of how the format could be potentially improved.`    - Exactly. In my view, the most important points of this review are: Evaluate which scenarios make sense to mention in this Guide and If the `kc start` command options are right for each scenario. And I need your help in this effort.  Thanks.  ",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20722,1233941990,2023-06-19T11:45:33Z,docs/documentation/securing_apps/topics/oidc/javascript-adapter.adoc,,Can we remove the changes to the docs here? I think throwing an exception should be self-explanatory.,x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20722,1233942848,2023-06-19T11:46:22Z,js/libs/keycloak-js/src/keycloak.js,,"We'll need to test this behavior, can you add a new test to [the test suite](https://github.com/keycloak/keycloak/blob/0ca9b217654e5ee69ebd16657a36630b2a4c642a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java#L70)?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20722,1233943920,2023-06-19T11:47:23Z,js/libs/keycloak-js/src/keycloak.js,"@@ -49,6 +49,12 @@ function Keycloak (config) {     var logWarn = createLogger(console.warn);      kc.init = function (initOptions) {+        if (kc.didInitialize) {+            throw 'A \'Keycloak\' instance can only be initialized once.';","Let's throw this exception with the `Error` object.```suggestion            throw new Error(""A 'Keycloak' instance can only be initialized once."");```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21039,1233961685,2023-06-19T12:05:22Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -88,4 +88,10 @@ In relation to the KeyStore Vault news, we also integrated Quarkus's recently re  = Account Console v3 promoted to preview -In version 21.1.0 of Keycloak the new Account Console (version 3) was introduced as an experimental feature. Starting this version it has been promoted to a preview feature.\ No newline at end of file+In version 21.1.0 of Keycloak the new Account Console (version 3) was introduced as an experimental feature. Starting this version it has been promoted to a preview feature.++= Account Console Feature Flags Removed++Two of the feature flags available to Account Console V2 and V3 were unused.  They were therefore removed.  It is possible that if a developer extended the account console, he or she could make use of thse flags.  However, it would not be recommended.++The flags are `isEventsEnabled` and `isTotpConfigured`.","I think calling these feature flags makes it difficult to understand. They are only exposed as variables in the FreeMarker template:```suggestion= Account Console template variables removedTwo of the variables exposed to the Account Console V2 and V3 templates (`isEventsEnabled` and `isTotpConfigured`) were left unused, and have been removed in this release.It is possible that if a developer extended the Account Console theme, he or she could make use of these variables. So make sure that these variables are no longer used if you are extending the base theme.```",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/21005,1234091813,2023-06-19T13:46:28Z,integration/admin-client-jee/src/main/java/org/keycloak/admin/client/resource/GroupsResource.java,"@@ -150,4 +150,11 @@ List<GroupRepresentation> groups(@QueryParam(""search"") String search,     @GET     @Produces(MediaType.APPLICATION_JSON)     List<GroupRepresentation> query(@QueryParam(""q"") String searchQuery, @QueryParam(""populateHierarchy"") boolean populateHierarchy);++    @GET+    @Produces(MediaType.APPLICATION_JSON)+    List<GroupRepresentation> query(@QueryParam(""q"") String searchQuery,",Doesn't make sense to also include `search` and `exact` parameters?,
11198630,danielFesenmeyer,https://api.github.com/repos/keycloak/keycloak/pulls/21005,1234878590,2023-06-20T07:51:18Z,integration/admin-client-jee/src/main/java/org/keycloak/admin/client/resource/GroupsResource.java,"@@ -150,4 +150,11 @@ List<GroupRepresentation> groups(@QueryParam(""search"") String search,     @GET     @Produces(MediaType.APPLICATION_JSON)     List<GroupRepresentation> query(@QueryParam(""q"") String searchQuery, @QueryParam(""populateHierarchy"") boolean populateHierarchy);++    @GET+    @Produces(MediaType.APPLICATION_JSON)+    List<GroupRepresentation> query(@QueryParam(""q"") String searchQuery,","I think it would really help, because the `q` and `search` parameters cannot be combined (`q` has precedence), and in case the `q` parameter is specified, the `exact` parameter is not evaluated.See https://github.com/keycloak/keycloak/blob/a6ad701b5ebace3229cb64663d194ed36d299524/services/src/main/java/org/keycloak/services/resources/admin/GroupsResource.java#L86",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21098,1235055782,2023-06-20T10:19:20Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/UmaRepresentationTest.java,,"Cool, as long as there is an issue logged it's fine by me.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21101,1235067597,2023-06-20T10:30:35Z,js/apps/admin-ui/src/clients/credentials/SignedJWT.tsx,"@@ -13,11 +13,15 @@ import { HelpItem } from ""ui-shared""; import { convertAttributeNameToForm, sortProviders } from ""../../util""; import { FormFields } from ""../ClientDetails""; -export const SignedJWT = () => {+type SignedJWTProps = {+  clientAuthenticatorType: string;+};++export const SignedJWT = ({ clientAuthenticatorType }: SignedJWTProps) => {   const { control } = useFormContext();-  const providers = sortProviders(-    useServerInfo().providers!.clientSignature.providers-  );+  const providers =  clientAuthenticatorType === ""client-jwt""+    ? (useServerInfo().cryptoInfo?.clientSignatureAsymmetricAlgorithms ?? [])+    : (useServerInfo().cryptoInfo?.clientSignatureSymmetricAlgorithms ?? []);","Although this does not result in errors, hooks [should not be called conditionally](https://react.dev/warnings/invalid-hook-call-warning). Instead you can store the value in side of a variable outside of these conditions:```suggestion  const { cryptoInfo } = useServerInfo();  const providers =    clientAuthenticatorType === ""client-jwt""      ? cryptoInfo?.clientSignatureAsymmetricAlgorithms ?? []      : cryptoInfo?.clientSignatureSymmetricAlgorithms ?? [];```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21039,1235665690,2023-06-20T18:36:09Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -88,4 +88,10 @@ In relation to the KeyStore Vault news, we also integrated Quarkus's recently re  = Account Console v3 promoted to preview -In version 21.1.0 of Keycloak the new Account Console (version 3) was introduced as an experimental feature. Starting this version it has been promoted to a preview feature.\ No newline at end of file+In version 21.1.0 of Keycloak the new Account Console (version 3) was introduced as an experimental feature. Starting this version it has been promoted to a preview feature.++= Account Console Feature Flags Removed++Two of the feature flags available to Account Console V2 and V3 were unused.  They were therefore removed.  It is possible that if a developer extended the account console, he or she could make use of thse flags.  However, it would not be recommended.","```suggestionTwo of the feature flags available to Account Console V2 and V3 were unused.  They were therefore removed.  It is possible that if a developer extended the account console, that developer could make use of thse flags.  However, it would not be recommended.```",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/20956,1236447304,2023-06-21T06:35:45Z,testsuite/integration-arquillian/test-apps/fuse/camel/pom.xml,"@@ -0,0 +1,99 @@+<?xml version=""1.0"" encoding=""UTF-8""?>+<!--+  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">+    <parent>+        <artifactId>integration-arquillian-test-apps-fuse-parent</artifactId>+        <groupId>org.keycloak.testsuite</groupId>+        <version>999.0.0-SNAPSHOT</version>+    </parent>++    <modelVersion>4.0.0</modelVersion>+    <groupId>org.keycloak.testsuite</groupId>+    <artifactId>fuse-example-camel-endpoint</artifactId>+    <packaging>bundle</packaging>+    <name>Camel endpoint example - Secured in Karaf/Fuse</name>+    <description/>++    <properties>++        <keycloak.osgi.export>+        </keycloak.osgi.export>+        <keycloak.osgi.import>+            javax.servlet;version=""[3.1,5)"",+            javax.servlet.http;version=""[3.1,5)"",+            org.apache.camel.*,+            org.apache.camel;version=""[2.13,3)"",+            org.eclipse.jetty.security;version=""[8,10)"",+            org.eclipse.jetty.server.nio;version=""[8,10)"",+            org.eclipse.jetty.util.security;version=""[8,10)"",+            org.keycloak.*;version=""${project.version}"",","As far as I understand, we want this for backward compatibility of older adapters, should we change this to something like here? https://github.com/pdrozd/keycloak/blob/adapters-18x/testsuite/integration-arquillian/test-apps/spring-boot-adapter-app/pom.xml#L109 so we can change the version?",
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/21056,1237301851,2023-06-21T16:46:27Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -86,6 +86,10 @@ The previous and now removed WildFly distribution provided a built-in vault prov  In relation to the KeyStore Vault news, we also integrated Quarkus's recently released feature called KeyStore Config Source. This means that among the already existing configuration sources (CLI parameters, environment variables and files), you can now configure your Keycloak server via configuration properties stored in a Java keystore file. You can learn more about this feature in the https://www.keycloak.org/server/configuration[Configuration guide]. += k8s.keycloak.org/v2alpha1 changes++The are additional fields available in the keycloak.status to facilitate keycloak being a scalable resource.  There are also additional fields that make the status easier to interpret such as observedGeneration and condition observedGeneration and lastTransitionTime fields.  However the condition status field was also changed from a boolean to a string for conformance with standard Kubernetes conditions.  Please make sure any of your usage of this field is updated to expect the values ""True"", ""False"", or ""Unknown"", rather than true or false.","```suggestionThe are additional fields available in the keycloak.status to facilitate keycloak being a scalable resource. There are also additional fields that make the status easier to interpret such as observedGeneration and condition observedGeneration and lastTransitionTime fields. However the condition status field was also changed from a boolean to a string for conformance with standard Kubernetes conditions. Please make sure any of your usage of this field is updated to expect the values ""True"", ""False"", or ""Unknown"", rather than true or false.```",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/21117,1237358848,2023-06-21T17:34:23Z,server-spi/src/main/java/org/keycloak/models/credential/OTPCredentialModel.java,"@@ -6,22 +6,34 @@ import org.keycloak.models.credential.dto.OTPSecretData; import org.keycloak.models.OTPPolicy; import org.keycloak.models.RealmModel;+import org.keycloak.models.utils.Base32; import org.keycloak.util.JsonSerialization;  import java.io.IOException;+import java.nio.charset.StandardCharsets;  public class OTPCredentialModel extends CredentialModel {      public static final String TYPE = ""otp"";-     public static final String TOTP = ""totp"";     public static final String HOTP = ""hotp""; +    /**+     * The supported encodings when reading the raw secret from the storage+     */+    public enum SecretEncoding {+        B32","I had two issues with names in this PR. I initially started with `kEnc` for `secretEncoding` because the latter is longer. But I preferred to avoid abbreviations in this field to make it aligned with the others (e.g.: `algorithm`, etc).I'm only using `B32` as a value to save space. No preference. Do you think it might overlap with some other encoding we might eventually support? Or we can move forward as is?",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/21131,1238055976,2023-06-22T06:29:25Z,server-spi-private/src/main/java/org/keycloak/utils/EmailValidationUtil.java,"@@ -0,0 +1,92 @@+package org.keycloak.utils;++import java.net.IDN;+import java.util.regex.Matcher;+import java.util.regex.Pattern;++import static java.util.regex.Pattern.CASE_INSENSITIVE;+",Optional: Some javadoc might be added about from where this was forked. For instance something like: `Forked from hibernate (class org.hibernate.foo.EmailValidationUtil)` . But not a blocker for this PR (just in case someone finds something else to update this),
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/21147,1238537437,2023-06-22T13:33:03Z,services/src/main/java/org/keycloak/services/resources/admin/UserResource.java,"@@ -210,6 +211,9 @@ public Response updateUser(final UserRepresentation rep) {         } catch (ReadOnlyException re) {             session.getTransactionManager().setRollbackOnly();             throw ErrorResponse.error(""User is read only!"", Status.BAD_REQUEST);+        } catch (PasswordPolicyNotMetException e) {+            session.getTransactionManager().setRollbackOnly();+            throw ErrorResponse.error(""Password policy not met"", new Object[] { e.getMessage() }, Status.BAD_REQUEST);","There are various XSS/CSRF attack scenarios, which rely on the fact that some arbitrary data are sent from the server. That's why also most of other endpoints don't return any details as you can see in other places in Keycloak admin REST API responses.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20741,1238627689,2023-06-22T14:37:42Z,services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureParContentsExecutor.java,"@@ -76,17 +85,66 @@ private void checkValidParContents(PreAuthorizationRequestContext preAuthorizati          String key = requestUri.substring(ParEndpoint.REQUEST_URI_PREFIX_LENGTH);         SingleUseObjectProvider singleUseStore = session.singleUseObjects();-        Map<String, String> retrievedRequest = singleUseStore.get(key);-        if (retrievedRequest == null) {+        Map<String, String> requestParametersFromPAR = singleUseStore.get(key);+        if (requestParametersFromPAR == null) {             throw new ClientPolicyException(OAuthErrorException.INVALID_REQUEST, ""PAR not found. not issued or used multiple times."");         } -        Set<String> queryParameterNames = requestParameters.keySet();-        for (String queryParamName : queryParameterNames) {-            if (!retrievedRequest.keySet().contains(queryParamName) && !OIDCLoginProtocol.REQUEST_URI_PARAM.equals(queryParamName)) {+        Set<String> requestParametersNameFromPAR = new HashSet<>();+        if (requestParametersFromPAR.containsKey(OIDCLoginProtocol.REQUEST_PARAM)) {+            // if PAR request includes request object (JAR), parsing the request is needed.+            requestParametersNameFromPAR = getParRetrievedRequestParameters(requestParametersFromPAR, preAuthorizationRequestContext.getClientId());+        } else {+            requestParametersNameFromPAR = requestParametersFromPAR.keySet();+        }++        for (String queryParamName : requestParametersFromQuery.keySet()) {+            if (!requestParametersNameFromPAR.contains(queryParamName) && !OIDCLoginProtocol.REQUEST_URI_PARAM.equals(queryParamName)) {                 singleUseStore.remove(key);                 throw new ClientPolicyException(OAuthErrorException.INVALID_REQUEST, ""PAR request did not include necessary parameters"");             }         }     }++    private Set<String> getParRetrievedRequestParameters(Map<String, String> requestParametersFromPAR, String clientId) {+        AuthorizationEndpointRequest request = new AuthorizationEndpointRequest();+        Set<String> parRetrievedRequest = new HashSet<>();+        String requestObjectString  = requestParametersFromPAR.get(OIDCLoginProtocol.REQUEST_PARAM);+        RealmModel realm = session.getContext().getRealm();+        ClientModel client = realm.getClientByClientId(clientId);++        new AuthzEndpointRequestObjectParser(session, requestObjectString, client).parseRequest(request);++        // from query parameters+        for (String param : requestParametersFromPAR.keySet()) {+            if (OIDCLoginProtocol.REQUEST_PARAM.equals(param)) continue;+            parRetrievedRequest.add(param);+        }+        // from parsed PAR request parameters+        if (request.getClientId() != null) parRetrievedRequest.add(OIDCLoginProtocol.CLIENT_ID_PARAM);+        if (request.getResponseType() != null) parRetrievedRequest.add(OIDCLoginProtocol.RESPONSE_TYPE_PARAM);+        if (request.getResponseMode() != null) parRetrievedRequest.add(OIDCLoginProtocol.RESPONSE_MODE_PARAM);+        if (request.getRedirectUriParam() != null) parRetrievedRequest.add(OIDCLoginProtocol.REDIRECT_URI_PARAM);+        if (request.getState() != null) parRetrievedRequest.add(OIDCLoginProtocol.STATE_PARAM);","It seems there are quite a lot of parameters here and I afraid a bit that when we introduce another OIDC parameter, we have 2 places to update and we may easily forget one of them.I wonder about somehow re-use some parts of the code with `AuthorizationEndpoint.updateAuthenticationSession()`, which already lists some parameters in a bit similar way.For example we can add this method on `AuthorizationEndpoint` (or maybe some dedicated util class):```public static performActionOnParameters(AuthorizationEndpointRequest request, BiConsumer<String, String> paramAction) {    paramAction.accept(OIDCLoginProtocol.STATE_PARAM, request.getState());    paramAction.accept(OIDCLoginProtocol.NONCE_PARAM, request.getNonce());    ... Other parameters useful in both SecureParContentsExecutor and AuthorizationEndpoint.updateAuthenticationSession() ...}```Then in `AuthorizationEndpoint.updateAuthenticationSession()`, some part with repeated parameters can be replaced with something like:```performActionOnParameters(request, (paramName, paramValue) -> if (paramValue != null) authenticationSession.setClientNote(paramName, paramValue));```When in `SecureParContentsExecutor` something like:```AuthorizationEndpoint.performActionOnParameters(request, (paramName, paramValue) -> if (paramValue != null) parRetrievedRequest.add(paramName);```This probably cannot be used for all the parameters (as some are still doing something different in `AuthorizationEndpoint.updateAuthenticationSession()` than `authenticationSession.setClientNote`, but hopefully for majority of them.WDYT?",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/11760,1238774700,2023-06-22T16:30:29Z,js/libs/keycloak-js/src/keycloak.js,"@@ -176,6 +176,9 @@ function Keycloak (config) {                     options.prompt = 'none';                 } +                if (initOptions && initOptions.locale) {+                    options.locale = initOptions.locale","I don't see this option being handled in `createLoginUrl`, so I don't believe this parameter is actually being added (unless I missed something). Did you test this code works?",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/20741,1240534752,2023-06-24T00:13:20Z,services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureParContentsExecutor.java,"@@ -76,17 +85,66 @@ private void checkValidParContents(PreAuthorizationRequestContext preAuthorizati          String key = requestUri.substring(ParEndpoint.REQUEST_URI_PREFIX_LENGTH);         SingleUseObjectProvider singleUseStore = session.singleUseObjects();-        Map<String, String> retrievedRequest = singleUseStore.get(key);-        if (retrievedRequest == null) {+        Map<String, String> requestParametersFromPAR = singleUseStore.get(key);+        if (requestParametersFromPAR == null) {             throw new ClientPolicyException(OAuthErrorException.INVALID_REQUEST, ""PAR not found. not issued or used multiple times."");         } -        Set<String> queryParameterNames = requestParameters.keySet();-        for (String queryParamName : queryParameterNames) {-            if (!retrievedRequest.keySet().contains(queryParamName) && !OIDCLoginProtocol.REQUEST_URI_PARAM.equals(queryParamName)) {+        Set<String> requestParametersNameFromPAR = new HashSet<>();+        if (requestParametersFromPAR.containsKey(OIDCLoginProtocol.REQUEST_PARAM)) {+            // if PAR request includes request object (JAR), parsing the request is needed.+            requestParametersNameFromPAR = getParRetrievedRequestParameters(requestParametersFromPAR, preAuthorizationRequestContext.getClientId());+        } else {+            requestParametersNameFromPAR = requestParametersFromPAR.keySet();+        }++        for (String queryParamName : requestParametersFromQuery.keySet()) {+            if (!requestParametersNameFromPAR.contains(queryParamName) && !OIDCLoginProtocol.REQUEST_URI_PARAM.equals(queryParamName)) {                 singleUseStore.remove(key);                 throw new ClientPolicyException(OAuthErrorException.INVALID_REQUEST, ""PAR request did not include necessary parameters"");             }         }     }++    private Set<String> getParRetrievedRequestParameters(Map<String, String> requestParametersFromPAR, String clientId) {+        AuthorizationEndpointRequest request = new AuthorizationEndpointRequest();+        Set<String> parRetrievedRequest = new HashSet<>();+        String requestObjectString  = requestParametersFromPAR.get(OIDCLoginProtocol.REQUEST_PARAM);+        RealmModel realm = session.getContext().getRealm();+        ClientModel client = realm.getClientByClientId(clientId);++        new AuthzEndpointRequestObjectParser(session, requestObjectString, client).parseRequest(request);++        // from query parameters+        for (String param : requestParametersFromPAR.keySet()) {+            if (OIDCLoginProtocol.REQUEST_PARAM.equals(param)) continue;+            parRetrievedRequest.add(param);+        }+        // from parsed PAR request parameters+        if (request.getClientId() != null) parRetrievedRequest.add(OIDCLoginProtocol.CLIENT_ID_PARAM);+        if (request.getResponseType() != null) parRetrievedRequest.add(OIDCLoginProtocol.RESPONSE_TYPE_PARAM);+        if (request.getResponseMode() != null) parRetrievedRequest.add(OIDCLoginProtocol.RESPONSE_MODE_PARAM);+        if (request.getRedirectUriParam() != null) parRetrievedRequest.add(OIDCLoginProtocol.REDIRECT_URI_PARAM);+        if (request.getState() != null) parRetrievedRequest.add(OIDCLoginProtocol.STATE_PARAM);","@mposolda Yes, it is a good idea. I would like to incorporate it.I investigated the following point about request parameters:- [1] comparing request parametes that are treated as you mentiond in  `AuthorizationEndpoint.updateAuthenticationSession()` and request parameters included in `AuthzEndpointRequestParser.KNOWN_REQ_PARAMS`- [2] comparing request parametes that are treated as you mentiond in  `SecureParContentsExecutor.getParRetrievedRequestParameters()` and request parameters included in `AuthzEndpointRequestParser.KNOWN_REQ_PARAMS`- [3] comparing request parametes that are treated as you mentiond in  `AuthorizationEndpoint.updateAuthenticationSession()` and request parameters that are treated as you mentiond in  `SecureParContentsExecutor.getParRetrievedRequestParameters()` As for [1], `AuthorizationEndpoint.updateAuthenticationSession()` only includes-  OAuth2Constants.DISPLAY-  LocaleSelectorProvider.CLIENT_REQUEST_LOCALEwhile `AuthorizationEndpoint.updateAuthenticationSession()` does not include-  OIDCLoginProtocol.CLIENT_ID_PARAM-  OIDCLoginProtocol.REDIRECT_URI_PARAM-  OIDCLoginProtocol.REQUEST_PARAM-  OIDCLoginProtocol.REQUEST_URI_PARAM-  OIDCLoginProtocol.RESPONSE_TYPE_PARAM-  OIDCLoginProtocol.UI_LOCALES_PARAMAs for [2], `SecureParContentsExecutor.getParRetrievedRequestParameters()` only includes-  OAuth2Constants.DISPLAYwhile `SecureParContentsExecutor.getParRetrievedRequestParameters()` does not include-  OIDCLoginProtocol.REQUEST_PARAM-  OIDCLoginProtocol.REQUEST_URI_PARAMhowever, the lack of them are intentional so no problem.As for [3], both `AuthorizationEndpoint.updateAuthenticationSession()`  and `SecureParContentsExecutor.getParRetrievedRequestParameters()` include- AdapterConstants.KC_IDP_HINT- Constants.KC_ACTION- OAuth2Constants.DISPLAY- OIDCLoginProtocol.ACR_PARAM- OIDCLoginProtocol.CLAIMS_PARAM- OIDCLoginProtocol.CODE_CHALLENGE_METHOD_PARAM- OIDCLoginProtocol.CODE_CHALLENGE_PARAM- OIDCLoginProtocol.LOGIN_HINT_PARAM- OIDCLoginProtocol.MAX_AGE_PARAM- OIDCLoginProtocol.NONCE_PARAM- OIDCLoginProtocol.PROMPT_PARAM- OIDCLoginProtocol.RESPONSE_MODE_PARAM- OIDCLoginProtocol.SCOPE_PARAM- OIDCLoginProtocol.STATE_PARAMTherefore, I will treat parameters in [3] as you suggested. However, only OIDCLoginProtocol.MAX_AGE_PARAM is `Integer` while other parameters are `String`,  therefore, I would like to drop OIDCLoginProtocol.MAX_AGE_PARAM  from [3].Other parameters are treated by each `AuthorizationEndpoint.updateAuthenticationSession()` and  `SecureParContentsExecutor.getParRetrievedRequestParameters()` in as usual.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20896,1242059873,2023-06-26T11:37:41Z,js/libs/keycloak-admin-client/src/utils/auth.ts,"@@ -77,9 +80,10 @@ export const getToken = async (settings: Settings): Promise<TokenResponse> => {   const headers = new Headers(options.headers);    if (credentials.clientSecret) {+    // See: https://datatracker.ietf.org/doc/html/rfc2617#section-2     headers.set(       ""Authorization"",-      `Basic ${btoa(`${credentials.clientId}:${credentials.clientSecret}`)}`+      `Basic ${toBase64(`${credentials.clientId}:${credentials.clientSecret}`)}`","> I did not expect this to be so complicated, but here we are...Hahah, yeah. But let's solve this properly. Sorry for the late reply, I had to take care of some other tasks.> Looking at the differences, I assume ` ` has to be encoded as `+` additionally in JavaScriptYes, from what I have read this indeed seems to be the case. I've added a function to take care of this additional encoding. As well as a new method that handles encoding in Base64 a bit better.> The other difference between Java and JS seems to be that JS would not encode `[~'()!]`. So maybe [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986) could be used?I am not sure that we need to conform to RFC3986 here, I can't seem to find a reference of it under [Appendix B](https://datatracker.ietf.org/doc/html/rfc6749#appendix-B). But I guess it can do no harm? I'll add this.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1242185715,2023-06-26T13:22:27Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/QuarkusKeycloakApplication.java,"@@ -53,16 +68,24 @@ protected void loadConfig() {      @Override     public Set<Object> getSingletons() {-        Set<Object> singletons = super.getSingletons().stream()-                .filter(QuarkusKeycloakApplication::filterSingletons)-                .collect(Collectors.toSet());+        return Collections.emptySet();+    }++    @Override+    public Set<Class<?>> getClasses() {+        Set<Class<?>> classes = new HashSet<>(super.getClasses());++        classes.remove(WelcomeResource.class);+        classes.add(QuarkusWelcomeResource.class); -        singletons.add(new QuarkusWelcomeResource());+        classes.add(QuarkusObjectMapperResolver.class);+        classes.add(CloseSessionHandler.class);+        classes.add(StreamingOutputMessageBodyWriter.class);","@geoand When removing the custom `MessageBodyWriter` we have failures in a test.For some reason, without the custom `MessageBodyWriter` our exception mapper is not invoked to properly handle exceptions thrown during the deserialization of methods parameters. For instance, we expect our exception mapper setting a proper content type and response payload. See https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/error/UncaughtErrorPageTest.java#L253.",x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21212,1242346378,2023-06-26T15:05:07Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -94,6 +94,15 @@ The are additional fields available in the keycloak.status to facilitate keycloa  In scenarios where advanced management is needed you may now directly update most fields on operator managed resources that have not been set by the operator directly. This can be used as an alternative to the unsupported stanza of the Keycloak spec. Like the unsupported stanza these direct modifications are not considered supported. If your modifications prevent the operator from being able to manage the resource, there Keycloak CR will show this error condition and the operator will log it. += Account Console v1++The old Account Console (v1) is now completely removed. This version of the Account Console was marked as deprecated",```suggestionAccount Console is now completely removed. This version of the Account Console was marked as deprecated```,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1242356570,2023-06-26T15:13:07Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/QuarkusKeycloakApplication.java,"@@ -53,16 +68,24 @@ protected void loadConfig() {      @Override     public Set<Object> getSingletons() {-        Set<Object> singletons = super.getSingletons().stream()-                .filter(QuarkusKeycloakApplication::filterSingletons)-                .collect(Collectors.toSet());+        return Collections.emptySet();+    }++    @Override+    public Set<Class<?>> getClasses() {+        Set<Class<?>> classes = new HashSet<>(super.getClasses());++        classes.remove(WelcomeResource.class);+        classes.add(QuarkusWelcomeResource.class); -        singletons.add(new QuarkusWelcomeResource());+        classes.add(QuarkusObjectMapperResolver.class);+        classes.add(CloseSessionHandler.class);+        classes.add(StreamingOutputMessageBodyWriter.class);",I did something wrong here.The difference is actually in how our exception mappers are mapped to exceptions at runtime. I had to add a new `KeycloakMismatchedInputExceptionHandler` to override the default instance set by Resteasy Reactive when mapping exceptions of type `com.fasterxml.jackson.databind.exc.MismatchedInputException`. See https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java#L112.We have a generic exception mapper (`org.keycloak.services.error.KeycloakErrorHandler`) to handle `Throwable`. It seems the `DefaultMismatchedInputException` is taking precedence (even though it is not a user-defined mapper) because it is specific for `MismatchedInputException`. Is this behavior expected or Resteasy should run the custom mapper instead?,
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1242365575,2023-06-26T15:19:36Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/QuarkusKeycloakApplication.java,"@@ -53,16 +68,24 @@ protected void loadConfig() {      @Override     public Set<Object> getSingletons() {-        Set<Object> singletons = super.getSingletons().stream()-                .filter(QuarkusKeycloakApplication::filterSingletons)-                .collect(Collectors.toSet());+        return Collections.emptySet();+    }++    @Override+    public Set<Class<?>> getClasses() {+        Set<Class<?>> classes = new HashSet<>(super.getClasses());++        classes.remove(WelcomeResource.class);+        classes.add(QuarkusWelcomeResource.class); -        singletons.add(new QuarkusWelcomeResource());+        classes.add(QuarkusObjectMapperResolver.class);+        classes.add(CloseSessionHandler.class);+        classes.add(StreamingOutputMessageBodyWriter.class);",A similar situation occurred in the past with the Exception mappers and RESTEasy. Check out the `KcUnrecognizedPropertyExceptionHandler` in our codebase.,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20906,1244031469,2023-06-27T16:28:56Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -115,3 +115,7 @@ q=<name>:<value> <name>:<value> ... ```  Where `<name>` and `<value>` represent the attribute name and value, respectively.++= Multiple Keycloak instances++Multiple Keycloak CRs may be created in the same namespace and will be managed independently by the operator.  To allow for this StatefulSets created by older versions of the operator must be re-created.  This will happen automatically when the operator is upgraded and lead to small amount of downtime.",This should be probably in the [migration guide](https://github.com/keycloak/keycloak/blob/main/docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc) instead.,
568962,estliberitas,https://api.github.com/repos/keycloak/keycloak/pulls/20722,1244039851,2023-06-27T16:34:13Z,js/libs/keycloak-js/src/keycloak.js,,"@jonkoops cheesus, I just realized test suite is written with Java. Any advice on how we shud test for a fire exception? Wrap in `try { ... } catch (...) { }`?",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20906,1244055600,2023-06-27T16:47:42Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDeployment.java,"@@ -92,12 +92,23 @@ public Optional<HasMetadata> getReconciledResource() {         }         else {             Log.info(""Existing Deployment found, handling migration"");-+            +            // in case existingDeployment is coming from cache, make absolutely sure it needs deleted+            if (!hasExpectedMatchLabels(existingDeployment) && !hasExpectedMatchLabels(client.resource(existingDeployment).get())) {","I think the one off downtime is fine. It'll happen only during migration from KC <=21 to >=22. For existing deployments it'll happen only once, for new deployments it doesn't happen at all. In any case, downtime happens during any KC image change, so it's inevitable.But I have some other concerns.* The reconciliation loop finishes in a desired state. That means that status fields will indicate KC as ready whereas in reality the deployment is being terminated. Although this is useful as a side effect to [retrigger the reconciliation loop](https://github.com/keycloak/keycloak/blob/58713a23b2b39f55e97bbadee95cceb7c3d3606c/operator/src/main/java/org/keycloak/operator/controllers/KeycloakController.java#L143-L146) (that's necessary to re-create the StS again), I believe we should not indicate it's ready. Or perhaps that's ok since the deletion itself immediately triggers another reconciliation loop.* Do we really not trust the cached version of existing StS? I'm not sure it's really desired to explicitly fetch the StS in every reconciliation loop. Are there any serious concerns that the cached version is incorrect? If so, I'd say it's an JOSDK issue.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20906,1244074831,2023-06-27T17:02:08Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/ClusteringTest.java,"@@ -45,22 +51,74 @@ @QuarkusTest public class ClusteringTest extends BaseOperatorTest { +    @Test+    public void testMultipleDeployments() throws InterruptedException {+        // given+        var kc = K8sUtils.getDefaultKeycloakDeployment();++        // another instance running off the same database+        // - should eventually give this a separate schema+        var kc1 = K8sUtils.getDefaultKeycloakDeployment();+        kc1.getMetadata().setName(""another-example"");+        kc1.getSpec().getHostnameSpec().setHostname(""another-example.com"");+        // this is using the wrong tls-secret, but simply removing http spec renders the pod unstartable","jFYI – you can disable TLS as:https://github.com/keycloak/keycloak/blob/58713a23b2b39f55e97bbadee95cceb7c3d3606c/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java#L67-L71But no need for it here, it's fine as is.",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/20906,1244284885,2023-06-27T20:00:35Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDeployment.java,"@@ -92,12 +92,23 @@ public Optional<HasMetadata> getReconciledResource() {         }         else {             Log.info(""Existing Deployment found, handling migration"");-+            +            // in case existingDeployment is coming from cache, make absolutely sure it needs deleted+            if (!hasExpectedMatchLabels(existingDeployment) && !hasExpectedMatchLabels(client.resource(existingDeployment).get())) {","> The reconciliation loop finishes in a desired state. Ideally we won't have a blocking delete in the reconciliation loop.  In this case the deletion of the statefulset should be basically immediate - the pods shouldn't block it - but I was still hesitent to add that in.  I think kubectl scales statefulsets to 0 first probably for better behavior in a resource constrained environment, rather than relying on gc to clean up the pods.  But that didn't seem necessary either.> That means that status fields will indicate KC as ready whereas in reality the deployment is being terminated. Although this is useful as a side effect to [retrigger the reconciliation loop](https://github.com/keycloak/keycloak/blob/58713a23b2b39f55e97bbadee95cceb7c3d3606c/operator/src/main/java/org/keycloak/operator/controllers/KeycloakController.java#L143-L146) (that's necessary to re-create the StS again), I believe we should not indicate it's ready. Or perhaps that's ok since the deletion itself immediately triggers another reconciliation loop.Correct, based upon the current state the status for that loop may indicate it's ready - however that will be ephemal.  The event of marking the deletion timestamp on the statefulset, its eventual deletion, or any other event will trigger another reconciliation, that will update the status to whatever is observed at that point on the statefulset.The alternative, which I'll change the pr to, is to just let the reconciliation logic proceed as normal after the delete call rather than returning an empty optional - if the statefulset still exists, we'll get an ephemeral error, if not then things will proceed.> Do we really not trust the cached version of existing StS? I'm not sure it's really desired to explicitly fetch the StS in every reconciliation loop. It won't be fetched everytime.  It's only for a final check prior to deletion. > Are there any serious concerns that the cached version is incorrect? If so, I'd say it's an JOSDK issue.This isn't really a JOSDK issue.  The JOSDK mitigates this in a couple of ways - for one all updates / deletes are locked with respect to the resourceVersion.  So it's quite possible for the api server to throw a conflict error when there's been a change that has not yet been picked up by the informer watch - that is part of the motivation for refining the status handling so that the likely very ephemeral error doesn't seem worse than it is.  We could do that check here instead - if the resourceVersion is set on the existing (which is should be except for some of the tests) then issue a delete locked to that version.  I guess I thought that it would be clearer doing another fetch, but I'll change it do a locked operation instead.Another mechanism in the JOSDK is that your own changes to the resource are tracked in another cache beside the informer cache, so as long as it's you making the changes you don't have to react to your own events.  In the case of a statefulset it can of course have other modifications from the statefulset controller.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21202,1245064406,2023-06-28T11:17:26Z,js/apps/admin-ui/src/clients/advanced/AdvancedSettings.tsx,"@@ -160,6 +160,35 @@ export const AdvancedSettings = ({               )}             />           </FormGroup>+          <FormGroup",Should we be hiding this field based on whether the `DPOP` profile is enabled? We have this information in the environment variable injected to the front-end.,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20906,1245146079,2023-06-28T12:38:12Z,docs/documentation/release_notes/topics/22_0_0.adoc,"@@ -115,3 +115,7 @@ q=<name>:<value> <name>:<value> ... ```  Where `<name>` and `<value>` represent the attribute name and value, respectively.++= Multiple Keycloak instances++Multiple Keycloak CRs may be created in the same namespace and will be managed independently by the operator.  To allow for this StatefulSets created by older versions of the operator must be re-created.  This will happen automatically when the operator is upgraded and lead to small amount of downtime.",I'd probably move the whole thing to the migration guide. It's not so big change for it to be in the release notes (it'll get there in any case as part of the list of fixed GH Issues).,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21078,1245349054,2023-06-28T14:47:47Z,operator/pom.xml,"@@ -22,7 +22,6 @@             for reference         -->         <wildfly.common.version>1.5.4.Final-format-001</wildfly.common.version>","It does ring a bell. We're [overriding the version in the root POM](https://github.com/keycloak/keycloak/blob/56db0de705f21f71690f915eb42905a1c56c40d4/pom.xml#L134) to something that's incompatible with Quarkus. We should remove all the overrides we don't need, see my comment below.",x
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/21078,1245810799,2023-06-28T21:59:09Z,operator/pom.xml,"@@ -22,7 +22,6 @@             for reference         -->         <wildfly.common.version>1.5.4.Final-format-001</wildfly.common.version>","I resolved it for now. The question is though, what should we do in case that the provided version from the platform BOM is currently older than the one we currently use in the project?Speaking about WF common, the difference is 1.6.0 compared to 1.5.4 (provided by the BOM). As it can be seen in my latest commit, I approached it by removing the dependency override from the parent POM and then I overrode the dependency version on [the submodule level](https://github.com/keycloak/keycloak/pull/21078/commits/70b8de501ada87643769936decd1ff5b232e4c09#diff-72a5501eba8ba8780edffc8aada475d52ebeeca37d439b36dd91612c017d40b0R35). Is this the desired approach?",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/21202,1245954299,2023-06-29T00:31:16Z,js/apps/admin-ui/src/clients/advanced/AdvancedSettings.tsx,"@@ -160,6 +160,35 @@ export const AdvancedSettings = ({               )}             />           </FormGroup>+          <FormGroup","Yes, we should hide the field about DPoP if DPoP profile is disabled. I will investigate into how to do it.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21302,1246227209,2023-06-29T07:26:13Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/BaseOperatorTest.java,"@@ -68,7 +68,7 @@ public abstract class BaseOperatorTest {   public static final String TEST_RESULTS_DIR = ""target/operator-test-results/"";   public static final String POD_LOGS_DIR = TEST_RESULTS_DIR + ""pod-logs/""; -  public enum OperatorDeployment {local,remote}+  public enum OperatorDeployment {local,remote,none}","From my perspective, not deploying the Operator in an integration test is rather a special case than a regular `OperatorDeployment` type.I would not probably go this way of introducing the `none` deployment type as it doesn't make sense for any of the integration tests but one. Thinking a bit more about this, isn't the `CRDTest` just a special case of a unit test? Downside is we'd need to instantiate the k8s client and apply CRDs and perform some cleanup after the test which we don't have a logic for there.Another (a bit stupidly simple :)) alternative would be creating some `deployOperator` switch (either just a field in `BaseOperatorTest` or an annotation or something) to enable individual integration tests to skip the operator deployment/creation.WDYT?",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20669,1246240911,2023-06-29T07:38:41Z,services/pom.xml,"@@ -201,6 +197,11 @@             <groupId>com.github.ua-parser</groupId>             <artifactId>uap-java</artifactId>         </dependency>+        <dependency>+            <groupId>org.eclipse.microprofile.openapi</groupId>+            <artifactId>microprofile-openapi-api</artifactId>+            <version>3.1</version>","Minor: the version should be probably specified in the `dependencies-management` in the project root `pom.xml` file. Then it can be ommited here. That's the convention, which we have in Keycloak AFAIK and it helps to avoid different Keycloak components using different versions on various places (Sometimes it is needed, but usually it is desired to use the same version everywhere).Same likely applies for the plugin versions too (The `pluginManagement` section in the parent pom.xml)",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/21160,1246318664,2023-06-29T08:42:57Z,model/infinispan/src/main/java/org/keycloak/keys/infinispan/InfinispanPublicKeyStorageProvider.java,"@@ -124,22 +124,23 @@ public KeyWrapper getFirstPublicKey(String modelKey, String algorithm, PublicKey      @Override     public KeyWrapper getPublicKey(String modelKey, String kid, String algorithm, PublicKeyLoader loader) {-        // Check if key is in cache         PublicKeysEntry entry = keys.get(modelKey);-        if (entry != null) {+        int lastRequestTime = entry==null ? 0 : entry.getLastRequestTime();+        int currentTime = Time.currentTime();+        boolean isKeyCacheStale = currentTime > lastRequestTime + minTimeBetweenRequests;",Minor: Maybe this boolean variable can be renamed to `isSendingRequestAllowed` ? As the cache entry is technically not stale?,x
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/21302,1246341313,2023-06-29T08:59:44Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/BaseOperatorTest.java,"@@ -68,7 +68,7 @@ public abstract class BaseOperatorTest {   public static final String TEST_RESULTS_DIR = ""target/operator-test-results/"";   public static final String POD_LOGS_DIR = TEST_RESULTS_DIR + ""pod-logs/""; -  public enum OperatorDeployment {local,remote}+  public enum OperatorDeployment {local,remote,none}","> Thinking a bit more about this, isn't the CRDTest just a special case of a unit test?It's still an integration test in that we need the full k8 support.  There may eventually be a drop in replacement for the fabric8 client crud mock based upon a partial kube or k3s replacement that could fill this niche more directly.> Downside is we'd need to instantiate the k8s client and apply CRDs and perform some cleanup after the test which we don't have a logic for there.This logic already exists in fabric8 via the KubernetesTest annotation.  However because of the Log usage in the BaseOperatorTest, calls like createCRDs can't be made unless it's also annotated as a QuarkusTest, which appearently doesn't play well with any other non-quarkus test extensions.  An alternative is to either duplicate crd creation method or remove the Log statements, let me see what you think of that. ",
5391360,hmlnarik,https://api.github.com/repos/keycloak/keycloak/pulls/20871,1246517752,2023-06-29T11:54:25Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/TransactionalResponseInterceptor.java,"@@ -34,13 +35,21 @@ @ConstrainedTo(RuntimeType.SERVER) @Priority(10000) public class TransactionalResponseInterceptor implements WriterInterceptor, TransactionalSessionHandler {+     @Override-    public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {+    public void aroundWriteTo(WriterInterceptorContext context) {         KeycloakSession session = Resteasy.getContextData(KeycloakSession.class);+        OutputStream outputStream = context.getOutputStream(); -        try {+        // see https://github.com/keycloak/keycloak/issues/20451+        try (ByteArrayOutputStream buffer = new ByteArrayOutputStream(8192)) {+            context.setOutputStream(buffer);             context.proceed();+            outputStream.write(buffer.toByteArray());","Materializing the response in memory increases the memory footprint for all the responses. To conserve memory, the output stream should rather be kept, perhaps with some reasonable buffer that would be cleared up if an exception is thrown.",
4944041,jsorah,https://api.github.com/repos/keycloak/keycloak/pulls/20669,1246533439,2023-06-29T12:09:32Z,services/pom.xml,"@@ -201,6 +197,11 @@             <groupId>com.github.ua-parser</groupId>             <artifactId>uap-java</artifactId>         </dependency>+        <dependency>+            <groupId>org.eclipse.microprofile.openapi</groupId>+            <artifactId>microprofile-openapi-api</artifactId>+            <version>3.1</version>","I've updated the dependency management config in the `pom.xml`, `rest/admin-ui-ext/pom.xml` and `services/pom.xml` so they should all be in sync now.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/21313,1246577981,2023-06-29T12:51:01Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/TransactionalResponseInterceptor.java,"@@ -34,12 +36,18 @@ @ConstrainedTo(RuntimeType.SERVER) @Priority(10000) public class TransactionalResponseInterceptor implements WriterInterceptor, TransactionalSessionHandler {+     @Override-    public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {+    public void aroundWriteTo(WriterInterceptorContext context) {         KeycloakSession session = Resteasy.getContextData(KeycloakSession.class);+        OutputStream outputStream = context.getOutputStream(); +        // see https://github.com/keycloak/keycloak/issues/20451         try {+            context.setOutputStream(new BufferedOutputStream(outputStream, 8192));",This won't work if the amount of bytes written by the interceptor chain reaches the buffer limit. The buffer will be flushed and you will still face the same problem.That is why I ended up not wrapping the original output stream,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/8851,1246726648,2023-06-29T14:46:27Z,services/src/main/java/org/keycloak/services/resources/admin/AdminConsole.java,"@@ -254,11 +259,13 @@ private void addRealmAccess(RealmModel realm, UserModel user, Map<String, Set<St         getRealmAdminAccess(realm, realmAdminApp, user, realmAdminAccess);     } -    private void addMasterRealmAccess(UserModel user, Map<String, Set<String>> realmAdminAccess) {-        session.realms().getRealmsStream().forEach(realm -> {-            ClientModel realmAdminApp = realm.getMasterAdminClient();-            getRealmAdminAccess(realm, realmAdminApp, user, realmAdminAccess);-        });+    private void addMasterRealmAccess(UserModel user, String realmName, Map<String, Set<String>> realmAdminAccess) {+        session.realms().getRealmsStream()+            .filter(r -> realmName == null || realmName.equals(r.getName()))+            .forEach(realm -> {+                ClientModel realmAdminApp = realm.getMasterAdminClient();+                getRealmAdminAccess(realm, realmAdminApp, user, realmAdminAccess);+            });","Why list/filter and not just grab the realm by name? Something like this:```suggestion        RealmModel realm = session.realms().getRealmByName(realmName);        getRealmAdminAccess(realm, realmAdminApp, user, realmAdminAccess);```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247007406,2023-06-29T19:10:42Z,docs/documentation/securing_apps/topics/oidc/available-endpoints.adoc,"@@ -0,0 +1,120 @@+=== Available Endpoints++As a fully-compliant OpenID Connect Provider implementation, {project_name} exposes a set of endpoints that applications+and services can use to authenticate and authorize their users.++In this section you are going to understand some of the key endpoints your application and service should be using when+interacting with {project_name}.++==== Endpoints++The most important endpoint to understand is the `well-known` configuration endpoint. It lists endpoints and other configuration options relevant to the OpenID Connect implementation in {project_name}. The endpoint is:++....+/realms/{realm-name}/.well-known/openid-configuration+....++To obtain the full URL, add the base URL for {project_name} and replace `{realm-name}` with the name of your realm. For example:++\http://localhost:8080{kc_realms_path}/master/.well-known/openid-configuration++Some RP libraries retrieve all required endpoints from this endpoint, but for others you might need to list the endpoints individually.++===== Authorization endpoint+....+/realms/{realm-name}/protocol/openid-connect/auth+....++The authorization endpoint performs authentication of the end-user. This is done by redirecting the user agent to this endpoint.++For more details see the https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint[Authorization Endpoint] section in the OpenID Connect specification.++===== Token endpoint+....+/realms/{realm-name}/protocol/openid-connect/token+....++The token endpoint is used to obtain tokens. Tokens can either be obtained by exchanging an authorization code or by supplying credentials directly depending on what flow is used.+The token endpoint is also used to obtain new access tokens when they expire.++For more details see the https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint[Token Endpoint] section in the OpenID Connect specification.++===== Userinfo endpoint+....+/realms/{realm-name}/protocol/openid-connect/userinfo+....++The userinfo endpoint returns standard claims about the authenticated user, and is protected by a bearer token.++For more details see the https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[Userinfo Endpoint] section in the OpenID Connect specification.++===== Logout endpoint+....+/realms/{realm-name}/protocol/openid-connect/logout+....++The logout endpoint logs out the authenticated user.++The user agent can be redirected to the endpoint, in which case the active user session is logged out. Afterward the user agent is redirected back to the application.++The endpoint can also be invoked directly by the application. To invoke this endpoint directly the refresh token needs to be included as well as the credentials required to authenticate the client.++[[_certificate_endpoint]]+===== Certificate endpoint+....+/realms/{realm-name}/protocol/openid-connect/certs+....++The certificate endpoint returns the public keys enabled by the realm, encoded as a JSON Web Key (JWK). Depending on the realm settings there can be one or more keys enabled for verifying tokens. For more information see the link:{adminguide_link}[{adminguide_name}] and the https://datatracker.ietf.org/doc/html/rfc7517[JSON Web Key specification].+","```suggestionThe certificate endpoint returns the public keys enabled by the realm, encoded as a JSON Web Key (JWK). Depending on the realm settings, one or more keys can be enabled for verifying tokens. For more information, see the link:{adminguide_link}[{adminguide_name}] and the https://datatracker.ietf.org/doc/html/rfc7517[JSON Web Key specification].```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247010303,2023-06-29T19:14:11Z,docs/documentation/securing_apps/topics/oidc/java/java-adapters.adoc,"@@ -1,13 +1,46 @@-=== Java adapters+=== {project_name} Java adapters++[WARNING]+====+{project_name} Java Adapters are now in End-Of-Life (EOL), and it is no longer supported nor receiving security updates.",```suggestion{project_name} Java Adapters are now in End-Of-Life (EOL) status. They are no longer supported nor receiving security updates.```,x
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247011718,2023-06-29T19:15:43Z,docs/documentation/securing_apps/topics/oidc/java/jboss-adapter.adoc,"@@ -18,9 +18,19 @@ endif::[]  ifeval::[{project_community}==true] -WARNING: We do not regularly test and maintain WildFly/EAP adapters. They may work only with WildFly version 23 or earlier or with JBoss EAP 7. Also note-that they may work only with JEE applications, but not with Jakarta applications. We recommend that you switch to Elytron OIDC Java adapter to-secure your applications. This adapter has a similar configuration to Keycloak Java adapters and migrating your applications to it should be smooth.+[WARNING]+====+This adapter is now in End-Of-Life (EOL), and it is no longer supported nor receiving security updates. It will be removed in future releases.++We recommend that you switch to Elytron OIDC Java adapter to secure your applications.+This adapter has a similar configuration to Keycloak Java adapters and migrating your applications to it should be smooth.","```suggestionWe recommend that you switch to the Elytron OIDC Java adapter to secure your applications.This adapter has a similar configuration to Keycloak Java adapters, so you can expect a smooth migration of your applications.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247019289,2023-06-29T19:23:51Z,docs/documentation/securing_apps/topics/oidc/recommendations.adoc,"@@ -0,0 +1,39 @@+=== Recommendations++This section describes some recommendations when security your applications with {project_name}.++==== Validating access tokens++If you need to manually validate access tokens issued by {project_name} you can invoke the <<_token_introspection_endpoint,Introspection Endpoint>>.+The downside to this approach is that you have to make a network invocation to the {project_name} server.  This can be slow and possibly overload the+server if you have too many validation requests going on at the same time.  {project_name} issued access tokens are https://datatracker.ietf.org/doc/html/rfc7519[JSON Web Tokens (JWT)] digitally signed and encoded using https://datatracker.ietf.org/doc/html/rfc7515[JSON Web Signature (JWS)].+Because they are encoded in this way, this allows you to locally validate access tokens using the public key of the issuing realm.  You can either hard code the+realm's public key in your validation code, or lookup and cache the public key using the <<_certificate_endpoint, certificate endpoint>> with the Key ID (KID) embedded within the+JWS.  Depending on what language you code in, there are a multitude of third party libraries out there that can help you with JWS validation.++==== Redirect URIs++When using the redirect based flows it's important to use valid redirect uris for your clients. The redirect uris should be as specific as possible. This+especially applies to client-side (public clients) applications. Failing to do so could result in:++* Open redirects - this can allow attackers to create spoof links that looks like they are coming from your domain+* Unauthorized entry - when users are already authenticated with {project_name} an attacker can use a public client where redirect uris have not be configured correctly to gain access by redirecting the user without the users knowledge++In production for web applications always use `https` for all redirect URIs. Do not allow redirects to http.++There's also a few special redirect URIs:++[[_installed_applications_url]]+`$$http://127.0.0.1$$`::++  This redirect URI is useful for native applications and allows the native application to create a web server on a random port that can be used to obtain the+  authorization code. This redirect uri allows any port. Note that per https://datatracker.ietf.org/doc/html/rfc8252#section-8.3[OAuth 2.0 for Native Apps] the use of","```suggestion  authorization code. This redirect uri allows any port. Note that per https://datatracker.ietf.org/doc/html/rfc8252#section-8.3[OAuth 2.0 for Native Apps], the use of```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247022566,2023-06-29T19:27:40Z,docs/documentation/securing_apps/topics/oidc/supported-grant-types.adoc,"@@ -0,0 +1,105 @@+=== Supported Grant Types++This section describes the different grant types available to relaying parties.++==== Authorization code++The Authorization Code flow redirects the user agent to {project_name}. Once the user has successfully authenticated with {project_name} an+Authorization Code is created and the user agent is redirected back to the application. The application then uses the authorization code along with its+credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.++The flow is targeted towards web applications, but is also recommended for native applications, including mobile applications, where it is possible to embed+a user agent.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code Flow] in the OpenID Connect specification.++==== Implicit++The Implicit flow redirects works similarly to the Authorization Code flow, but instead of returning an Authorization Code the Access Token and ID Token is","```suggestionThe Implicit flow works similarly to the Authorization Code flow, but instead of returning an Authorization Code, the Access Token and ID Token is```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247025998,2023-06-29T19:31:42Z,docs/documentation/securing_apps/topics/oidc/supported-grant-types.adoc,"@@ -0,0 +1,105 @@+=== Supported Grant Types++This section describes the different grant types available to relaying parties.++==== Authorization code++The Authorization Code flow redirects the user agent to {project_name}. Once the user has successfully authenticated with {project_name} an+Authorization Code is created and the user agent is redirected back to the application. The application then uses the authorization code along with its+credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.++The flow is targeted towards web applications, but is also recommended for native applications, including mobile applications, where it is possible to embed+a user agent.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code Flow] in the OpenID Connect specification.++==== Implicit++The Implicit flow redirects works similarly to the Authorization Code flow, but instead of returning an Authorization Code the Access Token and ID Token is+returned. This reduces the need for the extra invocation to exchange the Authorization Code for an Access Token. However, it does not include a Refresh+Token. This results in the need to either permit Access Tokens with a long expiration, which is problematic as it's very hard to invalidate these. Or+requires a new redirect to obtain new Access Token once the initial Access Token has expired. The Implicit flow is useful if the application only wants to+authenticate the user and deals with logout itself.","```suggestionToken. This results in the need to permit Access Tokens with a long expiration; however, that approach is not practical because it is very hard to invalidate these tokens. Alternatively, you can require a new redirect to obtain a new Access Token once the initial Access Token has expired. The Implicit flow is useful if the application only wants toauthenticate the user and deals with logout itself.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247031013,2023-06-29T19:37:44Z,docs/documentation/securing_apps/topics/oidc/supported-grant-types.adoc,"@@ -0,0 +1,105 @@+=== Supported Grant Types++This section describes the different grant types available to relaying parties.++==== Authorization code++The Authorization Code flow redirects the user agent to {project_name}. Once the user has successfully authenticated with {project_name} an+Authorization Code is created and the user agent is redirected back to the application. The application then uses the authorization code along with its+credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.++The flow is targeted towards web applications, but is also recommended for native applications, including mobile applications, where it is possible to embed+a user agent.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code Flow] in the OpenID Connect specification.++==== Implicit++The Implicit flow redirects works similarly to the Authorization Code flow, but instead of returning an Authorization Code the Access Token and ID Token is+returned. This reduces the need for the extra invocation to exchange the Authorization Code for an Access Token. However, it does not include a Refresh+Token. This results in the need to either permit Access Tokens with a long expiration, which is problematic as it's very hard to invalidate these. Or+requires a new redirect to obtain new Access Token once the initial Access Token has expired. The Implicit flow is useful if the application only wants to+authenticate the user and deals with logout itself.++There's also a Hybrid flow where both the Access Token and an Authorization Code is returned.++One thing to note is that both the Implicit flow and Hybrid flow has potential security risks as the Access Token may be leaked through web server logs and+browser history. This is somewhat mitigated by using short expiration for Access Tokens.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth[Implicit Flow] in the OpenID Connect specification.++[[_resource_owner_password_credentials_flow]]+==== Resource Owner Password Credentials++Resource Owner Password Credentials, referred to as Direct Grant in {project_name}, allows exchanging user credentials for tokens. It's not recommended+to use this flow unless you absolutely need to. Examples where this could be useful are legacy applications and command-line interfaces.++There are a number of limitations of using this flow, including:++* User credentials are exposed to the application+* Applications need login pages+* Application needs to be aware of the authentication scheme+* Changes to authentication flow requires changes to application+* No support for identity brokering or social login+* Flows are not supported (user self-registration, required actions, etc.)++For a client to be permitted to use the Resource Owner Password Credentials grant the client has to have the `Direct Access Grants Enabled` option enabled.++This flow is not included in OpenID Connect, but is a part of the OAuth 2.0 specification.++For more details refer to the https://datatracker.ietf.org/doc/html/rfc6749#section-4.3[Resource Owner Password Credentials Grant] chapter in the OAuth 2.0 specification.","```suggestionFor more details, see the https://datatracker.ietf.org/doc/html/rfc6749#section-4.3[Resource Owner Password Credentials Grant] chapter in the OAuth 2.0 specification.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247033056,2023-06-29T19:40:13Z,docs/documentation/securing_apps/topics/oidc/supported-grant-types.adoc,"@@ -0,0 +1,105 @@+=== Supported Grant Types++This section describes the different grant types available to relaying parties.++==== Authorization code++The Authorization Code flow redirects the user agent to {project_name}. Once the user has successfully authenticated with {project_name} an+Authorization Code is created and the user agent is redirected back to the application. The application then uses the authorization code along with its+credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.++The flow is targeted towards web applications, but is also recommended for native applications, including mobile applications, where it is possible to embed+a user agent.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code Flow] in the OpenID Connect specification.++==== Implicit++The Implicit flow redirects works similarly to the Authorization Code flow, but instead of returning an Authorization Code the Access Token and ID Token is+returned. This reduces the need for the extra invocation to exchange the Authorization Code for an Access Token. However, it does not include a Refresh+Token. This results in the need to either permit Access Tokens with a long expiration, which is problematic as it's very hard to invalidate these. Or+requires a new redirect to obtain new Access Token once the initial Access Token has expired. The Implicit flow is useful if the application only wants to+authenticate the user and deals with logout itself.++There's also a Hybrid flow where both the Access Token and an Authorization Code is returned.++One thing to note is that both the Implicit flow and Hybrid flow has potential security risks as the Access Token may be leaked through web server logs and+browser history. This is somewhat mitigated by using short expiration for Access Tokens.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth[Implicit Flow] in the OpenID Connect specification.++[[_resource_owner_password_credentials_flow]]+==== Resource Owner Password Credentials++Resource Owner Password Credentials, referred to as Direct Grant in {project_name}, allows exchanging user credentials for tokens. It's not recommended+to use this flow unless you absolutely need to. Examples where this could be useful are legacy applications and command-line interfaces.++There are a number of limitations of using this flow, including:++* User credentials are exposed to the application+* Applications need login pages+* Application needs to be aware of the authentication scheme+* Changes to authentication flow requires changes to application+* No support for identity brokering or social login+* Flows are not supported (user self-registration, required actions, etc.)++For a client to be permitted to use the Resource Owner Password Credentials grant the client has to have the `Direct Access Grants Enabled` option enabled.++This flow is not included in OpenID Connect, but is a part of the OAuth 2.0 specification.++For more details refer to the https://datatracker.ietf.org/doc/html/rfc6749#section-4.3[Resource Owner Password Credentials Grant] chapter in the OAuth 2.0 specification.++===== Example using CURL++The following example shows how to obtain an access token for a user in the realm `master` with username `user` and password `password`. The example is using+the confidential client `myclient`:++[source,bash,subs=""attributes+""]+----+curl \+  -d ""client_id=myclient"" \+  -d ""client_secret=40cc097b-2a57-4c17-b36a-8fdf3fc2d578"" \+  -d ""username=user"" \+  -d ""password=password"" \+  -d ""grant_type=password"" \+  ""http://localhost:8080{kc_realms_path}/master/protocol/openid-connect/token""+----++==== Client credentials++Client Credentials is used when clients (applications and services) wants to obtain access on behalf of themselves rather than on behalf of a user. This can+for example be useful for background services that applies changes to the system in general rather than for a specific user.++{project_name} provides support for clients to authenticate either with a secret or with public/private keys.++This flow is not included in OpenID Connect, but is a part of the OAuth 2.0 specification.++For more details refer to the https://datatracker.ietf.org/doc/html/rfc6749#section-4.4[Client Credentials Grant] chapter in the OAuth 2.0 specification.","```suggestionFor more details, see the https://datatracker.ietf.org/doc/html/rfc6749#section-4.4[Client Credentials Grant] chapter in the OAuth 2.0 specification.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247034835,2023-06-29T19:42:23Z,docs/documentation/securing_apps/topics/oidc/supported-grant-types.adoc,"@@ -0,0 +1,105 @@+=== Supported Grant Types++This section describes the different grant types available to relaying parties.++==== Authorization code++The Authorization Code flow redirects the user agent to {project_name}. Once the user has successfully authenticated with {project_name} an+Authorization Code is created and the user agent is redirected back to the application. The application then uses the authorization code along with its+credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.++The flow is targeted towards web applications, but is also recommended for native applications, including mobile applications, where it is possible to embed+a user agent.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code Flow] in the OpenID Connect specification.++==== Implicit++The Implicit flow redirects works similarly to the Authorization Code flow, but instead of returning an Authorization Code the Access Token and ID Token is+returned. This reduces the need for the extra invocation to exchange the Authorization Code for an Access Token. However, it does not include a Refresh+Token. This results in the need to either permit Access Tokens with a long expiration, which is problematic as it's very hard to invalidate these. Or+requires a new redirect to obtain new Access Token once the initial Access Token has expired. The Implicit flow is useful if the application only wants to+authenticate the user and deals with logout itself.++There's also a Hybrid flow where both the Access Token and an Authorization Code is returned.++One thing to note is that both the Implicit flow and Hybrid flow has potential security risks as the Access Token may be leaked through web server logs and+browser history. This is somewhat mitigated by using short expiration for Access Tokens.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth[Implicit Flow] in the OpenID Connect specification.++[[_resource_owner_password_credentials_flow]]+==== Resource Owner Password Credentials++Resource Owner Password Credentials, referred to as Direct Grant in {project_name}, allows exchanging user credentials for tokens. It's not recommended+to use this flow unless you absolutely need to. Examples where this could be useful are legacy applications and command-line interfaces.++There are a number of limitations of using this flow, including:++* User credentials are exposed to the application+* Applications need login pages+* Application needs to be aware of the authentication scheme+* Changes to authentication flow requires changes to application+* No support for identity brokering or social login+* Flows are not supported (user self-registration, required actions, etc.)++For a client to be permitted to use the Resource Owner Password Credentials grant the client has to have the `Direct Access Grants Enabled` option enabled.++This flow is not included in OpenID Connect, but is a part of the OAuth 2.0 specification.++For more details refer to the https://datatracker.ietf.org/doc/html/rfc6749#section-4.3[Resource Owner Password Credentials Grant] chapter in the OAuth 2.0 specification.++===== Example using CURL++The following example shows how to obtain an access token for a user in the realm `master` with username `user` and password `password`. The example is using+the confidential client `myclient`:++[source,bash,subs=""attributes+""]+----+curl \+  -d ""client_id=myclient"" \+  -d ""client_secret=40cc097b-2a57-4c17-b36a-8fdf3fc2d578"" \+  -d ""username=user"" \+  -d ""password=password"" \+  -d ""grant_type=password"" \+  ""http://localhost:8080{kc_realms_path}/master/protocol/openid-connect/token""+----++==== Client credentials++Client Credentials is used when clients (applications and services) wants to obtain access on behalf of themselves rather than on behalf of a user. This can+for example be useful for background services that applies changes to the system in general rather than for a specific user.++{project_name} provides support for clients to authenticate either with a secret or with public/private keys.++This flow is not included in OpenID Connect, but is a part of the OAuth 2.0 specification.++For more details refer to the https://datatracker.ietf.org/doc/html/rfc6749#section-4.4[Client Credentials Grant] chapter in the OAuth 2.0 specification.++==== Device Authorization Grant++Device Authorization Grant is used by clients running on internet-connected devices that have limited input capabilities or lack a suitable browser.+The application requests {project_name} a device code and a user code. {project_name} creates a device code and a user code. +{project_name} returns a response including the device code and the user code to the application. +Then the application provides the user with the user code and the verification URI. The user accesses a verification URI to be authenticated by using another browser. +The application repeatedly polls {project_name} until {project_name} completes the user authorization. +If user authentication is complete, the application obtains the device code. Then the application uses the device code along with its credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.","```suggestion. The application requests {project_name} a device code and a user code. . {project_name} creates a device code and a user code. . {project_name} returns a response including the device code and the user code to the application. . The application provides the user with the user code and the verification URI. The user accesses a verification URI to be authenticated by using another browser. . The application repeatedly polls {project_name} until {project_name} completes the user authorization. . If user authentication is complete, the application obtains the device code. . The application uses the device code along with its credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1247053319,2023-06-29T19:44:54Z,docs/documentation/securing_apps/topics/oidc/supported-grant-types.adoc,"@@ -0,0 +1,105 @@+=== Supported Grant Types++This section describes the different grant types available to relaying parties.++==== Authorization code++The Authorization Code flow redirects the user agent to {project_name}. Once the user has successfully authenticated with {project_name} an+Authorization Code is created and the user agent is redirected back to the application. The application then uses the authorization code along with its+credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.++The flow is targeted towards web applications, but is also recommended for native applications, including mobile applications, where it is possible to embed+a user agent.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code Flow] in the OpenID Connect specification.++==== Implicit++The Implicit flow redirects works similarly to the Authorization Code flow, but instead of returning an Authorization Code the Access Token and ID Token is+returned. This reduces the need for the extra invocation to exchange the Authorization Code for an Access Token. However, it does not include a Refresh+Token. This results in the need to either permit Access Tokens with a long expiration, which is problematic as it's very hard to invalidate these. Or+requires a new redirect to obtain new Access Token once the initial Access Token has expired. The Implicit flow is useful if the application only wants to+authenticate the user and deals with logout itself.++There's also a Hybrid flow where both the Access Token and an Authorization Code is returned.++One thing to note is that both the Implicit flow and Hybrid flow has potential security risks as the Access Token may be leaked through web server logs and+browser history. This is somewhat mitigated by using short expiration for Access Tokens.++For more details refer to the https://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth[Implicit Flow] in the OpenID Connect specification.++[[_resource_owner_password_credentials_flow]]+==== Resource Owner Password Credentials++Resource Owner Password Credentials, referred to as Direct Grant in {project_name}, allows exchanging user credentials for tokens. It's not recommended+to use this flow unless you absolutely need to. Examples where this could be useful are legacy applications and command-line interfaces.++There are a number of limitations of using this flow, including:++* User credentials are exposed to the application+* Applications need login pages+* Application needs to be aware of the authentication scheme+* Changes to authentication flow requires changes to application+* No support for identity brokering or social login+* Flows are not supported (user self-registration, required actions, etc.)++For a client to be permitted to use the Resource Owner Password Credentials grant the client has to have the `Direct Access Grants Enabled` option enabled.++This flow is not included in OpenID Connect, but is a part of the OAuth 2.0 specification.++For more details refer to the https://datatracker.ietf.org/doc/html/rfc6749#section-4.3[Resource Owner Password Credentials Grant] chapter in the OAuth 2.0 specification.++===== Example using CURL++The following example shows how to obtain an access token for a user in the realm `master` with username `user` and password `password`. The example is using+the confidential client `myclient`:++[source,bash,subs=""attributes+""]+----+curl \+  -d ""client_id=myclient"" \+  -d ""client_secret=40cc097b-2a57-4c17-b36a-8fdf3fc2d578"" \+  -d ""username=user"" \+  -d ""password=password"" \+  -d ""grant_type=password"" \+  ""http://localhost:8080{kc_realms_path}/master/protocol/openid-connect/token""+----++==== Client credentials++Client Credentials is used when clients (applications and services) wants to obtain access on behalf of themselves rather than on behalf of a user. This can+for example be useful for background services that applies changes to the system in general rather than for a specific user.++{project_name} provides support for clients to authenticate either with a secret or with public/private keys.++This flow is not included in OpenID Connect, but is a part of the OAuth 2.0 specification.++For more details refer to the https://datatracker.ietf.org/doc/html/rfc6749#section-4.4[Client Credentials Grant] chapter in the OAuth 2.0 specification.++==== Device Authorization Grant++Device Authorization Grant is used by clients running on internet-connected devices that have limited input capabilities or lack a suitable browser.+The application requests {project_name} a device code and a user code. {project_name} creates a device code and a user code. +{project_name} returns a response including the device code and the user code to the application. +Then the application provides the user with the user code and the verification URI. The user accesses a verification URI to be authenticated by using another browser. +The application repeatedly polls {project_name} until {project_name} completes the user authorization. +If user authentication is complete, the application obtains the device code. Then the application uses the device code along with its credentials to obtain an Access Token, Refresh Token and ID Token from {project_name}.++For more details refer to the https://datatracker.ietf.org/doc/html/rfc8628[OAuth 2.0 Device Authorization Grant specification].","```suggestionFor more details, see  the https://datatracker.ietf.org/doc/html/rfc8628[OAuth 2.0 Device Authorization Grant specification].```",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/20621,1247497060,2023-06-30T06:44:53Z,docs/documentation/upgrading/topics/keycloak/changes-22_0_0.adoc,"@@ -357,4 +357,18 @@ Multiple Keycloak CRs may be created in the same namespace and will be managed i  = k8s.keycloak.org/v2alpha1 changes -The condition status field was changed from a boolean to a string for conformance with standard Kubernetes conditions. In the CRD it will temporarily be represented as accepting any content, but it will only ever be a string.  Please make sure any of your usage of this field is updated to expect the values ""True"", ""False"", or ""Unknown"", rather than true or false.\ No newline at end of file+The condition status field was changed from a boolean to a string for conformance with standard Kubernetes conditions. In the CRD it will temporarily be represented as accepting any content, but it will only ever be a string.  Please make sure any of your usage of this field is updated to expect the values ""True"", ""False"", or ""Unknown"", rather than true or false.++= Added iss parameter to OAuth 2.0/OpenID Connect Authentication Response++RFC 9207 OAuth 2.0 Authorization Server Issuer Identification specification addes the parameter `iss` in the OAuth 2.0/OpenID Connect Authentication Response for realizing secure authorization responses.","```suggestionRFC 9207 OAuth 2.0 Authorization Server Issuer Identification specification adds the parameter `iss` in the OAuth 2.0/OpenID Connect Authentication Response for realizing secure authorization responses.```Small typo in word `addes` (However I am also requesting review from our documentation guy @andymunro, who can do much better check of the documentation wording than myself)",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21339,1247924263,2023-06-30T14:20:37Z,js/apps/account-ui/src/resources/ResourcesTab.tsx,"@@ -174,7 +185,7 @@ export const ResourcesTab = () => {                 </a>               </Td>               <Td dataLabel={t(""permissionRequests"")}>-                {resource.shareRequests.length > 0 && (+                {(resource.shareRequests?.length || 0) > 0 && (","I'd prefer this condition terminates, rather than falling back. But this is a personal preference.```suggestion                {resource.shareRequests && resource.shareRequests.length > 0 && (```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21340,1248020425,2023-06-30T15:50:09Z,docs/guides/server/outgoinghttp.adoc,"@@ -123,4 +123,20 @@ In this example, the following occurs: See <@links.server id=""keycloak-truststore""/> for how to configure a Keycloak Truststore so that Keycloak is able to perform outgoing requests using TLS. +== Configure Keycloak Server with IPv4 or IPv6","I believe this PR does not affect outgoing HTTP requests, it's only related to the addresses Keycloak listens on.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21340,1248024159,2023-06-30T15:54:04Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/IpStackDistTest.java,"@@ -0,0 +1,71 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ *  and other contributors as indicated by the @author tags.+ *+ *  Licensed under the Apache License, Version 2.0 (the ""License"");+ *  you may not use this file except in compliance with the License.+ *  You may obtain a copy of the License at+ *+ *  http://www.apache.org/licenses/LICENSE-2.0+ *+ *  Unless required by applicable law or agreed to in writing, software+ *  distributed under the License is distributed on an ""AS IS"" BASIS,+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ *+ *  See the License for the specific language governing permissions and+ *  limitations under the License.+ *+ */+package org.keycloak.it.cli.dist;++import io.quarkus.test.junit.main.Launch;+import org.apache.http.client.methods.HttpGet;+import org.apache.http.conn.HttpHostConnectException;+import org.apache.http.impl.client.CloseableHttpClient;+import org.apache.http.impl.client.HttpClientBuilder;+import org.junit.jupiter.api.Assertions;+import org.junit.jupiter.api.Test;+import org.keycloak.it.junit5.extension.DistributionTest;+import org.keycloak.it.junit5.extension.RawDistOnly;++import java.io.Closeable;+import java.io.IOException;+import java.net.ConnectException;++import static io.restassured.RestAssured.given;+import static org.hamcrest.CoreMatchers.is;+import static org.hamcrest.MatcherAssert.assertThat;++@DistributionTest(keepAlive = true, defaultOptions = {""--http-enabled=true"", ""--hostname-strict=false""})+@RawDistOnly(reason = ""Containers are immutable"")+public class IpStackDistTest {++    @Test+    @Launch({""start""})+    public void dualStackEnabled() {+        assertThat(given().when().get(""http://localhost:8080"").getStatusCode(), is(200));+        assertThat(given().when().get(""http://127.0.0.1:8080"").getStatusCode(), is(200));+        assertThat(given().when().get(""http://[::1]:8080"").getStatusCode(), is(200));+    }++    @Test+    @Launch({""start"", ""-Djava.net.preferIPv4Stack=true""})+    public void ipv4Preferred() throws IOException {+        assertThat(given().when().get(""http://localhost:8080"").getStatusCode(), is(200));+        assertThat(given().when().get(""http://127.0.0.1:8080"").getStatusCode(), is(200));++        try (CloseableHttpClient c = HttpClientBuilder.create().build(); Closeable ignore = c.execute(new HttpGet(""http://[::1]:8080""))) {+            Assertions.fail(""Connection refused must be thrown"");+        } catch (HttpHostConnectException e) {+            assertThat(ConnectException.class.equals(e.getCause().getClass()), is(true));+        }",I think we can use something like this instead:https://github.com/keycloak/keycloak/blob/72b238fb489aa9da257a5896772d6efde4a0f7d9/services/src/test/java/org/keycloak/vault/KeystoreVaultProviderTest.java#L67,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/20722,1250787221,2023-07-03T12:07:14Z,js/libs/keycloak-js/src/keycloak.js,,"Logged #21406 for this, let's not hold this up any longer.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21398,1250799194,2023-07-03T12:17:15Z,js/apps/account-ui/src/personal-info/FormField.tsx,"@@ -25,6 +26,7 @@ export const FormField = ({ attribute }: FormFieldProps) => {   const isSelect = (attribute: UserProfileAttributeMetadata) =>     Object.hasOwn(attribute.validators, ""options""); +  if (attribute.name === ""locale"") return <LocaleSelector />;","I don't think the `FormField` component should be the one responsible for this. This should be handled higher up in the component hierarchy. This should be generic component that can be re-used, without any side-effects.",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21398,1250849596,2023-07-03T12:55:25Z,js/apps/account-ui/src/api/methods.ts,"@@ -29,6 +29,13 @@ export async function getPersonalInfo({   return parseResponse<UserRepresentation>(response); } +export async function supportedLocales({ signal }: CallOptions = {}): Promise<",This should match the naming conventions of the other methods in this file.```suggestionexport async function getSupportedLocales({ signal }: CallOptions = {}): Promise<```,x
51133,edewit,https://api.github.com/repos/keycloak/keycloak/pulls/21398,1250878035,2023-07-03T13:14:16Z,js/libs/ui-shared/src/main.ts,"@@ -1,5 +1,6 @@ export { ContinueCancelModal } from ""./continue-cancel/ContinueCancelModal""; export { SelectControl } from ""./controls/SelectControl"";+export type { Option } from ""./controls/SelectControl"";",That would name clash with SelectOption of patternfly,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21388,1251097620,2023-07-03T16:33:10Z,js/apps/admin-ui/src/realm-settings/RealmSettingsTabs.tsx,"@@ -199,14 +199,15 @@ export const RealmSettingsTabs = ({     }      try {-      await adminClient.realms.update(-        { realm: realmName },-        {-          ...realm,-          ...r,-          id: r.realm,-        }-      );+      const savedRealm = {+        ...realm,+        ...r,+        id: r.realm,+      };++      // For default value, back end is expecting null instead of empty string+      if (savedRealm.smtpServer?.port === """") savedRealm.smtpServer.port = null;","Note that even though a new object is created before, it still contains a reference to the original realm since `realm.smtpServer` is nested and spreading an object using the spread operator (`...`) only creates a shallow clone.If we want to accomplish this without mutating the original reference we can do the following:```suggestion      // For the default value, null is expected instead of an empty string.      if (savedRealm.smtpServer?.port === """") {        savedRealm.smtpServer = { ...savedRealm.smtpServer, port: null };      }```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21320,1251126408,2023-07-03T17:04:39Z,js/apps/admin-ui/src/identity-providers/add/AddIdentityProvider.tsx,"@@ -28,13 +28,19 @@ export default function AddIdentityProvider() {   const { providerId } = useParams<IdentityProviderCreateParams>();   const form = useForm<IdentityProviderRepresentation>();   const serverInfo = useServerInfo();-  const providerInfo = useMemo(-    () =>-      serverInfo.componentTypes?.[-        ""org.keycloak.broker.social.SocialIdentityProvider""-      ]?.find((p) => p.id === providerId),-    [serverInfo, providerId]-  );++  const providerInfo = useMemo(() => {+    const social = serverInfo.componentTypes?.[+      ""org.keycloak.broker.social.SocialIdentityProvider""+    ]?.find((p) => p.id === providerId);+    if (!social)+      return serverInfo.componentTypes?.[+        ""org.keycloak.broker.provider.IdentityProvider""+      ]?.find((p) => p.id === providerId);++    return social;+  }, [serverInfo, providerId]);","Perhaps we can DRY this code up a bit?```suggestion  const providerInfo = useMemo(() => {    const namespaces = [      ""org.keycloak.broker.social.SocialIdentityProvider"",      ""org.keycloak.broker.provider.IdentityProvider"",    ];    for (const namespace of namespaces) {      const social = serverInfo.componentTypes?.[namespace]?.find(        ({ id }) => id === providerId      );      if (social) {        return social;      }    }  }, [serverInfo, providerId]);```",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21414,1251136087,2023-07-03T17:18:50Z,js/libs/keycloak-js/src/keycloak.test.js,,"This only adds a file to the source of the adapter, the test should be in [`JavaScriptAdapterTest`](https://github.com/keycloak/keycloak/blob/5fea7affd132f2d3f4d30dbfa01938e4d4b87e6a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java#L69).",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20217,1251175450,2023-07-03T18:20:51Z,services/src/main/java/org/keycloak/authentication/authenticators/browser/OTPFormAuthenticator.java,"@@ -73,7 +73,7 @@ public void authenticate(AuthenticationFlowContext context) {     public void validateOTP(AuthenticationFlowContext context) {         MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters(); -        String otp = inputData.getFirst(""otp"");+        String otp = inputData.getFirst(""otp"").trim();",The parameter might be `null` and a NPE will be thrown.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20217,1251177882,2023-07-03T18:25:30Z,services/src/main/java/org/keycloak/authentication/requiredactions/UpdateTotp.java,"@@ -69,47 +84,65 @@ public void requiredActionChallenge(RequiredActionContext context) {     public void processAction(RequiredActionContext context) {         EventBuilder event = context.getEvent();         event.event(EventType.UPDATE_TOTP);++        Response challenge;++        String totpSecret = context.getAuthenticationSession().getAuthNote(TOTP_SECRET);+        if (totpSecret == null) {+            challenge = context.form()+                    .addError(new FormMessage(Validation.FIELD_OTP_CODE, NULL_TOTP_SECRET)).createResponse(UserModel.RequiredAction.CONFIGURE_TOTP);+            event.error(NULL_TOTP_SECRET);+            context.challenge(challenge);+            return;+        }+         MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();-        String challengeResponse = formData.getFirst(""totp"");-        String totpSecret = formData.getFirst(""totpSecret"");-        String mode = formData.getFirst(""mode"");+        String challengeResponse = formData.getFirst(""totp"").trim();",The parameter might be null and an NPE will be thrown.,
94246513,Ehsanino82,https://api.github.com/repos/keycloak/keycloak/pulls/21414,1251236210,2023-07-03T19:57:37Z,js/libs/keycloak-js/src/keycloak.test.js,,actually i'm confused. do you mean i should write my test in [JavaScriptAdapterTest](https://github.com/keycloak/keycloak/blob/5fea7affd132f2d3f4d30dbfa01938e4d4b87e6a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java#L69)?,
44412021,arrrtem22,https://api.github.com/repos/keycloak/keycloak/pulls/21231,1251989817,2023-07-04T12:50:46Z,operator/src/main/java/org/keycloak/operator/controllers/WatchedSecretsStore.java,"@@ -185,22 +185,22 @@ private static void cleanObsoleteLabelFromSecret(KubernetesClient client, Secret                 );     } -    public static EventSource getWatchedSecretsEventSource(KubernetesClient client, String namespace) {+    public static EventSource getWatchedSecretsEventSource(KubernetesClient client, Set<String> namespaces) {         InformerConfiguration<Secret> informerConfiguration = InformerConfiguration                 .from(Secret.class)                 .withLabelSelector(Constants.KEYCLOAK_COMPONENT_LABEL + ""="" + WATCHED_SECRETS_LABEL_VALUE)-                .withNamespaces(namespace)+                .withNamespaces(namespaces)                 .withSecondaryToPrimaryMapper(secret -> {                     // get all stores-                    List<Secret> stores = client.secrets().inNamespace(namespace).withLabel(Constants.COMPONENT_LABEL, COMPONENT).list().getItems();+                    List<Secret> stores = client.secrets().inNamespace(secret.getMetadata().getNamespace()).withLabel(Constants.COMPONENT_LABEL, COMPONENT).list().getItems();",What is the difference between `namespaces` `secret.getMetadata().getNamespace()` and `store.getMetadata().getNamespace()` ?Why did we use only `namespace` before?,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/20976,1252199089,2023-07-04T16:08:19Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java,"@@ -84,6 +92,16 @@ public void run() {         }     } +    private static void configureBuildClassLoader() {+        ConfigValue ignoredArtifacts = Configuration.getCurrentBuiltTimeProperty(+                MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + ClassLoaderOptions.IGNORE_ARTIFACTS.getKey());++        if (ignoredArtifacts != null && StringUtil.isNotBlank(ignoredArtifacts.getValue())) {+            // ignored artifacts must be set prior to starting re-augmentation+            System.setProperty(""quarkus.class-loading.removed-artifacts"", ignoredArtifacts.getValue());+        }","Just out of curiosity, why do we need this if we already have mapping here:https://github.com/keycloak/keycloak/blob/563b37934373d4eb8422a0aa0ca3ca4100455ca1/quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ClassLoaderPropertyMappers.java#L25-L32Can't we remove either of them?",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/21231,1252235729,2023-07-04T17:04:52Z,operator/src/main/java/org/keycloak/operator/controllers/WatchedSecretsStore.java,"@@ -185,22 +185,22 @@ private static void cleanObsoleteLabelFromSecret(KubernetesClient client, Secret                 );     } -    public static EventSource getWatchedSecretsEventSource(KubernetesClient client, String namespace) {+    public static EventSource getWatchedSecretsEventSource(KubernetesClient client, Set<String> namespaces) {         InformerConfiguration<Secret> informerConfiguration = InformerConfiguration                 .from(Secret.class)                 .withLabelSelector(Constants.KEYCLOAK_COMPONENT_LABEL + ""="" + WATCHED_SECRETS_LABEL_VALUE)-                .withNamespaces(namespace)+                .withNamespaces(namespaces)                 .withSecondaryToPrimaryMapper(secret -> {                     // get all stores-                    List<Secret> stores = client.secrets().inNamespace(namespace).withLabel(Constants.COMPONENT_LABEL, COMPONENT).list().getItems();+                    List<Secret> stores = client.secrets().inNamespace(secret.getMetadata().getNamespace()).withLabel(Constants.COMPONENT_LABEL, COMPONENT).list().getItems();",> What is the difference between namespaces secret.getMetadata().getNamespace() and store.getMetadata().getNamespace() ?There shouldn't be any the expectation is that both are in the same same namespace.> Why did we use only namespace before?There was an assumption that only single namespace mode was supported.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20976,1252310675,2023-07-04T19:41:00Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/Build.java,"@@ -84,6 +92,16 @@ public void run() {         }     } +    private static void configureBuildClassLoader() {+        ConfigValue ignoredArtifacts = Configuration.getCurrentBuiltTimeProperty(+                MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + ClassLoaderOptions.IGNORE_ARTIFACTS.getKey());++        if (ignoredArtifacts != null && StringUtil.isNotBlank(ignoredArtifacts.getValue())) {+            // ignored artifacts must be set prior to starting re-augmentation+            System.setProperty(""quarkus.class-loading.removed-artifacts"", ignoredArtifacts.getValue());+        }","@vmuzikar To leverage the related fix from Quarkus, we need to make sure the `build` class loader is built taking this property into account so that the artifacts are ignored accordingly.By keeping only within our mapping layer, it is too late because the `build` class loader was already built.We could potentially keep everything within the `Build` command but I did not test it. Also, I think keeping the resolution within our configuration is more natural and aligned with what we are doing for others.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21450,1252923092,2023-07-05T10:48:19Z,.github/workflows/js-ci.yml,"@@ -233,6 +233,7 @@ jobs:         env:           KEYCLOAK_ADMIN: admin           KEYCLOAK_ADMIN_PASSWORD: admin+          JAVA_OPTS_APPEND: -Djava.net.preferIPv4Stack=true","Upon closer inspection I am getting the following error:```logException in thread ""main"" java.lang.UnsupportedClassVersionError: org/keycloak/quarkus/runtime/KeycloakMain has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0	at java.base/java.lang.ClassLoader.defineClass1(Native Method)	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1017)	at io.quarkus.bootstrap.runner.RunnerClassLoader.loadClass(RunnerClassLoader.java:105)	at io.quarkus.bootstrap.runner.RunnerClassLoader.loadClass(RunnerClassLoader.java:65)	at io.quarkus.bootstrap.runner.QuarkusEntryPoint.doRun(QuarkusEntryPoint.java:60)	at io.quarkus.bootstrap.runner.QuarkusEntryPoint.main(QuarkusEntryPoint.java:32)```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/19342,1253226899,2023-07-05T14:48:18Z,js/apps/admin-ui/public/locales/en/user-federation-help.json,"@@ -27,6 +27,7 @@   ""ldapSynchronizationSettingsDescription"": ""This section contains options related to synchronization of users from LDAP to the Keycloak database."",   ""syncRegistrations"": ""Should newly created users be created within LDAP store? Priority effects which provider is chosen to sync the new user. This setting is effectively appplied only with WRITABLE edit mode."",   ""importUsersHelp"": ""If true, LDAP users will be imported into the Keycloak DB and synced by the configured sync policies."",+  ""validateUserListingsHelp"": ""If disabled, import validation will be skipped for all user listing operations e.g. search, users in group, etc.; The validation checks if the user is still present in the federation source with dedicated queries instead of previously cached data. If disabled, then changes made in LDAP are only visible locally after explicit or periodic synchronization."",","Since this help text is already in a file suffixed with `-help`, there should be no need to repeat this in the key. I am not sure why for some of these keys this was introduced, but it should not be the case.```suggestion  ""validateUserListings"": ""If disabled, import validation will be skipped for all user listing operations e.g. search, users in group, etc.; The validation checks if the user is still present in the federation source with dedicated queries instead of previously cached data. If disabled, then changes made in LDAP are only visible locally after explicit or periodic synchronization."",```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21398,1254159646,2023-07-06T09:10:21Z,js/libs/ui-shared/src/controls/SelectControl.tsx,,"Right, so what I am saying is that since it's not used for the locale select it does not belong in this PR :)",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20806,1254295205,2023-07-06T11:17:51Z,services/src/main/java/org/keycloak/broker/provider/HardcodedGroupMapper.java,"@@ -0,0 +1,98 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.broker.provider;++import org.jboss.logging.Logger;+import org.keycloak.broker.oidc.mappers.AbstractClaimToGroupMapper;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.provider.ProviderConfigProperty;++import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashSet;+import java.util.List;+import java.util.Set;++/**+ * @author <a href=""mailto:dmartino@redhat.com"">Daniele Martinoli</a>+ * @version $Revision: 1 $+ */+public class HardcodedGroupMapper extends AbstractClaimToGroupMapper {+    protected static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    private static final Logger LOG = Logger.getLogger(HardcodedGroupMapper.class);++    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES =+            new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ConfigConstants.GROUP);+        property.setLabel(""Group"");+        property.setHelpText(""Group to assign the user."");+        property.setType(ProviderConfigProperty.GROUP_TYPE);+        configProperties.add(property);",Could you please lazily create the properties list from the `getConfigProperties` method?I understand we have other places using this pattern to initialize configuration properties but we are trying to avoid doing it. The reason is that it increases memory footprint by creating instances that are eventually used at runtime.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20806,1254299261,2023-07-06T11:22:22Z,services/src/main/java/org/keycloak/broker/provider/HardcodedGroupMapper.java,"@@ -0,0 +1,98 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */++package org.keycloak.broker.provider;++import org.jboss.logging.Logger;+import org.keycloak.broker.oidc.mappers.AbstractClaimToGroupMapper;+import org.keycloak.models.IdentityProviderMapperModel;+import org.keycloak.models.IdentityProviderSyncMode;+import org.keycloak.provider.ProviderConfigProperty;++import java.util.ArrayList;+import java.util.Arrays;+import java.util.HashSet;+import java.util.List;+import java.util.Set;++/**+ * @author <a href=""mailto:dmartino@redhat.com"">Daniele Martinoli</a>+ * @version $Revision: 1 $+ */+public class HardcodedGroupMapper extends AbstractClaimToGroupMapper {+    protected static final List<ProviderConfigProperty> configProperties = new ArrayList<>();++    private static final Logger LOG = Logger.getLogger(HardcodedGroupMapper.class);++    private static final Set<IdentityProviderSyncMode> IDENTITY_PROVIDER_SYNC_MODES =+            new HashSet<>(Arrays.asList(IdentityProviderSyncMode.values()));++    static {+        ProviderConfigProperty property;+        property = new ProviderConfigProperty();+        property.setName(ConfigConstants.GROUP);+        property.setLabel(""Group"");+        property.setHelpText(""Group to assign the user."");+        property.setType(ProviderConfigProperty.GROUP_TYPE);+        configProperties.add(property);+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getDisplayCategory() {+        return ""Group Importer"";+    }++    @Override+    public String getDisplayType() {+        return ""Hardcoded Group"";+    }++    public static final String[] COMPATIBLE_PROVIDERS = {ANY_PROVIDER};+++    public static final String PROVIDER_ID = ""oidc-hardcoded-group-idp-mapper"";++    @Override+    public boolean supportsSyncMode(IdentityProviderSyncMode syncMode) {+        return IDENTITY_PROVIDER_SYNC_MODES.contains(syncMode);",```suggestion        return EnumSet.allOf(IdentityProviderSyncMode.class).contains(syncMode);```,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/21488,1254309715,2023-07-06T11:32:59Z,server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityBrokerUnmatchedEssentialClaimException.java,"@@ -0,0 +1,31 @@+/*+ * Copyright 2016 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.broker.provider;++/**+ * @author dmartino+ */+public class IdentityBrokerUnmatchedEssentialClaimException extends RuntimeException {",Do we really need this exception class? Can we just leverage `IdentityBrokerException` and handle it accordingly to build the error response?,x
86618610,dmartinol,https://api.github.com/repos/keycloak/keycloak/pulls/21488,1254325806,2023-07-06T11:49:09Z,services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java,"@@ -432,6 +433,8 @@ public BrokeredIdentityContext getFederatedIdentity(String response) {             }              return identity;+        } catch (IdentityBrokerUnmatchedEssentialClaimException e) {",Trying to carry the error message in the existing exception in the next commit,
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/21487,1254441235,2023-07-06T13:26:23Z,services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java,"@@ -166,23 +169,75 @@ public Map<String, String> importFrom(@Parameter(description = ""JSON body"") Map<     }      /**-     * Get identity providers+     * List identity providers.      *-     * @return+     * @param search Filter to search specific providers by name. Search can be prefixed (name*), contains (*name*) or exact (\""name\""). Default prefixed.+     * @param firstResult Pagination offset+     * @param maxResults Maximum results size (defaults to 100)+     * @return The list of providers.      */     @GET     @Path(""instances"")     @NoCache     @Produces(MediaType.APPLICATION_JSON)     @Tag(name = KeycloakOpenAPI.Admin.Tags.IDENTITY_PROVIDERS)-    @Operation( summary = ""Get identity providers"")-    public Stream<IdentityProviderRepresentation> getIdentityProviders() {+    @Operation(summary = ""List identity providers"")+    public Stream<IdentityProviderRepresentation> getIdentityProviders(","@jonkoops AFAIK there is no standard response in keycloak for pagination. The other endpoints just have this, a count method and a find method (more or less, you can see the users for example, [here](https://github.com/keycloak/keycloak/blob/21.1.2/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java#L368) and [here](https://github.com/keycloak/keycloak/blob/21.1.2/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java#L256)). That's why I followed the same idea.If we want to create a generic solution I would propose a much simpler response with no pages. The reason is that some storages (ldap for example) are extremely far from the idea of common paging (in ldap you don't know the total number of entries that matches a filter for example). For that I would only return something like the following:```json{  ""firstResult"": 100,  ""numResults"": 50,  ""results"": [... 50 results ...],  ""hasMore"": true}```And the console would do something different, something like showing the initial list and a button saying `more`. If you click it the next bunch of results are added to the list. The user can always filter or refine the search  to get less results.For sure I would not give so much data for pagination as you propose, the server doesn't control the page. I think that part is for the frontend. So if we want to main something like we have now but with a better response. I vote for something like:```json{  ""hasMore"": true,  ""firstResult"": 10,  ""numResults"": 20,  ""totalEntries"": 100,  ""results"": [... 20 results ]}```If we go with something like this the method will be new (I have reused the same method in this test). We need more people of team to decide about this point. And @mposolda should be involved for sure.",
86618610,dmartinol,https://api.github.com/repos/keycloak/keycloak/pulls/20658,1254480724,2023-07-06T13:56:02Z,services/src/main/java/org/keycloak/authentication/authenticators/resetcred/ResetPassword.java,"@@ -35,6 +38,7 @@ public void authenticate(AuthenticationFlowContext context) {                 (context.getExecution().isConditional() &&                         configuredFor(context))) {             context.getAuthenticationSession().addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);+            context.getAuthenticationSession().setClientNote(Constants.KC_ACTION_EXECUTING, UserModel.RequiredAction.UPDATE_PASSWORD.name());","If you mean to remove the if guard in the template I have no problem with that:```                        <#if isAppInitiatedAction??>                            <div class=""checkbox"">                                <label><input type=""checkbox"" id=""logout-sessions"" name=""logout-sessions"" value=""on"" checked> ${msg(""logoutOtherSessions"")}</label>                            </div>                        </#if>```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21487,1254494012,2023-07-06T14:04:57Z,services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java,"@@ -166,23 +169,75 @@ public Map<String, String> importFrom(@Parameter(description = ""JSON body"") Map<     }      /**-     * Get identity providers+     * List identity providers.      *-     * @return+     * @param search Filter to search specific providers by name. Search can be prefixed (name*), contains (*name*) or exact (\""name\""). Default prefixed.+     * @param firstResult Pagination offset+     * @param maxResults Maximum results size (defaults to 100)+     * @return The list of providers.      */     @GET     @Path(""instances"")     @NoCache     @Produces(MediaType.APPLICATION_JSON)     @Tag(name = KeycloakOpenAPI.Admin.Tags.IDENTITY_PROVIDERS)-    @Operation( summary = ""Get identity providers"")-    public Stream<IdentityProviderRepresentation> getIdentityProviders() {+    @Operation(summary = ""List identity providers"")+    public Stream<IdentityProviderRepresentation> getIdentityProviders(",">  The reason is that some storages (ldap for example) are extremely far from the idea of common paging (in ldap you don't know the total number of entries that matches a filter for example).I see, yeah that is very unfortunate indeed. Reading this I feel like we can split this into two types of pagination:1. **Finite paging**, the total number of entries is known and this information can be constructed.2. **Infinite paging,**  here we can only determine the cursor, but we have no idea of where the end is.It feel to me that a large amount of our data can fit in nr. 1, so I would not go and compromise the data structure of all API endpoints for these edge-cases. But perhaps I am mistaken, and this is a large amount of our data. I think you would know better if this is the case.Naturally, we do need to handle these edge-cases, and I think your solution makes sense.> And the console would do something different, something like showing the initial list and a button saying `more`. If you click it the next bunch of results are added to the list. The user can always filter or refine the search to get less results.I like this approach, at least for the places in the API where we cannot determine an accurate count. > For sure I would not give so much data for pagination as you propose, the server doesn't control the page.I have to disagree slightly with that. The server is is certainly not responsible for maintaining state (such as the current page we're on), but I do believe it is the responsibility of the API to serve as a single source of truth where possible (including computed state).However, this is more of a philosophical debate, and I would already be more than happy if we can already compute the page state :+1: We can always add this later if we feel like it is necessary.What would also be great is if we could have some generalized error handling for common pagination errors, such as exceeding the max page size, or exceeding the bounds of the entries. I imagine this is something we could do in a generalized abstraction.Also agree, we should get more of the team involved if we do want to generalize this into a common pattern. I'd really like to get this specced out, as (inconsistent) pagination is something that frequently is a point of frustration (and bugs)  for the UI team.@mposolda @ssilvert would definitely be interested in your take on this as well.  ",
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/21487,1254520660,2023-07-06T14:24:50Z,services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java,"@@ -166,23 +169,75 @@ public Map<String, String> importFrom(@Parameter(description = ""JSON body"") Map<     }      /**-     * Get identity providers+     * List identity providers.      *-     * @return+     * @param search Filter to search specific providers by name. Search can be prefixed (name*), contains (*name*) or exact (\""name\""). Default prefixed.+     * @param firstResult Pagination offset+     * @param maxResults Maximum results size (defaults to 100)+     * @return The list of providers.      */     @GET     @Path(""instances"")     @NoCache     @Produces(MediaType.APPLICATION_JSON)     @Tag(name = KeycloakOpenAPI.Admin.Tags.IDENTITY_PROVIDERS)-    @Operation( summary = ""Get identity providers"")-    public Stream<IdentityProviderRepresentation> getIdentityProviders() {+    @Operation(summary = ""List identity providers"")+    public Stream<IdentityProviderRepresentation> getIdentityProviders(","> Also agree, we should get more of the team involved if we do want to generalize this into a common pattern. I'd really like to get this specced out, as (inconsistent) pagination is something that frequently is a point of frustration (and bugs) for the UI team.> > @mposolda @ssilvert would definitely be interested in your take on this as well.I agree with @jonkoops on this.  The UI needs to know what it is dealing with.  Perhaps providers should have a choice of implementing a paginated or unpaginated version of each interface.  And the UI should be able to ask if pagination is supported so we know how to get and display the data.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20658,1254527990,2023-07-06T14:30:13Z,services/src/main/java/org/keycloak/authentication/authenticators/resetcred/ResetPassword.java,"@@ -35,6 +38,7 @@ public void authenticate(AuthenticationFlowContext context) {                 (context.getExecution().isConditional() &&                         configuredFor(context))) {             context.getAuthenticationSession().addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);+            context.getAuthenticationSession().setClientNote(Constants.KC_ACTION_EXECUTING, UserModel.RequiredAction.UPDATE_PASSWORD.name());",I might be missing the reasoning for making this specific to AIA but I see it also useful during a regular reset password flow (email link or set required action to user).We should also change the `UpdatePassword` action to remove https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/authentication/requiredactions/UpdatePassword.java.,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/21357,1254560498,2023-07-06T14:54:21Z,quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.unix.approved.txt,"@@ -131,11 +131,13 @@ Logging: Export:  --dir <dir>          Set the path to a directory where files will be created with the exported data.---file <file>        Set the path to a file that will be created with the exported data.+--file <file>        Set the path to a file that will be created with the exported data. To export+                       more than 500 users, export to a directory with different files instead.","My point is that the number is too generic and the explicit support for 500 and below users might be impacted by how much data you hold on your users.I can have a hand full of users and thousands of roles, groups, attributes, etc. Which should also impact the export, right?I can see issues being open just because we are stating we support 500 users in a single file.Perhaps, we can just say that ""Depending on how many users and how much data they have, the best is to use separate files"". Something along these lines.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21334,1255514811,2023-07-07T09:11:49Z,js/apps/account-ui/test/AdminClient.ts,"@@ -0,0 +1,35 @@+import KeycloakAdminClient from ""@keycloak/keycloak-admin-client"";+import RealmRepresentation from ""@keycloak/keycloak-admin-client/lib/defs/realmRepresentation"";++class AdminClient {","I don't think we need to have a class for this, we can keep the instance in the module itself.",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21334,1255519548,2023-07-07T09:15:29Z,js/apps/admin-ui/public/locales/en/clients.json,,"There are changes here for the Admin UI, perhaps they don't belong in this PR?",
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/21520,1256351034,2023-07-07T19:24:57Z,js/apps/admin-ui/src/groups/GroupsSection.tsx,"@@ -53,6 +56,9 @@ export default function GroupsSection() {   const location = useLocation();   const id = getLastId(location.pathname); +  const [searchParams] = useSearchParams();+  const lazy = searchParams.get(""lazy"") || ""false"";","Shouldn't this be a boolean instead of a String?Something like, ```suggestion  const lazy = searchParams.has(""lazy"") || false;```",x
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/21520,1256356503,2023-07-07T19:30:26Z,js/apps/admin-ui/src/groups/GroupsSection.tsx,"@@ -53,6 +56,9 @@ export default function GroupsSection() {   const location = useLocation();   const id = getLastId(location.pathname); +  const [searchParams] = useSearchParams();+  const lazy = searchParams.get(""lazy"") || ""false"";+  const [open, toggle] = useToggle(lazy === ""false"");","```suggestion  const [open, toggle] = useToggle(lazy);```",
51133,edewit,https://api.github.com/repos/keycloak/keycloak/pulls/21520,1257751815,2023-07-10T06:10:00Z,js/apps/admin-ui/src/groups/GroupsSection.tsx,"@@ -53,6 +56,9 @@ export default function GroupsSection() {   const location = useLocation();   const id = getLastId(location.pathname); +  const [searchParams] = useSearchParams();+  const lazy = searchParams.get(""lazy"") || ""false"";",right if we use `has` the value doesn't matter so it will be `?lazy` then it will hide the tree view initially and it will only show the root and search,
1492066,pruivo,https://api.github.com/repos/keycloak/keycloak/pulls/21522,1258001215,2023-07-10T09:48:16Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java,"@@ -109,12 +114,30 @@ public void clientRemoval(String realmId, String clientUUID, String clientId, Se         addInvalidations(InClientPredicate.create().client(clientUUID), invalidations);     } -     @Override     protected void addInvalidationsFromEvent(InvalidationEvent event, Set<String> invalidations) {         invalidations.add(event.getId());          ((RealmCacheInvalidationEvent) event).addInvalidations(this, invalidations);     } +    /**+     * Compute a cached realm and ensure that this happens only once with the current Keycloak instance.+     * Use this to avoid concurrent preparations of a realm in parallel threads. This helps to break the load on+     * a stampede after a server has started, were a lot of requests come in for the same realm that hasn't been cached yet.+     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all+     * other requests will use the cached realm, which is much more efficient.+     */+    public RealmAdapter computeSerialized(String id, KeycloakSession session, BiFunction<String, KeycloakSession, RealmAdapter> compute) {+        // this locking is only to ensure that if there is a computation for the same id in the ""synchronized"" block below,+        // it will have the same object instance to lock the current execution until the other is finished.+        Object lock = cacheInteractions.computeIfAbsent(id, s -> id);+        try {+            synchronized (lock) {+                return compute.apply(id, session);+            }+        } finally {+            cacheInteractions.remove(lock);+        }","if T2 and T3 find it in the cache, even if they run in parallel, just leave it as is. ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/21522,1258009052,2023-07-10T09:55:16Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java,"@@ -109,12 +114,30 @@ public void clientRemoval(String realmId, String clientUUID, String clientId, Se         addInvalidations(InClientPredicate.create().client(clientUUID), invalidations);     } -     @Override     protected void addInvalidationsFromEvent(InvalidationEvent event, Set<String> invalidations) {         invalidations.add(event.getId());          ((RealmCacheInvalidationEvent) event).addInvalidations(this, invalidations);     } +    /**+     * Compute a cached realm and ensure that this happens only once with the current Keycloak instance.+     * Use this to avoid concurrent preparations of a realm in parallel threads. This helps to break the load on+     * a stampede after a server has started, were a lot of requests come in for the same realm that hasn't been cached yet.+     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all+     * other requests will use the cached realm, which is much more efficient.+     */+    public RealmAdapter computeSerialized(String id, KeycloakSession session, BiFunction<String, KeycloakSession, RealmAdapter> compute) {+        // this locking is only to ensure that if there is a computation for the same id in the ""synchronized"" block below,+        // it will have the same object instance to lock the current execution until the other is finished.+        Object lock = cacheInteractions.computeIfAbsent(id, s -> id);+        try {+            synchronized (lock) {+                return compute.apply(id, session);+            }+        } finally {+            cacheInteractions.remove(lock);+        }","Another thought: It might be that the cache is invalidated between in between and then I could imagine that there might parallel execution in the area of 1-2 being parallel, still the most of the other 100+ requests will be queued. If keeping all the IDs of the realms in memory, and it would make the design simpler, I'd be ok to make it simpler.",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/21118,1258050508,2023-07-10T10:31:19Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/SocialLoginTest.java,"@@ -97,6 +98,7 @@  * @author <a href=""mailto:sthorger@redhat.com"">Stian Thorgersen</a>  * @author Vaclav Muzikar <vmuzikar@redhat.com>  */+@EnableFeature(Profile.Feature.ADMIN_FINE_GRAINED_AUTHZ)","Hi Pedro! Yes, it's needed, if not some tests fail, if I remember correctly several social providers test the token exchange ([github among them](https://github.com/keycloak/keycloak/blob/d6f50351f09b5bdce893c39d5c29b2bf7f5647c9/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/SocialLoginTest.java#L376)). That's why I know we don't launch these tests too often. :smile: This is not related to this PR, but github tests don't work without it.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/21177,1258328251,2023-07-10T14:08:17Z,docs/documentation/securing_apps/topics/oidc/java/java-adapters.adoc,"@@ -1,13 +1,46 @@-=== Java adapters+=== {project_name} Java adapters++[WARNING]+====+{project_name} Java Adapters are now in End-Of-Life (EOL) status. They are no longer supported nor receiving security updates.+It will be removed in future releases.","This statement is probably too strong. We haven't EOL them quite yet, but rather deprecated. We'll do security updates on adapters until they are fully EOL, but won't do any further development.Perhaps something like:```suggestion{project_name} Java Adapters are now deprecated and will be removed in a future release. No further enhancements or features will be added to the adapter until then.```",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/21522,1259259111,2023-07-11T06:43:52Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java,"@@ -109,12 +114,30 @@ public void clientRemoval(String realmId, String clientUUID, String clientId, Se         addInvalidations(InClientPredicate.create().client(clientUUID), invalidations);     } -     @Override     protected void addInvalidationsFromEvent(InvalidationEvent event, Set<String> invalidations) {         invalidations.add(event.getId());          ((RealmCacheInvalidationEvent) event).addInvalidations(this, invalidations);     } +    /**+     * Compute a cached realm and ensure that this happens only once with the current Keycloak instance.+     * Use this to avoid concurrent preparations of a realm in parallel threads. This helps to break the load on+     * a stampede after a server has started, were a lot of requests come in for the same realm that hasn't been cached yet.+     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all+     * other requests will use the cached realm, which is much more efficient.+     */+    public RealmAdapter computeSerialized(String id, KeycloakSession session, BiFunction<String, KeycloakSession, RealmAdapter> compute) {+        // this locking is only to ensure that if there is a computation for the same id in the ""synchronized"" block below,+        // it will have the same object instance to lock the current execution until the other is finished.+        Object lock = cacheInteractions.computeIfAbsent(id, s -> id);+        try {+            synchronized (lock) {+                return compute.apply(id, session);","A static CHM would be shared across Keycloak session factories AFAIK. This might work in a production Keycloak, but is a pain for testing, therefore I'd rather not use it, and use a CHM per session factory instead. That's why it ended up in this class.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21411,1259582435,2023-07-11T11:10:59Z,js/apps/admin-ui/public/locales/en/common.json,"@@ -215,5 +215,7 @@   ""forbidden_other"": ""Forbidden, permissions needed:"",   ""noRealmRolesToAssign"": ""There are no realm roles to assign"",   ""loadingRealms"": ""Loading realms…"",-  ""customAttribute"": ""Custom Attribute…""+  ""customAttribute"": ""Custom Attribute…"",+  ""unsavedChangesTitle"": ""Unsaved changes"",+  ""unsavedChangesConfirm"": ""You have unsaved changes. Do you really want to leave the page?""","I am not sure these labels belong in the `common` namespace. They only seem to be used in the clients section, so perhaps it would be better to add them to `clients.json`.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21411,1259591539,2023-07-11T11:20:19Z,js/apps/admin-ui/src/clients/authorization/ResourcesPolicySelect.tsx,"@@ -108,57 +128,133 @@ export const ResourcesPolicySelect = ({     [search]   ); +  const [toggleUnsavedChangesDialog, UnsavedChangesConfirm] = useConfirmDialog({+    titleKey: t(""common:unsavedChangesTitle""),+    messageKey: t(""common:unsavedChangesConfirm""),+    continueButtonLabel: t(""common:continue""),+    continueButtonVariant: ButtonVariant.danger,+    onConfirm: async () => {+      navigate(+        toPolicyDetails({+          realm: realm,+          id: clientId,+          policyId: clickedPolicy?.id!,+          policyType: clickedPolicy?.type!,+        })+      );+    },+  });+   const toSelectOptions = () =>     items.map((p) => (       <SelectOption key={p.id} value={p.id}>         {p.name}       </SelectOption>     )); +  const toChipGroupItems = (+    field: ControllerRenderProps<PolicyRepresentation, Type>+  ) => {+    return (+      <ChipGroup>+        {(field.value as string[]).map((permissionId) => {+          const policy = items.find(+            (permission) => permission.id === permissionId+          );+          if (policy) {","I am more of a fan of inverting this condition and using a early return. This prevents deeply nested statements, and improves readability of the code.```tsif (!policy) {  return null;}// The rest of the code.```",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/21522,1261261234,2023-07-12T14:24:35Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java,"@@ -109,12 +114,30 @@ public void clientRemoval(String realmId, String clientUUID, String clientId, Se         addInvalidations(InClientPredicate.create().client(clientUUID), invalidations);     } -     @Override     protected void addInvalidationsFromEvent(InvalidationEvent event, Set<String> invalidations) {         invalidations.add(event.getId());          ((RealmCacheInvalidationEvent) event).addInvalidations(this, invalidations);     } +    /**+     * Compute a cached realm and ensure that this happens only once with the current Keycloak instance.+     * Use this to avoid concurrent preparations of a realm in parallel threads. This helps to break the load on+     * a stampede after a server has started, were a lot of requests come in for the same realm that hasn't been cached yet.+     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all+     * other requests will use the cached realm, which is much more efficient.+     */+    public RealmAdapter computeSerialized(String id, KeycloakSession session, BiFunction<String, KeycloakSession, RealmAdapter> compute) {","nitpick: `KeycloakSession` is usually the first parameter in methods, the same for `BiFunction`.",
69153350,andreas-blaettlinger,https://api.github.com/repos/keycloak/keycloak/pulls/21411,1261322941,2023-07-12T15:05:01Z,js/apps/admin-ui/src/clients/authorization/ResourcesPolicySelect.tsx,"@@ -108,57 +128,141 @@ export const ResourcesPolicySelect = ({     [search],   ); +  const [toggleUnsavedChangesDialog, UnsavedChangesConfirm] = useConfirmDialog({+    titleKey: t(""unsavedChangesTitle""),+    messageKey: t(""unsavedChangesConfirm""),+    continueButtonLabel: t(""common:continue""),+    continueButtonVariant: ButtonVariant.danger,+    onConfirm: () => {+      navigate(+        toPolicyDetails({+          realm: realm,+          id: clientId,+          policyId: clickedPolicy?.id!,+          policyType: clickedPolicy?.type!,+        })+      );+    },+  });+   const toSelectOptions = () =>     items.map((p) => (       <SelectOption key={p.id} value={p.id}>         {p.name}       </SelectOption>     )); +  const toChipGroupItems = (+    field: ControllerRenderProps<PolicyRepresentation, Type>+  ) => {+    return (+      <ChipGroup>+        {field.value?.map((permissionId) => {+          const policy = items.find(+            (permission) => permission.id === permissionId+          );++          if (!policy) {+            return null;+          }++          const to = toPolicyDetails({+            realm: realm,+            id: clientId,+            policyId: policy.id!,+            policyType: policy.type!,+          });++          return (+            <Chip+              key={policy.id}+              onClick={(event) => {+                event.stopPropagation();+                field.onChange(field.value?.filter((id) => id !== policy.id));+              }}+            >+              {policy.type ? (+                <Link+                  to={to}+                  onClick={(event) => {+                    if (isDirty) {+                      event.preventDefault();+                      event.stopPropagation();","IMO its needed for following case:![grafik](https://github.com/keycloak/keycloak/assets/69153350/08148b32-8d97-4e32-b017-677bb24647c7)When you click on a Chip-Link while the SelectOptions are shown, your first click would just hide the SelectOptions (even when you click on the Dialogs Continue/Cancel buttons). That's why I added a `stopPropagation()`. Preventing the default behavior just assures that the `onclick` does its thing and hinders the `<Link to={to}>` of immediately navigating somewhere to.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21649,1262358617,2023-07-13T10:26:42Z,js/apps/account-ui/src/utils/useFormatDate.ts,"@@ -0,0 +1,16 @@+const DATE_AND_TIME_FORMAT: Intl.DateTimeFormatOptions = {+  dateStyle: ""long"",+  timeStyle: ""short"",+};++//todo use user local+export default function useFormatDate() {+  return {+    formatDate: function (+      date: Date,+      options: Intl.DateTimeFormatOptions | undefined = DATE_AND_TIME_FORMAT,+    ) {+      return date.toLocaleString(""en"", options);+    },+  };+}","Since there is only one function being returned in this object, let's reduce the complexity here by returning the function directly.```suggestionexport default function useFormatDate() {  return function formatDate(    date: Date,    options: Intl.DateTimeFormatOptions | undefined = DATE_AND_TIME_FORMAT,  ) {    return date.toLocaleString(""en"", options);  };}```",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21649,1262373065,2023-07-13T10:39:35Z,js/apps/account-ui/src/utils/useFormatDate.ts,"@@ -0,0 +1,16 @@+const DATE_AND_TIME_FORMAT: Intl.DateTimeFormatOptions = {+  dateStyle: ""long"",+  timeStyle: ""short"",+};++//todo use user local+export default function useFormatDate() {+  return {+    formatDate: function (+      date: Date,+      options: Intl.DateTimeFormatOptions | undefined = DATE_AND_TIME_FORMAT,","When providing a default value the parameter is already considered optional, so there should be need to to add the `undefined` type here.```suggestion      options: Intl.DateTimeFormatOptions = DATE_AND_TIME_FORMAT,```",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/21671,1263463102,2023-07-14T08:35:44Z,model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java,"@@ -910,16 +910,8 @@ private Predicate[] getSearchOptionPredicateArray(String value, CriteriaBuilder             orPredicates.add(builder.equal(builder.lower(from.get(FIRST_NAME)), value));             orPredicates.add(builder.equal(builder.lower(from.get(LAST_NAME)), value));         } else {-            if (value.length() >= 2 && value.charAt(0) == '*' && value.charAt(value.length() - 1) == '*') {-                // infix search-                value = ""%"" + value.substring(1, value.length() - 1) + ""%"";-            } else {-                // default to prefix search-                if (value.length() > 0 && value.charAt(value.length() - 1) == '*') {-                    value = value.substring(0, value.length() - 1);-                }-                value += ""%"";-            }+            value = value.replace(""*"", ""%"");+            if (value.isEmpty() || value.charAt(value.length() - 1) != '%') value += ""%"";              orPredicates.add(builder.like(from.get(USERNAME), value));             orPredicates.add(builder.like(from.get(EMAIL), value));","I had a look and one can add a thirst parameter to `.like()` with specifying the escape character. I had a look around what other frameworks do, and they seem to have `\` as the default escape character. Still there seems to be some intrinsic behavior at least in MS SQL where one can use backets to escape parts of a `LIKE`, unless you explicitly state the escaping character - see https://www.mytecbits.com/microsoft/sql-server/escape-square-brackets-in-like.So I'd suggest to use the third parameter to make the escaping explicit in the code, and safe from MS SQL intrinsic. As `\` is then used in multiple places, it IMHO calls for a constant to be defined in this class for this value.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21543,1265579025,2023-07-17T15:58:01Z,testsuite/integration-arquillian/tests/pom.xml,"@@ -125,7 +125,7 @@         <app.server.2.debug.suspend>n</app.server.2.debug.suspend>         <app.server.2.jboss.jvm.debug.args>-agentlib:jdwp=transport=dt_socket,server=y,suspend=${app.server.2.debug.suspend},address=localhost:${app.server.2.debug.port}</app.server.2.jboss.jvm.debug.args>         <app.server.memory.Xms>64m</app.server.memory.Xms>-        <app.server.memory.Xmx>512m</app.server.memory.Xmx>+        <app.server.memory.Xmx>768m</app.server.memory.Xmx>","We run with `app-server-wildfly` [by default](https://github.com/keycloak/keycloak/blob/67b20dfd9b7c63f96bbd81a6ce8562f663fde56c/testsuite/integration-arquillian/tests/base/pom.xml#L521).I did a little bit more digging into this. I realized we're actually not including any BC dependencies with the WF/EAP adapter. We [use](https://github.com/keycloak/keycloak/blob/67b20dfd9b7c63f96bbd81a6ce8562f663fde56c/distribution/feature-packs/adapter-feature-pack/src/main/resources/modules/system/add-ons/keycloak/org/keycloak/keycloak-crypto-default/main/module.xml#L33) the default BC module that's already present in WF. You can simply double check that by building the adapters dist and checking the JARs included. There are actually no 3rd party deps bundled in our adapters dist. That means WF/EAP adapter should not be affected by this change at all.The reason for the out of memory test failures is that we're including the BC deps in our test app WARs. The newer versions of BC libs are a few MBs larger. Hence I believe we're reaching the memory limit because of this.However, where we are also including the BC deps is the Tomcat and Jetty adapters. Those are affected by this upgrade. This is NOT tested in GHA. @mposolda @miquelsi Do we need to run the full internal pipeline to test this?",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/21755,1265684963,2023-07-17T17:30:06Z,services/src/main/java/org/keycloak/theme/FolderTheme.java,"@@ -120,9 +116,8 @@          File file = new File(themeDir, ""messages"" + File.separator + baseBundlename + ""_"" + locale.toString() + "".properties"");         if (file.isFile()) {-            Charset encoding = PropertiesUtil.detectEncoding(new FileInputStream(file));-            try (Reader reader = new InputStreamReader(new FileInputStream(file), encoding)) {-                m.load(reader);+            try (InputStream stream = Files.newInputStream(file.toPath())) {",## Uncontrolled data used in path expressionThis path depends on a [user-provided value](1).This path depends on a [user-provided value](2).This path depends on a [user-provided value](3).This path depends on a [user-provided value](4).This path depends on a [user-provided value](5).This path depends on a [user-provided value](6).This path depends on a [user-provided value](7).This path depends on a [user-provided value](8).This path depends on a [user-provided value](9).This path depends on a [user-provided value](10).This path depends on a [user-provided value](11).This path depends on a [user-provided value](12).This path depends on a [user-provided value](13).This path depends on a [user-provided value](14).This path depends on a [user-provided value](15).This path depends on a [user-provided value](16).This path depends on a [user-provided value](17).This path depends on a [user-provided value](18).This path depends on a [user-provided value](19).This path depends on a [user-provided value](20).This path depends on a [user-provided value](21).This path depends on a [user-provided value](22).This path depends on a [user-provided value](23).This path depends on a [user-provided value](24).This path depends on a [user-provided value](25).This path depends on a [user-provided value](26).This path depends on a [user-provided value](27).This path depends on a [user-provided value](28).This path depends on a [user-provided value](29).This path depends on a [user-provided value](30).This path depends on a [user-provided value](31).This path depends on a [user-provided value](32).This path depends on a [user-provided value](33).This path depends on a [user-provided value](34).This path depends on a [user-provided value](35).This path depends on a [user-provided value](36).This path depends on a [user-provided value](37).This path depends on a [user-provided value](38).This path depends on a [user-provided value](39).This path depends on a [user-provided value](40).This path depends on a [user-provided value](41).This path depends on a [user-provided value](42).This path depends on a [user-provided value](43).This path depends on a [user-provided value](44).This path depends on a [user-provided value](45).This path depends on a [user-provided value](46).This path depends on a [user-provided value](47).This path depends on a [user-provided value](48).This path depends on a [user-provided value](49).This path depends on a [user-provided value](50).This path depends on a [user-provided value](51).This path depends on a [user-provided value](52).This path depends on a [user-provided value](53).This path depends on a [user-provided value](54).This path depends on a [user-provided value](55).This path depends on a [user-provided value](56).This path depends on a [user-provided value](57).This path depends on a [user-provided value](58).This path depends on a [user-provided value](59).This path depends on a [user-provided value](60).This path depends on a [user-provided value](61).This path depends on a [user-provided value](62).This path depends on a [user-provided value](63).This path depends on a [user-provided value](64).This path depends on a [user-provided value](65).This path depends on a [user-provided value](66).This path depends on a [user-provided value](67).This path depends on a [user-provided value](68).This path depends on a [user-provided value](69).This path depends on a [user-provided value](70).This path depends on a [user-provided value](71).This path depends on a [user-provided value](72).This path depends on a [user-provided value](73).This path depends on a [user-provided value](74).[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2532),x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/21543,1266316478,2023-07-18T06:55:37Z,testsuite/integration-arquillian/tests/pom.xml,"@@ -125,7 +125,7 @@         <app.server.2.debug.suspend>n</app.server.2.debug.suspend>         <app.server.2.jboss.jvm.debug.args>-agentlib:jdwp=transport=dt_socket,server=y,suspend=${app.server.2.debug.suspend},address=localhost:${app.server.2.debug.port}</app.server.2.jboss.jvm.debug.args>         <app.server.memory.Xms>64m</app.server.memory.Xms>-        <app.server.memory.Xmx>512m</app.server.memory.Xmx>+        <app.server.memory.Xmx>768m</app.server.memory.Xmx>","Running internal adapter pipeline can be nice, however our java adapters are deprecated. So not 100% sure it is strictly needed if it is too much work... IMO any performance/memory ""regression"" specific only to java adapters is fine due their deprecation (as long as it does not affect the Keycloak server).",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/21765,1266453267,2023-07-18T08:49:25Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java,"@@ -201,6 +201,11 @@ private Response processGrantRequestInternal() {         }          formParams = formParameters;++        // This handles the scenario where user forgets to convert urlencoded data to string.+        if(formParams.size() == 1 && formParams.entrySet().iterator().next().getValue().get(0).isEmpty()) {","I would move this if above instead of the previous `if (formParameters == null) {` and maybe we need to check also if it's null or empty, something like:```        if (formParameters == null || formParameters.isEmpty() ||                (formParameters.size() == 1 && StringUtil.isBlank(formParameters.getFirst(formParameters.keySet().iterator().next())))) {```I have detected that this change make the test `ResourceOwnerPasswordCredentialsGrantTest.grantAccessTokenMissingGrantType` fail (different error returned). You can modify the test to compare with the new error message or pass a form entity with some parameters but no grant type.WDYT?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21783,1266689338,2023-07-18T12:21:03Z,js/apps/admin-ui/src/groups/GroupAttributes.tsx,"@@ -29,27 +27,24 @@ export const GroupAttributes = () => {   });    const location = useLocation();-  const id = getLastId(location.pathname);-  const { currentGroup, subGroups, setSubGroups } = useSubGroups();--  const convertAttributes = (attr?: Record<string, any>) => {-    return arrayToKeyValue(attr || currentGroup()?.attributes!);-  };+  const id = getLastId(location.pathname)!;+  const [currentGroup, setCurrentGroup] = useState<GroupRepresentation>(); -  useEffect(() => {-    form.setValue(""attributes"", convertAttributes());-  }, [subGroups]);+  useFetch(+    () => adminClient.groups.findOne({ id }),+    (group) => {+      convertToFormValues(group!, form.setValue);+      setCurrentGroup(group);+    },+    [],+  );    const save = async (attributeForm: AttributeForm) => {     try {-      const group = currentGroup();-      const attributes = keyValueToArray(attributeForm.attributes!);+      const group = currentGroup;","If `currentGroup` no longer needs to be called, perhaps we can remove this alias and just use it directly?",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/21487,1267891966,2023-07-19T10:37:45Z,services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java,"@@ -166,23 +169,75 @@ public Map<String, String> importFrom(@Parameter(description = ""JSON body"") Map<     }      /**-     * Get identity providers+     * List identity providers.      *-     * @return+     * @param search Filter to search specific providers by name. Search can be prefixed (name*), contains (*name*) or exact (\""name\""). Default prefixed.+     * @param firstResult Pagination offset+     * @param maxResults Maximum results size (defaults to 100)+     * @return The list of providers.      */     @GET     @Path(""instances"")     @NoCache     @Produces(MediaType.APPLICATION_JSON)     @Tag(name = KeycloakOpenAPI.Admin.Tags.IDENTITY_PROVIDERS)-    @Operation( summary = ""Get identity providers"")-    public Stream<IdentityProviderRepresentation> getIdentityProviders() {+    @Operation(summary = ""List identity providers"")+    public Stream<IdentityProviderRepresentation> getIdentityProviders(","@rmartinc @ssilvert @jonkoops The proposed ideas are great, however here the main question is if we:1) Follow the same pattern for identity-providers pagination like we're already doing for bunch of other Keycloak objects, which already support pagination (users, clients, roles etc)2) Introduce some new pagination approach (v2 pagination), which might be better and more effective as described in the ideas proposed above (among others, it would allow to avoid sending separate request to ""count"" endpoint etc)My vote is to go with (1) for identity-providers pagination and follow the same as we do for all other Keycloak pagination entities.I don't think we should introduce some new approach just for identity-providers TBH and make it inconsistent with other objects. It would makes more sense to postpone this possibly to admin REST API v2 (which is planned to be done at some point) and make sure it is consistent for all objects.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21807,1267905786,2023-07-19T10:52:20Z,js/apps/account-ui/public/locales/en/translation.json,"@@ -97,7 +98,7 @@   ""removeConsentError"": ""Could not remove consent due to: {{error}}"",   ""removeConsentSuccess"": ""Successfully removed consent"",   ""removeCred"": ""Remove {{0}}"",-  ""removeModalMessage"": ""Hiermee wordt de momenteel verleende toegangsrechten voor {{0}} verwijderd. U moet opnieuw toegang verlenen als u deze app wilt gebruiken."",+  ""removeModalMessage"": ""This will remove the currently granted access permission for {{0}}. You will need to grant access again if you want to use this app."","," Looks like I accidentally changed this label to Dutch in a previous PR, so I've fixed it here.",
173813,tbroyer,https://api.github.com/repos/keycloak/keycloak/pulls/20832,1269098807,2023-07-20T08:07:24Z,themes/src/main/resources/theme/base/login/webauthn-register.ftl,"@@ -128,13 +128,12 @@                     });             } -            function getPubKeyCredParams(signatureAlgorithms) {+            function getPubKeyCredParams(signatureAlgorithmsList) {                 let pubKeyCredParams = [];-                if (signatureAlgorithms === """") {+                if (signatureAlgorithmsList === []) {","This will always be false. To test for an empty array in JS, test for its length being zero.```suggestion                if (signatureAlgorithmsList.length === 0) {```Fwiw, instead of branching the return here, I think I'd rather push `-7` to the `signatureAlgorithmsList` then let the rest of the algorithm process it like for an non-empty initial list.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21231,1269196969,2023-07-20T09:26:43Z,operator/src/main/resources/application.properties,"@@ -11,6 +11,9 @@ operator.keycloak.image-pull-policy=Always quarkus.kubernetes.env.vars.operator-keycloak-image=${operator.keycloak.image} quarkus.openshift.env.vars.operator-keycloak-image=${operator.keycloak.image} +quarkus.kubernetes.env.fields.""quarkus.operator-sdk.namespaces""=metadata.annotations['olm.targetNamespaces']+quarkus.openshift.env.fields.""quarkus.operator-sdk.namespaces""=metadata.annotations['olm.targetNamespaces']","> I think my confusion here was that quarkus.operator-sdk.namespaces=JOSDK_WATCH_CURRENT seemed to be forcing the behavior in the image. However I just checked again and that's not the case. So it is possible to use that as a default, but that still isn't great - more below.It is actually forcing the image behaviour but can be easily overridden via env vars.> What are these used for?[For namespaced installations without OLM.](https://www.keycloak.org/operator/installation#_installing_by_using_kubectl_without_operator_lifecycle_manager)> It doesn't appear that quarkus.operator-sdk.namespaces alone will influence the creation of RoleBindings instead of ClusterRoleBindings. So you at least need to include a -Dquarkus.kubernetes.namespace so that the ClusterRoleBinding will be valid.I'm not sure I fully follow. :) The generated `kubernetes.yaml` is namespaced installation in any case. The service account is namespaced as well. If I understand correctly, even the ClusterRoleBinding is then specific for that single service account in that namespace. What's the difference than from the [current approach](https://github.com/keycloak/keycloak-k8s-resources/blob/795ad1492ef2b6f31ae779da3069b6d7232f5441/kubernetes/kubernetes.yml#L166-L176) with just RoleBindings?> In this pr the env property is already handled via the application.properties.My point is, I don't think we should be setting OLM specific annotations in application.properties as we don't always use OLM. We support installations without OLM in the upstream.> My thought was that eventually it would be nice to move away from using create-olm-bundle.sh - that should cut down on the variance between what we're testing via the local/remote tests vs olm.+1I think we could also use system properties during the operator build for OLM to set these env vars to avoid modifying the generated CSV via script.> Beyond that we don't want the OLM scripts to directly set anything about the namespaces in the CSV - that's a job for OLM itself based upon the InstallMode/operatorgroup.We would not be. We'd just override the default (that we set via application.properties) to make Operator honor the annotations that are set by OLM.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/20883,1269209560,2023-07-20T09:37:53Z,.mvn/maven-build-cache-config.xml,"@@ -0,0 +1,67 @@+<?xml version=""1.0"" encoding=""UTF-8"" ?>+<!--+  ~ Copyright 2022 Red Hat, Inc. and/or its affiliates+  ~ and other contributors as indicated by the @author tags.+  ~+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");+  ~ you may not use this file except in compliance with the License.+  ~ You may obtain a copy of the License at+  ~+  ~ http://www.apache.org/licenses/LICENSE-2.0+  ~+  ~ Unless required by applicable law or agreed to in writing, software+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+  ~ See the License for the specific language governing permissions and+  ~ limitations under the License.+  -->++<cache xmlns=""http://maven.apache.org/BUILD-CACHE-CONFIG/1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""+       xsi:schemaLocation=""http://maven.apache.org/BUILD-CACHE-CONFIG/1.0.0 https://maven.apache.org/xsd/build-cache-config-1.0.0.xsd"">+    <configuration>+        <enabled>false</enabled>+        <hashAlgorithm>XX</hashAlgorithm>+    </configuration>+    <input>+        <global>+            <!-- matching all files, as there is no good file pattern to match files in META-INF/services by their file name -->+            <glob>{*}</glob>+        </global>+        <plugins>+            <plugin groupId=""com.github.eirslett"" artifactId=""frontend-maven-plugin"">+                <dirScan>+                    <excludes>+                        <exclude tagName=""installDirectory"" />+                    </excludes>+                </dirScan>+            </plugin>+        </plugins>+    </input>+    <executionControl>+        <runAlways>+            <plugins>+                <plugin artifactId=""maven-failsafe-plugin""/>+            </plugins>+            <goalsLists>+                <goalsList artifactId=""maven-install-plugin"">+                    <goals>+                        <goal>install</goal>+                    </goals>+                </goalsList>+            </goalsLists>+        </runAlways>+        <reconcile>+            <plugins>+                <plugin artifactId=""maven-surefire-plugin"" goal=""test"">+                    <reconciles>+                        <!-- might reconsider later: if not putting them here, it might be simpler to run local tests incrementally -->+                        <reconcile propertyName=""skip"" skipValue=""true""/>+                        <reconcile propertyName=""skipExec"" skipValue=""true""/>+                        <reconcile propertyName=""skipTests"" skipValue=""true""/>+                        <reconcile propertyName=""testFailureIgnore"" skipValue=""true""/>+                    </reconciles>","The cache extension creates a hash value from all Maven plugin configurations including its parameters to see if the previous artifacts can be re-used. This instructs  the extension to consider an artifact unchanged and ready to be reused even if it previously was built with ""skipTests"" and you are now running it without that option. ",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/21231,1269277283,2023-07-20T10:39:54Z,operator/src/main/resources/application.properties,"@@ -11,6 +11,9 @@ operator.keycloak.image-pull-policy=Always quarkus.kubernetes.env.vars.operator-keycloak-image=${operator.keycloak.image} quarkus.openshift.env.vars.operator-keycloak-image=${operator.keycloak.image} +quarkus.kubernetes.env.fields.""quarkus.operator-sdk.namespaces""=metadata.annotations['olm.targetNamespaces']+quarkus.openshift.env.fields.""quarkus.operator-sdk.namespaces""=metadata.annotations['olm.targetNamespaces']","> It is actually forcing the image behaviour but can be easily overridden via env vars.By forcing I meant that it could not then be overriden via env vars.> I'm not sure I fully follow. :) The generated kubernetes.yaml is namespaced installation in any case. The service account is namespaced as well. If I understand correctly, even the ClusterRoleBinding is then specific for that single service account in that namespace. What's the difference than from the [current approach](https://github.com/keycloak/keycloak-k8s-resources/blob/795ad1492ef2b6f31ae779da3069b6d7232f5441/kubernetes/kubernetes.yml#L166-L176) with just RoleBindings?Before any of the pending upstream changes if you remove the namespaces from the controller annotations but set quarkus.operator-sdk.namespaces=JOSDK_WATCH_CURRENT it will create ClusterRoleBindings in the kubernetes.yml:```apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: keycloakrealmimportcontroller-cluster-role-bindingroleRef:  kind: ClusterRole  apiGroup: rbac.authorization.k8s.io  name: keycloakrealmimportcontroller-cluster-rolesubjects:  - kind: ServiceAccount    name: keycloak-operator```Note that the subject lacks a namespace, which makes it invalid.  You have to also specify quarkus.kubernetes.namespace for the generated yaml to be valid.",x
298807,Jamstah,https://api.github.com/repos/keycloak/keycloak/pulls/21231,1269298216,2023-07-20T11:00:11Z,operator/src/main/resources/application.properties,"@@ -11,6 +11,9 @@ operator.keycloak.image-pull-policy=Always quarkus.kubernetes.env.vars.operator-keycloak-image=${operator.keycloak.image} quarkus.openshift.env.vars.operator-keycloak-image=${operator.keycloak.image} +quarkus.kubernetes.env.fields.""quarkus.operator-sdk.namespaces""=metadata.annotations['olm.targetNamespaces']+quarkus.openshift.env.fields.""quarkus.operator-sdk.namespaces""=metadata.annotations['olm.targetNamespaces']","It is, and that's one reason they've changed to specific build time properties instead, so the `quarkus.operator-sdk.namespaces` won't affect build time any more. It was also called out by quarkus as an anti-pattern to use the same property for build and run time configuration.",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/21231,1269337406,2023-07-20T11:37:27Z,operator/src/main/resources/application.properties,"@@ -11,6 +11,9 @@ operator.keycloak.image-pull-policy=Always quarkus.kubernetes.env.vars.operator-keycloak-image=${operator.keycloak.image} quarkus.openshift.env.vars.operator-keycloak-image=${operator.keycloak.image} +quarkus.kubernetes.env.fields.""quarkus.operator-sdk.namespaces""=metadata.annotations['olm.targetNamespaces']+quarkus.openshift.env.fields.""quarkus.operator-sdk.namespaces""=metadata.annotations['olm.targetNamespaces']","Yes https://github.com/quarkiverse/quarkus-operator-sdk/issues/655 and https://github.com/quarkiverse/quarkus-operator-sdk/issues/653 were captured to address JOSDK issues.Here's a recap of where things are currently:- removing the namespaces from the controllers causes the kubernetes.yml to use ClusterRoleBindings.  - Using quarkus.operator-sdk.namespaces=JOSDK_WATCH_CURRENT - does not change the generation of ClusterRoleBindings.  - Using quarkus.operator-sdk.controllers.xxx.namespaces also does not change the generated kubernetes.yml - it would also need to be expressed as ${quarkus.operator-sdk.namespaces} otherwise it would prevent you from using the olm annotations to drive the namespaces.    - Using quarkus.operator-sdk.<controller name>.generate-with-watched-namespaces - does affect the kubernetes.yml, but it does appear to force the image to use only what is set - no matter how the property is set.I had initially used quarkus.operator-sdk.controllers.xxx.namespaces the other direction - leave the annotation namespaces set on the controllers, then allow these properties to override things.  The sticking point there however is there isn't a simplistic way to differentate between a missing annotation (non-olm installation) and an empty annotation (all namespaces case), so you have to leave the env field handling to the olm script and not the application.properties.  ",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21847,1269360094,2023-07-20T11:59:13Z,.github/workflows/schedule-nightly.yml,"@@ -0,0 +1,60 @@+name: Scheduled nightly workflows++on: +  schedule:+    - cron: '0 0 * * *'+  workflow_dispatch:++jobs:++  setup:+    if: github.event_name != 'schedule' || github.repository == 'stianst/keycloak'","I see you added an exception for your repo here, did you intend to commit that?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/21752,1269408596,2023-07-20T12:44:56Z,adapters/oidc/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/tomcat/AbstractKeycloakAuthenticatorValve.java,"@@ -68,7 +68,7 @@ public void lifecycleEvent(LifecycleEvent event) {             cache = false;         } else if (Lifecycle.AFTER_START_EVENT.equals(event.getType())) {         	keycloakInit();-        } else if (event.getType() == Lifecycle.BEFORE_STOP_EVENT) {+        } else if (event.getType().equals(Lifecycle.BEFORE_STOP_EVENT)) {","Please swap the two sides of the `equals` operation so that they are similar to the statement above. The new order has the advantage that the first part can never be null, so I consider it a best practice.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/21841,1269463450,2023-07-20T13:29:34Z,model/map/src/main/java/org/keycloak/models/map/datastore/MapExportImportManager.java,"@@ -491,11 +495,26 @@ public RealmModel importRealm(InputStream requestBody) {           might want to add the file name or the media type as a method parameter to switch between different implementations. */          RealmRepresentation rep;+        byte[] inputData = null;         try {-            rep = JsonSerialization.readValue(requestBody, RealmRepresentation.class);+            // read input data to be able to re-try later+            inputData = requestBody.readAllBytes();","Please close the stream, as `readAllBytes()` will no longer close it.```suggestion            try (requestBody) {                inputData = requestBody.readAllBytes();            }```",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/21846,1269498336,2023-07-20T13:53:32Z,docs/guides/server/hostname.adoc,"@@ -122,6 +123,18 @@ In this example, the server is accessible using a port other than the default po .Keycloak configuration: <@kc.start parameters=""--hostname-url=https://mykeycloak:8989""/> +=== Exposing the server behind a proxy while both using their own certificates++In this example, the server is running behind a proxy and both the server and the proxy are using their own certificates, so the communication between Keycloak and proxy is encrypted. Because we want from proxy to use its own certificate, the proxy mode `reencrypt` will be used. We need to keep in mind that the proxy configuration options (as well as hostname configuration options) are not changing the ports on which the server actually is listening on (it changes only the ports of static resources like JavaScript and CSS links, OIDC well-known endpoints, redirect URIs, etc). Therefore, we need to use HTTP configuration option in order to change the server behaviour and make Keycloak internally listening on a different port, e.g. 8543. The proxy will be listening on the port 8443 (the port visible while accessing the console via a browser). The example hostname `my-keycloak.org` will be used for the server and similarly, the admin console will be accessible via the `admin.my-keycloak.org` subdomain.","```suggestionIn this example, the server is running behind a proxy and both the server and the proxy are using their own certificates, so the communication between Keycloak and the proxy is encrypted. Because we want the proxy to use its own certificate, the proxy mode `reencrypt` will be used. We need to keep in mind that the proxy configuration options (as well as hostname configuration options) are not changing the ports on which the server actually is listening on (it changes only the ports of static resources like JavaScript and CSS links, OIDC well-known endpoints, redirect URIs, etc). Therefore, we need to use HTTP configuration options to change the Keycloak server to internally listen on a different port, e.g. 8543. The proxy will be listening on the port 8443 (the port visible while accessing the console via a browser). The example hostname `my-keycloak.org` will be used for the server and similarly the admin console will be accessible via the `admin.my-keycloak.org` subdomain.```",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/21565,1269587926,2023-07-20T14:57:06Z,pom.xml,"@@ -1893,6 +1903,24 @@         </pluginManagement>     </build> +    <!-- Enable this only in branches to experiment with snapshot releases from, for example, Infinispan -->",This does not look very nice. Should we rather add this here: https://github.com/keycloak/keycloak/blob/main/maven-settings.xml hidden behind some profile?,
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/21196,1269671646,2023-07-20T15:57:55Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java,"@@ -512,8 +512,11 @@ private Response logoutToken() {          try {             session.clientPolicy().triggerOnEvent(new LogoutRequestContext(form));+            refreshToken = form.getFirst(OAuth2Constants.REFRESH_TOKEN);         } catch (ClientPolicyException cpe) {-            throw new CorsErrorResponseException(cors, cpe.getError(), cpe.getErrorDetail(), cpe.getErrorStatus());+            if (!OAuthErrorException.INVALID_TOKEN.equals(cpe.getError())) {",Question: What is supposed to be done for INVALID_TOKEN client policy exception? How is it handled? Would it makes sense to at least throw a warning message to the log in case of that error?,x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/21196,1269743706,2023-07-20T17:07:58Z,services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java,"@@ -473,30 +473,33 @@ public Response createTokenResponse(UserModel user, UserSessionModel userSession             responseBuilder.generateIDToken().generateAccessTokenHash();         } +        AccessTokenResponse res = new AccessTokenResponse();         if (clientPolicyContextGenerator != null) {             try {-                session.clientPolicy().triggerOnEvent(clientPolicyContextGenerator.apply(responseBuilder));+                session.clientPolicy().triggerOnEvent(clientPolicyContextGenerator.apply(responseBuilder, res));","I suppose that main reason for this is, that you want some clientPolicyExecutor to be able to build the response by itself. I guess that is also the reason for the above `if` check `if (res.getToken() == null) {` , so the response is not built another time.One alternative approach to this might be to slightly refactor `TokenManager.AccessTokenResponseBuilder`, so that it will allow duplicated call to `build()` . I am thinking about something like:- In `TokenManager.AccessTokenResponseBuilder`, introducing variable like:```private AccessTokenResponse response;```- Then refactor method `TokenManager.AccessTokenResponseBuilder.build()` to be like:```public AccessTokenResponse build() {   if (this.response != null) return this.response;   ... Do the same code as of today with the exception of last line ...   this.response = res;   return this.response; ```In this case, there won't be a need to pass empty AccessTokenResponse and also it would be possible to avoid `if` condition below.WDYT?",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/21658,1270584112,2023-07-21T11:45:29Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDeployment.java,"@@ -241,8 +241,7 @@ private StatefulSet createBaseDeployment() {          if (!containerBuilder.hasReadinessProbe()) {             containerBuilder.withNewReadinessProbe()-                .withInitialDelaySeconds(20)-                .withPeriodSeconds(2)+                .withPeriodSeconds(1)","> WDYT?Agreed on the effect of changing the periodseconds, I had put something in the initial pr comment on that.  For the failureThreshold / total time, I'm unsure as to why it was as high as it is - the recent mentioning of long start up times from reading a db in another az gave me pause about what can be expected.  Since it seems like we're open to something like this change, I'll separate off a pr with a cross-reference to #21111 to discuss further.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21658,1270757344,2023-07-21T14:42:34Z,operator/src/test/java/org/keycloak/operator/testsuite/integration/BaseOperatorTest.java,"@@ -263,4 +267,44 @@ public static void after() throws FileNotFoundException {   public static String getCurrentNamespace() {     return namespace;   }++  public static String getTestCustomImage() {+    return customImage;+  }++  /**+   * Get the default deployment augmented by operator test settings+   * @param disableProbes when true the unsupported template will be used to effectively+   *   disable the probes, which will speed up testing for scenarios that don't interact+   *   with the underlying keycloak+   * @return+   */+  public static Keycloak getAugmentedKeycloakDeployment(boolean disableProbes) {","I would maybe use a different name for this. ""Augmented"" is a bit ambiguous because in Keycloak context we usually refer like this to Quarkus augmentation. While this might be true in this case (the custom image contains pre-augmented/optimized Keycloak image) it's a bit misleading as we're talking about ""default deployment augmented by operator test settings"".We could maybe call it something like `getTestKeycloakDeployment` or `getOptimizedKeycloakDeployment`.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21658,1270804568,2023-07-21T15:23:30Z,operator/src/test/java/org/keycloak/operator/testsuite/utils/K8sUtils.java,"@@ -113,37 +133,37 @@ public static String inClusterCurl(KubernetesClient k8sclient, String namespace,     }      public static String inClusterCurl(KubernetesClient k8sclient, String namespace, String... args) {-        var podName = KubernetesResourceUtil.sanitizeName(""curl-"" + UUID.randomUUID());+        var podName = ""curl-pod"";         try {-            Pod curlPod = k8sclient.run().inNamespace(namespace)-                    .withNewRunConfig()-                            .withArgs(args)-                            .withName(podName)-                            .withImage(""curlimages/curl:7.78.0"")-                            .withRestartPolicy(""Never"")-                            .done();-            Log.info(""Waiting for curl Pod to finish running"");-            Awaitility.await().atMost(3, TimeUnit.MINUTES)-                    .until(() -> {-                        String phase =-                                k8sclient.pods().inNamespace(namespace).withName(podName).get()-                                        .getStatus().getPhase();-                        return phase.equals(""Succeeded"") || phase.equals(""Failed"");-                    });--            String curlOutput =-                    k8sclient.pods().inNamespace(namespace)-                            .withName(curlPod.getMetadata().getName()).getLog();--            return curlOutput;-        } catch (KubernetesClientException ex) {-            throw new AssertionError(ex);-        } finally {-            Log.info(""Deleting curl Pod"");-            k8sclient.pods().inNamespace(namespace).withName(podName).delete();-            Awaitility.await().atMost(2, TimeUnit.MINUTES)-                    .until(() -> k8sclient.pods().inNamespace(namespace).withName(podName)-                            .get() == null);+            Pod curlPod = new PodBuilder().withNewMetadata().withName(podName).endMetadata().withNewSpec()+                    .addNewContainer()+                    .withImage(""curlimages/curl:8.1.2"")+                    .withCommand(""sh"")+                    .withName(""curl"")+                    .withStdin()+                    .endContainer()+                    .endSpec()+                    .build();++            try {+                k8sclient.resource(curlPod).create();","Can we really assume all tests in a test class (sharing the same namespace) use the same curl command? Even if now it might be true, I don't think we can make assumptions like that.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21658,1271806301,2023-07-24T06:31:27Z,operator/src/test/java/org/keycloak/operator/testsuite/utils/K8sUtils.java,"@@ -113,37 +133,37 @@ public static String inClusterCurl(KubernetesClient k8sclient, String namespace,     }      public static String inClusterCurl(KubernetesClient k8sclient, String namespace, String... args) {-        var podName = KubernetesResourceUtil.sanitizeName(""curl-"" + UUID.randomUUID());+        var podName = ""curl-pod"";         try {-            Pod curlPod = k8sclient.run().inNamespace(namespace)-                    .withNewRunConfig()-                            .withArgs(args)-                            .withName(podName)-                            .withImage(""curlimages/curl:7.78.0"")-                            .withRestartPolicy(""Never"")-                            .done();-            Log.info(""Waiting for curl Pod to finish running"");-            Awaitility.await().atMost(3, TimeUnit.MINUTES)-                    .until(() -> {-                        String phase =-                                k8sclient.pods().inNamespace(namespace).withName(podName).get()-                                        .getStatus().getPhase();-                        return phase.equals(""Succeeded"") || phase.equals(""Failed"");-                    });--            String curlOutput =-                    k8sclient.pods().inNamespace(namespace)-                            .withName(curlPod.getMetadata().getName()).getLog();--            return curlOutput;-        } catch (KubernetesClientException ex) {-            throw new AssertionError(ex);-        } finally {-            Log.info(""Deleting curl Pod"");-            k8sclient.pods().inNamespace(namespace).withName(podName).delete();-            Awaitility.await().atMost(2, TimeUnit.MINUTES)-                    .until(() -> k8sclient.pods().inNamespace(namespace).withName(podName)-                            .get() == null);+            Pod curlPod = new PodBuilder().withNewMetadata().withName(podName).endMetadata().withNewSpec()+                    .addNewContainer()+                    .withImage(""curlimages/curl:8.1.2"")+                    .withCommand(""sh"")+                    .withName(""curl"")+                    .withStdin()+                    .endContainer()+                    .endSpec()+                    .build();++            try {+                k8sclient.resource(curlPod).create();","Sorry, yes, you are right. The curl command is no longer the startup command.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/20472,1274402600,2023-07-26T05:44:27Z,quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java,"@@ -266,7 +266,7 @@ public void testDatabaseDefaults() {         System.setProperty(CLI_ARGS, ""--db=dev-file"");         SmallRyeConfig config = createConfig();         assertEquals(H2Dialect.class.getName(), config.getConfigValue(""kc.db-dialect"").getValue());-        assertEquals(""jdbc:h2:file:"" + System.getProperty(""user.home"") + File.separator + ""data"" + File.separator + ""h2"" + File.separator + ""keycloakdb;;AUTO_SERVER=TRUE;NON_KEYWORDS=VALUE"", config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());+        assertEquals(replaceSeparators(""jdbc:h2:file:"" + System.getProperty(""user.home"") + File.separator + ""data"" + File.separator + ""h2"" + File.separator + ""keycloakdb;;AUTO_SERVER=TRUE;NON_KEYWORDS=VALUE""), config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());","```suggestion        assertEquals(""jdbc:h2:file:"" + System.getProperty(""user.home"") + ""/data/h2/keycloakdb;;AUTO_SERVER=TRUE;NON_KEYWORDS=VALUE"", config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());```",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/20472,1274403204,2023-07-26T05:45:28Z,quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java,"@@ -343,13 +343,13 @@ public void testDatabaseProperties() {         System.setProperty(CLI_ARGS, ""--db=dev-file"");         SmallRyeConfig config = createConfig();         assertEquals(H2Dialect.class.getName(), config.getConfigValue(""kc.db-dialect"").getValue());-        assertEquals(""jdbc:h2:file:test-dir"" + File.separator + ""data"" + File.separator + ""h2"" + File.separator + ""keycloakdb;;test=test;test1=test1;NON_KEYWORDS=VALUE"", config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());+        assertEquals(replaceSeparators(""jdbc:h2:file:test-dir"" + File.separator + ""data"" + File.separator + ""h2"" + File.separator + ""keycloakdb;;test=test;test1=test1;NON_KEYWORDS=VALUE""), config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());","```suggestion        assertEquals(""jdbc:h2:file:test-dir/data/h2/keycloakdb;;test=test;test1=test1;NON_KEYWORDS=VALUE"", config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());```",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/20472,1274403535,2023-07-26T05:46:02Z,quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java,"@@ -343,13 +343,13 @@ public void testDatabaseProperties() {         System.setProperty(CLI_ARGS, ""--db=dev-file"");         SmallRyeConfig config = createConfig();         assertEquals(H2Dialect.class.getName(), config.getConfigValue(""kc.db-dialect"").getValue());-        assertEquals(""jdbc:h2:file:test-dir"" + File.separator + ""data"" + File.separator + ""h2"" + File.separator + ""keycloakdb;;test=test;test1=test1;NON_KEYWORDS=VALUE"", config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());+        assertEquals(replaceSeparators(""jdbc:h2:file:test-dir"" + File.separator + ""data"" + File.separator + ""h2"" + File.separator + ""keycloakdb;;test=test;test1=test1;NON_KEYWORDS=VALUE""), config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());         assertEquals(""xa"", config.getConfigValue(""quarkus.datasource.jdbc.transactions"").getValue());          System.setProperty(CLI_ARGS, """");         config = createConfig();         assertEquals(H2Dialect.class.getName(), config.getConfigValue(""kc.db-dialect"").getValue());-        assertEquals(""jdbc:h2:file:test-dir"" + File.separator + ""data"" + File.separator + ""h2"" + File.separator + ""keycloakdb;;test=test;test1=test1;NON_KEYWORDS=VALUE"", config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());+        assertEquals(replaceSeparators(""jdbc:h2:file:test-dir"" + File.separator + ""data"" + File.separator + ""h2"" + File.separator + ""keycloakdb;;test=test;test1=test1;NON_KEYWORDS=VALUE""), config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());","```suggestion        assertEquals(""jdbc:h2:file:test-dir/data/h2/keycloakdb;;test=test;test1=test1;NON_KEYWORDS=VALUE"", config.getConfigValue(""quarkus.datasource.jdbc.url"").getValue());```",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/19306,1274424432,2023-07-26T06:17:18Z,server-spi-private/src/main/java/org/keycloak/policy/BlacklistPasswordPolicyProvider.java,"@@ -46,7 +46,7 @@ public PolicyError validate(String username, String password) {      PasswordBlacklist blacklist = (FileBasedPasswordBlacklist) policyConfig; -    if (!blacklist.contains(password.toLowerCase())) {+    if (!blacklist.contains(password)) {","I like the idea of lower-casing the values from the blacklist file, which looks like you are already doing.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/19306,1274425067,2023-07-26T06:18:12Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/policy/PasswordPolicyTest.java,"@@ -180,6 +180,8 @@ public void testBlacklistPasswordPolicyWithTestBlacklist() throws Exception {             Assert.assertEquals(BlacklistPasswordPolicyProvider.ERROR_MESSAGE, policyManager.validate(""jdoe"", ""blacklisted1"").getMessage());             Assert.assertEquals(BlacklistPasswordPolicyProvider.ERROR_MESSAGE, policyManager.validate(""jdoe"", ""blacklisted2"").getMessage());             Assert.assertEquals(BlacklistPasswordPolicyProvider.ERROR_MESSAGE, policyManager.validate(""jdoe"", ""bLaCkLiSteD2"").getMessage());+            // Passwords with upper-case present in blacklist must be found and blocked:+            Assert.assertEquals(BlacklistPasswordPolicyProvider.ERROR_MESSAGE, policyManager.validate(""jdoe"", ""BlackListed3"").getMessage());",Would be good to also test with some casing that differs from what is added to test-password-blacklist.txt to check that all verification is indeed case insensitive + any upper-case is lower-cased when loading the file,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21846,1274430105,2023-07-26T06:23:40Z,docs/guides/server/hostname.adoc,"@@ -40,7 +40,7 @@ Most of the time, it should be enough to set the `hostname` option in order to c When using the `hostname` option the server is going to resolve the HTTP scheme, port, and path, automatically so that:  * `https` scheme is used unless you set `hostname-strict-https=false`-* Use the standard HTTP ports (e.g.: `80` and `443`) if a `proxy` is set or use the port you set to the `hostname-port` option+* if `proxy` option is set, the proxy is expected to use the default  ports (e.g.: 80 and 443), in case the proxy uses a different port, it needs to be specified via the `hostname-port` configuration option","Yeah, that placement works for me. I'd just rephrase a bit maybe as we are changing KC behaviour in any case (even with hostname options) just not the ports KC listens on.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/21888,1274596830,2023-07-26T08:50:47Z,themes/src/main/resources/theme/base/email/messages/messages_en.properties,"@@ -39,18 +39,11 @@ requiredAction.VERIFY_EMAIL=Verify Email requiredAction.CONFIGURE_RECOVERY_AUTHN_CODES=Generate Recovery Codes  # units for link expiration timeout formatting-linkExpirationFormatter.timePeriodUnit.seconds=seconds-linkExpirationFormatter.timePeriodUnit.seconds.1=second-linkExpirationFormatter.timePeriodUnit.minutes=minutes-linkExpirationFormatter.timePeriodUnit.minutes.1=minute-#for language which have more unit plural forms depending on the value (eg. Czech and other Slavic langs) you can override unit text for some other values like this: -#linkExpirationFormatter.timePeriodUnit.minutes.2=minuty-#linkExpirationFormatter.timePeriodUnit.minutes.3=minuty-#linkExpirationFormatter.timePeriodUnit.minutes.4=minuty-linkExpirationFormatter.timePeriodUnit.hours=hours-linkExpirationFormatter.timePeriodUnit.hours.1=hour-linkExpirationFormatter.timePeriodUnit.days=days-linkExpirationFormatter.timePeriodUnit.days.1=day+linkExpirationFormatter.timePeriodUnit.seconds={0,choice,0#seconds|1#second|1<seconds}","IMHO the translation tools would recognize a Java message format `{0,choice,...}` and then validate it accordingly. So it is the best format for translation.For some of the languages which didn't have any plurals (like `ja` and `tr` locales), where this is then very simple, although this is the exception.So I'd like to proceed with this setup. ",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/21915,1274657404,2023-07-26T09:23:15Z,.github/workflows/ci.yml,"@@ -76,6 +77,16 @@ jobs:         if: always()         uses: ./.github/actions/upload-heapdumps +      - name: Surefire reports+        if:  (!cancelled() && contains(fromJSON(${{ env.RELEASE_BRANCHES }}), github.ref) && contains(fromJSON('[""push"", ""workflow_dispatch""]'), github.event_name))+        uses: ./.github/actions/surefire-reports+        with:+          testrun-name: surefire-unit-tests+          reports-path: |","Wonder if we could just specify a pattern that includes all surefire reports instead of having to specify it for each individual job?Also, could you use ""job-name"" instead of ""testrun-name"" to make it consistent with upload-flaky-tests?As a follow-up to this PR I would probably want to refactor upload-headdumps, upload-flaky-test, and this one to a single action upload-reports or something so we don't have to have so much boilerplate.",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/21912,1274785855,2023-07-26T10:54:36Z,quarkus/config-api/src/main/java/org/keycloak/config/HttpOptions.java,"@@ -56,7 +56,7 @@ public enum ClientAuth {     public static final Option HTTPS_PROTOCOLS = new OptionBuilder<>(""https-protocols"", String.class)             .category(OptionCategory.HTTP)             .description(""The list of protocols to explicitly enable."")-            .defaultValue(""TLSv1.3"")+            .defaultValue(""TLSv1.3,TLSv1.2"")","Approved, as the current NIST SP 800-52 Rev. 2 guideline recommends to enable TLSv1.3 alongside TLSv1.2, so clients can choose the ""better"" protocol on their capabilities.",
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/21912,1274816434,2023-07-26T11:24:47Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java,"@@ -123,7 +123,7 @@ void testUnknownQuarkusBuildTimePropertyApplied(LaunchResult result) {     }      @Test-    @Launch({ ""start"", ""--http-enabled=true"", ""--hostname-strict=false"", ""--config-keystore=keystore"" })+    @Launch({ ""start"", ""--http-enabled=true"", ""--hostname-strict=false"", ""--config-keystore=../../../../src/test/resources/keystore"" })","Just to be sure, this change was necessary because the invalid keystore path exception would take a precedence?I haven't gone through the recent smallrye-keystore changes, but this might indicate that there are some improvements when it comes to exception handling, so [our custom property validation](https://github.com/keycloak/keycloak/blob/0c44b28b631aea25c2e09043a9b047cf1147c0a5/quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java#L41) might be redundant to some extent.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/21912,1274886478,2023-07-26T12:30:54Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/QuarkusPropertiesDistTest.java,"@@ -123,7 +123,7 @@ void testUnknownQuarkusBuildTimePropertyApplied(LaunchResult result) {     }      @Test-    @Launch({ ""start"", ""--http-enabled=true"", ""--hostname-strict=false"", ""--config-keystore=keystore"" })+    @Launch({ ""start"", ""--http-enabled=true"", ""--hostname-strict=false"", ""--config-keystore=../../../../src/test/resources/keystore"" })","> Just to be sure, this change was necessary because the invalid keystore path exception would take a precedence?Yes but it still triggered our custom validation, not anything in SmallRye.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/21973,1275869154,2023-07-27T07:49:31Z,docs/documentation/server_admin/topics/clients/oidc/con-advanced-settings.adoc,"@@ -94,6 +94,39 @@ See https://datatracker.ietf.org/doc/html/draft-ietf-oauth-mtls-08#section-3[Mut Currently, {project_name} client adapters do not support holder-of-key token verification. {project_name} adapters treat access and refresh tokens as bearer tokens. ==== +[[_dpop-bound-tokens]]+*OAuth 2.0 Demonstrating Proof-of-Possession at the Application Layer (DPoP)*++DPoP binds an access token and a refresh token together with the public part of a client's key pair. This binding prevents an attacker from using stolen tokens.++This type of token is a holder-of-key token. Unlike bearer tokens, the recipient of a holder-of-key token can verify if the sender of the token is legitimate.++If this setting is on, the workflow is:++. A token request is sent to the token endpoint in an authorization code flow or hybrid flow.+. {project_name} requests a DPoP proof.+. {project_name} receives the DPoP proof.+. {project_name} successfully verifies the DPoP proof.++If verification fails, {project_name} rejects the token.++In the following cases, {project_name} will verify the client sending the access token or the refresh token:++* A token refresh request is sent to the token endpoint with a holder-of-key refresh token.+* A logout request is sent to Logout endpoint with a holder-of-key refresh token.","By the way, I think you know that this is Keycloak proprietary logout endpoint (not OIDC based) with refreshToken sent as an argument. This endpoint is used by our (deprecated) java adapters. Not sure if to emphasize it in the documentation as well?In this case, we should possibly also update the corresponding paragraph in the MTLS HoK section above. But if you prefer to not emphasize it, it is fine to me.",
26901232,rmartinc,https://api.github.com/repos/keycloak/keycloak/pulls/22003,1275963016,2023-07-27T09:00:33Z,services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java,"@@ -166,21 +170,81 @@ public Map<String, String> importFrom(@Parameter(description = ""JSON body"") Map<     }      /**-     * Get identity providers+     * List identity providers.      *-     * @return+     * @param search Filter to search specific providers by name. Search can be prefixed (name*), contains (*name*) or exact (\""name\""). Default prefixed.+     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false)+     * @param firstResult Pagination offset+     * @param maxResults Maximum results size (defaults to 100)+     * @return The list of providers.      */     @GET     @Path(""instances"")     @NoCache     @Produces(MediaType.APPLICATION_JSON)     @Tag(name = KeycloakOpenAPI.Admin.Tags.IDENTITY_PROVIDERS)-    @Operation( summary = ""Get identity providers"")-    public Stream<IdentityProviderRepresentation> getIdentityProviders() {+    @Operation(summary = ""List identity providers"")+    public Stream<IdentityProviderRepresentation> getIdentityProviders(+            @Parameter(description = ""Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\""name\""). Default prefixed."") @QueryParam(""search"") String search,+            @Parameter(description = ""Boolean which defines whether brief representations are returned (default: false)"") @QueryParam(""briefRepresentation"") Boolean briefRepresentation,+            @Parameter(description = ""Pagination offset"") @QueryParam(""first"") Integer firstResult,+            @Parameter(description = ""Maximum results size (defaults to 100)"") @QueryParam(""max"") Integer maxResults) {+        this.auth.realm().requireViewIdentityProviders();++        if (maxResults == null) {+            maxResults = 100; // always set a maximum of 100+        }++        Function<IdentityProviderModel, IdentityProviderRepresentation> toRepresentation = briefRepresentation != null && briefRepresentation+                ? m -> ModelToRepresentation.toBriefRepresentation(realm, m)+                : m -> StripSecretsUtils.strip(ModelToRepresentation.toRepresentation(realm, m));++        Stream<IdentityProviderModel> stream = realm.getIdentityProvidersStream().sorted(new IdPComparator());+        if (!StringUtil.isBlank(search)) {+            stream = stream.filter(predicateByName(search));+        }+        if (firstResult != null) {+            stream = stream.skip(firstResult);+        }+        return stream.limit(maxResults).map(toRepresentation);+    }++    /**+     * Count identity providers.+     *+     * @param search Filter to search specific providers by name. Search can be prefixed (name*), contains (*name*) or exact (\""name\""). Default prefixed.+     * @return Integer count of providers.+     */+    @GET+    @Path(""instances/count"")+    @NoCache+    @Produces(MediaType.APPLICATION_JSON)+    @Tag(name = KeycloakOpenAPI.Admin.Tags.IDENTITY_PROVIDERS)+    @Operation( summary = ""Count identity providers"")+    public Integer countIdentityProviders(","Ah! Okis, the I will remove the `count` endpoint. I just added it because I cloned the behavior in the users endpoints.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/21990,1276014751,2023-07-27T09:32:05Z,js/libs/keycloak-js/src/keycloak.js,"@@ -1021,27 +1022,11 @@ function Keycloak (config) {     }      function decodeToken(str) {","I think we can replace this entire function with `jwtDecode`, there should be no need to keep the exception the same here.",x
12138171,Pepo48,https://api.github.com/repos/keycloak/keycloak/pulls/21846,1276247053,2023-07-27T12:59:36Z,docs/guides/server/hostname.adoc,"@@ -40,7 +40,7 @@ Most of the time, it should be enough to set the `hostname` option in order to c When using the `hostname` option the server is going to resolve the HTTP scheme, port, and path, automatically so that:  * `https` scheme is used unless you set `hostname-strict-https=false`-* Use the standard HTTP ports (e.g.: `80` and `443`) if a `proxy` is set or use the port you set to the `hostname-port` option+* if `proxy` option is set, the proxy is expected to use the default  ports (e.g.: 80 and 443), in case the proxy uses a different port, it needs to be specified via the `hostname-port` configuration option","@shawkins if I may ask, what's the rule of thumb when it comes to using e.g. vs. i.e.? There are still multiple places in within this guide, where e.g. is used. Should I fix it everywhere?Up to this moment I've thought we use e.g. when we list examples right after it.",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/21846,1276264604,2023-07-27T13:14:07Z,docs/guides/server/hostname.adoc,"@@ -40,7 +40,7 @@ Most of the time, it should be enough to set the `hostname` option in order to c When using the `hostname` option the server is going to resolve the HTTP scheme, port, and path, automatically so that:  * `https` scheme is used unless you set `hostname-strict-https=false`-* Use the standard HTTP ports (e.g.: `80` and `443`) if a `proxy` is set or use the port you set to the `hostname-port` option+* if `proxy` option is set, the proxy is expected to use the default  ports (e.g.: 80 and 443), in case the proxy uses a different port, it needs to be specified via the `hostname-port` configuration option","> @shawkins if I may ask, what's the rule of thumb when it comes to using e.g. vs. i.e.? There are still multiple places in within this guide, where e.g. is used. Should I fix it everywhere?> > Up to this moment I've thought we use e.g. when we list examples right after it.The usage is roughly:- e.g. lists one or more examples out of a larger possible set.- i.e. lists all possible values - typically a small number",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/22060,1277320064,2023-07-28T09:22:38Z,.github/workflows/ci.yml,"@@ -9,7 +9,9 @@ on:   workflow_dispatch:  env:+  MAVEN_ARGS: ""-B -nsu -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.httpconnectionManager.ttlSeconds=120""   SUREFIRE_RERUN_FAILING_COUNT: 2","Seems so, not sure how it's used but it is used here:https://github.com/keycloak/keycloak/blob/08dfdffbfbea8ea8b4191cec5ee1926b2a386c99/.github/workflows/ci.yml#L394",
69153350,andreas-blaettlinger,https://api.github.com/repos/keycloak/keycloak/pulls/22068,1277521391,2023-07-28T13:03:41Z,themes/src/main/resources/theme/base/login/login-password.ftl,"@@ -10,10 +10,16 @@                     <div class=""${properties.kcFormGroupClass!} no-bottom-margin"">                         <hr/>                         <label for=""password"" class=""${properties.kcLabelClass!}"">${msg(""password"")}</label>-                        <input tabindex=""2"" id=""password"" class=""${properties.kcInputClass!}"" name=""password""-                               type=""password"" autocomplete=""on"" autofocus-                               aria-invalid=""<#if messagesPerField.existsError('password')>true</#if>""-                        />+                        <div class=""${properties.kcInputGroup!}"">+                            <input tabindex=""2"" id=""password"" class=""${properties.kcInputClass!}"" name=""password""+                                   type=""password"" autocomplete=""on"" autofocus+                                   aria-invalid=""<#if messagesPerField.existsError('password')>true</#if>""+                            />+                            <button class=""pf-c-button pf-m-control"" type=""button"" aria-label=""Show password""","I agree. How would you update the `aria-label` on the `onclick` event with localized texts? I won't be able to access the `msg()` function from the js module. Of course I could pass the messages as parameter like this: ```<button onclick=""passwordVisibility.toggle(this, 'password', '${msg('showPassword')}', '${msg('hidePassword')}')"">```Another (probably worse) idea is a separat (global) script block in the FTL and access them in the module directly: ```<script>    const msg = {        hidePassword: ""${msg('hidePassword')}"",        showPassword: ""${msg('showPassword')}"",    };</script><button onclick=""passwordVisibility.toggle(this, 'password')"">```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22068,1277588084,2023-07-28T14:05:59Z,themes/src/main/resources/theme/base/login/login-password.ftl,"@@ -10,10 +10,16 @@                     <div class=""${properties.kcFormGroupClass!} no-bottom-margin"">                         <hr/>                         <label for=""password"" class=""${properties.kcLabelClass!}"">${msg(""password"")}</label>-                        <input tabindex=""2"" id=""password"" class=""${properties.kcInputClass!}"" name=""password""-                               type=""password"" autocomplete=""on"" autofocus-                               aria-invalid=""<#if messagesPerField.existsError('password')>true</#if>""-                        />+                        <div class=""${properties.kcInputGroup!}"">+                            <input tabindex=""2"" id=""password"" class=""${properties.kcInputClass!}"" name=""password""+                                   type=""password"" autocomplete=""on"" autofocus+                                   aria-invalid=""<#if messagesPerField.existsError('password')>true</#if>""+                            />+                            <button class=""pf-c-button pf-m-control"" type=""button"" aria-label=""Show password""","I think the best approach would possibly be to use `data-` attributes to set this. It's a bit of an old school method, but it should work. So the HTML would look something like:```html<button data-label-show=""${msg('showPassword')}"" data-label-hide=""${msg('showPassword')}"">```You can learn more about working with data attributes on [MDN](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes).",x
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/21755,1279081168,2023-07-31T10:06:50Z,docs/documentation/upgrading/topics/keycloak/changes-23_0_0.adoc,"@@ -11,3 +11,12 @@ In these cases, it may be useful to disable adding the `iss` parameter to the au for the particular client in the {project_name} Admin console, in client details in the section with `OpenID Connect Compatibility Modes`, described in <<_compatibility_with_older_adapters>>. Dedicated `Exclude Issuer From Authentication Response` switch exists, which can be turned on to prevent adding the `iss` parameter to the authentication response.++= Language files for themes default to UTF-8 encoding++This release now follows the standard mechanisms of Java and later, which assumes resource bundle files to be encoded in UTF-8.++Previous versions of Keycloak supported specifying the encoding in the first line with a comment like `# encoding: UTF-8`, which is no longer supported and is ignored.++Message properties files for themes are now are read in UTF-8 encoding, with an automatic fallback to ISO-8859-1 encoding.","Yes, it is possible that people used different encodings in the past, but no longer supported. I've added one more sentence to the migration guide: > If you are using a different encoding, convert the files to UTF-8.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22068,1280379007,2023-08-01T09:46:48Z,themes/src/main/resources/theme/base/login/resources/js/passwordVisibility.js,"@@ -0,0 +1,16 @@+export default class PasswordVisibility {+    static toggle(button, id) {+        const passwordElement = document.getElementById(id);+        if (passwordElement.type === ""password"") {+            passwordElement.type = ""text"";+            button.children.item(0).classList.replace(""fa-eye"", ""fa-eye-slash"");+            button.setAttribute(""aria-label"", button.dataset.labelHide);+        } else if(passwordElement.type === ""text"") {+            passwordElement.type = ""password"";+            button.children.item(0).classList.replace(""fa-eye-slash"", ""fa-eye"");+            button.setAttribute(""aria-label"", button.dataset.labelShow);+        }+    }+}++window.PasswordVisibility = PasswordVisibility;","Instead of exposing this as a global, I think it would be better if we found the elements on the page that are toggles by a special attribute. For example:```html<button  type=""button""  aria-label=""${msg('showPassword')}""  data-password-toggle  data-label-show=""${msg('showPassword')}""  data-label-hide=""${msg('hidePassword')}""></button>```These elements can then be retrieved in this file without leaking into the global scope:```jsdocument.querySelectorAll('[data-password-toggle]');```",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/8022,1280425806,2023-08-01T10:22:11Z,services/src/main/java/org/keycloak/services/resources/account/LinkedAccountsResource.java,"@@ -94,31 +93,47 @@ public LinkedAccountsResource(KeycloakSession session,         this.user = user;         realm = session.getContext().getRealm();     }-    +     @GET     @Path(""/"")     @Produces(MediaType.APPLICATION_JSON)-    public Response linkedAccounts() {+    public Response linkedAccounts(+            @QueryParam(""linked"") Boolean linked,+            @QueryParam(""keyword"") @DefaultValue("""") String keyword,+            @QueryParam(""first"") @DefaultValue(""0"") Integer firstResult,+            @QueryParam(""max"") @DefaultValue(""2147483647"") Integer maxResults+    ) {         auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);-        SortedSet<LinkedAccountRepresentation> linkedAccounts = getLinkedAccounts(this.session, this.realm, this.user);-        return Cors.add(request, Response.ok(linkedAccounts)).auth().allowedOrigins(auth.getToken()).build();++        List<FederatedIdentityModel> federatedIdentities = session.users().getFederatedIdentitiesStream(realm, user).collect(Collectors.toList());+        Set<String> socialIds = findSocialIds();++        final String term = keyword.toLowerCase().trim();+        List<LinkedAccountRepresentation> accounts = realm.getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled)+                .filter(idp -> {+                    if(keyword.isEmpty())+                        return true;+                    return idp.getAlias().toLowerCase().contains(term) || (idp.getDisplayName()!=null && idp.getDisplayName().toLowerCase().contains(term));+                })+                .map(provider -> toLinkedAccountRepresentation(provider, socialIds, federatedIdentities))+                .filter(rep -> {+                    return linked ? rep.isConnected() : !rep.isConnected();","For backwards compatibility, it will be good to preserve same behaviour like before when `linked` parameter is not present when this endpoint is invoked. This means that when `linked` parameter is not present, all identity providers should be included, when unlinked would have empty `linkedUsername` field inside the JSON.IMO it should be fine as in case you have `linked=true`, you can include only linked and when `linked=false`, you can include only unlinked.For backwards compatibility, it would be also good to keep the same response format in case that `linked` parameter is omited (which means to avoid wrapping response data within the `ResultSet`, but just return the list as it was before).So here is the question if it is rather clear to introduce new endpoint for the new format of data (perhaps something like `/v2`).@jonkoops WDYT? In account REST API, we don't yet have any pagination, so perhaps here is possibly good to start with some cleaner API from the beginning?",
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/8022,1280644622,2023-08-01T13:26:47Z,services/src/main/java/org/keycloak/services/resources/account/LinkedAccountsResource.java,"@@ -94,31 +93,47 @@ public LinkedAccountsResource(KeycloakSession session,         this.user = user;         realm = session.getContext().getRealm();     }-    +     @GET     @Path(""/"")     @Produces(MediaType.APPLICATION_JSON)-    public Response linkedAccounts() {+    public Response linkedAccounts(+            @QueryParam(""linked"") Boolean linked,+            @QueryParam(""keyword"") @DefaultValue("""") String keyword,+            @QueryParam(""first"") @DefaultValue(""0"") Integer firstResult,+            @QueryParam(""max"") @DefaultValue(""2147483647"") Integer maxResults+    ) {         auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);-        SortedSet<LinkedAccountRepresentation> linkedAccounts = getLinkedAccounts(this.session, this.realm, this.user);-        return Cors.add(request, Response.ok(linkedAccounts)).auth().allowedOrigins(auth.getToken()).build();++        List<FederatedIdentityModel> federatedIdentities = session.users().getFederatedIdentitiesStream(realm, user).collect(Collectors.toList());+        Set<String> socialIds = findSocialIds();++        final String term = keyword.toLowerCase().trim();+        List<LinkedAccountRepresentation> accounts = realm.getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled)+                .filter(idp -> {+                    if(keyword.isEmpty())+                        return true;+                    return idp.getAlias().toLowerCase().contains(term) || (idp.getDisplayName()!=null && idp.getDisplayName().toLowerCase().contains(term));+                })+                .map(provider -> toLinkedAccountRepresentation(provider, socialIds, federatedIdentities))+                .filter(rep -> {+                    return linked ? rep.isConnected() : !rep.isConnected();","> For backwards compatibility, it will be good to preserve same behaviour like before when `linked` parameter is not present when this endpoint is invoked. This means that when `linked` parameter is not present, all identity providers should be included, when unlinked would have empty `linkedUsername` field inside the JSON.> > IMO it should be fine as in case you have `linked=true`, you can include only linked and when `linked=false`, you can include only unlinked.> > For backwards compatibility, it would be also good to keep the same response format in case that `linked` parameter is omited (which means to avoid wrapping response data within the `ResultSet`, but just return the list as it was before).> > So here is the question if it is rather clear to introduce new endpoint for the new format of data (perhaps something like `/v2`).> > @jonkoops WDYT? In account REST API, we don't yet have any pagination, so perhaps here is possibly good to start with some cleaner API from the beginning?@mposolda  So you want to have old response (all Identity Providers) if linked is empty, don't you?We do not have problem. In new account console linked will be either true either false.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22162,1281488201,2023-08-02T07:10:25Z,docs/guides/server/containers.adoc,"@@ -54,12 +54,24 @@ The build process includes multiple stages: * In the final image, additional configuration options for the hostname and database are set so that you don't need to set them again when running the container. * In the entrypoint, the `kc.sh` enables access to all the distribution sub-commands. -To install custom providers, you just need to define a step to include the JAR file(s) into the `/opt/keycloak/providers` directory:+To install custom providers, you just need to define a step to include the JAR file(s) into the `/opt/keycloak/providers` directory.+This step must be placed _after_ the first `FROM` line and before the line that `RUNs` the `build` command, as below: ","I would not emphasise the first `FROM`. There can be some more stages, see e.g.https://github.com/keycloak/keycloak/blob/816ed5d3e0f0885a6bb57034be2433a7c7ac78aa/docs/guides/server/containers.adoc?plain=1#L79-L84",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22155,1281600669,2023-08-02T08:50:49Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakService.java,"@@ -44,15 +45,21 @@ public KeycloakService(KubernetesClient client, Keycloak keycloakCR) {     }      private ServiceSpec getServiceSpec() {-        String name = isTlsConfigured(keycloak) ? Constants.KEYCLOAK_HTTPS_PORT_NAME : Constants.KEYCLOAK_HTTP_PORT_NAME;-        return new ServiceSpecBuilder()-              .addNewPort()-              .withPort(getServicePort(keycloak))-              .withName(name)-              .withProtocol(Constants.KEYCLOAK_SERVICE_PROTOCOL)-              .endPort()-              .withSelector(getInstanceLabels())-              .build();+        var builder = new ServiceSpecBuilder().withSelector(getInstanceLabels());++        boolean isTlsConfigured = isTlsConfigured(keycloak);+        if (!isTlsConfigured+                || Optional.ofNullable(keycloak.getSpec().getHttpSpec()).map(HttpSpec::getHttpEnabled).orElse(false)) {","I don't really like the comprehensive statements in conditions as it causes worse readability. I'd instead create a separate variable with a proper name. In order to support lazy evaluation, we can use a Supplier (or Predicate). @shawkins WDYT?```suggestion        boolean isTlsConfigured = isTlsConfigured(keycloak);        BooleanSupplier isHttpEnabled = () -> Optional.ofNullable(keycloak.getSpec().getHttpSpec()).map(HttpSpec::getHttpEnabled).orElse(false);        if (!isTlsConfigured || isHttpEnabled.get()) {```",x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22073,1281898576,2023-08-02T13:22:15Z,.github/workflows/ci.yml,"@@ -110,6 +110,30 @@ jobs:         with:           job-name: Base IT +  quarkus-unit-tests:+    name: Quarkus UT+    needs: build+    timeout-minutes: 15+    strategy:+      matrix:+        os: [ubuntu-latest, windows-latest]+    runs-on: ${{ matrix.os }}+    steps:+      - uses: actions/checkout@v3++      # We also want to download Keycloak artifacts+      - id: integration-test-setup+        name: Integration test setup+        uses: ./.github/actions/integration-test-setup","We don't want to rebuild all dependent modules specified by the `-am` flag. We want to use already-built artifacts from the `build` phase. I'll make improvements to it in different PR. ATM, we can have the Quarkus UT working. ",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22155,1281993392,2023-08-02T14:30:15Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakService.java,"@@ -44,15 +45,21 @@ public KeycloakService(KubernetesClient client, Keycloak keycloakCR) {     }      private ServiceSpec getServiceSpec() {-        String name = isTlsConfigured(keycloak) ? Constants.KEYCLOAK_HTTPS_PORT_NAME : Constants.KEYCLOAK_HTTP_PORT_NAME;-        return new ServiceSpecBuilder()-              .addNewPort()-              .withPort(getServicePort(keycloak))-              .withName(name)-              .withProtocol(Constants.KEYCLOAK_SERVICE_PROTOCOL)-              .endPort()-              .withSelector(getInstanceLabels())-              .build();+        var builder = new ServiceSpecBuilder().withSelector(getInstanceLabels());++        boolean isTlsConfigured = isTlsConfigured(keycloak);+        if (!isTlsConfigured+                || Optional.ofNullable(keycloak.getSpec().getHttpSpec()).map(HttpSpec::getHttpEnabled).orElse(false)) {",I'm not worried about lazy evaluation here.  Added some intermediate variables to make this more readable,
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22044,1282019106,2023-08-02T14:49:05Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakAdminSecretDependentResource.java,"@@ -0,0 +1,45 @@+package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.Secret;+import io.fabric8.kubernetes.api.model.SecretBuilder;+import io.fabric8.kubernetes.client.utils.KubernetesResourceUtil;+import io.javaoperatorsdk.operator.api.reconciler.Context;+import io.javaoperatorsdk.operator.api.reconciler.dependent.GarbageCollected;+import io.javaoperatorsdk.operator.processing.dependent.Creator;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependentResource;++import org.keycloak.operator.Constants;+import org.keycloak.operator.Utils;+import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;++import java.util.UUID;++@KubernetesDependent(labelSelector = Constants.DEFAULT_LABELS_AS_STRING)+public class KeycloakAdminSecretDependentResource extends KubernetesDependentResource<Secret, Keycloak> implements Creator<Secret, Keycloak>, GarbageCollected<Keycloak> {++    public KeycloakAdminSecretDependentResource() {+        super(Secret.class);+    }++    @Override+    protected Secret desired(Keycloak primary, Context<Keycloak> context) {+        return new SecretBuilder()+                .withNewMetadata()+                .withName(getName(primary))+                .withResourceVersion(""1"") // ensures that we can't overwrite an existing","> If I understand correctly, this should be handled already by the Creator interface, is that correct?It's handled automatically in the way described - if something else creates an initial admin secret without an owner reference (or removes the owner reference from what we create) it will effectively block all further reconciliation of the Keycloak.  On the otherhand if we leave the resourceVersion unpopulated, then the effect of the serverSideApply will be to recreate the secret data.  I was thinking that we want to avoid this.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22044,1282039630,2023-08-02T15:03:16Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakAdminSecretDependentResource.java,"@@ -0,0 +1,45 @@+package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.Secret;+import io.fabric8.kubernetes.api.model.SecretBuilder;+import io.fabric8.kubernetes.client.utils.KubernetesResourceUtil;+import io.javaoperatorsdk.operator.api.reconciler.Context;+import io.javaoperatorsdk.operator.api.reconciler.dependent.GarbageCollected;+import io.javaoperatorsdk.operator.processing.dependent.Creator;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependentResource;++import org.keycloak.operator.Constants;+import org.keycloak.operator.Utils;+import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;++import java.util.UUID;++@KubernetesDependent(labelSelector = Constants.DEFAULT_LABELS_AS_STRING)+public class KeycloakAdminSecretDependentResource extends KubernetesDependentResource<Secret, Keycloak> implements Creator<Secret, Keycloak>, GarbageCollected<Keycloak> {++    public KeycloakAdminSecretDependentResource() {+        super(Secret.class);+    }++    @Override+    protected Secret desired(Keycloak primary, Context<Keycloak> context) {+        return new SecretBuilder()+                .withNewMetadata()+                .withName(getName(primary))+                .withResourceVersion(""1"") // ensures that we can't overwrite an existing","Thanks for clarifying. So by adding `resourceVersion` we're basically addressing the case when someone created the Secret without a proper owner reference. Without `resourceVersion`, we'll just overwrite the Secret data. With it, we fail to reconcile. Is that correct?I'd argue we can be opinionated. If someone tries to mimic the Secret that's basically an internal Operator resource, we can overwrite without failing.",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22044,1282048864,2023-08-02T15:10:36Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakAdminSecretDependentResource.java,"@@ -0,0 +1,45 @@+package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.Secret;+import io.fabric8.kubernetes.api.model.SecretBuilder;+import io.fabric8.kubernetes.client.utils.KubernetesResourceUtil;+import io.javaoperatorsdk.operator.api.reconciler.Context;+import io.javaoperatorsdk.operator.api.reconciler.dependent.GarbageCollected;+import io.javaoperatorsdk.operator.processing.dependent.Creator;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependentResource;++import org.keycloak.operator.Constants;+import org.keycloak.operator.Utils;+import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;++import java.util.UUID;++@KubernetesDependent(labelSelector = Constants.DEFAULT_LABELS_AS_STRING)+public class KeycloakAdminSecretDependentResource extends KubernetesDependentResource<Secret, Keycloak> implements Creator<Secret, Keycloak>, GarbageCollected<Keycloak> {++    public KeycloakAdminSecretDependentResource() {+        super(Secret.class);+    }++    @Override+    protected Secret desired(Keycloak primary, Context<Keycloak> context) {+        return new SecretBuilder()+                .withNewMetadata()+                .withName(getName(primary))+                .withResourceVersion(""1"") // ensures that we can't overwrite an existing","> So by adding resourceVersion we're basically addressing the case when someone created the Secret without a proper owner reference.It's for addressing any possibility of overwriting an existing one.  If the existing one lacks the proper ownerReference it's the pathological case.> Without resourceVersion, we'll just overwrite the Secret data.If it does not have the owner reference, we'll just overwrite it.  If it does have the owner reference it's a matter of timing - if it's known to the informer before the reconciliation, then we'll just use what is already there.  If not, then we'll overwrite it.> I'd argue we can be opinionated. If someone tries to mimic the Secret that's basically an internal Operator resource, we can overwrite without failing.Okay seemed best to check as the prior impementation worked only by name - so regardless of whether there was an owner reference it would just use what was already there.Here it sounds like you are are okay with the possibility of overwriting.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22044,1282940221,2023-08-03T09:45:45Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakAdminSecretDependentResource.java,"@@ -0,0 +1,45 @@+package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.Secret;+import io.fabric8.kubernetes.api.model.SecretBuilder;+import io.fabric8.kubernetes.client.utils.KubernetesResourceUtil;+import io.javaoperatorsdk.operator.api.reconciler.Context;+import io.javaoperatorsdk.operator.api.reconciler.dependent.GarbageCollected;+import io.javaoperatorsdk.operator.processing.dependent.Creator;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependentResource;++import org.keycloak.operator.Constants;+import org.keycloak.operator.Utils;+import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;++import java.util.UUID;++@KubernetesDependent(labelSelector = Constants.DEFAULT_LABELS_AS_STRING)+public class KeycloakAdminSecretDependentResource extends KubernetesDependentResource<Secret, Keycloak> implements Creator<Secret, Keycloak>, GarbageCollected<Keycloak> {++    public KeycloakAdminSecretDependentResource() {+        super(Secret.class);+    }++    @Override+    protected Secret desired(Keycloak primary, Context<Keycloak> context) {+        return new SecretBuilder()+                .withNewMetadata()+                .withName(getName(primary))+                .withResourceVersion(""1"") // ensures that we can't overwrite an existing","> Okay seemed best to check as the prior impementation worked only by name - so regardless of whether there was an owner reference it would just use what was already there.> > Here it sounds like you are are okay with the possibility of overwriting.It's a good point that the old behaviour was different. But that IMHO doesn't mean it was correct. :)I think it makes sense to stick to default dependent resources behaviour, i.e. overwrite the secret if not clearly owned by the Keycloak CR. We don't expect the users to create their own at the moment, this is not supported but we don't need to get into a failing state if there is an existing Secret. WDYT?TBH, I'm not much in favor of adding the dummy resourceVersion as it feels too much like a workaround, and as I mentioned I don't see much (if any) benefit in that either.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22192,1283024125,2023-08-03T10:50:17Z,services/src/main/java/org/keycloak/services/resources/account/AccountConsole.java,"@@ -87,71 +87,66 @@ public Response getMainPage() throws IOException, FreeMarkerException {         URI accountBaseUrl = uriInfo.getBaseUriBuilder().path(RealmsResource.class).path(realm.getName())                 .path(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).path(""/"").build(realm); -        if (!session.getContext().getUri().getRequestUri().getPath().endsWith(""/"")) {","@pedroigor @ssilvert I've had to revert part of the work done under #7794 and #7818 for [KEYCLOAK-17174](https://issues.redhat.com/browse/KEYCLOAK-17174), as the browser router does not add a trailing slash, causing redirects back to the base URL if this code remains.I don't quite understand the original issue, but it looks like this would no longer affect us. Could I ask you to take a look at the changes in this PR and let me know if it all makes sense?",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22044,1283070775,2023-08-03T11:35:17Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakAdminSecretDependentResource.java,"@@ -0,0 +1,45 @@+package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.Secret;+import io.fabric8.kubernetes.api.model.SecretBuilder;+import io.fabric8.kubernetes.client.utils.KubernetesResourceUtil;+import io.javaoperatorsdk.operator.api.reconciler.Context;+import io.javaoperatorsdk.operator.api.reconciler.dependent.GarbageCollected;+import io.javaoperatorsdk.operator.processing.dependent.Creator;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependentResource;++import org.keycloak.operator.Constants;+import org.keycloak.operator.Utils;+import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;++import java.util.UUID;++@KubernetesDependent(labelSelector = Constants.DEFAULT_LABELS_AS_STRING)+public class KeycloakAdminSecretDependentResource extends KubernetesDependentResource<Secret, Keycloak> implements Creator<Secret, Keycloak>, GarbageCollected<Keycloak> {++    public KeycloakAdminSecretDependentResource() {+        super(Secret.class);+    }++    @Override+    protected Secret desired(Keycloak primary, Context<Keycloak> context) {+        return new SecretBuilder()+                .withNewMetadata()+                .withName(getName(primary))+                .withResourceVersion(""1"") // ensures that we can't overwrite an existing","> I think it makes sense to stick to default dependent resources behaviour, i.e. overwrite the secret if not clearly owned by the Keycloak CR. We don't expect the users to create their own at the moment, this is not supported but we don't need to get into a failing state if there is an existing Secret. WDYT?That's fine, my goal is just to avoid making any assumptions the intended behavior.  I'll remove the resourceVersion so that any existing secret, with or without a resourceVersion, will be overwriten by the current operator.  At worst this will mean that these new initial admin credentials would be picked up on the next restart.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/8022,1283340811,2023-08-03T15:04:10Z,services/src/main/java/org/keycloak/services/resources/account/LinkedAccountsResource.java,"@@ -94,31 +93,47 @@ public LinkedAccountsResource(KeycloakSession session,         this.user = user;         realm = session.getContext().getRealm();     }-    +     @GET     @Path(""/"")     @Produces(MediaType.APPLICATION_JSON)-    public Response linkedAccounts() {+    public Response linkedAccounts(+            @QueryParam(""linked"") Boolean linked,+            @QueryParam(""keyword"") @DefaultValue("""") String keyword,+            @QueryParam(""first"") @DefaultValue(""0"") Integer firstResult,+            @QueryParam(""max"") @DefaultValue(""2147483647"") Integer maxResults+    ) {         auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);-        SortedSet<LinkedAccountRepresentation> linkedAccounts = getLinkedAccounts(this.session, this.realm, this.user);-        return Cors.add(request, Response.ok(linkedAccounts)).auth().allowedOrigins(auth.getToken()).build();++        List<FederatedIdentityModel> federatedIdentities = session.users().getFederatedIdentitiesStream(realm, user).collect(Collectors.toList());+        Set<String> socialIds = findSocialIds();++        final String term = keyword.toLowerCase().trim();+        List<LinkedAccountRepresentation> accounts = realm.getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled)+                .filter(idp -> {+                    if(keyword.isEmpty())+                        return true;+                    return idp.getAlias().toLowerCase().contains(term) || (idp.getDisplayName()!=null && idp.getDisplayName().toLowerCase().contains(term));+                })+                .map(provider -> toLinkedAccountRepresentation(provider, socialIds, federatedIdentities))+                .filter(rep -> {+                    return linked ? rep.isConnected() : !rep.isConnected();","@jonkoops So are you ok with have this PR in relatively quickly with the approach like in current API and then at some point, move everything to `V2`? For me, personally it would work.@cgeorgilakis @jonkoops I have just one additional point regarding API. Sorry I did not bringed it before, but it came to me when looking at some related issue with groups pagination in admin console...I vote that we remove the `ResultSet` with the variable `totalHits` from this PR, but we keep returning just the sorted list of links as we did until now. This means that UI/client won't know the `counts` . That is the same approach like we have for instance for resources (in `ResourcesService` class).My point is, that having proper ""counts"" can be very tricky and expensive in some cases. For instance if there are fine-grained permissions for identity providers, you cannot automatically just use 1 simple DB query for `select count(*) from identity_providers where realm = 'my_realm'`, but every identity-provider may be evaluated separately to know if the current user has permission to view it. This is very expensive and hence non-realistic to have proper counts if there are 1000s of identity providers.Right now, we don't support fine-grained permissions for identity providers yet AFAIK. But if we later want to add them, this can hit us, as we might need to keep counts (for backwards compatibility), which could be performance killer.In general, I would say that for pagination, it is usually sufficient information to know if next page exists? In this case, you can display arrow (next page). The total number of results and total number of pages is not needed then... AFAIK we already do something like this in the admin console for various objects (EG. clients). ",
507202,ssilvert,https://api.github.com/repos/keycloak/keycloak/pulls/22192,1283514711,2023-08-03T17:32:43Z,services/src/main/java/org/keycloak/services/resources/account/AccountConsole.java,"@@ -87,71 +87,66 @@ public Response getMainPage() throws IOException, FreeMarkerException {         URI accountBaseUrl = uriInfo.getBaseUriBuilder().path(RealmsResource.class).path(realm.getName())                 .path(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).path(""/"").build(realm); -        if (!session.getContext().getUri().getRequestUri().getPath().endsWith(""/"")) {","I think the logic to redirect when the path ends with `/` pre-dates that JIRA.Maybe @pedroigor or @stianst knows why that is done.If not, I guess we should go ahead as long as the tests are passing.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/22244,1284075493,2023-08-04T07:22:30Z,services/src/main/java/org/keycloak/protocol/oidc/AccessTokenIntrospectionProvider.java,"@@ -85,6 +85,13 @@ public Response introspect(String token) {                         }                     }                 }++                if (accessToken.getConfirmation() != null && accessToken.getConfirmation().getKeyThumbprint() != null) {","In the description of the issue, I suggested also to add `DPoP` instead of `Bearer` as the token type during authentication - in case of Bearer tokens. Does this look ok to you?Maybe the easiest would be:```tokenMetadata.put(OAuth2Constants.TOKEN_TYPE, accessToken.getType());```WDYT?",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/22244,1284075987,2023-08-04T07:23:03Z,services/src/main/java/org/keycloak/protocol/oidc/AccessTokenIntrospectionProvider.java,"@@ -85,6 +85,13 @@ public Response introspect(String token) {                         }                     }                 }++                if (accessToken.getConfirmation() != null && accessToken.getConfirmation().getKeyThumbprint() != null) {+                    tokenMetadata.put(""token_type"", ""DPoP"");",Is it possible to use some constant for token_type like we're doing for other things? Maybe `OAuth2Constants` is good class to use it or something similar?,
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/22244,1284098207,2023-08-04T07:46:59Z,services/src/main/java/org/keycloak/protocol/oidc/AccessTokenIntrospectionProvider.java,"@@ -85,6 +85,13 @@ public Response introspect(String token) {                         }                     }                 }++                if (accessToken.getConfirmation() != null && accessToken.getConfirmation().getKeyThumbprint() != null) {","I see, only `tokenMetadata.put(OAuth2Constants.TOKEN_TYPE, accessToken.getType());` is enough.",
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/22148,1284188190,2023-08-04T09:15:45Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/LightWeightAccessTokenMapper.java,"@@ -0,0 +1,75 @@+package org.keycloak.protocol.oidc.mappers;+import org.keycloak.common.Profile;+import org.keycloak.common.util.Time;+import org.keycloak.models.ClientSessionContext;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ProtocolMapperModel;+import org.keycloak.models.SingleUseObjectProvider;++import org.keycloak.models.UserSessionModel;+import org.keycloak.provider.EnvironmentDependentProviderFactory;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.representations.AccessToken;++import java.util.ArrayList;++import java.util.HashMap;+import java.util.List;+import java.util.Map;++import static org.keycloak.representations.IDToken.SESSION_ID;+import static org.keycloak.representations.JsonWebToken.AZP;++public class LightWeightAccessTokenMapper extends AbstractOIDCProtocolMapper implements OIDCAccessTokenMapper, EnvironmentDependentProviderFactory {+    public static String LIGHT_WEIGHT_ACCESS_TOKEN_PROVIDER_ID = ""oidc-light-weight-access-token-mapper"";+    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();+    @Override+    public String getDisplayCategory() {+        return TOKEN_MAPPER_CATEGORY;+    }++    @Override+    public String getDisplayType() {+        return ""Light weight access token"";+    }++    @Override+    public String getHelpText() {+        return ""Delete the information contained by default in the access token. "" ++                ""The deleted information can be obtained at the token introspection endpoint."";+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return LIGHT_WEIGHT_ACCESS_TOKEN_PROVIDER_ID;+    }++    @Override+    public AccessToken transformAccessToken(AccessToken token, ProtocolMapperModel mappingModel, KeycloakSession session,","What is the scope of this mapper? Does it needed?I believe that if implemented, logic to get access token from singleUseStore must be implemented to all OAuth -OIDC flows that access token is a query parameter. Fe UserInfo, refresh flow.What happen in singleUseStore during Keycloak restart? This is important for offline access tokens.Although we want support for lightway access token and enhance token introspection, we believe that there is no need to extra space for saving access token. Access token could have only needed information for Userinfo - token introspection, scope and other required claims based on OAuth specification.This could support with appropritate protocol mappers ( _Add to access token_ false and Add to token introspection true).",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/22244,1284595641,2023-08-04T15:58:39Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/DPoPTest.java,"@@ -193,6 +193,7 @@ public void testDPoPProofByConfidentialClient() throws Exception {         TokenMetadataRepresentation tokenMetadataRepresentation = JsonSerialization.readValue(tokenResponse, TokenMetadataRepresentation.class);         Assert.assertTrue(tokenMetadataRepresentation.isActive());         assertEquals(jkt, tokenMetadataRepresentation.getConfirmation().getKeyThumbprint());+        assertEquals(""DPoP"", tokenMetadataRepresentation.getOtherClaims().get(""token_type""));","```suggestion        assertEquals(""DPoP"", tokenMetadataRepresentation.getOtherClaims().get(OAuth2Constants.TOKEN_TYPE));```NOTE: Maybe class `OAuth2Constants` would need to be imported in `DPoPTest`",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/22244,1284595971,2023-08-04T15:59:00Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenIntrospectionTest.java,"@@ -352,6 +352,7 @@ private void testIntrospectAccessToken(String jwaAlgorithm) throws Exception {             assertEquals(""test-user@localhost"", rep.getUserName());             assertEquals(""test-app"", rep.getClientId());             assertEquals(loginEvent.getUserId(), rep.getSubject());+            assertEquals(""Bearer"", rep.getOtherClaims().get(""token_type""));","```suggestion            assertEquals(""Bearer"", rep.getOtherClaims().get(OAuth2Constants.TOKEN_TYPE));```NOTE: Maybe class `OAuth2Constants` would need to be imported in `TokenIntrospectionTest`",x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/7918,1286010434,2023-08-07T15:01:59Z,services/src/main/java/org/keycloak/broker/provider/ScriptMapper.java,"@@ -0,0 +1,131 @@+package org.keycloak.broker.provider;++import org.jboss.logging.Logger;+import org.keycloak.broker.saml.SAMLIdentityProviderFactory;+import org.keycloak.models.*;",Minor: Will be good to remove star imports and import all classes separately (See other files of Keycloak codebase).,x
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/22148,1286878144,2023-08-08T09:45:15Z,services/src/main/java/org/keycloak/protocol/oidc/AccessTokenIntrospectionProvider.java,"@@ -97,6 +111,49 @@ public Response introspect(String token) {         }     } +    private AccessToken getAccessToken(String token) throws VerificationException {+        TokenVerifier<AccessToken> verifier = TokenVerifier.create(token, AccessToken.class);+        SignatureVerifierContext verifierContext = session.getProvider(SignatureProvider.class, verifier.getHeader().getAlgorithm().name()).verifier(verifier.getHeader().getKeyId());+        verifier.verifierContext(verifierContext);+        AccessToken accessToken = verifier.verify().getToken();+        SingleUseObjectProvider singleUseStore = session.singleUseObjects();+        Map<String, String> tokenData = singleUseStore.get(accessToken.getId());+        if (tokenData != null) {+            // enabled lightWeightAccessTokenMapper+            accessToken.setSessionState(tokenData.get(SESSION_ID));+            accessToken.issuedFor(tokenData.get(AZP));+            return accessToken;+        } else {+            verifier.realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()));+            RealmModel realm = this.session.getContext().getRealm();+            return tokenManager.checkTokenValidForIntrospection(session, realm, accessToken, false) ? accessToken : null;+        }+    }+++    private AccessToken transformAccessToken(AccessToken token) {+        if (token == null) {+            return null;+        }++        ClientModel client = realm.getClientByClientId(token.getIssuedFor());+        UserSessionModel userSession = new UserSessionCrossDCManager(session).getUserSessionWithClient(realm, token.getSessionId(), false, client.getId());+        AuthenticatedClientSessionModel clientSession = userSession.getAuthenticatedClientSessionByClient(client.getId());",Good catch.It is possible it may be needed to extract some methods from `UserInfoEndpoint` (or other classes) to deal with transient user sessions to some generic util class?,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22257,1289870208,2023-08-10T09:52:53Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakController.java,"@@ -50,7 +51,9 @@  @ControllerConfiguration(namespaces = WATCH_CURRENT_NAMESPACE,     dependents = {-        @Dependent(type = KeycloakAdminSecretDependentResource.class)+        @Dependent(type = KeycloakAdminSecretDependentResource.class),+        @Dependent(type = KeycloakServiceDependentResource.class, useEventSourceWithName = ""serviceSource""),+        @Dependent(type = KeycloakDiscoveryServiceDependentResource.class, useEventSourceWithName = ""serviceSource"")",Do we need to define the event sources explicitly? Can't we simply rely on the [default ones](https://github.com/operator-framework/java-operator-sdk/blob/b66ef938a9290a1dbf83b35e152f144cc01bcb8a/operator-framework-core/src/main/java/io/javaoperatorsdk/operator/processing/dependent/AbstractEventSourceHolderDependentResource.java#L37-L49)? I assume it's because we have multiple dependent resources of the same kind.,x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22257,1289889526,2023-08-10T10:09:59Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDiscoveryServiceDependentResource.java,"@@ -0,0 +1,80 @@+/*+ * Copyright 2021 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.Service;+import io.fabric8.kubernetes.api.model.ServiceBuilder;+import io.fabric8.kubernetes.api.model.ServiceSpec;+import io.fabric8.kubernetes.api.model.ServiceSpecBuilder;+import io.javaoperatorsdk.operator.api.reconciler.Context;+import io.javaoperatorsdk.operator.api.reconciler.ResourceDiscriminator;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;+import io.javaoperatorsdk.operator.processing.event.ResourceID;+import io.javaoperatorsdk.operator.processing.event.source.informer.InformerEventSource;++import org.keycloak.operator.Constants;+import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;++import java.util.Optional;++@KubernetesDependent(labelSelector = Constants.DEFAULT_LABELS_AS_STRING, resourceDiscriminator = KeycloakDiscoveryServiceDependentResource.NameResourceDiscriminator.class)+public class KeycloakDiscoveryServiceDependentResource extends CRUDKubernetesDependentResource<Service, Keycloak> {++    public static class NameResourceDiscriminator implements ResourceDiscriminator<Service, Keycloak> {+        @Override+        public Optional<Service> distinguish(Class<Service> resource, Keycloak primary, Context<Keycloak> context) {+            InformerEventSource<Service, Keycloak> ies = (InformerEventSource<Service, Keycloak>) context+                    .eventSourceRetriever().getResourceEventSourceFor(Service.class);++            return ies.get(new ResourceID(getName(primary), primary.getMetadata().getNamespace()));+        }+    }","Can we make this more generic (as it's shared between our services), or perhaps use [ResourceIDMatcherDiscriminator](https://github.com/operator-framework/java-operator-sdk/blob/b66ef938a9290a1dbf83b35e152f144cc01bcb8a/operator-framework-core/src/main/java/io/javaoperatorsdk/operator/api/reconciler/ResourceIDMatcherDiscriminator.java)?",x
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22155,1289921780,2023-08-10T10:29:43Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakService.java,"@@ -41,15 +41,22 @@ public KeycloakService(KubernetesClient client, Keycloak keycloakCR) {     }      private ServiceSpec getServiceSpec() {-        String name = isTlsConfigured(keycloak) ? Constants.KEYCLOAK_HTTPS_PORT_NAME : Constants.KEYCLOAK_HTTP_PORT_NAME;-        return new ServiceSpecBuilder()-              .addNewPort()-              .withPort(getServicePort(keycloak))-              .withName(name)-              .withProtocol(Constants.KEYCLOAK_SERVICE_PROTOCOL)-              .endPort()-              .withSelector(getInstanceLabels())-              .build();+        var builder = new ServiceSpecBuilder().withSelector(getInstanceLabels());++        boolean tlsConfigured = isTlsConfigured(keycloak);+        Optional<HttpSpec> httpSpec = Optional.ofNullable(keycloak.getSpec().getHttpSpec());+        boolean httpEnabled = httpSpec.map(HttpSpec::getHttpEnabled).orElse(false);+        if (!tlsConfigured || httpEnabled) {+            builder.addNewPort()+                    .withPort(httpSpec.map(HttpSpec::getHttpPort).orElse(Constants.KEYCLOAK_HTTP_PORT))+                    .withName(Constants.KEYCLOAK_HTTP_PORT_NAME).withProtocol(Constants.KEYCLOAK_SERVICE_PROTOCOL)+                    .endPort();+        }+        if (tlsConfigured) {+            builder.addNewPort().withPort(getServicePort(keycloak)).withName(Constants.KEYCLOAK_HTTPS_PORT_NAME)","We don't, it's just to prevent more code duplication.  I'll refactor getServicePort a little more.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/22363,1289972480,2023-08-10T11:19:15Z,core/src/main/java/org/keycloak/crypto/KeyWrapper.java,"@@ -195,4 +198,16 @@         key.isDefaultClientCertificate = this.isDefaultClientCertificate;         return key;     }++    public byte[] getSHA1Thumbprint() {+        if (certificate == null) {+            return null;+        }+        try {+            // using SHA1 for certificate thumbprint should be fine+            return MessageDigest.getInstance(""SHA1"").digest(certificate.getEncoded());","SHA-1 has been deprecated for some time, and shouldn't be used: https://en.wikipedia.org/wiki/SHA-1 around certificates (although this is ""only"" the fingerprint of the certificate itself, not the signed hash of the public key AFAIK).I see that you manually create a hash for a certificate's byte stream. I wonder if there is a more ready-to-use Java mechanism to get a fingerprint of a certificate than this. Did you check that this matches for example the fingerprint provided by OpenSSL on the command line?",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22257,1289986504,2023-08-10T11:33:10Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDiscoveryServiceDependentResource.java,"@@ -0,0 +1,80 @@+/*+ * Copyright 2021 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.Service;+import io.fabric8.kubernetes.api.model.ServiceBuilder;+import io.fabric8.kubernetes.api.model.ServiceSpec;+import io.fabric8.kubernetes.api.model.ServiceSpecBuilder;+import io.javaoperatorsdk.operator.api.reconciler.Context;+import io.javaoperatorsdk.operator.api.reconciler.ResourceDiscriminator;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;+import io.javaoperatorsdk.operator.processing.event.ResourceID;+import io.javaoperatorsdk.operator.processing.event.source.informer.InformerEventSource;++import org.keycloak.operator.Constants;+import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;++import java.util.Optional;++@KubernetesDependent(labelSelector = Constants.DEFAULT_LABELS_AS_STRING, resourceDiscriminator = KeycloakDiscoveryServiceDependentResource.NameResourceDiscriminator.class)+public class KeycloakDiscoveryServiceDependentResource extends CRUDKubernetesDependentResource<Service, Keycloak> {++    public static class NameResourceDiscriminator implements ResourceDiscriminator<Service, Keycloak> {+        @Override+        public Optional<Service> distinguish(Class<Service> resource, Keycloak primary, Context<Keycloak> context) {+            InformerEventSource<Service, Keycloak> ies = (InformerEventSource<Service, Keycloak>) context+                    .eventSourceRetriever().getResourceEventSourceFor(Service.class);++            return ies.get(new ResourceID(getName(primary), primary.getMetadata().getNamespace()));+        }+    }","I assumed we could do something as simple as```java    public static class NameResourceDiscriminator extends ResourceIDMatcherDiscriminator<Service, Keycloak> {        public NameResourceDiscriminator() {            super((kc) -> new ResourceID(getName(kc), kc.getMetadata().getNamespace()));        }    }```but a static method probably works too ;)",
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22257,1290004021,2023-08-10T11:47:56Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakDiscoveryServiceDependentResource.java,"@@ -0,0 +1,80 @@+/*+ * Copyright 2021 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.operator.controllers;++import io.fabric8.kubernetes.api.model.Service;+import io.fabric8.kubernetes.api.model.ServiceBuilder;+import io.fabric8.kubernetes.api.model.ServiceSpec;+import io.fabric8.kubernetes.api.model.ServiceSpecBuilder;+import io.javaoperatorsdk.operator.api.reconciler.Context;+import io.javaoperatorsdk.operator.api.reconciler.ResourceDiscriminator;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;+import io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;+import io.javaoperatorsdk.operator.processing.event.ResourceID;+import io.javaoperatorsdk.operator.processing.event.source.informer.InformerEventSource;++import org.keycloak.operator.Constants;+import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;++import java.util.Optional;++@KubernetesDependent(labelSelector = Constants.DEFAULT_LABELS_AS_STRING, resourceDiscriminator = KeycloakDiscoveryServiceDependentResource.NameResourceDiscriminator.class)+public class KeycloakDiscoveryServiceDependentResource extends CRUDKubernetesDependentResource<Service, Keycloak> {++    public static class NameResourceDiscriminator implements ResourceDiscriminator<Service, Keycloak> {+        @Override+        public Optional<Service> distinguish(Class<Service> resource, Keycloak primary, Context<Keycloak> context) {+            InformerEventSource<Service, Keycloak> ies = (InformerEventSource<Service, Keycloak>) context+                    .eventSourceRetriever().getResourceEventSourceFor(Service.class);++            return ies.get(new ResourceID(getName(primary), primary.getMetadata().getNamespace()));+        }+    }","> I assumed we could do something as simple asWhat I don't like about that is it's based upon list iteration, rather than a name lookup.  Granted there shouldn't be many instances - it's just odd that the name is not a primary construct here.  I'd say that this is more of a case where something is missing from the JOSDK or at least being made more complicated. ",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/20151,1290345095,2023-08-10T15:50:33Z,model/legacy-private/src/main/java/org/keycloak/storage/UserStorageManager.java,"@@ -340,7 +340,7 @@ public UserModel getUserByEmail(RealmModel realm, String email) {         if (user != null) {             user = importValidation(realm, user);             // Case when email was changed directly in the userStorage and doesn't correspond anymore to the email from local DB-            if (email.equalsIgnoreCase(user.getEmail())) {+            if (user != null && email.equalsIgnoreCase(user.getEmail())) {","Sorry, I missed this question before. I don't think we want to return `null` in that case. If `importValidation` returns `null` it means the user from Keycloak database is invalid and was removed. Returning `null` in that situation would mean we say Keycloak does not know the user by this email, however, this is not true and it can be still present in an external provider. We need to query the user again.",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/22301,1291048064,2023-08-11T08:24:38Z,js/apps/admin-ui/public/locales/ja/authentication.json,"@@ -31,9 +31,9 @@   ""webAuthnPolicyAcceptableAaguids"": ""許容可能なAAGUID"",   ""default"": ""DEFAULT"",   ""flow"": {-    ""browserFlow"": ""ブラウザーフロー"",-    ""registrationFlow"": ""登録フロー"",-    ""directGrantFlow"": ""ダイレクト・グラント・フロー""+    ""browser"": ""ブラウザーフロー"",+    ""registration"": ""登録フロー"",+    ""direct grant"": ""ダイレクト・グラント・フロー""","@agagancarczyk - thank you for suggesting this, I would consider adding new keys out of scope for this: The scope of this PR is to update keys of already translated parts, so they are not lost. I would assume that the UI falls back on the original English values for those elements that don't have a translation.Once we have Weblate in place, the translators will see a list of all untranslated strings, and can then provide a translation. I suppose this comment would be true for all other languages where you added a similar comment.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22192,1291259654,2023-08-11T12:03:54Z,services/src/main/java/org/keycloak/services/resources/account/AccountConsole.java,"@@ -87,71 +87,66 @@ public Response getMainPage() throws IOException, FreeMarkerException {         URI accountBaseUrl = uriInfo.getBaseUriBuilder().path(RealmsResource.class).path(realm.getName())                 .path(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).path(""/"").build(realm); -        if (!session.getContext().getUri().getRequestUri().getPath().endsWith(""/"")) {","I think the white-space formatting is giving the impression that more code has changed. You can change the view of the diff, so that it no longer[ shows these changes](https://github.blog/2018-05-01-ignore-white-space-in-code-review/). The only thing that was removed is the `if` statement and redirect.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22363,1291506152,2023-08-11T15:25:48Z,core/src/main/java/org/keycloak/crypto/KeyWrapper.java,"@@ -195,4 +198,16 @@         key.isDefaultClientCertificate = this.isDefaultClientCertificate;         return key;     }++    public byte[] getSHA1Thumbprint() {+        if (certificate == null) {+            return null;+        }+        try {+            // using SHA1 for certificate thumbprint should be fine+            return MessageDigest.getInstance(""SHA1"").digest(certificate.getEncoded());","That particular claim attribute is specific to SHA1. See https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.7 and https://datatracker.ietf.org/doc/html/rfc7517#page-9.But yeah, SHA-1 should be deprecated in favor of SHA-256 as it is less likely to collisions. Libraries like Nimbus already deprecated using SHA-1 in thumbprints.",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/8430,1293171500,2023-08-14T08:43:15Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java,"@@ -361,22 +363,42 @@ private void updateAttributesOfKCGroup(GroupModel kcGroup, LDAPObject ldapGroup)     }  -    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, LDAPObject ldapGroup) {+    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, GroupModel parent, LDAPObject ldapGroup) {         String groupNameAttr = config.getGroupNameLdapAttribute();         String groupName = ldapGroup.getAttributeAsString(groupNameAttr);          if (config.isPreserveGroupsInheritance()) {             // Override if better effectivity or different algorithm is needed-            return getAllKcGroups(realm)+            return getAllKcGroups(realm, parent)                     .filter(group -> Objects.equals(group.getName(), groupName)).findFirst().orElse(null);         } else {             // Without preserved inheritance, it's always at groups path-            return KeycloakModelUtils.findGroupByPath(realm, getKcGroupPathFromLDAPGroupName(groupName));+            return realm.getGroupByName(groupName, parent);+        }+    }+    // TODO how this will work with group names with a / without hitting the db everytime+    private GroupModel findGroupByPath(RealmModel realm, String path) {+        if (path == null) {+            return null;+        }+        if (path.startsWith(""/"")) {+            path = path.substring(1);+        }+        if (path.endsWith(""/"")) {+            path = path.substring(0, path.length() - 1);+        }+        String[] split = path.split(""/"");","Based on [this](https://stackoverflow.com/a/11002374) a single-character split with other than ` "".$|()[{^?*+\\"" ` characters will not create a regex pattern.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22299,1294715859,2023-08-15T15:02:20Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakRealmImportController.java,"@@ -28,42 +27,38 @@ import io.javaoperatorsdk.operator.api.reconciler.EventSourceInitializer; import io.javaoperatorsdk.operator.api.reconciler.Reconciler; import io.javaoperatorsdk.operator.api.reconciler.UpdateControl;+import io.javaoperatorsdk.operator.api.reconciler.dependent.Dependent; import io.javaoperatorsdk.operator.processing.event.source.EventSource;-import io.javaoperatorsdk.operator.processing.event.source.informer.InformerEventSource;-import io.javaoperatorsdk.operator.processing.event.source.informer.Mappers; import io.quarkus.logging.Log;-import org.keycloak.operator.Constants;+ import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImport; import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImportStatus; import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImportStatusBuilder; import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImportStatusCondition; -import jakarta.inject.Inject; import java.util.Map; import java.util.concurrent.TimeUnit; +import jakarta.inject.Inject;+ import static io.javaoperatorsdk.operator.api.reconciler.Constants.WATCH_CURRENT_NAMESPACE; -@ControllerConfiguration(namespaces = WATCH_CURRENT_NAMESPACE)-public class KeycloakRealmImportController implements Reconciler<KeycloakRealmImport>, EventSourceInitializer<KeycloakRealmImport>, ErrorStatusHandler<KeycloakRealmImport> {+@ControllerConfiguration(namespaces = WATCH_CURRENT_NAMESPACE,+dependents = {+    @Dependent(type = KeycloakRealmImportSecretDependentResource.class)+})+public class KeycloakRealmImportController implements Reconciler<KeycloakRealmImport>, ErrorStatusHandler<KeycloakRealmImport>, EventSourceInitializer<KeycloakRealmImport> {      @Inject     KubernetesClient client; -    @Inject-    ObjectMapper jsonMapper;+    volatile KeycloakRealmImportJobDependentResource jobDependentResource;",Do we need to still use standalone dependent resource (now that we don't need to pass the KeycloakController)? Might be cleaner to use the reconciliation precondition? But I assume we can't so we could pass the existing deployment.,
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22299,1294801887,2023-08-15T15:48:27Z,operator/src/main/java/org/keycloak/operator/controllers/KeycloakRealmImportController.java,"@@ -28,42 +27,38 @@ import io.javaoperatorsdk.operator.api.reconciler.EventSourceInitializer; import io.javaoperatorsdk.operator.api.reconciler.Reconciler; import io.javaoperatorsdk.operator.api.reconciler.UpdateControl;+import io.javaoperatorsdk.operator.api.reconciler.dependent.Dependent; import io.javaoperatorsdk.operator.processing.event.source.EventSource;-import io.javaoperatorsdk.operator.processing.event.source.informer.InformerEventSource;-import io.javaoperatorsdk.operator.processing.event.source.informer.Mappers; import io.quarkus.logging.Log;-import org.keycloak.operator.Constants;+ import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImport; import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImportStatus; import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImportStatusBuilder; import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImportStatusCondition; -import jakarta.inject.Inject; import java.util.Map; import java.util.concurrent.TimeUnit; +import jakarta.inject.Inject;+ import static io.javaoperatorsdk.operator.api.reconciler.Constants.WATCH_CURRENT_NAMESPACE; -@ControllerConfiguration(namespaces = WATCH_CURRENT_NAMESPACE)-public class KeycloakRealmImportController implements Reconciler<KeycloakRealmImport>, EventSourceInitializer<KeycloakRealmImport>, ErrorStatusHandler<KeycloakRealmImport> {+@ControllerConfiguration(namespaces = WATCH_CURRENT_NAMESPACE,+dependents = {+    @Dependent(type = KeycloakRealmImportSecretDependentResource.class)+})+public class KeycloakRealmImportController implements Reconciler<KeycloakRealmImport>, ErrorStatusHandler<KeycloakRealmImport>, EventSourceInitializer<KeycloakRealmImport> {      @Inject     KubernetesClient client; -    @Inject-    ObjectMapper jsonMapper;+    volatile KeycloakRealmImportJobDependentResource jobDependentResource;",Using the standalone is to avoid doing a lookup of the statefulset as part of the precondition.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/22201,1296120379,2023-08-16T15:54:28Z,.github/workflows/documentation.yml,"@@ -85,18 +79,12 @@ jobs:         name: Maven cache         uses: ./.github/actions/maven-cache -      - id: build-documentation-        name: Build Keycloak+      - id: build-test-documentation+        name: Build and verify Keycloak documentation         shell: bash         run: |           MVN_HTTP_CONFIG=""-Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.httpconnectionManager.ttlSeconds=120""-          ./mvnw install -DskipTests -am -pl docs/documentation/tests -nsu -B -e -Pdocumentation $MVN_HTTP_CONFIG --      - id: test-documentation-        name: Verify Keycloak documentation-        shell: bash-        run: |-          ./mvnw test -Dtest=ExternalLinksTest -am -pl docs/documentation/tests,docs/documentation/dist -nsu -B -e -Pdocumentation+          ./mvnw install -Dtest=ExternalLinksTest -am -pl docs/documentation/tests -nsu -B -e -Pdocumentation $MVN_HTTP_CONFIG ","Should we add `docs/documentation/dist` to running tests similarly as it was before? ```suggestion          ./mvnw install -Dtest=ExternalLinksTest -am -pl docs/documentation/tests,docs/documentation/dist -nsu -B -e -Pdocumentation $MVN_HTTP_CONFIG ```",
62310815,github-advanced-security[bot],https://api.github.com/repos/keycloak/keycloak/pulls/22498,1296177778,2023-08-16T16:43:04Z,common/src/main/java/org/keycloak/common/util/KeycloakUriBuilder.java,"@@ -180,16 +167,39 @@         if (match.group(5) != null) {             String group = match.group(5);             if (!scheme && !"""".equals(group) && !group.startsWith(""/"") && group.indexOf(':') > -1)-                throw new IllegalArgumentException(""Illegal uri template: "" + uriTemplate);-            if (!"""".equals(group)) replacePath(group);+                throw new IllegalArgumentException(""Illegal uri template: "" + uri);+            if (!"""".equals(group)) replacePath(group, template);         }-        if (match.group(7) != null) replaceQuery(match.group(7));-        if (match.group(9) != null) fragment(match.group(9));+        if (match.group(7) != null) replaceQuery(match.group(7), template);+        if (match.group(9) != null) fragment(match.group(9), template);         return this;     } -    public KeycloakUriBuilder uri(String uriTemplate) throws IllegalArgumentException {-        return uriTemplate(uriTemplate);+    public KeycloakUriBuilder uri(String uri) throws IllegalArgumentException {+        // default uri manages template params {}+        return uri(uri, true);+    }++    public KeycloakUriBuilder uri(String uri, boolean template) throws IllegalArgumentException {+        if (uri == null) throw new IllegalArgumentException(""uri parameter is null"");+        Matcher opaque = opaqueUri.matcher(uri);+        if (opaque.matches()) {+            this.authority = null;+            this.host = null;+            this.port = -1;+            this.userInfo = null;+            this.query = null;+            this.scheme = opaque.group(1);+            this.ssp = opaque.group(2);+            return this;+        } else {+            Matcher match = hierarchicalUri.matcher(uri);","## Polynomial regular expression used on uncontrolled dataThis [regular expression](1) that depends on a [user-provided value](2) may run slow on strings with many repetitions of '""'.This [regular expression](1) that depends on a [user-provided value](3) may run slow on strings with many repetitions of '""'.This [regular expression](1) that depends on a [user-provided value](4) may run slow on strings with many repetitions of '""'.This [regular expression](1) that depends on a [user-provided value](5) may run slow on strings with many repetitions of '""'.This [regular expression](1) that depends on a [user-provided value](6) may run slow on strings with many repetitions of '""'.This [regular expression](1) that depends on a [user-provided value](7) may run slow on strings with many repetitions of '""'.This [regular expression](1) that depends on a [user-provided value](8) may run slow on strings with many repetitions of '""'.This [regular expression](1) that depends on a [user-provided value](9) may run slow on strings with many repetitions of '""'.[Show more details](https://github.com/keycloak/keycloak/security/code-scanning/2540)",x
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22501,1296912584,2023-08-17T09:10:37Z,operator/pom.xml,"@@ -68,6 +65,8 @@         <dependency>             <groupId>io.quarkiverse.operatorsdk</groupId>             <artifactId>quarkus-operator-sdk-bundle-generator</artifactId>+            <scope>compile</scope>+            <optional>true</optional>         </dependency>",As provided it will no longer create the bundle output and the olm assumbly will fail.  It looks like you have to explicitly turn on optional dependency filtering in quarkus.,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/8430,1297036563,2023-08-17T10:36:32Z,server-spi/src/main/java/org/keycloak/storage/group/GroupLookupProvider.java,"@@ -35,6 +35,16 @@ public interface GroupLookupProvider {      */     GroupModel getGroupById(RealmModel realm, String id); +    /**+     * Returns a group from the given realm with the corresponding name+     *+     * @param realm Realm.+     * @param name name.+     * @param parent parent Group if not top level+     * @return GroupModel with the correesponding name.+     */+    GroupModel getGroupByName(RealmModel realm, String name, GroupModel parent);","Can we have a different order of the parameters so it is more consistent with other providers? ```suggestion    GroupModel getGroupByName(RealmModel realm, GroupModel parent, String name);```Also, this is a breaking change for everyone implementing this interface. We need to solve migration somehow. For example, by providing a default implementation that is using `searchForGroupByNameStream` and then search for the correct group in the resulting stream.",x
120057,metacosm,https://api.github.com/repos/keycloak/keycloak/pulls/22501,1297109649,2023-08-17T11:51:10Z,operator/pom.xml,"@@ -40,13 +40,10 @@      <dependencies>         <!-- Fabric8 -->-        <dependency>-            <groupId>io.fabric8</groupId>-            <artifactId>crd-generator-api</artifactId>-        </dependency>         <dependency>             <groupId>io.fabric8</groupId>             <artifactId>crd-generator-apt</artifactId>","Why do you need this dependency, actually?",x
2475669,shawkins,https://api.github.com/repos/keycloak/keycloak/pulls/22501,1297113263,2023-08-17T11:54:54Z,operator/pom.xml,"@@ -40,13 +40,10 @@      <dependencies>         <!-- Fabric8 -->-        <dependency>-            <groupId>io.fabric8</groupId>-            <artifactId>crd-generator-api</artifactId>-        </dependency>         <dependency>             <groupId>io.fabric8</groupId>             <artifactId>crd-generator-apt</artifactId>","At the very least it's still transitively bringing in the sundrio dependencies.  I'm not sure historically why crd-generator-apt was needed.It looks like instead of the apt dependency we could separtely use:generator-annotations (for the Required annotation)crd-generator-api (for the SchemaSwap annotation - it's confusing why this is not in generator-annotations)builder-annotations (but there's no managed version of this provided by the poms we're currently importing)Since it looks like this can be at the provided scope, I'd be in favor of leaving it as is unless you think it could be introducing other problems.Any thoughts on quarkus-operator-sdk-bundle-generator?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/22443,1297601346,2023-08-17T18:35:56Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/IgnoredArtifacts.java,"@@ -0,0 +1,162 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.quarkus.runtime.configuration;++import org.keycloak.common.Profile;+import org.keycloak.config.DatabaseOptions;+import org.keycloak.config.StorageOptions;+import org.keycloak.config.database.Database;++import java.util.Collections;+import java.util.HashSet;+import java.util.Optional;+import java.util.Set;++import static java.util.Collections.emptySet;+import static org.keycloak.quarkus.runtime.Environment.getCurrentOrCreateFeatureProfile;++/**+ * Ignore particular artifacts based on build configuration+ */+public class IgnoredArtifacts {++    public static Set<String> getDefaultIgnoredArtifacts() {+        return new Builder()+                .append(fips())+                .append(storage())+                .append(jdbcDrivers())+                .build();+    }++    // FIPS+    public static final Set<String> FIPS_ENABLED = Set.of(+            ""org.bouncycastle:bcprov-jdk18on"",+            ""org.bouncycastle:bcpkix-jdk18on"",+            ""org.bouncycastle:bcutil-jdk18on"",+            ""org.keycloak:keycloak-crypto-default""+    );++    public static final Set<String> FIPS_DISABLED = Set.of(+            ""org.keycloak:keycloak-crypto-fips1402"",+            ""org.bouncycastle:bc-fips"",+            ""org.bouncycastle:bctls-fips"",+            ""org.bouncycastle:bcpkix-fips""+    );++    private static Set<String> fips() {+        final Profile profile = getCurrentOrCreateFeatureProfile();+        boolean isFipsEnabled = profile.getFeatures().get(Profile.Feature.FIPS);++        return isFipsEnabled ? FIPS_ENABLED : FIPS_DISABLED;+    }++    // Map Store+    public static final Set<String> MAP_STORE = Set.of(+            ""org.keycloak:keycloak-model-map-jpa"",+            ""org.keycloak:keycloak-model-map-hot-rod"",+            ""org.keycloak:keycloak-model-map"",+            ""org.keycloak:keycloak-model-map-file""+    );++    private static Set<String> storage() {+        Optional<String> storage = Configuration.getOptionalValue(+                MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + StorageOptions.STORAGE.getKey());++        return storage.isEmpty() ? MAP_STORE : emptySet();+    }++    // JDBC Drivers+    public static final Set<String> JDBC_H2 = Set.of(+            ""io.quarkus:quarkus-jdbc-h2"",+            ""io.quarkus:quarkus-jdbc-h2-deployment""+    );++    public static final Set<String> JDBC_POSTGRES = Set.of(+            ""io.quarkus:quarkus-jdbc-postgresql"",+            ""io.quarkus:quarkus-jdbc-postgresql-deployment""","Another optimization might be to remove also the JDBC drivers for each database as well, not only the Quarkus artifacts.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22454,1299963012,2023-08-21T11:06:32Z,js/apps/admin-ui/src/user/EditUser.tsx,,We already have [a hook](https://github.com/keycloak/keycloak/blob/ddd42e9b7ba3b84831db9ec583a38d8629f29a25/js/apps/admin-ui/src/utils/useLocaleSort.ts) that can be used to sort arrays based on the configured locale of the user. We should use that here as well.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22533,1300005650,2023-08-21T11:50:46Z,js/apps/admin-ui/src/realm-settings/EmailTab.tsx,"@@ -34,6 +34,8 @@ type RealmSettingsEmailTabProps = {   save: (realm: RealmRepresentation) => void; }; +type FormType = Omit<RealmRepresentation, ""users"" | ""federatedUsers"">;","We try to avoid adding superfluous words like `Type` or `I` to things that are already types or interfaces. The preferred naming would be something like:```suggestiontype FormFields = Omit<RealmRepresentation, ""users"" | ""federatedUsers"">;```",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22531,1300013115,2023-08-21T11:58:32Z,server-spi/src/main/java/org/keycloak/models/CredentialValidationOutput.java,"@@ -63,6 +67,26 @@ public CredentialValidationOutput merge(CredentialValidationOutput that) {     }      public enum Status {-        AUTHENTICATED, FAILED, CONTINUE","Not a blocker as it is related to naming. I think we can make the statues a bit more clear if:* `VALID` (AUTHENTICATED)* `INVALID` (FAILED)* `VALID_USER` (FALLBACK)* `CHALLENGE` (CONTINUE)My point is:*  `AUTHENTICATED`: Credentials are validated and authentication happens on the upper layer where the authentication logic is in* `FAILED`, the validator is actually returning that the credential is invalid* `VALID_USER`, the validator is actually returning if the user is valid but not the credential. The decision to try other providers to authenticate the user depends on the upper layer.* `CONTINUE`, this name indicates for me that validation should continue and not necessarily the authentication (somewhat related to the `FALLBACK` which indicates moving forward with the provider chain.",x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22533,1300022487,2023-08-21T12:08:08Z,js/apps/admin-ui/src/user/components/SelectComponent.tsx,,"The attribute permissions are also being [referenced here](https://github.com/keycloak/keycloak/blob/339ee6c1b7bcee49f2bca3bcc187e7de6debd32c/js/apps/admin-ui/src/user/UserProfileFields.tsx#L98), should that code also be refactored?",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22533,1300026835,2023-08-21T12:12:17Z,js/apps/admin-ui/src/user/UserForm.tsx,"@@ -224,7 +224,7 @@ export const UserForm = ({         </FormGroup>       )}       {isUserProfileEnabled ? (-        <UserProfileFields />+        <UserProfileFields config={user?.userProfileMetadata!} />","Since the model defines `userProfileMetadata` as optional, I would prefer if we don't use the non-null assertion operator, as it can lead to errors around nullability, even if in this case the response might always be defined.",
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/22148,1301152187,2023-08-22T07:31:12Z,services/src/main/java/org/keycloak/protocol/oidc/AccessTokenIntrospectionProvider.java,"@@ -97,6 +111,49 @@ public Response introspect(String token) {         }     } +    private AccessToken getAccessToken(String token) throws VerificationException {+        TokenVerifier<AccessToken> verifier = TokenVerifier.create(token, AccessToken.class);+        SignatureVerifierContext verifierContext = session.getProvider(SignatureProvider.class, verifier.getHeader().getAlgorithm().name()).verifier(verifier.getHeader().getKeyId());+        verifier.verifierContext(verifierContext);+        AccessToken accessToken = verifier.verify().getToken();+        SingleUseObjectProvider singleUseStore = session.singleUseObjects();+        Map<String, String> tokenData = singleUseStore.get(accessToken.getId());+        if (tokenData != null) {+            // enabled lightWeightAccessTokenMapper+            accessToken.setSessionState(tokenData.get(SESSION_ID));+            accessToken.issuedFor(tokenData.get(AZP));+            return accessToken;+        } else {+            verifier.realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()));+            RealmModel realm = this.session.getContext().getRealm();+            return tokenManager.checkTokenValidForIntrospection(session, realm, accessToken, false) ? accessToken : null;+        }+    }+++    private AccessToken transformAccessToken(AccessToken token) {+        if (token == null) {+            return null;+        }++        ClientModel client = realm.getClientByClientId(token.getIssuedFor());+        UserSessionModel userSession = new UserSessionCrossDCManager(session).getUserSessionWithClient(realm, token.getSessionId(), false, client.getId());+        AuthenticatedClientSessionModel clientSession = userSession.getAuthenticatedClientSessionByClient(client.getId());",I agree. We can make _UserInfoEndpoint.findValidSession_ public or move it to util class,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/21915,1301154258,2023-08-22T07:33:01Z,.github/workflows/ci.yml,"@@ -256,6 +276,11 @@ jobs:         with:           job-name: New Store IT +      - name: Surefire reports+        uses: ./.github/actions/surefire-reports+        with:+          job-name: surefire-new-store-tests-${{ matrix.db }}",```suggestion          job-name: databases-new-store-${{ matrix.db }}```,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/21915,1301157086,2023-08-22T07:35:26Z,.github/workflows/ci.yml,"@@ -577,6 +647,11 @@ jobs:           GH_TOKEN: ${{ github.token }}         with:           job-name: Migration Tests+          +      - name: Surefire reports+        uses: ./.github/actions/surefire-reports+        with:+          job-name: surefire-migration-tests-${{ matrix.old-version }}-${{ matrix.database }}",```suggestion          job-name: migration-tests-${{ matrix.old-version }}-${{ matrix.database }}```,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/21915,1301162956,2023-08-22T07:40:39Z,.github/actions/surefire-reports/action.yml,"@@ -0,0 +1,41 @@+name: Archive Surefire reports+description: It will upload and archive surefire reports per particular test run.+inputs:+  job-name:+    description: 'The name of the particular job run.'+    required: true+  release-branches:+    description: 'List of all related release branches (in JSON format)'+    required: false+    default: '[""refs/heads/release/22.0""]'+  path-pattern:+    description: 'The path pattern from where to get the surefire reports.'+    required: false+    default: |+      **/target/surefire-reports/TEST*.xml+      **/**/target/surefire-reports/TEST*.xml+      **/**/**/target/surefire-reports/TEST*.xml+      testsuite/integration-arquillian/tests/base/target/surefire-reports/TEST*.xml+      quarkus/tests/integration/target/surefire-reports/TEST*.xml+      testsuite/model/target/surefire-reports*/TEST*.xml+      crypto/default/target/surefire-reports/TEST*.xml+      crypto/fips1402/target/surefire-reports/TEST*.xml+      testsuite/integration-arquillian/tests/other/base-ui/target/surefire-reports/TEST*.xml+      testsuite/integration-arquillian/tests/other/webauthn/target/surefire-reports/TEST*.xml+      testsuite/integration-arquillian/tests/other/sssd/target/surefire-reports/TEST*.xml","Not super keen on having to manually list all these patterns. Is `**` only matching a single directory, or does it match a hierarchy? If the latter then just `**/target/surefire-reports/TEST*.xml` should include everything?Alternatively if that doesn't work could we use `find -name surefire-reports` to build the list?Could we build this list with `find -name surefire-reports` for example, or ",
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/22148,1301184426,2023-08-22T07:57:14Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/LightWeightAccessTokenMapper.java,"@@ -0,0 +1,75 @@+package org.keycloak.protocol.oidc.mappers;+import org.keycloak.common.Profile;+import org.keycloak.common.util.Time;+import org.keycloak.models.ClientSessionContext;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ProtocolMapperModel;+import org.keycloak.models.SingleUseObjectProvider;++import org.keycloak.models.UserSessionModel;+import org.keycloak.provider.EnvironmentDependentProviderFactory;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.representations.AccessToken;++import java.util.ArrayList;++import java.util.HashMap;+import java.util.List;+import java.util.Map;++import static org.keycloak.representations.IDToken.SESSION_ID;+import static org.keycloak.representations.JsonWebToken.AZP;++public class LightWeightAccessTokenMapper extends AbstractOIDCProtocolMapper implements OIDCAccessTokenMapper, EnvironmentDependentProviderFactory {+    public static String LIGHT_WEIGHT_ACCESS_TOKEN_PROVIDER_ID = ""oidc-light-weight-access-token-mapper"";+    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();+    @Override+    public String getDisplayCategory() {+        return TOKEN_MAPPER_CATEGORY;+    }++    @Override+    public String getDisplayType() {+        return ""Light weight access token"";+    }++    @Override+    public String getHelpText() {+        return ""Delete the information contained by default in the access token. "" ++                ""The deleted information can be obtained at the token introspection endpoint."";+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return LIGHT_WEIGHT_ACCESS_TOKEN_PROVIDER_ID;+    }++    @Override+    public AccessToken transformAccessToken(AccessToken token, ProtocolMapperModel mappingModel, KeycloakSession session,","I agree.I am reffering to [JSON Web Token (JWT) Profile for OAuth 2.0 Access Tokens documentation](https://datatracker.ietf.org/doc/html/rfc9068#name-data-structure). However, this discussion is out of scope of this PR.",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22598,1301293495,2023-08-22T08:58:45Z,testsuite/integration-arquillian/servers/auth-server/quarkus/pom.xml,"@@ -186,6 +186,31 @@                             </artifactItems>                         </configuration>                     </execution>+                    <execution>+                        <id>includeProprietaryDependencies</id>+                        <phase>generate-resources</phase>+                        <goals>+                            <goal>copy</goal>+                        </goals>+                        <configuration>+                            <artifactItems>+                                <artifactItem>+                                    <groupId>com.oracle.database.jdbc</groupId>+                                    <artifactId>ojdbc11</artifactId>+                                    <version>${oracle-jdbc.version}</version>+                                    <type>jar</type>+                                    <outputDirectory>${auth.server.home}/providers</outputDirectory>+                                </artifactItem>+                                <artifactItem>+                                    <groupId>com.oracle.database.nls</groupId>+                                    <artifactId>orai18n</artifactId>+                                    <version>${oracle-jdbc.version}</version>+                                    <type>jar</type>+                                    <outputDirectory>${auth.server.home}/providers</outputDirectory>+                                </artifactItem>+                            </artifactItems>+                        </configuration>+                    </execution>","We will add the Oracle JDBC driver to the `providers` folder of the dist even when the Oracle JDBC driver is present via transitive dependency of the Quarkus Oracle JDBC extension. We will avoid further differentiation between `main` and `22.x`. As the driver will be only part of 22.x, I don't see any benefit to making other workarounds bcs of testsuite.@vmuzikar Is it ok for you?",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22598,1301296645,2023-08-22T09:01:03Z,quarkus/runtime/pom.xml,"@@ -727,4 +727,30 @@         </plugins>     </build> +    <profiles>+        <profile>+            <id>product</id>+            <activation>+                <property>+                    <name>skipProprietary</name>+                </property>+            </activation>+            <dependencies>+                <dependency>+                    <groupId>io.quarkus</groupId>+                    <artifactId>quarkus-jdbc-oracle</artifactId>+                    <exclusions>+                        <exclusion>+                            <groupId>com.oracle.database.jdbc</groupId>+                            <artifactId>ojdbc11</artifactId>+                        </exclusion>+                        <exclusion>+                            <groupId>com.oracle.database.nls</groupId>+                            <artifactId>orai18n</artifactId>+                        </exclusion>+                    </exclusions>+                </dependency>","When the profile is not activated, the `quarkus-jdbc-oracle` dependency is used without the exclusions; contains the Oracle JDBC driver.",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1301321940,2023-08-22T09:16:30Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/KeycloakMain.java,"@@ -44,6 +44,7 @@ import org.keycloak.quarkus.runtime.cli.Picocli; import org.keycloak.common.Version; import org.keycloak.quarkus.runtime.cli.command.Start;+import org.keycloak.quarkus.runtime.integration.QuarkusKeycloakSessionFactory;",Nitpick; unused import.,x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/15728,1301366977,2023-08-22T09:41:27Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/jaxrs/QuarkusKeycloakApplication.java,"@@ -53,16 +67,21 @@ protected void loadConfig() {      @Override     public Set<Object> getSingletons() {-        Set<Object> singletons = super.getSingletons().stream()-                .filter(QuarkusKeycloakApplication::filterSingletons)-                .collect(Collectors.toSet());+        return Set.of();",Can we remove the `ObjectMapperResolver` singleton as we already have the extended version `QuarkusObjectMapperResolver` in classes? Or should the singleton exist?,x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/22598,1301404357,2023-08-22T10:01:34Z,quarkus/runtime/pom.xml,"@@ -727,4 +727,30 @@         </plugins>     </build> +    <profiles>+        <profile>+            <id>product</id>+            <activation>+                <property>+                    <name>skipProprietary</name>+                </property>+            </activation>+            <dependencies>+                <dependency>+                    <groupId>io.quarkus</groupId>+                    <artifactId>quarkus-jdbc-oracle</artifactId>+                    <exclusions>+                        <exclusion>+                            <groupId>com.oracle.database.jdbc</groupId>+                            <artifactId>ojdbc11</artifactId>+                        </exclusion>+                        <exclusion>+                            <groupId>com.oracle.database.nls</groupId>+                            <artifactId>orai18n</artifactId>+                        </exclusion>+                    </exclusions>+                </dependency>",I checked this and it works:```$ mvn dependency:tree | grep oracle[INFO] +- io.quarkus:quarkus-jdbc-oracle:jar:3.2.4.Final:compile[INFO] |  +- com.oracle.database.jdbc:ojdbc11:jar:23.2.0.0:compile[INFO] |  \- com.oracle.database.nls:orai18n:jar:23.2.0.0:compile```vs```$ mvn dependency:tree -Pproduct | grep oracle[INFO] +- io.quarkus:quarkus-jdbc-oracle:jar:3.2.4.Final:compile```,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/22598,1301405848,2023-08-22T10:02:31Z,quarkus/runtime/pom.xml,"@@ -727,4 +727,30 @@         </plugins>     </build> +    <profiles>+        <profile>+            <id>product</id>+            <activation>+                <property>+                    <name>skipProprietary</name>",Is there some reason we need this property name? Can we just use `-Dproduct` or `-Pproduct` similarly as we used it before?,x
4104715,jfdenise,https://api.github.com/repos/keycloak/keycloak/pulls/22594,1301605129,2023-08-22T12:55:19Z,adapters/saml/wildfly/wildfly-jakarta-subsystem/pom.xml,"@@ -140,6 +140,11 @@             <optional>true</optional>         </dependency> +        <dependency>","@fjuma , does this fix requires this new dependency with test scope?",
1486286,fjuma,https://api.github.com/repos/keycloak/keycloak/pulls/22594,1301671106,2023-08-22T13:42:59Z,adapters/saml/wildfly/wildfly-jakarta-subsystem/pom.xml,"@@ -140,6 +140,11 @@             <optional>true</optional>         </dependency> +        <dependency>",@jfdenise This new dependency was needed to get the Keycloak subsystem parsing tests to pass. It's not related to the underlying problem here. It seemed to be a separate issue that was causing the parsing tests to fail.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22641,1302781605,2023-08-23T09:56:58Z,js/libs/keycloak-admin-client/src/defs/featureRepresentation.ts,"@@ -0,0 +1,16 @@+export default interface FeatureRepresentation {+  name: string;+  label: string;+  type: FeatureType;+  enabled: boolean;+  dependencies: Set<string>;+}++export enum FeatureType {+  DEFAULT = ""DEFAULT"",+  DISABLED_BY_DEFAULT = ""DISABLED_BY_DEFAULT"",+  PREVIEW = ""PREVIEW"",+  PREVIEW_DISABLED_BY_DEFAULT = ""PREVIEW_DISABLED_BY_DEFAULT"",+  EXPERIMENTAL = ""EXPERIMENTAL"",+  DEPRECATED = ""DEPRECATED"",","Let's use the same convention that we have naming enums in other places:```suggestion  Default = ""DEFAULT"",  DisabledByDefault = ""DISABLED_BY_DEFAULT"",  Preview = ""PREVIEW"",  PreviewDisabledByDefault = ""PREVIEW_DISABLED_BY_DEFAULT"",  Experimental = ""EXPERIMENTAL"",  Deprecated = ""DEPRECATED"",```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22641,1302788524,2023-08-23T10:02:44Z,js/apps/admin-ui/src/dashboard/Dashboard.tsx,"@@ -67,48 +69,46 @@ const EmptyDashboard = () => {   ); }; +const FeatureItem = ({ feature }: { feature: FeatureRepresentation }) => {+  const { t } = useTranslation(""dashboard"");+  return (+    <ListItem key={feature.name} className=""pf-u-mb-sm"">","There should be no need to specify the `key` here, since that is passed when this component is used.```suggestion    <ListItem className=""pf-u-mb-sm"">```",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22641,1302806568,2023-08-23T10:18:36Z,js/apps/admin-ui/src/dashboard/Dashboard.tsx,"@@ -67,48 +69,46 @@ const EmptyDashboard = () => {   ); }; +const FeatureItem = ({ feature }: { feature: FeatureRepresentation }) => {+  const { t } = useTranslation(""dashboard"");+  return (+    <ListItem key={feature.name} className=""pf-u-mb-sm"">+      {feature.name}{"" ""}+      {feature.type === FeatureType.EXPERIMENTAL ? (+        <Label color=""orange"">{t(""experimental"")}</Label>+      ) : null}+      {feature.type === FeatureType.PREVIEW ? (+        <Label color=""blue"">{t(""preview"")}</Label>+      ) : null}+      {feature.type === FeatureType.DEFAULT ? (+        <Label color=""green"">{t(""supported"")}</Label>+      ) : null}+    </ListItem>+  );+};+ const Dashboard = () => {   const { t } = useTranslation(""dashboard"");   const { realm } = useRealm();   const serverInfo = useServerInfo();   const localeSort = useLocaleSort(); -  const isDeprecatedFeature = (feature: string) =>-    disabledFeatures.includes(feature);--  const isExperimentalFeature = (feature: string) =>-    serverInfo.profileInfo?.experimentalFeatures?.includes(feature);--  const isPreviewFeature = (feature: string) =>-    serverInfo.profileInfo?.previewFeatures?.includes(feature);--  const isSupportedFeature = (feature: string) =>-    !isExperimentalFeature(feature) && !isPreviewFeature(feature);-   const disabledFeatures = useMemo(     () =>       localeSort(-        serverInfo.profileInfo?.disabledFeatures ?? [],-        (item) => item,+        serverInfo.features?.filter((f) => !f.enabled) || [],+        mapByKey(""name""),       ),-    [serverInfo.profileInfo],+    [localeSort, serverInfo.features],   );    const enabledFeatures = useMemo(     () =>       localeSort(-        filter(-          union(-            serverInfo.profileInfo?.experimentalFeatures,-            serverInfo.profileInfo?.previewFeatures,-          ),-          (feature) => {-            return !isDeprecatedFeature(feature);-          },-        ),-        (item) => item,+        serverInfo.features?.filter((f) => f.enabled) || [],+        mapByKey(""name""),       ),-    [serverInfo.profileInfo],+    [localeSort, serverInfo.features],   );","I think we can reduce the amount of repetition here by first sorting the features based on the locale, and then using that to split out the enabled and disabled features:```tsconst sortedFeatures = useMemo(  () => localeSort(serverInfo.features ?? [], mapByKey(""name"")),  [serverInfo.features],);const disabledFeatures = useMemo(  () => sortedFeatures.filter(({ enabled }) => !enabled),  [sortedFeatures],);const enabledFeatures = useMemo(  () => sortedFeatures.filter(({ enabled }) => enabled),  [sortedFeatures],);```Also note, that even though the linter complains, we should not add `localeSort` to the dependency array. As this would cause the memo to-retrigger every render.",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22598,1303162614,2023-08-23T15:05:29Z,docs/guides/server/db.adoc,"@@ -27,6 +28,50 @@ The server has built-in support for different databases. You can query the avail By default, the server uses the `dev-file` database. This is the default database that the server will use to persist data and only exists for development use-cases. The `dev-file` database is not suitable for production use-cases, and must be replaced before deploying to production. +<@profile.ifProduct>++== Installing a database driver (Oracle)++Database drivers are shipped as part of Keycloak except for the Oracle Database driver which needs to be installed separately.++Install the Oracle Database driver if you want to connect to an Oracle Database, or skip this section if you want to connect to a different database.++To install the Oracle Database driver for Keycloak:++. Download the `ojdbc11` and `orai18n` JAR files from one of the following sources:++.. *Zipped JDBC driver and Companion Jars* version ${properties[""oracle-jdbc.version""]} from the https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html[Oracle driver download page].++.. Maven Central via `link:++https://repo1.maven.org/maven2/com/oracle/database/jdbc/ojdbc11/${properties[""oracle-jdbc.version""]}/ojdbc11-${properties[""oracle-jdbc.version""]}.jar++[ojdbc11]` and `link:++https://repo1.maven.org/maven2/com/oracle/database/nls/orai18n/${properties[""oracle-jdbc.version""]}/orai18n-${properties[""oracle-jdbc.version""]}.jar++[orai18n]`.++.. Installation media recommended by the database vendor for the specific database in use.++. When running the unzipped distribution: Place the `ojdbc11` and `orai18n` JAR files in Keycloak's `providers` folder++. When running containers: Build a custom Keycloak image and add the JARs in the `providers` folder. When building a custom image for the Keycloak Operator, those images need to be optimized images with all build-time options of Keycloak set.+++A minimal Dockerfile to build an image which can be used with the Keycloak Operator and includes Oracle Database JDBC drivers downloaded from Maven Central looks like the following:+++[source,dockerfile]+----+FROM quay.io/keycloak/keycloak:latest+ADD --chown=keycloak:keycloak https://repo1.maven.org/maven2/com/oracle/database/jdbc/ojdbc11/${properties[""oracle-jdbc.version""]}/ojdbc11-${properties[""oracle-jdbc.version""]}.jar /opt/keycloak/providers/ojdbc11.jar+ADD --chown=keycloak:keycloak https://repo1.maven.org/maven2/com/oracle/database/nls/orai18n/${properties[""oracle-jdbc.version""]}/orai18n-${properties[""oracle-jdbc.version""]}.jar /opt/keycloak/providers/orai18n.jar+# Setting the build parameter for the database:+ENV KC_DB=oracle+# Add all other build parameters needed, for example enable health and metrics:+ENV KC_HEALTH_ENABLED=true+ENV KC_METRICS_ENABLED=true+# To be able to use the image with the Keycloak Operator, it needs to be optimized, which requires Keycloak's build step:+RUN /opt/keycloak/bin/kc.sh build+----++","+1However, if we decide to change this, we'd need to do it in `main` too as it's [there already](https://github.com/keycloak/keycloak/blob/660d17f8ec113558e520be97007f6b4a72f0fca6/docs/guides/server/db.adoc?plain=1#L55-L64) and this is just a backport. I'd suggest continuing as is and address this change as a follow-up. There are many more docker examples throughout the  guides, it's not limited to this one. @stianst WDYT?",
25092005,tnorimat,https://api.github.com/repos/keycloak/keycloak/pulls/22148,1303704217,2023-08-24T01:59:49Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/LightWeightAccessTokenMapper.java,"@@ -0,0 +1,75 @@+package org.keycloak.protocol.oidc.mappers;+import org.keycloak.common.Profile;+import org.keycloak.common.util.Time;+import org.keycloak.models.ClientSessionContext;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.ProtocolMapperModel;+import org.keycloak.models.SingleUseObjectProvider;++import org.keycloak.models.UserSessionModel;+import org.keycloak.provider.EnvironmentDependentProviderFactory;+import org.keycloak.provider.ProviderConfigProperty;+import org.keycloak.representations.AccessToken;++import java.util.ArrayList;++import java.util.HashMap;+import java.util.List;+import java.util.Map;++import static org.keycloak.representations.IDToken.SESSION_ID;+import static org.keycloak.representations.JsonWebToken.AZP;++public class LightWeightAccessTokenMapper extends AbstractOIDCProtocolMapper implements OIDCAccessTokenMapper, EnvironmentDependentProviderFactory {+    public static String LIGHT_WEIGHT_ACCESS_TOKEN_PROVIDER_ID = ""oidc-light-weight-access-token-mapper"";+    private static final List<ProviderConfigProperty> configProperties = new ArrayList<>();+    @Override+    public String getDisplayCategory() {+        return TOKEN_MAPPER_CATEGORY;+    }++    @Override+    public String getDisplayType() {+        return ""Light weight access token"";+    }++    @Override+    public String getHelpText() {+        return ""Delete the information contained by default in the access token. "" ++                ""The deleted information can be obtained at the token introspection endpoint."";+    }++    @Override+    public List<ProviderConfigProperty> getConfigProperties() {+        return configProperties;+    }++    @Override+    public String getId() {+        return LIGHT_WEIGHT_ACCESS_TOKEN_PROVIDER_ID;+    }++    @Override+    public AccessToken transformAccessToken(AccessToken token, ProtocolMapperModel mappingModel, KeycloakSession session,","@cgeorgilakis @mposolda I think that the intention of introducing `LightWeightAccessTokenMapper` is to hide such claims from an access token that a protocol mapper cannot control.Also it seems that you are worry about putting a lot of information onto `SingleUseObjectProvider`.IMO, the following claims are only available when Keycloak receives a token request from a client and generate an access token:-   scope, nonce, jti, iat, exp, client_id, azp, session_state, iss(realm name), cnf (OAuth MTLS, DPoP) Therefore, if we want not to put such claims onto an access token but want to put them onto a token introspection response, we need to keep them by some mechanism like `SingleUseObjectProvider`.One option of a lightweight access token is that we must put all such claims to an access token. Another option is that we only put some of such claims to an access token and others are kept by using `SingleUseObjectProvider` by this `LightWeightAccessTokenMapper` . WDYT?",
4104715,jfdenise,https://api.github.com/repos/keycloak/keycloak/pulls/22668,1303926025,2023-08-24T07:36:08Z,distribution/galleon-feature-packs/saml-adapter-galleon-pack/pom.xml,"@@ -256,8 +256,27 @@                 </executions>             </plugin>             <plugin>-                <groupId>org.keycloak</groupId>-                <artifactId>keycloak-distribution-licenses-maven-plugin</artifactId>+                <groupId>org.wildfly.maven.plugins</groupId>+                <artifactId>licenses-plugin</artifactId>+                <version>${version.org.wildfly.maven.plugins.licenses-plugin}</version>+                <inherited>false</inherited>+                <executions>+                    <execution>+                        <id>update-licenses-xml</id>+                        <goals>+                            <goal>insert-versions</goal>+                        </goals>+                        <phase>process-resources</phase>+                        <configuration>+                            <generateVersionProperty>true</generateVersionProperty>+                            <sortByGroupIdAndArtifactId>true</sortByGroupIdAndArtifactId>+                            <licensesConfigFiles>+                                <licensesConfigFile>${basedir}/target/resources/license/licenses.xml</licensesConfigFile>+                            </licensesConfigFiles>+                            <licensesOutputFile>${license.directory}/keycloak-saml-adapter-galleon-pack-licenses.xml</licensesOutputFile>","@fjuma , I provisioned the fp and noticed that some dependencies are included in the licenses file that should be excluded by adding the following element.```<excludedArtifacts>wildfly-common-ee-dependency-management|wildfly-ee-galleon-pack|wildfly-legacy-ee-bom|wildfly-standard-ee-bom\z</excludedArtifacts>```",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22615,1304471387,2023-08-24T14:59:57Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java,"@@ -63,6 +64,10 @@ public static String getHomeDir() {         return System.getProperty(""kc.home.dir"");     } +    public static Boolean isProduct() {+        return Boolean.getBoolean(PRODUCT);+    }",I'd like to avoid product specific stuff in the codebase. Couldn't we just check if GELF is present on the classpath and handle the logic purely in maven during build time?,
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22615,1304492868,2023-08-24T15:16:44Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/Environment.java,"@@ -63,6 +64,10 @@ public static String getHomeDir() {         return System.getProperty(""kc.home.dir"");     } +    public static Boolean isProduct() {+        return Boolean.getBoolean(PRODUCT);+    }","Me either. I'm not sure what exactly you mean by ""handle the logic purely in maven"" because this should solve the problem with exposed GELF configuration options. We need to hide it and accordingly asses tests. However, checking the classpath might be sufficient and easier to implement. ",
4890675,agagancarczyk,https://api.github.com/repos/keycloak/keycloak/pulls/22693,1304714699,2023-08-24T18:30:04Z,js/apps/admin-ui/src/user/EditUser.tsx,"@@ -152,7 +152,7 @@ const EditUserForm = ({ user, bruteForced, refresh }: EditUserFormProps) => {     const attributes =       ""key"" in (formUser.attributes?.[0] || [])         ? keyValueToArray(formUser.attributes as KeyValueType[])-        : user.attributes;",Thanks @jonkoops I hear what you are saying. I had a similar impression after seeing @edewit commit from 2 weeks ago fixing some bug on the same line of code.I have now double-checked my fix and it's working as expected for all the scenarios you have outlined above. It's now behaving the way it should. @edewit can I get your review as well (just in case we are missing something)? Thanks!,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/22708,1305284043,2023-08-25T07:21:35Z,quarkus/config-api/src/main/java/org/keycloak/config/CachingOptions.java,"@@ -13,7 +13,8 @@ public enum Mechanism {             .category(OptionCategory.CACHE)             .description(""Defines the cache mechanism for high-availability. ""                     + ""By default, a 'ispn' cache is used to create a cluster between multiple server nodes. ""","A bit lengthy and strange to add the extra `Note` at the end.I'd suggest something along the lines of:By default in production mode, a 'ispn' cache is used to create a cluster between multiple server nodes. By default in development mode, a `local` cache disables clustering and is intended for development and testing purposes.Looking at the docs:![image](https://github.com/keycloak/keycloak/assets/2271511/ca0db7b3-3e28-43f1-8ff3-e25dfda9a8c6)It's says `ispn` is the default, but not sure how we can easily change that since there's two different defaults, maybe we just live with it as is for now",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22700,1305743509,2023-08-25T14:33:28Z,core/src/main/java/org/keycloak/representations/idm/GroupRepresentation.java,"@@ -17,23 +17,35 @@  package org.keycloak.representations.idm; +import java.util.ArrayList; import java.util.Arrays;+import java.util.Collections; import java.util.HashMap; import java.util.List; import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.stream.Collectors;  /**  * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>  * @version $Revision: 1 $  */ public class GroupRepresentation {+    // For an individual group these are the sufficient minimum fields+    // to identify a group and operate on it in a basic way     protected String id;     protected String name;     protected String path;+    protected String parentId;+    protected Long subGroupCount;+    // For navigating a hierarchy of groups, we can also include a minimum representation of subGroups+    // These aren't populated by default and are only included as-needed+    protected List<GroupRepresentation> subGroups = new ArrayList<>();","Can we keep not eagerly creating an instance for this field or use a singleton? As per the comment, it is not populated by default and should save a bit of memory footprint.",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22700,1305750125,2023-08-25T14:39:08Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java,"@@ -1037,6 +1042,44 @@ public Stream<GroupModel> getTopLevelGroupsStream(RealmModel realm, Integer firs         return list.stream().sorted(GroupModel.COMPARE_BY_NAME);     } +    @Override+    public Stream<GroupModel> getTopLevelGroupsStream(RealmModel realm, String search, Integer first, Integer max) {+        String cacheKey = getTopGroupsQueryCacheKey(realm.getId() + search + first + max);+        boolean queryDB = invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId() + search + first + max)",```suggestion        boolean queryDB = invalidations.contains(cacheKey) || listInvalidations.contains(cacheKey)```,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22700,1305792343,2023-08-25T15:13:11Z,model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java,"@@ -595,7 +603,7 @@ public Stream<GroupModel> getTopLevelGroupsStream(RealmModel realm) {      @Override     public Stream<GroupModel> getTopLevelGroupsStream(RealmModel realm, Integer first, Integer max) {","Isn't possible to just forward the method call to the new `getTopLevelGroupsStream(RealmModel realm, String search, Integer firstResult, Integer maxResults`) method and remove its block entirely (looks like a duplicate now)?",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22700,1305795085,2023-08-25T15:15:38Z,server-spi/src/main/java/org/keycloak/storage/group/GroupLookupProvider.java,"@@ -81,4 +79,15 @@ default Stream<GroupModel> searchForGroupByNameStream(RealmModel realm, String s      */     Stream<GroupModel> searchForGroupByNameStream(RealmModel realm, String search, Boolean exact, Integer firstResult, Integer maxResults); +    /**+     * Returns the subgroups of a given group id+     * @param realm Realm+     * @param id the id of parent group to be used to load subgroups with+     * @param firstResult First result to return, Ignored if negative or {@code null}.+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.+     * @return A Stream of groups that all have the given parent group as their parent.+     */+    Stream<GroupModel> searchForSubgroupsByParentIdStream(RealmModel realm, String id, Integer firstResult, Integer maxResults);",This one can be a `default` method that just delegates to the other method but passes `null` to the `search|name` parameter. It should also remove unnecessary overrides down in the hierarchy.,x
105500542,Redhat-Alice,https://api.github.com/repos/keycloak/keycloak/pulls/22700,1305803551,2023-08-25T15:23:19Z,core/src/main/java/org/keycloak/representations/idm/GroupRepresentation.java,"@@ -17,23 +17,35 @@  package org.keycloak.representations.idm; +import java.util.ArrayList; import java.util.Arrays;+import java.util.Collections; import java.util.HashMap; import java.util.List; import java.util.Map;+import java.util.Objects;+import java.util.Set;+import java.util.stream.Collectors;  /**  * @author <a href=""mailto:bill@burkecentral.com"">Bill Burke</a>  * @version $Revision: 1 $  */ public class GroupRepresentation {+    // For an individual group these are the sufficient minimum fields+    // to identify a group and operate on it in a basic way     protected String id;     protected String name;     protected String path;+    protected String parentId;+    protected Long subGroupCount;+    // For navigating a hierarchy of groups, we can also include a minimum representation of subGroups+    // These aren't populated by default and are only included as-needed+    protected List<GroupRepresentation> subGroups = new ArrayList<>();",I initially added this because the code that uses it in a lot places is not null safe. This wasn't an issue before because a GroupRepresentation always had a subGroups list associated with it but now that isn't the case. Will look at the singleton option and worst case patch the existing code to be null safe!,
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22615,1305808516,2023-08-25T15:27:38Z,quarkus/server/pom.xml,"@@ -77,5 +77,25 @@                 </dependency>             </dependencies>         </profile>++        <profile>+            <id>product</id>+            <dependencies>+                <dependency>+                    <groupId>org.keycloak</groupId>+                    <artifactId>keycloak-quarkus-server</artifactId>+                    <exclusions>+                        <exclusion>+                            <groupId>io.quarkus</groupId>+                            <artifactId>quarkus-logging-gelf</artifactId>+                        </exclusion>+                        <exclusion>+                            <groupId>io.quarkus</groupId>+                            <artifactId>quarkus-logging-gelf-deployment</artifactId>+                        </exclusion>","I was thinking about it and I think we can't avoid a property activated profile. Created https://github.com/mabartos/keycloak/pull/262 for that. We should also use the same approach for Oracle in the 22 branch.Also in that PR I tweaked a bit how the tests detect GELF. It might happen that in testsuite GELF won't be present on the classpath but it will be in server and we'd accidentally skip the tests.Let me know, what you think.",
18034775,bohmber,https://api.github.com/repos/keycloak/keycloak/pulls/8430,1306642564,2023-08-27T10:47:49Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java,"@@ -361,22 +363,42 @@ private void updateAttributesOfKCGroup(GroupModel kcGroup, LDAPObject ldapGroup)     }  -    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, LDAPObject ldapGroup) {+    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, GroupModel parent, LDAPObject ldapGroup) {         String groupNameAttr = config.getGroupNameLdapAttribute();         String groupName = ldapGroup.getAttributeAsString(groupNameAttr);          if (config.isPreserveGroupsInheritance()) {             // Override if better effectivity or different algorithm is needed-            return getAllKcGroups(realm)+            return getAllKcGroups(realm, parent)                     .filter(group -> Objects.equals(group.getName(), groupName)).findFirst().orElse(null);         } else {             // Without preserved inheritance, it's always at groups path-            return KeycloakModelUtils.findGroupByPath(realm, getKcGroupPathFromLDAPGroupName(groupName));+            return realm.getGroupByName(groupName, parent);+        }+    }+    // TODO how this will work with group names with a / without hitting the db everytime+    private GroupModel findGroupByPath(RealmModel realm, String path) {","This code is for the groupPath in the GroupLDAPStorageMapper. Here is the help text:_Keycloak group path the LDAP groups are added to. For example if value '/Applications/App1' is used, then LDAP groups will be available in Keycloak under group 'App1', which is child of top level group 'Applications'. The default value is '/' so LDAP groups will be mapped to the Keycloak groups at the top level. The configured group path must already exists in the Keycloak when creating this mapper._ There is nothing about that '/Applications/App1' is only a group?In this case it would be stupid to support '/' in groupName. For example if only the group 'Applications/App1' exists it will query the database for the unknown 'Applications' group everytime. ",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22615,1307547615,2023-08-28T15:03:06Z,quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/GelfRemovedTest.java,"@@ -0,0 +1,43 @@+/*+ * Copyright 2023 Red Hat, Inc. and/or its affiliates+ * and other contributors as indicated by the @author tags.+ *+ * Licensed under the Apache License, Version 2.0 (the ""License"");+ * you may not use this file except in compliance with the License.+ * You may obtain a copy of the License at+ *+ * http://www.apache.org/licenses/LICENSE-2.0+ *+ * Unless required by applicable law or agreed to in writing, software+ * distributed under the License is distributed on an ""AS IS"" BASIS,+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+ * See the License for the specific language governing permissions and+ * limitations under the License.+ */+package org.keycloak.it.cli.dist;++import io.quarkus.test.junit.main.Launch;+import io.quarkus.test.junit.main.LaunchResult;+import org.junit.jupiter.api.Test;+import org.keycloak.it.junit5.extension.CLIResult;+import org.keycloak.it.junit5.extension.DistributionTest;+import org.keycloak.it.junit5.extension.RawDistOnly;+import org.keycloak.quarkus.runtime.cli.command.StartDev;++import static org.keycloak.config.LoggingOptions.GELF_ENABLED;++@DistributionTest+@RawDistOnly(reason = ""Verifying the help message output doesn't need long spin-up of docker dist tests."")+public class GelfRemovedTest {++    @Test+    @Launch({ StartDev.NAME, ""--help-all"" })+    void checkGelfRemoved(LaunchResult result) {+        CLIResult cliResult = (CLIResult) result;+        if (""true"".equals(System.getProperty(""includeGelf""))) {+            cliResult.assertMessage(""gelf"");","@Pepo48 Thanks for the review.> does this always test only the ""true"" branch of the if clause?For community, yes. For product, the `includeGelf` is not specified[1], so the condition is evaluated to false. > Don't you wan't then rather to add a separate test case based when the product property is used?AFAIK, it's not so simple. As that is our ""dist"" test, we're currently working with the already-built distribution located in the `quarkus/dist` module. See here[2].[1] https://github.com/keycloak/keycloak/pull/22615/files#diff-d27c2ff3bd1df4ecd00219ceed139feb064a31f5f14a398c6f7a154262a1e57eR169-R171 [2] https://github.com/keycloak/keycloak/blob/main/quarkus/tests/junit5/src/main/java/org/keycloak/it/utils/RawKeycloakDistribution.java#L372",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22763,1307598203,2023-08-28T15:45:56Z,docs/guides/templates/profile.adoc,"@@ -0,0 +1,11 @@+<#macro ifProduct>+ifeval::[{project_product} == true]+<#nested>+endif::[]+</#macro>++<#macro ifCommunity>+ifeval::[{project_product} != true]",I assume we can't use the same [approach](https://github.com/keycloak/keycloak/blob/61ca260d379d86e0a6862cab46fe9a0d7abb376d/docs/guides/templates/profile.adoc?plain=1#L8) as in `release/22.0` branch because in upstream we don't set the `project_product` and `project_community` properly?,
105500542,Redhat-Alice,https://api.github.com/repos/keycloak/keycloak/pulls/22700,1307890301,2023-08-28T20:06:56Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/GroupAdapter.java,"@@ -237,6 +237,22 @@ public Stream<GroupModel> getSubGroupsStream() {         return subGroups.stream().sorted(GroupModel.COMPARE_BY_NAME);     } +    @Override+    public Stream<GroupModel> getSubGroupsStream(String search, Integer firstResult, Integer maxResults) {+        if (isUpdated()) return updated.getSubGroupsStream(search, firstResult, maxResults);+        Set<GroupModel> subGroups = new HashSet<>();+        for (String id : cached.getSubGroups(modelSupplier)) {+            GroupModel subGroup = keycloakSession.groups().getGroupById(realm, id);+            if (subGroup == null) {+                // chance that role was removed, so just delegate to persistence and get user invalidated+                getDelegateForUpdate();+                return updated.getSubGroupsStream(search, firstResult, maxResults);+            }+            subGroups.add(subGroup);+        }+        return subGroups.stream().sorted(GroupModel.COMPARE_BY_NAME);",I just mean that other methods in this class sort the stream at the end so I just followed that same pattern,
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/8430,1307933334,2023-08-28T20:44:51Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java,"@@ -361,22 +363,42 @@ private void updateAttributesOfKCGroup(GroupModel kcGroup, LDAPObject ldapGroup)     }  -    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, LDAPObject ldapGroup) {+    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, GroupModel parent, LDAPObject ldapGroup) {         String groupNameAttr = config.getGroupNameLdapAttribute();         String groupName = ldapGroup.getAttributeAsString(groupNameAttr);          if (config.isPreserveGroupsInheritance()) {             // Override if better effectivity or different algorithm is needed-            return getAllKcGroups(realm)+            return getAllKcGroups(realm, parent)                     .filter(group -> Objects.equals(group.getName(), groupName)).findFirst().orElse(null);         } else {             // Without preserved inheritance, it's always at groups path-            return KeycloakModelUtils.findGroupByPath(realm, getKcGroupPathFromLDAPGroupName(groupName));+            return realm.getGroupByName(groupName, parent);+        }+    }+    // TODO how this will work with group names with a / without hitting the db everytime+    private GroupModel findGroupByPath(RealmModel realm, String path) {","@bohmber I see your point, but I don't think we can do it as you suggest. The current implementation of groups allows groups with `/` in the name. While I agree `/` in the group name sounds weird, we can't ensure no one uses (or would like to use) a group with `/` in the name in the LDAP mapper configuration. This change is inconsistent with other parts of Keycloak and can break existing deployments. WDYT? Feel free to create a new issue/discussion on this topic, we can solve this in a separate PR.> In this case it would be stupid to support '/' in groupName. For example if only the group 'Applications/App1' exists it will query the database for the unknown 'Applications' group everytime.This is correct but we can optimize this. The solution can include adding support for escaping of `/` in Group paths, documenting that `/` in group paths for LDAP mapper can result in longer response times for querying groups or caching negative responses from DB. Still, I think the current solution (if we add support for `/` in names) is a significant improvement to the current state, so we can handle this optimization later.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22732,1308084262,2023-08-29T00:46:12Z,services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java,"@@ -339,10 +342,10 @@ public Stream<UserRepresentation> getUsers(                     attributes.putAll(searchAttributes);                      return searchForUser(attributes, realm, userPermissionEvaluator, briefRepresentation, firstResult,-                            maxResults, true);+                            maxResults, includeServiceAccounts);","@BbIKTOP We should keep backward compatibility. This is the only place we want to include service accounts and it is clearly targeted for querying regular users. In addition to that, not leveraging the index when querying users or service accounts is becoming a problem for those with a huge number of users (regular and SA) in the database.They are really different things.I understand it seems like a simple fix but the core issue is popping up quite often when users and service accounts are managed like the same.I would rather add a specific endpoint to ClientsResource to query/search service accounts if we want to break backward compatibility.Otherwise, we need to default to `true` here when querying by username and other parameters.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/22531,1308310058,2023-08-29T07:10:26Z,server-spi/src/main/java/org/keycloak/models/CredentialValidationOutput.java,"@@ -63,6 +67,26 @@ public CredentialValidationOutput merge(CredentialValidationOutput that) {     }      public enum Status {-        AUTHENTICATED, FAILED, CONTINUE","Thanks Pedro for the suggestions. Your naming is probably better, but there is also concern with backwards compatibility as `CredentialValidationOutput` class is part of the `server-spi` module, which is part of user-storage SPI and hence backwards compatibility might be a concern...@ahus1 What do you think? Can we rename things or is it better to keep as it is?I see options like:1) Rename as @pedroigor  suggested2) Rename only `FALLBACK` to `VALID_USER` . This is fine for backwards compatibility though as `FALLBACK` is new thing added in this PR3) Keep as it isI vote for 2. I can do 1 if @ahus1 agrees that backwards compatibility is not an issue.",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/8430,1308389924,2023-08-29T08:11:46Z,server-spi/src/main/java/org/keycloak/models/RealmModel.java,"@@ -646,6 +646,9 @@ default GroupModel createGroup(String name, GroupModel toParent) {      GroupModel getGroupById(String id); +    GroupModel getGroupByName(String name, GroupModel parent);",`session.groups()` is `cacheSession` in the background. See:https://github.com/keycloak/keycloak/blob/28a18bf7b94bde30c16abd04ac248fa347f1857d/model/legacy-private/src/main/java/org/keycloak/storage/datastore/LegacyDatastoreProvider.java#L143-L151All methods in `RealmModel` that do not work with the realm entity are just redirecting the call to `session.area().correctMethod()`. We would like to eventually get rid of these methods so it is cleaner.,x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22763,1308506925,2023-08-29T09:44:24Z,docs/guides/templates/profile.adoc,"@@ -0,0 +1,11 @@+<#macro ifProduct>+ifeval::[{project_product} == true]+<#nested>+endif::[]+</#macro>++<#macro ifCommunity>+ifeval::[{project_product} != true]","Exactly. The same approach as in `release/22.0` doesn't provide the functionality to use the `ifCommunity` in upstream. It means when you build a guide in upstream with the `ifCommunity` condition, it's hidden. This approach resolves it. This is mainly for the following product releases. ",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22763,1308533789,2023-08-29T10:06:52Z,docs/guides/templates/profile.adoc,"@@ -0,0 +1,11 @@+<#macro ifProduct>+ifeval::[{project_product} == true]+<#nested>+endif::[]+</#macro>++<#macro ifCommunity>+ifeval::[{project_product} != true]","As we're using AsciiDoctor in the upstream, we're facing a difference between prod and community documentation. Even if the `project_community` is specified as an AsciiDoctor boolean attribute, it behaves like a toggle (defined or non-defined)[1]. It means we're not able to check these conditions like `[{project_community} == true]`. We can only do that in product documentation, where these attributes are still considered as strings :))Probably @ahus1 might have more information about it.[1] https://docs.asciidoctor.org/asciidoc/latest/attributes/boolean-attributes/",
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/8430,1308756781,2023-08-29T12:39:17Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java,"@@ -361,22 +363,42 @@ private void updateAttributesOfKCGroup(GroupModel kcGroup, LDAPObject ldapGroup)     }  -    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, LDAPObject ldapGroup) {+    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, GroupModel parent, LDAPObject ldapGroup) {         String groupNameAttr = config.getGroupNameLdapAttribute();         String groupName = ldapGroup.getAttributeAsString(groupNameAttr);          if (config.isPreserveGroupsInheritance()) {             // Override if better effectivity or different algorithm is needed-            return getAllKcGroups(realm)+            return getAllKcGroups(realm, parent)                     .filter(group -> Objects.equals(group.getName(), groupName)).findFirst().orElse(null);         } else {             // Without preserved inheritance, it's always at groups path-            return KeycloakModelUtils.findGroupByPath(realm, getKcGroupPathFromLDAPGroupName(groupName));+            return realm.getGroupByName(groupName, parent);+        }+    }+    // TODO how this will work with group names with a / without hitting the db everytime+    private GroupModel findGroupByPath(RealmModel realm, String path) {","I like documenting this behaviour in the tooltip/docs better than refusing configs with a slash in the name. As I said, there may be a use case where someone wants to use a group with a slash in its name. If the validation refuses such config, they cannot do it. The only thing we can do with this is to create a new discussion/issue where we discuss how to get rid of groups with `/` in the name completely from the whole Keycloak. We can't change it only in one part of the code. @sguilhen Any thoughts on this? ",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22615,1308838686,2023-08-29T13:38:59Z,quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java,"@@ -11,16 +13,27 @@ public class LoggingOptions {     public static final Output DEFAULT_CONSOLE_OUTPUT = Output.DEFAULT;     public static final String DEFAULT_LOG_FILENAME = ""keycloak.log"";     public static final String DEFAULT_LOG_PATH = ""data"" + File.separator + ""log"" + File.separator + DEFAULT_LOG_FILENAME;+    public static final Boolean GELF_ENABLED = isGelfEnabled();",I'd also like to address that in a follow-up task because it might be a little bit out of the scope of this PR due to the absence of support for obtaining persisted property in `config-api` module. I don't see any big deal to providing the property such as is ATM. @pedroigor Can we do it later?,
2424580,ASzc,https://api.github.com/repos/keycloak/keycloak/pulls/22747,1308863612,2023-08-29T13:55:41Z,pom.xml,"@@ -43,8 +43,8 @@         <jboss.snapshots.repo.id>jboss-snapshots-repository</jboss.snapshots.repo.id>         <jboss.snapshots.repo.url>https://s01.oss.sonatype.org/content/repositories/snapshots/</jboss.snapshots.repo.url> -        <quarkus.version>3.2.4.Final</quarkus.version>-        <quarkus.build.version>3.2.3.Final</quarkus.build.version>+        <quarkus.version>3.2.5.Final</quarkus.version>+        <quarkus.build.version>3.2.5.Final</quarkus.build.version>","It's because some of the quarkus build-time components broke when using aligned versions. Splitting the property into runtime/buildtime allows not aligning the build-time parts. I tried the method shown here, but PME sees it as one property. Instead I made sure `quarkus/set-quarkus-version.sh` updated both properties, but I guess people haven't been using that?I'm not sure if the root problem still exists, but it's good practice not to share properties between build time and runtime dependencies. Quarkus is kinda unusual in that it has a lot of runtime and buildtime stuff.",
105500542,Redhat-Alice,https://api.github.com/repos/keycloak/keycloak/pulls/22700,1309220146,2023-08-29T18:45:19Z,services/src/main/java/org/keycloak/utils/GroupUtils.java,"@@ -1,56 +1,80 @@ package org.keycloak.utils;--import java.util.Collections;-import java.util.stream.Collectors;--import org.keycloak.common.Profile;+import java.util.Comparator;+import java.util.HashMap;+import java.util.Map;+import java.util.Optional;+import java.util.stream.Stream; import org.keycloak.models.GroupModel;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel; import org.keycloak.models.utils.ModelToRepresentation; import org.keycloak.representations.idm.GroupRepresentation; import org.keycloak.services.resources.admin.permissions.GroupPermissionEvaluator; -public class GroupUtils {-    // Moved out from org.keycloak.admin.ui.rest.GroupsResource-    public static GroupRepresentation toGroupHierarchy(GroupPermissionEvaluator groupsEvaluator, GroupModel group, final String search, boolean exact, boolean lazy) {-        return toGroupHierarchy(groupsEvaluator, group, search, exact, true, lazy);-    } -    public static GroupRepresentation toGroupHierarchy(GroupPermissionEvaluator groupsEvaluator, GroupModel group, final String search, boolean exact, boolean full, boolean lazy) {-        GroupRepresentation rep = ModelToRepresentation.toRepresentation(group, full);-        if (!lazy) {-            rep.setSubGroups(group.getSubGroupsStream().filter(g ->-                    groupMatchesSearchOrIsPathElement(-                            g, search-                    )-            ).map(subGroup ->-                    ModelToRepresentation.toGroupHierarchy(-                            subGroup, full, search, exact-                    ) -            ).collect(Collectors.toList()));-        } else {-            rep.setSubGroups(Collections.emptyList());-        }+public class GroupUtils { -        if (Profile.isFeatureEnabled(Profile.Feature.ADMIN_FINE_GRAINED_AUTHZ)) {-            setAccess(groupsEvaluator, group, rep);-        }+    /**+     * This method takes the provided groups and attempts to load their parents all the way to the root group while maintaining the hierarchy data+     * for each GroupRepresentation object. Each resultant GroupRepresentation object in the stream should contain relevant subgroups to the originally+     * provided groups+     * @param session The active keycloak session+     * @param realm The realm to operate on+     * @param groups The groups that we want to populate the hierarchy for+     * @return A stream of groups that contain all relevant groups from the root down with no extra siblings+     */+    public static Stream<GroupRepresentation> populateGroupHierarchyFromSubGroups(KeycloakSession session, RealmModel realm, Stream<GroupModel> groups, boolean full, GroupPermissionEvaluator groupEvaluator) {+        Map<String, GroupRepresentation> groupIdToGroups = new HashMap<>();+        groups.forEach(group -> {","Assuming my understanding of a KeycloakSession is accurate (I believe that the session is active for all users across the entire runtime of the server and that it doesn't represent a single HTTP transaction's contextual data?) then this method definitely gets run multiple times per session as it takes search results and constructs the tree based off of it. This method is, however, faster than the previous hierarchy algorithm. The previous algorithm would take the stream of top level groups, iterate through all of them until it found a matching group, load that group's entire subgroup list, and then repeat the algorithm on the next layer of the tree. For a setups with groups A,B,C whereA and B are top level groups C is a subgroup of B { A, B { C } } A search that should return group C and its parent (group B) would end up also processing and then discarding Group A as well. This scaled out both vertically and horizontally for each matching group and each layer of the tree. The new algorithm at least ensures that only groups C and B and processed. As far as caching the results go, in other parts of the codebase I've noticed that when search is involved the cache tends to be bypassed in favor of getting the results directly from the database. Would this follow that same design mindset? ",
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/8430,1309534252,2023-08-30T02:08:13Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java,"@@ -361,22 +363,42 @@ private void updateAttributesOfKCGroup(GroupModel kcGroup, LDAPObject ldapGroup)     }  -    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, LDAPObject ldapGroup) {+    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, GroupModel parent, LDAPObject ldapGroup) {         String groupNameAttr = config.getGroupNameLdapAttribute();         String groupName = ldapGroup.getAttributeAsString(groupNameAttr);          if (config.isPreserveGroupsInheritance()) {             // Override if better effectivity or different algorithm is needed-            return getAllKcGroups(realm)+            return getAllKcGroups(realm, parent)                     .filter(group -> Objects.equals(group.getName(), groupName)).findFirst().orElse(null);         } else {             // Without preserved inheritance, it's always at groups path-            return KeycloakModelUtils.findGroupByPath(realm, getKcGroupPathFromLDAPGroupName(groupName));+            return realm.getGroupByName(groupName, parent);+        }+    }+    // TODO how this will work with group names with a / without hitting the db everytime+    private GroupModel findGroupByPath(RealmModel realm, String path) {","@mhajas I agree with your view that we should not refuse groups with slash in the name as that is currently allowed. As you pointed out, we can discuss whether this makes sense or not in a separate issue, but for the scope of this PR this is a behavior I would not change.",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22576,1310229429,2023-08-30T12:53:24Z,js/apps/admin-ui/src/user/components/SelectComponent.tsx.orig,,"This file looks to be a temporary one, can probably be removed.",x
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22833,1311464922,2023-08-31T11:03:13Z,quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java,"@@ -230,6 +234,33 @@ void configureProfile(KeycloakRecorder recorder) {         recorder.configureProfile(profile.getName(), profile.getFeatures());     } +    /**+     * Check whether JDBC driver is present for the specified DB+     *+     * @param ignore used for changing build items execution order with regards to AgroalProcessor+     */+    @BuildStep(onlyIf = IsJpaStoreEnabled.class)+    @Produce(CheckJdbcBuildStep.class)+    void checkJdbcDriver(BuildProducer<JdbcDriverBuildItem> ignore) {+        final Optional<String> dbVendor = Configuration.getOptionalValue(NS_KEYCLOAK_PREFIX.concat(DatabaseOptions.DB.getKey()));++        if (dbVendor.isPresent()) {+            boolean xaEnabled = Configuration.getOptionalValue(NS_KEYCLOAK_PREFIX.concat(TRANSACTION_XA_ENABLED.getKey()))+                    .map(""xa""::equals)+                    .orElseGet(() -> TRANSACTION_XA_ENABLED.getDefaultValue().orElse(true));++            final String dbDriver = Database.getDriver(dbVendor.get(), xaEnabled)+                    .orElseThrow(() -> new ConfigurationException(String.format(""Unknown DB vendor '%s'"", dbVendor.get())));",Maybe we could simply fetch `quarkus.datasource.jdbc.driver` option here instead of calculating it again?,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22861,1311598807,2023-08-31T13:04:49Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/AbstractUserRoleMappingMapper.java,"@@ -99,7 +92,16 @@ private static void mapClaim(IDToken token, ProtocolMapperModel mappingModel, Ob         if (clientId != null) {             // case when clientId contains dots             clientId = DOT_PATTERN.matcher(clientId).replaceAll(DOT_REPLACEMENT);-            protocolClaim = CLIENT_ID_PATTERN.matcher(protocolClaim).replaceAll(clientId);+            Matcher matcher = CLIENT_ID_PATTERN.matcher(protocolClaim);+            if (matcher.find()) {+                protocolClaim = matcher.replaceAll(clientId);+            }+            if (!(protocolClaim.endsWith(""roles"") || protocolClaim.startsWith(clientId) || protocolClaim.endsWith(clientId))) {",This is actually fixing a similar bug related to multivalued role mappers where you can end up with roles from a client mapped to a claim name that references another client.,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22771,1312806659,2023-09-01T09:34:05Z,js/apps/admin-ui/src/identity-providers/add/OIDCGeneralSettings.tsx,"@@ -16,12 +16,15 @@ export const OIDCGeneralSettings = ({ id }: { id: string }) => {    const {     register,+    control,     formState: { errors },   } = useFormContext(); +  const alias = useWatch({control, name: ""alias""});+   return (     <>-      <RedirectUrl id={id} />",Since `id` is no longer used it can be removed from the props for this component.,x
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22771,1312806793,2023-09-01T09:34:12Z,js/apps/admin-ui/src/identity-providers/add/SamlGeneralSettings.tsx,"@@ -27,15 +27,15 @@ export const SamlGeneralSettings = ({    const {     register,-    watch,+    control,     formState: { errors },   } = useFormContext(); -  const alias = watch(""alias"");+  const alias = useWatch({control, name: ""alias""});    return (     <>-      <RedirectUrl id={id} />",Since `id` is no longer used it can be removed from the props for this component.,x
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22833,1312963495,2023-09-01T12:26:50Z,quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java,"@@ -230,6 +234,28 @@ void configureProfile(KeycloakRecorder recorder) {         recorder.configureProfile(profile.getName(), profile.getFeatures());     } +    /**+     * Check whether JDBC driver is present for the specified DB+     *+     * @param ignore used for changing build items execution order with regards to AgroalProcessor+     */+    @BuildStep(onlyIf = IsJpaStoreEnabled.class)+    @Produce(CheckJdbcBuildStep.class)+    void checkJdbcDriver(BuildProducer<JdbcDriverBuildItem> ignore) {+        final Optional<String> dbDriver = Configuration.getOptionalValue(""quarkus.datasource.jdbc.driver"");++        if (dbDriver.isPresent()) {+            try {+                // We do not want to initialize the JDBC driver class+                Class.forName(dbDriver.get(), false, Thread.currentThread().getContextClassLoader());+            } catch (ClassNotFoundException e) {+                // Ignore queued TRACE and DEBUG messages for not initialized log handlers+                InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(new Handler[]{});","When an exception is thrown during the execution of the build chain, the log handlers might not be initialized yet, and gathered log records are queued in the `QuarkusDelayedHandler`. When the queue limit is exceeded, or the minimum log level is set to >=INFO, these TRACE and DEBUG log records are dropped.When the app crashes after the exception is thrown, the DelayedHandler is closed as well, but it doesn't know how to handle the accumulated log records, because no logger is initialized yet. So, the handler just prints the whole queue of log records to the stderr. As the InitialConfigurator is related to bootstrap, we're not able to programmatically set the queue limit or the discard level in the build chain. We can just workaround this behavior by setting empty build time handlers, and the queue of log records is cleared. It might be related to all exception handling for build steps, but I don't want to hide some debug info for the other steps. In this case, we don't obtain any additional valuable info about the JDBC. I don't see any problem with this approach.",
69153350,andreas-blaettlinger,https://api.github.com/repos/keycloak/keycloak/pulls/22068,1315074206,2023-09-04T15:41:16Z,themes/src/main/resources/theme/base/login/login-password.ftl,"@@ -10,10 +10,17 @@                     <div class=""${properties.kcFormGroupClass!} no-bottom-margin"">                         <hr/>                         <label for=""password"" class=""${properties.kcLabelClass!}"">${msg(""password"")}</label>-                        <input tabindex=""2"" id=""password"" class=""${properties.kcInputClass!}"" name=""password""-                               type=""password"" autocomplete=""on"" autofocus-                               aria-invalid=""<#if messagesPerField.existsError('password')>true</#if>""-                        />+                        <div class=""${properties.kcInputGroup!}"">","Have not thought about that but I got your point. Nevertheless, I am of the opinion that this realm settings you are talking about are some kind of feature flags; something like user-registration, forget-password and things like that. I wont describe my PR as a feature but rather a convenient quality-of-life improvement for the user - which would find its way into the UI (hopefully?) anyway when we upgrade to newer PatternFly versions, right? Of course you could also hide it behind such a feature flag but doing this for usability-improvements did not feel quite right to me.Thanks for bringing this up @pedroigor! :) Very open to discussions, any other opinions?",
38039883,mabartos,https://api.github.com/repos/keycloak/keycloak/pulls/22112,1315614011,2023-09-05T09:13:25Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/services/health/KeycloakReadyHealthCheck.java,"@@ -31,15 +35,34 @@  /**  * Keycloak Healthcheck Readiness Probe.- *+ * <p>  * Performs a hybrid between the passive and the active mode. If there are no healthy connections in the pool,- * it invokes the standard <code>DataSourceHealthCheck</code> that creates a new connection and checks if its valid.+ * it invokes the standard <code>DataSourceHealthCheck</code> that creates a new connection and checks if it's valid.+ * <p>+ * While the check for healthy connections is non-blocking, the standard check is blocking, so it needs to be wrapped.  *  * @see <a href=""https://github.com/keycloak/keycloak-community/pull/55"">Healthcheck API Design</a>  */ @Readiness @ApplicationScoped-public class KeycloakReadyHealthCheck extends DataSourceHealthCheck {+public class KeycloakReadyHealthCheck implements AsyncHealthCheck {++    /** As the DataSourceHealthCheck doesn't exist as an application scoped bean,+    * create our own instance here which exposes the <code>init()</code> call for the delegate. */","@ahus1 Does not exist as an application-scoped bean? For Quarkus 3.2.5, obtaining the instance through the CDI should be possible. Can you elaborate on it?https://github.com/quarkusio/quarkus/blob/3.2/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/health/DataSourceHealthCheck.java#L25",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/22112,1315638799,2023-09-05T09:31:35Z,quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/services/health/KeycloakReadyHealthCheck.java,"@@ -31,15 +35,34 @@  /**  * Keycloak Healthcheck Readiness Probe.- *+ * <p>  * Performs a hybrid between the passive and the active mode. If there are no healthy connections in the pool,- * it invokes the standard <code>DataSourceHealthCheck</code> that creates a new connection and checks if its valid.+ * it invokes the standard <code>DataSourceHealthCheck</code> that creates a new connection and checks if it's valid.+ * <p>+ * While the check for healthy connections is non-blocking, the standard check is blocking, so it needs to be wrapped.  *  * @see <a href=""https://github.com/keycloak/keycloak-community/pull/55"">Healthcheck API Design</a>  */ @Readiness @ApplicationScoped-public class KeycloakReadyHealthCheck extends DataSourceHealthCheck {+public class KeycloakReadyHealthCheck implements AsyncHealthCheck {++    /** As the DataSourceHealthCheck doesn't exist as an application scoped bean,+    * create our own instance here which exposes the <code>init()</code> call for the delegate. */","Keycloak has explicitly disabled it, see:https://github.com/keycloak/keycloak/blob/3c00286e6cd51cba843b5e08aff07ddc83e28a74/quarkus/runtime/src/main/resources/application.properties#L10I assume it has been disabled as this allowed overwriting the health check with a Keycloak's custom database check.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/23003,1317076599,2023-09-06T10:27:46Z,.github/actions/conditional/conditional.sh,"@@ -38,6 +38,10 @@ for C in ""${CONDITIONS[@]}""; do   if [ ""$IS_PR"" == true ]; then     PATTERN=""${CONDITION[0]}"" +    if [[ ""$PATTERN"" =~ testsuite::* ]]; then+      PATTERN=$(cat testsuite/integration-arquillian/tests/base/testsuites/database-suite | grep -v -e '^[[:space:]]*$' | grep -v '^$' | sed -z 's/\n$//g' | sed -z 's/\n/|/g' | sed 's/\./\//g' | sed 's/\*\*/*/g')",```suggestion      PATTERN=$(cat testsuite/integration-arquillian/tests/base/testsuites/database-suite | grep -v -e '^[[:space:]]*$' | sed -z 's/\n$//g' | sed -z 's/\n/|/g' | sed 's/\./\//g' | sed 's/\*\*/*/g')```,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/20169,1317211502,2023-09-06T12:32:38Z,services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java,"@@ -364,7 +365,7 @@ public RealmRepresentation getRealm() {                 rep.setRegistrationEmailAsUsername(realm.isRegistrationEmailAsUsername());             } -            if (auth.realm().canViewIdentityProviders()) {+            if (auth.realm().canViewIdentityProviders() && !briefRepresentation) {",Don't we want to actually enter this block and check the `briefRepresentation` parameter when actually creating the realm representation?,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/23010,1318000229,2023-09-07T01:59:38Z,server-spi/src/main/java/org/keycloak/utils/StringUtil.java,"@@ -28,6 +28,10 @@ public static boolean  isNotBlank(String str) {         return str != null && !"""".equals(str.trim());     } +    public static boolean isNullOrEmpty(String str) {",Are you adding because of the complexity of the `isBlank`?,
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/22148,1318154693,2023-09-07T06:46:52Z,services/src/main/java/org/keycloak/protocol/oidc/AccessTokenIntrospectionProvider.java,"@@ -97,6 +117,53 @@ public Response introspect(String token) {         }     } +    private AccessToken getAccessToken(String token) throws VerificationException {+        TokenVerifier<AccessToken> verifier = TokenVerifier.create(token, AccessToken.class);+        SignatureVerifierContext verifierContext = session.getProvider(SignatureProvider.class, verifier.getHeader().getAlgorithm().name()).verifier(verifier.getHeader().getKeyId());+        verifier.verifierContext(verifierContext);",This is the verifyAccessToken method except the return statement. I propose create a new method used here and in verifyAccessToken method.If verification failed now Keycloak return false. With your code an exception will be thrown. I believe that we should keep same behaviour and return here null.,
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/23010,1318164756,2023-09-07T06:57:35Z,server-spi/src/main/java/org/keycloak/utils/StringUtil.java,"@@ -28,6 +28,10 @@ public static boolean  isNotBlank(String str) {         return str != null && !"""".equals(str.trim());     } +    public static boolean isNullOrEmpty(String str) {",Wanted to keep the original behavior from the calling class + `isNotNull` is not the cheapest as it does a trim.,x
55974447,cgeorgilakis,https://api.github.com/repos/keycloak/keycloak/pulls/22148,1318165843,2023-09-07T06:58:43Z,services/src/main/java/org/keycloak/protocol/oidc/AccessTokenIntrospectionProvider.java,"@@ -97,6 +111,49 @@ public Response introspect(String token) {         }     } +    private AccessToken getAccessToken(String token) throws VerificationException {+        TokenVerifier<AccessToken> verifier = TokenVerifier.create(token, AccessToken.class);+        SignatureVerifierContext verifierContext = session.getProvider(SignatureProvider.class, verifier.getHeader().getAlgorithm().name()).verifier(verifier.getHeader().getKeyId());+        verifier.verifierContext(verifierContext);+        AccessToken accessToken = verifier.verify().getToken();+        SingleUseObjectProvider singleUseStore = session.singleUseObjects();+        Map<String, String> tokenData = singleUseStore.get(accessToken.getId());+        if (tokenData != null) {+            // enabled lightWeightAccessTokenMapper+            accessToken.setSessionState(tokenData.get(SESSION_ID));+            accessToken.issuedFor(tokenData.get(AZP));+            return accessToken;+        } else {+            verifier.realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()));+            RealmModel realm = this.session.getContext().getRealm();+            return tokenManager.checkTokenValidForIntrospection(session, realm, accessToken, false) ? accessToken : null;+        }+    }+++    private AccessToken transformAccessToken(AccessToken token) {+        if (token == null) {+            return null;+        }++        ClientModel client = realm.getClientByClientId(token.getIssuedFor());+        UserSessionModel userSession = new UserSessionCrossDCManager(session).getUserSessionWithClient(realm, token.getSessionId(), false, client.getId());+        AuthenticatedClientSessionModel clientSession = userSession.getAuthenticatedClientSessionByClient(client.getId());",> UserInfoEndpoint.findValidSession has been Utilized (UserSessionUtil) so that it can also be referenced by the AccessTokenIntrospectionProvider.Now it is correct. I only believe that we should catch method errors and together with user being null return null in this method.So token introspection will return false - not exception.,
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/23020,1318180899,2023-09-07T07:13:09Z,docs/maven-plugin/pom.xml,"@@ -56,7 +56,7 @@         </dependency>         <dependency>             <groupId>org.keycloak</groupId>-            <artifactId>keycloak-quarkus-server</artifactId>+            <artifactId>keycloak-quarkus-server-deployment</artifactId>","If I only specify `keycloak-quarkus-server`, it fails with the same error I get when building the `dist`. The culprit might be somewhere in the Quarkus maven plugin that wants to get some information from the deployment. So it must be somewhere in Maven's reactor (or whatever that is called) to work. You can't build ust the `quarkus-server` without also building the `quarkus-server-deployment` when using `also-make`. Strange ... it feels like a workaround, but I currently see no other way to fix this.https://github.com/keycloak/keycloak/blob/7c013e8d48cc8ce1a2543ba0b036eb99c2a2633b/quarkus/runtime/pom.xml#L688-L702",
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/23039,1318343013,2023-09-07T09:29:27Z,js/apps/admin-ui/src/user/EditUser.tsx,"@@ -58,80 +57,21 @@ export default function EditUser() {   const [bruteForced, setBruteForced] = useState<BruteForced>();   const [refreshCount, setRefreshCount] = useState(0);   const refresh = () => setRefreshCount((count) => count + 1);--  useFetch(-    async () => {-      const [user, currentRealm, attackDetection] = await Promise.all([-        adminClient.users.findOne({ id: id!, userProfileMetadata: true }),-        adminClient.realms.findOne({ realm }),-        adminClient.attackDetection.findOne({ id: id! }),-      ]);--      if (!user || !currentRealm || !attackDetection) {-        throw new Error(t(""common:notFound""));-      }--      const isBruteForceProtected = currentRealm.bruteForceProtected;-      const isLocked = isBruteForceProtected && attackDetection.disabled;--      return { user, bruteForced: { isBruteForceProtected, isLocked } };-    },-    ({ user, bruteForced }) => {-      setUser(user);-      setBruteForced(bruteForced);-    },-    [refreshCount],-  );--  if (!user || !bruteForced) {-    return <KeycloakSpinner />;-  }--  return (-    <EditUserForm user={user} bruteForced={bruteForced} refresh={refresh} />-  );-}--type EditUserFormProps = {-  user: UserRepresentation;-  bruteForced: BruteForced;-  refresh: () => void;-};--const EditUserForm = ({ user, bruteForced, refresh }: EditUserFormProps) => {",Why get rid of the separate component for the form?,
695720,jonkoops,https://api.github.com/repos/keycloak/keycloak/pulls/22949,1318372463,2023-09-07T09:54:34Z,js/apps/admin-ui/src/i18n/i18n.ts,"@@ -6,40 +6,17 @@ import { joinPath } from ""../utils/joinPath""; import { OverridesBackend } from ""./OverridesBackend"";  export const DEFAULT_LOCALE = ""en"";-export const DEFAULT_NAMESPACE = ""common"";+export const DEFAULT_NAMESPACE = ""translation""; export const NAMESPACE_SEPARATOR = "":"";","This one is only used for the overrides back-end. The overrides backend should be refactored, so that it no longer uses namespaces. Otherwise the realm overrides will break. Once that has been done, this variable can be removed.```suggestion```",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/23020,1318433636,2023-09-07T10:53:01Z,docs/maven-plugin/pom.xml,"@@ -56,7 +56,7 @@         </dependency>         <dependency>             <groupId>org.keycloak</groupId>-            <artifactId>keycloak-quarkus-server</artifactId>+            <artifactId>keycloak-quarkus-server-deployment</artifactId>","Yeah, that is a good point. I wonder what was the reasoning for not including `keycloak-quarkus-server-deployment` as a dependency in `keycloak-quarkus-server` since technically it is its dependency.@pedroigor @mabartos Do you perhaps have more context?",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/23020,1318449880,2023-09-07T11:09:40Z,docs/maven-plugin/pom.xml,"@@ -56,7 +56,7 @@         </dependency>         <dependency>             <groupId>org.keycloak</groupId>-            <artifactId>keycloak-quarkus-server</artifactId>+            <artifactId>keycloak-quarkus-server-deployment</artifactId>",Still it's some kind cyclic dependency on how `quarkus-extension-maven-plugin` works. So this PR is the way to go?,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22317,1318469521,2023-09-07T11:30:38Z,server-spi-private/src/main/java/org/keycloak/services/resource/AccountResourceProviderFactory.java,"@@ -0,0 +1,33 @@+package org.keycloak.services.resource;++import jakarta.ws.rs.InternalServerErrorException;+import jakarta.ws.rs.NotFoundException;+import java.io.IOException;+import org.keycloak.models.ClientModel;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.provider.ProviderFactory;+import org.keycloak.theme.Theme;++/**+ * <p>A factory that creates {@link AccountResourceProvider} instances.+ */+public interface AccountResourceProviderFactory extends ProviderFactory<AccountResourceProvider> {++  default Theme getTheme(KeycloakSession session) {",Does it make more sense to start without these methods?Looks like we can just move them for now to the default factory implementation as it is not being used outside the class hierarchy.,x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22732,1318582150,2023-09-07T13:11:32Z,services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java,"@@ -339,10 +342,10 @@ public Stream<UserRepresentation> getUsers(                     attributes.putAll(searchAttributes);                      return searchForUser(attributes, realm, userPermissionEvaluator, briefRepresentation, firstResult,-                            maxResults, true);+                            maxResults, includeServiceAccounts);","No problem and thanks for your first contribution.The `includeServiceAccounts` should only default to `true` in the line above. The other places should be passing `false` as it stands today.We also need to:* Update the [Java Admin Client](https://github.com/keycloak/keycloak/blob/main/integration/admin-client-jee/src/main/java/org/keycloak/admin/client/resource/UsersResource.java) to include the new parameter* Create a test here https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UsersTest.javaDoes it work for you?About what I mentioned before, I'll create an issue to get feedback about how we can improve how we are dealing with SAs from the User API. ",
13906855,vmuzikar,https://api.github.com/repos/keycloak/keycloak/pulls/22986,1318592411,2023-09-07T13:18:50Z,quarkus/tests/junit5/src/main/java/org/keycloak/it/utils/RawKeycloakDistribution.java,"@@ -389,6 +389,10 @@ private Path prepareDistribution() {             if (!inited || (reCreate || !dPath.toFile().exists())) {                 FileUtil.deleteDirectory(dPath);                 ZipUtils.unzip(distFile.toPath(), distRootPath);+                if (System.getProperty(""product"") != null) {+                    // MS SQL Server driver might be excluded if running as a product build+                    copyProvider(dPath, ""com.microsoft.sqlserver"", ""mssql-jdbc"");+                }",Created similar issue to fix Oracle as well: https://github.com/keycloak/keycloak/issues/23058CC: @mabartos,
244253,xgp,https://api.github.com/repos/keycloak/keycloak/pulls/22317,1319033713,2023-09-07T19:26:35Z,server-spi-private/src/main/java/org/keycloak/services/resource/AccountResourceSpi.java,"@@ -0,0 +1,34 @@+package org.keycloak.services.resource;++import org.keycloak.provider.Provider;+import org.keycloak.provider.ProviderFactory;+import org.keycloak.provider.Spi;++/**+ * <p>A {@link Spi} to replace Account resources.+ *+ * <p>Implementors can use this {@link Spi} to override the behavior of the Account endpoints and resources by+ * creating JAX-RS resources that override those served at /account by default.+ */+public class AccountResourceSpi implements Spi {++    @Override+    public boolean isInternal() {+        return true;+    }++    @Override+    public String getName() {+        return ""account-console-extension"";","Since the implementations can fully replace the frontend and backend of the account using this mechanism, I thought ""console"" would be more informative. However, I defer to the team for naming preferences, as I'm not too familiar with what has been done before.",
244253,xgp,https://api.github.com/repos/keycloak/keycloak/pulls/22317,1319035728,2023-09-07T19:28:38Z,server-spi-private/src/main/java/org/keycloak/services/resource/AccountResourceProviderFactory.java,"@@ -0,0 +1,33 @@+package org.keycloak.services.resource;++import jakarta.ws.rs.InternalServerErrorException;+import jakarta.ws.rs.NotFoundException;+import java.io.IOException;+import org.keycloak.models.ClientModel;+import org.keycloak.models.Constants;+import org.keycloak.models.KeycloakSession;+import org.keycloak.models.RealmModel;+import org.keycloak.provider.ProviderFactory;+import org.keycloak.theme.Theme;++/**+ * <p>A factory that creates {@link AccountResourceProvider} instances.+ */+public interface AccountResourceProviderFactory extends ProviderFactory<AccountResourceProvider> {++  default Theme getTheme(KeycloakSession session) {",I use them here https://github.com/keycloak/keycloak/blob/3a6c82ad3381c0250c247a0274c25e7a2e64ff26/services/src/main/java/org/keycloak/services/resources/account/AccountConsoleFactory.java#L31 and in the example implementation I did to bring back the v1 account console. I thought they would be useful helper methods for implementors. Do you think there is another place they could/should live?,
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/23102,1320375843,2023-09-08T22:02:15Z,crypto/elytron/src/main/java/org/keycloak/crypto/elytron/ElytronCertificateUtils.java,"@@ -249,16 +252,26 @@ public List<String> getCRLDistributionPoints(X509Certificate cert) throws IOExce                 case ASN1.UTF8_STRING_TYPE:                    distPointUrls.add(der.decodeUtf8String());                    break;-                case 0xa0:-                   der.decodeImplicit(0xa0);-                   byte[] edata = der.decodeOctetString();-                   while(!Character.isLetterOrDigit(edata[0])) {-                    edata = Arrays.copyOfRange(edata, 1, edata.length);-                }-                   distPointUrls.add(new String(edata));+                case 0xa0: // Decode CRLDistributionPoint FullName list+                   der.startExplicit(0xa0);+                   break;+                case 0x86: // Decode CRLDistributionPoint FullName+                   der.decodeImplicit(0x86);+                   distPointUrls.add(der.decodeOctetStringAsString());+                   log.debug(""Adding Dist point name: "" + distPointUrls.get(distPointUrls.size()-1));                    break;                 default:                    der.skipElement();+            }+            // Check to see if there is another sequence to process+            try {+                if(!der.hasNextElement() && der.peekType() == ASN1.SEQUENCE_TYPE) {",Would mind explaining why we are expecting exceptions and ignoring them here?Not sure if I'm following the call to decode a sequence if there are no elements to process?,x
24525137,BbIKTOP,https://api.github.com/repos/keycloak/keycloak/pulls/22732,1321614487,2023-09-11T14:07:17Z,services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java,"@@ -339,10 +342,10 @@ public Stream<UserRepresentation> getUsers(                     attributes.putAll(searchAttributes);                      return searchForUser(attributes, realm, userPermissionEvaluator, briefRepresentation, firstResult,-                            maxResults, true);+                            maxResults, includeServiceAccounts);","Well, so, should it be set to the parameter's value if one exists in the request, and defaulted to the current values if there's none?Unfortunately I'm currently completely out of free time, need to repair my house shelled by russians,  and also working hard on my work projects. I understood the task and will return back to it as soon as I could. Thank you!",
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22700,1321719800,2023-09-11T15:22:48Z,model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java,"@@ -634,7 +657,14 @@ public KeycloakSession getKeycloakSession() {         session.users().preRemove(realm, group);          realm.removeDefaultGroup(group);-        group.getSubGroupsStream().forEach(realm::removeGroup);++        // TODO: this batch size could potentially be stored somewhere (config?) as a variable+        // calculate out batches of subgroups to delete from the parent group to avoid grinding the server to a halt at large scale+        // especially helpful for freeing up some amount of database time for other requests+        long batches = (long) Math.ceil(session.groups().getSubGroupsCount(realm, group.getId()) / 1000.0);",Let's see what the store team thinks about it. Perhaps there is a mechanism/pattern there already for batching.What I was saying is to just include a provider configuration option with a default batch size and allow users to change it accordingly. We have this approach in other places.,
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/23148,1321904493,2023-09-11T18:14:11Z,docs/documentation/server_admin/topics/clients/client-policies.adoc,"@@ -69,7 +69,7 @@ Author of a client (Checked by presence to the particular role or group)::     like the administrator of the {project_name}.  Client Access Type (confidential, public, bearer-only)::-    For example when a client sends an authorization request, a policy is adopted if this client is confidential.+    For example when a client sends an authorization request, a policy is adopted if this client is confidential. Confidential client has enabled client authentication when public client has disabled client authentication. Bearer-only is deprecated client type.","```suggestion    For example when a client sends an authorization request, a policy is adopted if this client is confidential. Confidential client has enabled client authentication when public client has disabled client authentication. Bearer-only is a deprecated client type.```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/23148,1321906374,2023-09-11T18:16:09Z,js/apps/admin-ui/public/locales/en/translation.json,"@@ -2284,7 +2284,7 @@   ""defaultLocaleHelp"": ""The initial locale to use. It is used on the login screen and other screens in the Admin UI and Account UI."",   ""conditionsHelp"": ""Conditions, which will be evaluated to determine if client policy should be applied during particular action or not."",   ""clientProfilesHelp"": ""Client profiles applied on this policy."",-  ""clientAccessType"": ""It uses the client's access type (confidential, public, bearer-only) to determine whether the policy is applied. Condition is checked during most of OpenID Connect requests (Authorization requests, token requests, introspection endpoint request, etc.)"",+  ""clientAccessType"": ""It uses the client's access type (confidential, public, bearer-only) to determine whether the policy is applied. Condition is checked during most of OpenID Connect requests (Authorization requests, token requests, introspection endpoint request, etc.). Confidential client has enabled client authentication when public client has disabled client authentication. Bearer-only is deprecated client type."",","```suggestion  ""clientAccessType"": ""It uses the client's access type (confidential, public, bearer-only) to determine whether the policy is applied. Condition is checked during most of OpenID Connect requests (Authorization requests, token requests, introspection endpoint request, etc.). Confidential client has enabled client authentication when public client has disabled client authentication. Bearer-only is a deprecated client type."",```",
48995441,andymunro,https://api.github.com/repos/keycloak/keycloak/pulls/23148,1321906702,2023-09-11T18:16:28Z,js/apps/admin-ui/public/locales/en/translation.json,"@@ -3153,7 +3153,7 @@   },   ""client-accesstype"": {     ""label"": ""Client Access Type"",-    ""tooltip"": ""Access Type of the client, for which the condition will be applied.""+    ""tooltip"": ""Access Type of the client, for which the condition will be applied. Confidential client has enabled client authentication when public client has disabled client authentication. Bearer-only is deprecated client type.""","```suggestion    ""tooltip"": ""Access Type of the client, for which the condition will be applied. Confidential client has enabled client authentication when public client has disabled client authentication. Bearer-only is a deprecated client type.""```",
29460179,JesseEstum,https://api.github.com/repos/keycloak/keycloak/pulls/22989,1322018201,2023-09-11T20:03:45Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java,"@@ -459,25 +459,32 @@ public KeycloakSession getKeycloakSession() {     @Override     public RealmModel getRealmByName(String name) {         String cacheKey = getRealmByNameCacheKey(name);+        if (invalidations.contains(cacheKey)) {+            return getRealmDelegate().getRealmByName(name);+        }","@ahus1 here we will have multiple threads pounding the database, even before we get to the `synchronized` part.Suppose the following conditions:1. Realm `myRealm` has just been invalidated and thus `invalidations.contains(cacheKey)` is `true`Now suppose _n_ threads service requests that come in at the same time.This means line 462 will be evaluated _n_ times to `true` concurrently.  Subsequently line 463 will be invoked _n_ times concurrently.  `getRealmDelegate().getRealmByName(name)` on 463 will invoke DB I/O.  This will be done _n_ times concurrently and thus cause the stampede phenomena.",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/22317,1322519829,2023-09-12T06:43:25Z,services/src/main/java/org/keycloak/services/resources/account/AccountLoader.java,"@@ -147,4 +149,21 @@ private ClientModel getAccountManagementClient(RealmModel realm) {         return client;     } +  private AccountResourceProvider getAccountResourceProvider(Theme theme) {+    String providerId = Constants.DEFAULT_ACCOUNT_RESOURCE_PROVIDER_ID;+    try {+      providerId = theme.getProperties().getProperty(Constants.ACCOUNT_RESOURCE_PROVIDER_KEY);+    } catch (IOException e) {+      logger.debugf(e, ""Error loading theme property %s"", Constants.ACCOUNT_RESOURCE_PROVIDER_KEY);+    }+    logger.debugf(""Attempting to get AccountResourceProvider for theme %s %s"", theme.getName(), providerId);+    AccountResourceProvider provider = session.getProvider(AccountResourceProvider.class, providerId);+    if (provider == null) {+      // question if we should just return null, or use the default+      return session.getProvider(AccountResourceProvider.class, Constants.DEFAULT_ACCOUNT_RESOURCE_PROVIDER_ID);+    } else {+      logger.debugf(""Found provider %s (%s) for theme %s"", providerId, provider.getClass().getName(), theme.getName());+      return provider;+    }","Change to the following, as this uses the default provider when one hasn't been configured for the theme. This approach allows setting a different default provider for the server if needed.```suggestion        if (theme.getProperties().containsKey(Constants.ACCOUNT_RESOURCE_PROVIDER_KEY)) {            return session.getProvider(AccountResourceProvider.class, theme.getProperties().getProperty(Constants.ACCOUNT_RESOURCE_PROVIDER_KEY));        } else {            return session.getProvider(AccountResourceProvider.class);        }```",
2271511,stianst,https://api.github.com/repos/keycloak/keycloak/pulls/22317,1322523626,2023-09-12T06:46:03Z,server-spi-private/src/main/java/org/keycloak/models/Constants.java,"@@ -37,6 +37,9 @@ public final class Constants {     public static final String BROKER_SERVICE_CLIENT_ID = ""broker"";     public static final String REALM_MANAGEMENT_CLIENT_ID = ""realm-management""; +    public static final String ACCOUNT_RESOURCE_PROVIDER_KEY = ""accountResourceProvider"";","This doesn't belong here, and isn't clear it's a theme properties key. Maybe just add to Theme.java, or create a ThemeProperties.java?",x
13901995,mhajas,https://api.github.com/repos/keycloak/keycloak/pulls/8430,1322815990,2023-09-12T10:20:43Z,federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java,"@@ -361,22 +363,42 @@ private void updateAttributesOfKCGroup(GroupModel kcGroup, LDAPObject ldapGroup)     }  -    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, LDAPObject ldapGroup) {+    protected GroupModel findKcGroupByLDAPGroup(RealmModel realm, GroupModel parent, LDAPObject ldapGroup) {         String groupNameAttr = config.getGroupNameLdapAttribute();         String groupName = ldapGroup.getAttributeAsString(groupNameAttr);          if (config.isPreserveGroupsInheritance()) {             // Override if better effectivity or different algorithm is needed-            return getAllKcGroups(realm)+            return getAllKcGroups(realm, parent)                     .filter(group -> Objects.equals(group.getName(), groupName)).findFirst().orElse(null);         } else {             // Without preserved inheritance, it's always at groups path-            return KeycloakModelUtils.findGroupByPath(realm, getKcGroupPathFromLDAPGroupName(groupName));+            return realm.getGroupByName(groupName, parent);+        }+    }+    // TODO how this will work with group names with a / without hitting the db everytime+    private GroupModel findGroupByPath(RealmModel realm, String path) {","Thank you for the changes @bohmber! Regarding tests, we have some tests where we use `findGroupByPath`. For example, https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPGroupMapperSyncTest.javaThe changes you added can be tested without LDAP. Not sure if we need any additional LDAP tests as ^LDAPGroupMapperSyncTest should cover the changes you made to the group mapper. In my opinion, what we need is the following:1. Tests for the newly added method to GroupLookupProvider (`GroupModel getGroupByName(RealmModel realm, GroupModel parent, String name)`). We can create some groups, ideally with conflicting names under more parents and make sure the method returns the correct one. Another test can test the invalidation: call `getGroupByName` which should cache the result, then try to remove the group and make sure the follow-up call will return `null`. This can be added here: https://github.com/keycloak/keycloak/blob/main/testsuite/model/src/test/java/org/keycloak/testsuite/model/group/GroupModelTest.java see https://github.com/keycloak/keycloak/blob/main/testsuite/model/README.md on how to run2. Then we should also add some tests for the new `findGroupByPath` method. It can be added to the same test class as 1. Let me know if you need any help, we can work together on that. ",
3957921,ahus1,https://api.github.com/repos/keycloak/keycloak/pulls/22989,1322950399,2023-09-12T12:17:20Z,model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java,"@@ -459,25 +459,32 @@ public KeycloakSession getKeycloakSession() {     @Override     public RealmModel getRealmByName(String name) {         String cacheKey = getRealmByNameCacheKey(name);+        if (invalidations.contains(cacheKey)) {+            return getRealmDelegate().getRealmByName(name);+        }","@JesseEstum - some background on `KeycloakSession`: It captures the transaction context of a single request, and starts together with the request and ends when the request ends. It can be nested to support nested transactions, but most of the time it is not. The `RealmCacheSession` is instantiated during a request and bound to an instance of `KeycloakSession`, so it has the same lifetime (usually even shorter). The  attributes `invalidations` and `listInvalidations` are attributes local to `RealmCacheSession`, and only contain information from the current request. Once there are local changes to a realm, they are filled with the invalidations which will be published once the current request completes. Due to this, there can't be a cache stampede due to them, as there are no concurrent requests on them. ",x
18038099,david-rh,https://api.github.com/repos/keycloak/keycloak/pulls/23102,1323171671,2023-09-12T14:54:37Z,crypto/elytron/src/main/java/org/keycloak/crypto/elytron/ElytronCertificateUtils.java,"@@ -249,16 +252,26 @@ public List<String> getCRLDistributionPoints(X509Certificate cert) throws IOExce                 case ASN1.UTF8_STRING_TYPE:                    distPointUrls.add(der.decodeUtf8String());                    break;-                case 0xa0:-                   der.decodeImplicit(0xa0);-                   byte[] edata = der.decodeOctetString();-                   while(!Character.isLetterOrDigit(edata[0])) {-                    edata = Arrays.copyOfRange(edata, 1, edata.length);-                }-                   distPointUrls.add(new String(edata));+                case 0xa0: // Decode CRLDistributionPoint FullName list+                   der.startExplicit(0xa0);+                   break;+                case 0x86: // Decode CRLDistributionPoint FullName+                   der.decodeImplicit(0x86);+                   distPointUrls.add(der.decodeOctetStringAsString());+                   log.debug(""Adding Dist point name: "" + distPointUrls.get(distPointUrls.size()-1));                    break;                 default:                    der.skipElement();+            }+            // Check to see if there is another sequence to process+            try {+                if(!der.hasNextElement() && der.peekType() == ASN1.SEQUENCE_TYPE) {","I added a log to at least print out the exception. As I was testing, I would run into an issue where this check for additional elements would throw an exception when there weren't any more elements. I eventually figured out what I was doing wrong in those cases. But, I left the try catch block to handle it if other cert encodings cause the same issue.",x
1143437,pedroigor,https://api.github.com/repos/keycloak/keycloak/pulls/22848,1323310188,2023-09-12T16:43:20Z,server-spi-private/src/main/java/org/keycloak/broker/provider/AbstractIdentityProvider.java,"@@ -33,7 +33,9 @@ import java.nio.charset.StandardCharsets; import java.security.MessageDigest; import java.security.NoSuchAlgorithmException;+import java.util.Arrays;",Are changes to this class unrelated?,
355702,sguilhen,https://api.github.com/repos/keycloak/keycloak/pulls/20894,1324444249,2023-09-13T12:34:16Z,testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/realm/RealmTest.java,"@@ -129,37 +130,65 @@ public void getRealms() {      @Test     public void renameRealm() {+        String OLD = ""old"";+        String NEW = ""new"";+         getCleanup()-          .addCleanup(() -> adminClient.realms().realm(""old"").remove())-          .addCleanup(() -> adminClient.realms().realm(""new"").remove());+          .addCleanup(() -> adminClient.realms().realm(OLD).remove())+          .addCleanup(() -> adminClient.realms().realm(NEW).remove());          RealmRepresentation rep = new RealmRepresentation();-        rep.setId(""old"");-        rep.setRealm(""old"");+        rep.setId(OLD);+        rep.setRealm(OLD);          adminClient.realms().create(rep); -        rep.setRealm(""new"");-        adminClient.realm(""old"").update(rep);+        Map<String, String> newBaseUrls = new HashMap<>();+        Map<String, List<String>> newRedirectUris = new HashMap<>();++        // memorize all existing clients with their soon-to-be URIs+        adminClient.realm(OLD).clients().findAll().forEach(client -> {+            if (client.getBaseUrl() != null && client.getBaseUrl().contains(""/"" + OLD + ""/"")) {+                newBaseUrls.put(client.getClientId(), client.getBaseUrl().replace(""/"" + OLD + ""/"", ""/"" + NEW + ""/""));+            }+            if (client.getRedirectUris() != null) {+                newRedirectUris.put(+                        client.getClientId(),+                        client.getRedirectUris()+                                .stream()+                                .map(redirectUri -> redirectUri.replace(""/"" + OLD + ""/"", ""/"" + NEW + ""/""))+                                .collect(Collectors.toList())+                );+            }+        });++        // at least those three default clients should be in the list of things to be tested","oh right, I ended up looking only at the second line of each assert, my bad.",
1223965,mposolda,https://api.github.com/repos/keycloak/keycloak/pulls/22148,1324545906,2023-09-13T13:48:32Z,services/src/main/java/org/keycloak/protocol/oidc/mappers/AbstractPairwiseSubMapper.java,"@@ -65,18 +66,36 @@ public final String getDisplayCategory() {      @Override     public IDToken transformIDToken(IDToken token, ProtocolMapperModel mappingModel, KeycloakSession session, UserSessionModel userSession, ClientSessionContext clientSessionCtx) {+        if (!OIDCAttributeMapperHelper.includeInIDToken(mappingModel)){","In the previous versions, AbstractPairwiseSubMapper did not have any properties like (Add to access token, Add to id token, add to userinfo). And it was automatically added to access token, id token and userinfo. With this change the properties are introduced and they are ON when I am creating new mapper (which is fine). But what if I migrate from the previous version where this mapper was present on some client scope? It seems to me that after migration, all the properties would be OFF, which is incorrect.I see the options like:1) Not introduce any property and just assume that `Add to token introspection` is ON for this mapper similarly like it is automatically added to tokens. This option is probably easiest, so I vote for it. Also it will make sure that pairwise `sub` is used on all the places and original `sub` is hidden from all the places, which is correct behaviour2) Introduce only `Add to token introspection` property with value ON by default and not introduce any other properties (Add to access token etc). Just automatically assume that all the other (Add to access token, Add to IDToken, Add to UserInfo) are ON by default. The `Add to token introspection` would be assumed ON when not set (due it will inherit from `Add to access token`, which is automatically ON) similarly like done for other mappers3) Introduce all the 4 properties (Add to X where X is accessToken, IDToken, UserInfo or TokenIntrospection). But in this case, migration script will need to be added so the mapper is same as before migration to new version",